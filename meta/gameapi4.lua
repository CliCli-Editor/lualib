--This file is generated by tools/genGameAPI, do not modify it manually.
---@meta

---@class py.GameAPI
GameAPI = {}

--Special effect switch
---@param role py.Role # Player
---@param switch boolean # Switch
function GameAPI.set_player_sfx_switch(role, switch) end

--Play special effects at some point
---@param point py.FVector3 # point
---@param sfx py.SfxKey # Special effect number
---@param scale py.Fixed # Zoom
---@param duratime py.Fixed # duration
---@param offset py.Fixed # Vertical migration
---@param role? py.Role # Player
---@param visible_type? integer # Display type (1: all, 2: Self 3: Self and friends only 4: non-self and friends
---@param rotation? py.Fixed # Initial rotation Angle
---@return py.Sfx # VFX
function GameAPI.play_sfx_on_point(point, sfx, scale, duratime, offset, role, visible_type, rotation) end

--Create a unit-to-point lightning effect
---@param sfx_res_id py.SfxKey # Special effect number
---@param source_unit py.Unit # Starting unit
---@param source_socket string # Start Unit Name of the mount point
---@param target_point py.FVector3 # End point
---@param target_height py.Fixed # Terminal height
---@param duration? number # duration
---@param immediately? boolean # Whether to delete now
---@param use_sys_d_destroy_way? boolean # Effects delete the way to read table or not
---@param follow_scale? boolean # Whether to scale with units
---@param show_in_fog? boolean # Show in the mist
---@param blend_with_fog? boolean # Fog mixing
---@return py.LinkSfx # VFX
function GameAPI.create_link_sfx_from_unit_to_point(sfx_res_id, source_unit, source_socket, target_point, target_height, duration, immediately, use_sys_d_destroy_way, follow_scale, show_in_fog, blend_with_fog) end

--Create unit to unit lightning effects
---@param sfx_res_id py.SfxKey # Special effect number
---@param source_unit py.Unit # Starting unit
---@param source_socket string # Start Unit Name of the mount point
---@param target_unit py.Unit # Terminal unit
---@param target_socket string # Start Unit Name of the mount point
---@param duration? number # duration
---@param immediately? boolean # Whether to delete now
---@param use_sys_d_destroy_way? boolean # Effects delete the way to read table or not
---@param follow_scale? boolean # Whether to scale with units
---@param show_in_fog? boolean # Show in the mist
---@param blend_with_fog? boolean # Fog mixing
---@return py.LinkSfx # VFX
function GameAPI.create_link_sfx_from_unit_to_unit(sfx_res_id, source_unit, source_socket, target_unit, target_socket, duration, immediately, use_sys_d_destroy_way, follow_scale, show_in_fog, blend_with_fog) end

--Create point-to-unit lightning effects
---@param sfx_res_id py.SfxKey # Special effect number
---@param source_point py.FVector3 # Starting point
---@param source_height py.Fixed # Starting height
---@param source_unit py.Unit # Terminal unit
---@param source_socket string # Start Unit Name of the mount point
---@param duration? number # duration
---@param immediately? boolean # Whether to delete now
---@param use_sys_d_destroy_way? boolean # Effects delete the way to read table or not
---@param show_in_fog? boolean # Show in the mist
---@param blend_with_fog? boolean # Fog mixing
---@return py.LinkSfx # VFX
function GameAPI.create_link_sfx_from_point_to_unit(sfx_res_id, source_point, source_height, source_unit, source_socket, duration, immediately, use_sys_d_destroy_way, show_in_fog, blend_with_fog) end

--Create point-to-point lightning effects
---@param sfx_res_id py.SfxKey # Special effect number
---@param source_point py.FVector3 # Starting point
---@param source_height py.Fixed # Starting height
---@param target_point py.FVector3 # End point
---@param target_height py.Fixed # Terminal height
---@param duration? number # duration
---@param immediately? boolean # Whether to delete now
---@param use_sys_d_destroy_way? boolean # Effects delete the way to read table or not
---@param show_in_fog? boolean # Show in the mist
---@param blend_with_fog? boolean # Fog mixing
---@return py.LinkSfx # VFX
function GameAPI.create_link_sfx_from_point_to_point(sfx_res_id, source_point, source_height, target_point, target_height, duration, immediately, use_sys_d_destroy_way, show_in_fog, blend_with_fog) end

--Set the location point of the lightning effect
---@param sfx_entity py.LinkSfx # VFX
---@param source_or_target py.LinkSfxPointType # Start/end
---@param point py.Point # point
---@param height number # Altitude
function GameAPI.set_link_sfx_point(sfx_entity, source_or_target, point, height) end

--Set the lightning unit attach point
---@param sfx_entity py.LinkSfx # VFX
---@param source_or_target py.LinkSfxPointType # Start/end
---@param unit py.Unit # unit
---@param socket string # Unit mounting contact
function GameAPI.set_link_sfx_unit_socket(sfx_entity, source_or_target, unit, socket) end

--Remove effect
---@param sfx_entity py.LinkSfx # VFX
---@param immediately? boolean # Remove present now
---@param use_sys_d_destroy_way? boolean # Effects delete the way to read table or not
function GameAPI.remove_link_sfx(sfx_entity, immediately, use_sys_d_destroy_way) end

--Sets whether the effects are displayed
---@param sfx_entity py.LinkSfx # VFX
---@param b_show boolean # Show or not
function GameAPI.enable_link_sfx_show(sfx_entity, b_show) end

--Set link effects
---@param sfx_entity py.LinkSfx # VFX
---@param role py.Role # Player
---@param b_visible boolean # Switch
function GameAPI.enable_link_sfx_visible(sfx_entity, role, b_visible) end

--Set special effects
---@param sfx_entity py.Sfx # VFX
---@param role py.Role # Player
---@param b_visible boolean # Switch
function GameAPI.enable_sfx_visible(sfx_entity, role, b_visible) end

--Create effects to the point
---@param sfx_id py.SfxKey # Special effect number
---@param point py.Point # point
---@param face_angle number # Angle oriented
---@param scale number # Zoom ratio
---@param height number # Altitude
---@param duration number # duration
---@param immediately? boolean # Whether to delete now
---@param use_sys_d_destroy_way? boolean # Effects delete the way to read table or not
---@param show_in_fog? boolean # Show in the mist
---@param blend_with_fog? boolean # Fog mixing
---@return py.Sfx # VFX
function GameAPI.create_sfx_on_point(sfx_id, point, face_angle, scale, height, duration, immediately, use_sys_d_destroy_way, show_in_fog, blend_with_fog) end

--Create effects to unit attach points
---@param sfx_id py.SfxKey # Special effect number
---@param unit py.Unit # unit
---@param socket string # Unit mounting contact
---@param b_follow_rotate boolean # Whether to follow the unit rotation
---@param b_follow_scale boolean # Whether to scale with units
---@param scale? number # Zoom ratio
---@param duration? number # duration
---@param angle? number # Angle
---@param immediately? boolean # Whether to delete now
---@param use_sys_d_destroy_way? boolean # Effects delete the way to read table or not
---@return py.Sfx # VFX
function GameAPI.create_sfx_on_unit(sfx_id, unit, socket, b_follow_rotate, b_follow_scale, scale, duration, angle, immediately, use_sys_d_destroy_way) end

--Create effects to unit attachment points (follow rotation using enumerations)
---@param sfx_id py.SfxKey # Special effect number
---@param unit py.Unit # unit
---@param socket string # Unit mounting contact
---@param rotate_type integer # Follow rotation mode
---@param b_follow_scale boolean # Whether to scale with units
---@param scale? number # Zoom ratio
---@param duration? number # duration
---@param angle? number # Angle
---@param immediately? boolean # Whether to delete now
---@param use_sys_d_destroy_way? boolean # Effects delete the way to read table or not
---@param detach? boolean # Whether to leave the unit
---@param show_in_fog? boolean # Show in the mist
---@param blend_with_fog? boolean # Fog mixing
---@return py.Sfx # VFX
function GameAPI.create_sfx_on_unit_new(sfx_id, unit, socket, rotate_type, b_follow_scale, scale, duration, angle, immediately, use_sys_d_destroy_way, detach, show_in_fog, blend_with_fog) end

--Remove effects
---@param sfx_entity? py.Sfx # VFX
---@param immediately? boolean # Remove present now
---@param use_sys_d? boolean # Whether to read the system default effects when deleting
function GameAPI.delete_sfx(sfx_entity, immediately, use_sys_d) end

--Set effects rotation
---@param sfx_entity py.Sfx # VFX
---@param rotate_x number # X-axis rotation
---@param rotate_y number # Y-axis rotation
---@param rotate_z number # Z-axis rotation
function GameAPI.set_sfx_rotate(sfx_entity, rotate_x, rotate_y, rotate_z) end

--Set effects orientation
---@param sfx_entity py.Sfx # VFX
---@param face_angle number # orientation
function GameAPI.set_sfx_angle(sfx_entity, face_angle) end

--Set effects color
---@param sfx_entity py.Sfx # VFX
---@param x number # x
---@param y number # y
---@param z number # z
---@param w number # w
function GameAPI.set_sfx_color(sfx_entity, x, y, z, w) end

--Set effect scaling
---@param sfx_entity py.Sfx # VFX
---@param scale_x number # X-axis scaling
---@param scale_y number # Y-axis scaling
---@param scale_z number # Z-axis scaling
---@param duration? number # Transition time
function GameAPI.set_sfx_scale(sfx_entity, scale_x, scale_y, scale_z, duration) end

--Set effect height
---@param sfx_entity py.Sfx # VFX
---@param height number # Altitude
function GameAPI.set_sfx_height(sfx_entity, height) end

--Set the effects to the point
---@param sfx_entity py.Sfx # VFX
---@param point py.Point # point
---@param fluent_move? boolean # Smooth movement
function GameAPI.set_sfx_position(sfx_entity, point, fluent_move) end

--Set the animation speed for effects
---@param sfx_entity py.Sfx # VFX
---@param speed number # Animation speed
function GameAPI.set_sfx_animation_speed(sfx_entity, speed) end

--Set the effect duration
---@param sfx_entity py.Sfx # VFX
---@param duration number # duration
function GameAPI.set_sfx_duration(sfx_entity, duration) end

--Play screen effects
---@param sfx_key py.SfxKey # Special effect number
---@param keep_time number # duration
---@param role? py.Role # Player
---@param render_after_post? boolean # Whether to render after post-processing
function GameAPI.add_sfx_to_camera(sfx_key, keep_time, role, render_after_post) end

--Play the screen effects and return to the effects entity
---@param sfx_key py.SfxKey # Special effect number
---@param keep_time number # duration
---@param role? py.Role # Player
---@param render_after_post? boolean # Whether to render after post-processing
---@param immediately? boolean # Whether to delete now
---@param use_sys_d_destroy_way? boolean # Effects delete the way to read table or not
---@return py.Sfx # VFX
function GameAPI.add_sfx_to_camera_with_return(sfx_key, keep_time, role, render_after_post, immediately, use_sys_d_destroy_way) end

--Vibrating screen
---@param role py.Role # Player
---@param period number # Vibration period
---@param amplitude_vector py.FVector3 # Amplitude size
---@param increase_vector py.FVector3 # Amplification value
---@param keep_time number # Duration of vibration
function GameAPI.start_shake(role, period, amplitude_vector, increase_vector, keep_time) end

--Link effects path to string
---@param val py.SfxKey # Special effect number
---@return string # Character string
function GameAPI.link_sfx_key_to_str(val) end

--String to link effects path
---@param val string # Character string
---@return py.SfxKey # Special effect number
function GameAPI.str_to_link_sfx_key(val) end

--Effect to string
---@param obj py.Sfx # VFX
---@return string # Character string
function GameAPI.sfx_to_str(obj) end

--Particle effects path to string
---@param val py.SfxKey # Special effect number
---@return string # Character string
function GameAPI.particle_sfx_key_to_str(val) end

--String to particle effect path
---@param val string # Special effect number
---@return py.SfxKey # Special effect number
function GameAPI.str_to_particle_sfx_key(val) end

--Link effects to strings
---@param obj py.LinkSfx # Link effect
---@return string # Character string
function GameAPI.link_sfx_to_str(obj) end

--get_table
---@param table_name string # table_name
---@return py.Table # table
function GameAPI.get_table(table_name) end

--set_table_value
---@param table py.Table # table
---@param value py.Actor # value
---@param key1 string # key1
---@param key2 string # key2
---@param key3 string # key3
---@param key4 string # key4
---@param key5 string # key5
---@param value_convert_func string # value_convert_func
function GameAPI.set_table_value(table, value, key1, key2, key3, key4, key5, value_convert_func) end

--table_has_key
---@param table py.Table # table
---@param key string # key
---@return boolean # bool
function GameAPI.table_has_key(table, key) end

--get_table_var
---@param table py.Table # table
---@param key1 string # key1
---@param key2 string # key2
---@param key3 string # key3
---@param key4 string # key4
---@param key5 string # key5
---@param default_value py.Actor # default
---@param value_convert_func string # value_convert_func
---@param extra_info? py.Dict # extra_info(for debug)
---@return py.Actor # value
function GameAPI.get_table_var(table, key1, key2, key3, key4, key5, default_value, value_convert_func, extra_info) end

--remove_table_value
---@param table py.Table # table
---@param key1 string # key1
---@param key2 string # key2
---@param key3 string # key3
---@param key4 string # key4
---@param key5 string # key5
function GameAPI.remove_table_value(table, key1, key2, key3, key4, key5) end

--remove_table_value_n
---@param table py.Table # table
---@param n integer # N
function GameAPI.remove_table_value_n(table, n) end

--insert_table_value
---@param table py.Table # table
---@param value py.Actor # value
---@param value_convert_func string # value_convert_func
---@param pos integer # pos
function GameAPI.insert_table_value(table, value, value_convert_func, pos) end

--get_new_table
---@return py.Table # table
function GameAPI.get_new_table() end

--clear_table
---@param table py.Table # table
function GameAPI.clear_table(table) end

--encrypt_table
---@param table py.Table # table
function GameAPI.encrypt_table(table) end

--get_copy_of_table
---@param table py.Table # table
---@return py.Table # table
function GameAPI.get_copy_of_table(table) end

--dump_table
---@param table py.Table # table
---@param extra_info? py.DynamicTypeMeta # extra_info
function GameAPI.dump_table(table, extra_info) end

--get_table_length
---@param table py.Table # table
---@return integer # length
function GameAPI.get_table_length(table) end

--Table - Whether the table is empty
---@param table py.Table # table
---@return boolean # Null or not
function GameAPI.is_table_empty(table) end

--get_iter_table_value_by_type
---@param item py.List # table iter item
---@param default_value py.Actor # default
---@param value_convert_func string # value_convert_func
---@return py.Actor # value
function GameAPI.get_iter_table_value(item, default_value, value_convert_func) end

--table iterator
---@param t py.Table # TAB
---@return py.Iterator # Python iterator
function GameAPI.table_iterator(t) end

--table iterator (order preserving)
---@param t py.Table # TAB
---@return py.Iterator # Python iterator
function GameAPI.ordered_table_iterator(t) end

--table iterator
---@param t py.Table # TAB
---@param ordered? boolean # Whether only part of the group is traversed (order preserving)
---@return py.Iterator # Python iterator
function GameAPI.table_iterator_new(t, ordered) end

--unserialize_by_string
---@param archive_table_str string # archive_table_str
---@return py.Table # table
function GameAPI.unserialize_by_string(archive_table_str) end

--sort_table_by
---@param table py.Table # table
---@param key string # key
---@param order py.TableOrder # order
---@param save_as? py.Table # save_as
function GameAPI.sort_table_by(table, key, order, save_as) end

--Debug-dialog Displays frame timer information
---@param show_tasks boolean # Display task
function GameAPI.dbg_dialog_print_frame_timer_info(show_tasks) end

--Gets the recently created timer
---@return py.Timer # timepiece
function GameAPI.get_last_created_timer() end

--Start timer
---@param name string # Timer name
---@param once boolean # Single time or not
---@param interval py.Fixed # time
---@param context py.Dict # context
---@param desc string # Description
function GameAPI.start_timer(name, once, interval, context, desc) end

--Turn off timer
---@param name string # Timer name
function GameAPI.stop_timer(name) end

--Start Timer (New)
---@param time_delay py.Fixed # Delay time
---@param repeat_count integer # Cycle number
---@param run_at_start boolean # Runs immediately upon startup
---@param timer_callback function # Callback function
---@param context py.Dict # context
---@param desc string # Description
---@return py.Timer # Timer number
function GameAPI.run_lua_timer(time_delay, repeat_count, run_at_start, timer_callback, context, desc) end

--Whether the timer is running
---@param timer_id py.Timer # Timer number
---@return boolean # Legality or not
function GameAPI.is_timer_valid(timer_id) end

--Delete timer
---@param timer_id py.Timer # Timer number
function GameAPI.delete_timer(timer_id) end

--Pause timer
---@param timer_id py.Timer # Timer number
function GameAPI.pause_timer(timer_id) end

--Recovery timer
---@param timer_id py.Timer # Timer number
function GameAPI.resume_timer(timer_id) end

--Set the remaining times of the timer
---@param timer_id py.Timer # Timer number
---@param count integer # Residual degree
function GameAPI.timer_set_left_count(timer_id, count) end

--Set the remaining time of the timer
---@param timer_id py.Timer # Timer number
---@param time py.Fixed # Remaining time
function GameAPI.timer_set_left_time(timer_id, time) end

--Set the timer interval
---@param timer_id py.Timer # Timer number
---@param time py.Fixed # Interval time
function GameAPI.timer_set_interval_time(timer_id, time) end

--Sets the number of frames between the frame timer
---@param timer_id py.Timer # Timer number
---@param frame integer # Interval frame number
function GameAPI.timer_set_interval_frame(timer_id, frame) end

--Gets the time set by the timer
---@param timer_id py.Timer # timepiece
---@return py.Fixed # time
function GameAPI.get_timer_time_out_time(timer_id) end

--Gets the elapsed time of the timer
---@param timer_id py.Timer # timepiece
---@return py.Fixed # time
function GameAPI.get_timer_elapsed_time(timer_id) end

--Gets the remaining time on the timer
---@param timer_id py.Timer # timepiece
---@return py.Fixed # time
function GameAPI.get_timer_remaining_time(timer_id) end

--Gets the timer initial count
---@param timer_id py.Timer # timepiece
---@return integer # frequency
function GameAPI.get_timer_init_count(timer_id) end

--Gets the remaining timer count
---@param timer_id py.Timer # timepiece
---@return integer # frequency
function GameAPI.get_timer_remaining_count(timer_id) end

--Gets the current number of seconds on the standalone timer
---@param name string # Countdown name
---@return py.Fixed # Timing seconds
function GameAPI.get_actor_timer_run_time(name) end

--Gets the currently expired timer
---@param timer_id py.Timer # timepiece
---@return py.Timer # timepiece
function GameAPI.get_current_expired_timer(timer_id) end

--Timer exists
---@param timer_id py.Timer # Timer number
---@return boolean # Legality or not
function GameAPI.timer_is_exist(timer_id) end

--Add a scheduled callback
---@param interval py.Fixed # Interval time
---@param is_repeat boolean # Repeat or not
---@param func function # callback
---@param desc? string # Description
---@return integer # timer_id
function GameAPI.add_timer(interval, is_repeat, func, desc) end

--Example Cancel the scheduled callback
---@param timer_id integer # timer_id
function GameAPI.cancel_timer(timer_id) end

--Game current day and night time
---@return py.Fixed # time
function GameAPI.get_cur_day_and_night_time() end

--Set day and night play times
---@param time py.Fixed # Time (0-24)
function GameAPI.set_day_and_night_time(time) end

--Set the speed of day and night game time (multiples)
---@param time_multiple py.Fixed # Multiples, not negative numbers
function GameAPI.set_day_and_night_time_speed(time_multiple) end

--Set the rate at which the game time passes day and night (percentage)
---@param time_per py.Fixed # Percentage, not negative
function GameAPI.set_day_and_night_time_speed_per(time_per) end

--Turn on/off time lapse
---@param flag boolean # Boolean value
function GameAPI.open_or_close_time_speed(flag) end

--Create artificial time and last for a period of time
---@param create_time py.Fixed # Time of creation
---@param time_delay py.Fixed # duration
function GameAPI.create_day_and_night_human_time(create_time, time_delay) end

--Point to point Angle
---@param p1 py.Point # point
---@param p2 py.Point # Target point
---@return py.Fixed # Angle
function GameAPI.get_points_angle(p1, p2) end

--Distance from point to point
---@param p1 py.Point # point
---@param p2 py.Point # Target point
---@return py.Fixed # distance
function GameAPI.get_points_dis(p1, p2) end

--Gets the ground height of the current point
---@param point py.Point # point
---@return py.Fixed # Ground height
function GameAPI.get_point_ground_height(point) end

--Gets the collision type of the current point
---@param point py.Point # point
---@return integer # Collision type
function GameAPI.get_point_ground_collision(point) end

--Gets the view block type for the current point
---@param point py.Point # point
---@return integer # Partition type
function GameAPI.get_point_view_block_type(point) end

--Determine whether the point is in the area
---@param point py.FVector3 # point
---@param area py.Area # region
---@return boolean # Whether the point is in the zone
function GameAPI.judge_point_in_area(point, area) end

--Determine if the point is inside the square
---@param point py.FVector3 # point
---@param center py.FVector3 # Central point
---@param width py.Fixed # Square side length
---@return boolean # Whether the point is in the square
function GameAPI.judge_point_in_rec(point, center, width) end

--Add a tag to the area
---@param area py.Area # region
---@param tag string # tag
function GameAPI.add_area_tag(area, tag) end

--Remove the tag from the area
---@param area py.Area # region
---@param tag string # tag
function GameAPI.remove_area_tag(area, tag) end

--Add a tag to the path
---@param road py.Road # path
---@param tag string # tag
function GameAPI.add_road_tag(road, tag) end

--Remove the tag from the path
---@param road py.Road # path
---@param tag string # tag
function GameAPI.remove_road_tag(road, tag) end

--Whether the circle has tags
---@param area py.Area # region
---@param tag string # tag
---@return boolean # Boolean value
function GameAPI.if_cir_area_has_tag(area, tag) end

--Whether the rectangular area has tags
---@param area py.Area # region
---@param tag string # tag
---@return boolean # Boolean value
function GameAPI.if_rect_area_has_tag(area, tag) end

--Whether the path owns tags
---@param road py.Road # path
---@param tag string # tag
---@return boolean # Boolean value
function GameAPI.if_road_has_tag(road, tag) end

--Obtains the corresponding circular area according to the tag
---@param tag string # tag
---@return py.List # list
function GameAPI.get_cir_areas_by_tag(tag) end

--Gets the corresponding rectangular area according to the tag
---@param tag string # tag
---@return py.List # list
function GameAPI.get_rect_areas_by_tag(tag) end

--Obtain the corresponding irregular region according to the tag
---@param tag string # tag
---@return py.List # list
function GameAPI.get_polygon_areas_by_tag(tag) end

--Obtain the corresponding path according to the tag
---@param tag string # tag
---@return py.List # list
function GameAPI.get_roads_by_tag(tag) end

--Gets a list of irregular region vertices
---@param poly_area py.PolyArea # Irregular region
---@return py.List # Vertex list
function GameAPI.get_poly_area_point_list(poly_area) end

--Return point through waypoint
---@param road_point py.DynamicTypeMeta # Way point
---@return py.FVector3 # point
function GameAPI.get_point_by_road_point(road_point) end

--Create a rectangular area
---@param point py.FVector3 # Bottom left starting point
---@param width py.Fixed # wide
---@param height py.Fixed # high
---@return py.RecArea # Rectangular region
function GameAPI.create_new_rec_area(point, width, height) end

--Create a rectangular area
---@param center py.FVector3 # Central point
---@param width py.Fixed # wide
---@param height py.Fixed # high
---@return py.RecArea # Rectangular region
function GameAPI.create_rect_area_by_center(center, width, height) end

--Create a rectangular area
---@param point_begin py.Point # Initial point
---@param point_end py.Point # End point
---@return py.RecArea # Rectangular region
function GameAPI.create_rec_area_from_two_points(point_begin, point_end) end

--Create a circle
---@param point py.FVector3 # Central point
---@param radius py.Fixed # radius
---@return py.CirArea # Circular region
function GameAPI.create_new_cir_area(point, radius) end

--Create polygon area
---@param point0 py.Point # point
---@param point1 py.Point # point
---@param point2 py.Point # point
---@param point3? py.Point # point
---@param point4? py.Point # point
---@param point5? py.Point # point
---@param point6? py.Point # point
---@param point7? py.Point # point
---@return py.PolyArea # Polygon region
function GameAPI.create_polygon_area(point0, point1, point2, point3, point4, point5, point6, point7) end

--Create polygon Area (new)
---@param point0 py.Point # point
---@param point1 py.Point # point
---@param point2 py.Point # point
---@param point3? py.Point # point
---@param point4? py.Point # point
---@param point5? py.Point # point
---@param point6? py.Point # point
---@param point7? py.Point # point
---@param point8? py.Point # point
---@param point9? py.Point # point
---@param point10? py.Point # point
---@param point11? py.Point # point
---@param point12? py.Point # point
---@return py.PolyArea # Polygon region
function GameAPI.create_polygon_area_new(point0, point1, point2, point3, point4, point5, point6, point7, point8, point9, point10, point11, point12) end

--Sets the circle area size
---@param area py.CirArea # Circular region
---@param radius py.Fixed # radius
function GameAPI.set_cir_area_radius(area, radius) end

--Gets the radius of the circle area
---@param area py.CirArea # Circular region
---@return py.Fixed # radius
function GameAPI.get_circle_area_radius(area) end

--Gets the smallest X-coordinate in the circle
---@param area py.CirArea # Circular region
---@return py.Fixed # The smallest x-coordinate
function GameAPI.get_circle_area_min_x(area) end

--Gets the minimum y coordinate in the circle
---@param area py.CirArea # Circular region
---@return py.Fixed # The smallest Y coordinate
function GameAPI.get_circle_area_min_y(area) end

--Gets the maximum X coordinate in the circle
---@param area py.CirArea # Circular region
---@return py.Fixed # The largest X coordinate
function GameAPI.get_circle_area_max_x(area) end

--Gets the maximum y coordinate in the circle
---@param area py.CirArea # Circular region
---@return py.Fixed # The largest Y coordinate
function GameAPI.get_circle_area_max_y(area) end

--Sets the size of the rectangular area
---@param area py.RecArea # Rectangular region
---@param length py.Fixed # long
---@param width py.Fixed # wide
function GameAPI.set_rect_area_radius(area, length, width) end

--Gets the smallest X-coordinate in a rectangular area
---@param area py.RecArea # Rectangular region
---@return py.Fixed # The smallest x-coordinate
function GameAPI.get_rect_area_min_x(area) end

--Gets the smallest Y coordinate in a rectangular area
---@param area py.RecArea # Rectangular region
---@return py.Fixed # The smallest Y coordinate
function GameAPI.get_rect_area_min_y(area) end

--Gets the maximum X coordinate in a rectangular area
---@param area py.RecArea # Rectangular region
---@return py.Fixed # The largest X coordinate
function GameAPI.get_rect_area_max_x(area) end

--Gets the maximum Y coordinate in a rectangular area
---@param area py.RecArea # Rectangular region
---@return py.Fixed # The largest Y coordinate
function GameAPI.get_rect_area_max_y(area) end

--Get the range of available maps
---@return py.RecArea # region
function GameAPI.get_usable_map_range() end

--Returns a rectangular area by area ID
---@param res_id py.AreaID # Area ID
---@return py.RecArea # Rectangular region
function GameAPI.get_rec_area_by_res_id(res_id) end

--Returns a circular area by area ID
---@param res_id py.AreaID # Area ID
---@return py.CirArea # Circular region
function GameAPI.get_circle_area_by_res_id(res_id) end

--Returns a custom polygon area by area ID
---@param res_id py.AreaID # Area ID
---@return py.PolyArea # Polygon region
function GameAPI.get_polygon_area_by_res_id(res_id) end

--Recently created rectangular area
---@return py.RecArea # Rectangular region
function GameAPI.get_rec_area_last_created() end

--Whether a point is in a rectangular area
---@param point py.FPoint # point
---@param area py.RecArea # Rectangular region
---@return boolean # Whether a point is in a rectangular area
function GameAPI.judge_point_in_rec_area(point, area) end

--Whether the point is inside the circle
---@param point py.FPoint # point
---@param area py.CirArea # Circular region
---@return boolean # Whether the point is inside the circle
function GameAPI.judge_point_in_cir_area(point, area) end

--Whether the point is in an irregular region
---@param point py.FPoint # point
---@param area py.CirArea # Irregular region
---@return boolean # Whether the point is in an irregular region
function GameAPI.judge_point_in_polygon_area(point, area) end

--Return point by resource id
---@param res_id integer # Resource ID
---@return py.FPoint # point
function GameAPI.get_point_by_res_id(res_id) end

--Gets the number of units in the area
---@param area py.Area # region
---@return integer # Unit quantity
function GameAPI.get_unit_num_in_area(area) end

--The number of units in a rectangular area
---@param area py.RecArea # Rectangular region
---@return integer # Unit quantity
function GameAPI.get_unit_num_in_rec_area(area) end

--The number of units in a circular area
---@param area py.CirArea # Circular region
---@return integer # Unit quantity
function GameAPI.get_unit_num_in_cir_area(area) end

--The number of units in an irregular area
---@param area py.PolyArea # Irregular region
---@return integer # Unit quantity
function GameAPI.get_unit_num_in_poly_area(area) end

--All undestroyed units in the rectangular area
---@param area py.RecArea # Rectangular region
---@return py.UnitGroup # Unit group
function GameAPI.get_unit_group_in_rec_area(area) end

--All undestroyed units in the circular area
---@param area py.CirArea # Circular region
---@return py.UnitGroup # Unit group
function GameAPI.get_unit_group_in_cir_area(area) end

--All undestroyed units in the irregular area
---@param area py.CirArea # Irregular region
---@return py.UnitGroup # Unit group
function GameAPI.get_unit_group_in_poly_area(area) end

--All items in a rectangular area
---@param area py.RecArea # Rectangular region
---@return py.ItemGroup # Item group
function GameAPI.get_item_group_in_rec_area(area) end

--All items in the circular area
---@param area py.CirArea # Circular region
---@return py.ItemGroup # Item group
function GameAPI.get_item_group_in_cir_area(area) end

--All items in an irregular area
---@param area py.PolyArea # Irregular region
---@return py.ItemGroup # Item group
function GameAPI.get_item_group_in_poly_area(area) end

--Delete area
---@param area py.Area # region
function GameAPI.remove_area(area) end

--Obtain regional weather
---@param area py.Area # region
---@return integer # Weather type
function GameAPI.get_area_weather(area) end

--Set area weather
---@param area py.Area # region
---@param weather_type integer # Weather type
function GameAPI.update_area_weather(area, weather_type) end

--Set point collision
---@param point py.Point # point
---@param is_add boolean # Add/remove
---@param ground_channel boolean # Ground collision
---@param air_channel boolean # In-flight collision
function GameAPI.set_point_collision(point, is_add, ground_channel, air_channel) end

--Set area collision
---@param area py.Area # region
---@param is_add boolean # Add/remove
---@param ground_channel boolean # Ground collision
---@param air_channel boolean # In-flight collision
function GameAPI.set_area_collision(area, is_add, ground_channel, air_channel) end

--Edit area collision
---@param area py.Area # region
---@param collision_layer integer # Collision type
---@param is_add boolean # Add/remove
function GameAPI.edit_area_collision(area, collision_layer, is_add) end

--Edit area field of view blocked
---@param area py.Area # region
---@param fov_block_type integer # Visual field blocking type
---@param is_add boolean # Add/remove
function GameAPI.edit_area_fov_block(area, fov_block_type, is_add) end

--Gets the scene ID of the zone
---@param area py.Area # region
---@return integer # Scene ID
function GameAPI.get_area_resource_id(area) end

--Obtain the scenario ID of the path
---@param road py.Road # path
---@return integer # Scene ID
function GameAPI.get_road_resource_id(road) end

--sound-to-string
---@param obj py.SoundEntity # Sound object
---@return string # Character string
function GameAPI.sound_entity_to_str(obj) end

--Sound type to string
---@param obj py.AudioKey # Sound number
---@return string # Character string
function GameAPI.audio_key_to_str(obj) end

--String to sound type
---@param obj string # Character string
---@return py.AudioKey # Sound number
function GameAPI.str_to_audio_key(obj) end

--Sign up area for nearby voice channels
---@param area py.Area # region
function GameAPI.reg_sound_area(area) end

--Unregistered area for nearby voice channels
---@param area py.Area # region
function GameAPI.unreg_sound_area(area) end

--Set the area mode switch for nearby voices
---@param b boolean # Area mode switch
function GameAPI.set_nearby_voice_mode(b) end

--Set up a player talk channel
---@param role py.Role # Player
---@param channel integer # channel
function GameAPI.set_audio_chat_channel(role, channel) end

--Play music
---@param role py.Role # Player
---@param sid py.AudioKey # Track number
---@param loop boolean # Cyclic or not
---@param fade_in_time? number # Fade time
---@param fade_out_time? number # Fade time
---@param volume? integer # volume
---@return py.SoundEntity # Sound object
function GameAPI.play_sound_for_player(role, sid, loop, fade_in_time, fade_out_time, volume) end

--Play music to the target
---@param unit_key py.UnitKey # Unit number
---@param camp_target py.RoleRelation # Player relationship
---@param sid py.AudioKey # Track number
---@param loop boolean # Cyclic or not
function GameAPI.play_sound_for_role_relation(unit_key, camp_target, sid, loop) end

--Play 3d music
---@param role py.Role # Player
---@param sid py.AudioKey # Track number
---@param position py.Point # Play position
---@param height number # Altitude
---@param fade_in_time? number # Fade time
---@param fade_out_time? number # Fade time
---@param ensure_play? boolean # Ensure play
---@param loop? boolean # Cyclic or not
---@param volume? integer # volume
---@return py.SoundEntity # Sound object
function GameAPI.play_3d_sound_for_player(role, sid, position, height, fade_in_time, fade_out_time, ensure_play, loop, volume) end

--Follow the unit to play 3d music
---@param role py.Role # Player
---@param sid py.AudioKey # Track number
---@param unit py.Unit # unit
---@param fade_in_time? number # Fade time
---@param fade_out_time? number # Fade time
---@param ensure_play? boolean # Ensure play
---@param loop? boolean # Cyclic or not
---@param offset_x? number # Offset x
---@param offset_y? number # Offset y
---@param offset_z? number # Offset z
---@param volume? integer # volume
---@return py.SoundEntity # Sound object
function GameAPI.follow_object_play_3d_sound_for_player(role, sid, unit, fade_in_time, fade_out_time, ensure_play, loop, offset_x, offset_y, offset_z, volume) end

--Stop playing music
---@param role py.Role # Player
---@param sound py.SoundEntity # Audio
---@param immediately_stop? boolean # Whether to stop immediately
function GameAPI.stop_sound(role, sound, immediately_stop) end

--Play control
---@param role py.Role # Player
---@param sound py.SoundEntity # Audio
---@param play_operation integer # Play operation
function GameAPI.sound_play_controller(role, sound, play_operation) end

--Set the player is sound receiver to follow the lens rays with the ground focus
---@param role py.Role # Player
---@param camera_ray_direction py.CameraRayDirection # Camera ray direction
function GameAPI.set_player_listener_to_follow_intersection_of_camera_ray_and_ground(role, camera_ray_direction) end

--Set the player is sound receiver to follow the unit
---@param role py.Role # Player
---@param unit py.Unit # unit
function GameAPI.set_player_listener_to_follow_unit(role, unit) end

--Set the background music switch
---@param role py.Role # Player
---@param value boolean # On/off
function GameAPI.open_background_music(role, value) end

--Set the battle music switch
---@param role py.Role # Player
---@param value boolean # On/off
function GameAPI.open_battle_music(role, value) end

--Set the background music volume
---@param role py.Role # Player
---@param value integer # volume
function GameAPI.set_background_music_volume(role, value) end

--Set the combat sound volume
---@param role py.Role # Player
---@param value integer # volume
function GameAPI.set_battle_music_volume(role, value) end

--Set sound volume
---@param player py.Role # Player
---@param sound py.SoundEntity # Audio
---@param volume integer # volume
function GameAPI.set_sound_volume(player, sound, volume) end

--The scene sound ID is used to return the scene sound
---@param res_id py.SceneSoundID # Scene sound ID
---@return py.SceneSound # Scene sound
function GameAPI.get_scene_sound_by_res_id(res_id) end

--Play scene sound
---@param scene_sound py.SceneSound # Scene sound
function GameAPI.play_scene_sound(scene_sound) end

--Stop scene sound
---@param scene_sound py.SceneSound # Scene sound
function GameAPI.stop_scene_sound(scene_sound) end

--Sets whether the scene sounds loop
---@param scene_sound py.SceneSound # Scene sound
---@param loop boolean # Cyclic or not
function GameAPI.set_scene_sound_loop(scene_sound, loop) end

--Set the sound attenuation distance of the scene
---@param scene_sound py.SceneSound # Scene sound
---@param min_dist number # Attenuation distance
function GameAPI.set_scene_sound_min_dist(scene_sound, min_dist) end

--The silence distance of scene sounds is set
---@param scene_sound py.SceneSound # Scene sound
---@param max_dist number # Silent distance
function GameAPI.set_scene_sound_max_dist(scene_sound, max_dist) end

--Set whether the scene sound is paused
---@param scene_sound py.SceneSound # Scene sound
---@param paused boolean # Pause or not
function GameAPI.set_scene_sound_pause(scene_sound, paused) end

--Gets the status of the initial background music switch
---@return boolean # value
function GameAPI.get_bgm_state() end

--Gets the status of the initial combat sound switch
---@return boolean # value
function GameAPI.get_battle_bgm_state() end

--Gets the initial background music volume
---@return integer # value
function GameAPI.get_bgm_volume() end

--Gets the initial combat sound volume
---@return integer # value
function GameAPI.get_battle_volume() end

--Gets the current game mode
---@return py.GameMode # Game mode
function GameAPI.get_game_mode() end

--Pause the game
function GameAPI.pause_game() end

--End the game for the player
---@param role py.Role # Player
---@param result string # Result of battle
---@param show boolean # Display end panel
---@param send? boolean # Whether to upload player leaderboard scores
---@param score? integer # Leaderboard score
---@param accumulate? boolean # Whether to calculate points cumulatively
function GameAPI.set_melee_result_by_role(role, result, show, send, score, accumulate) end

--End player game
---@param role py.Role # Player
---@param result string # Result of battle
---@param comp_uid string # Control uid
---@param send? boolean # Whether to upload player leaderboard scores
---@param score? integer # Leaderboard score
---@param accumulate? boolean # Whether to calculate points cumulatively
function GameAPI.set_melee_result_by_role_2(role, result, comp_uid, send, score, accumulate) end

--Upload player leaderboard scores
---@param role py.Role # Player
---@param score integer # Leaderboard score
---@param accumulate? boolean # Whether to calculate points cumulatively
function GameAPI.upload_role_billboard_score(role, score, accumulate) end

--End game
---@param player_results? py.Dict # Player billing information
function GameAPI.game_end(player_results) end

--Apply for the next round
---@param fast_restart? boolean # Quick reset or not
function GameAPI.request_new_round(fast_restart) end

--Switch to level
---@param level_id_str py.Map # Level ID
---@param load_same_world? boolean # Whether to skip scene loading
---@param skip_loading_ui? boolean # Whether to skip UI loading
function GameAPI.request_switch_level(level_id_str, load_same_world, skip_loading_ui) end

--Gets the archive value of the specified key for the current map
---@param key string # The specified global archive key value
---@return integer # Global archive value
function GameAPI.get_global_map_archive(key) end

--Gets the nickname of the NTH player in the map is globally specified key archive
---@param rank_key string # key value
---@param num integer # n Place
---@return string # nickname
function GameAPI.get_rank_player_nickname(rank_key, num) end

--Gets the save value for the NTH player of the map is globally specified key save
---@param rank_key string # key value
---@param num integer # n Place
---@return integer # Archive value
function GameAPI.get_rank_player_global_archive_value(rank_key, num) end

--Gets the nickname of the NTH player in the player-specified personal save field
---@param archive_key integer # Player save field
---@param num integer # n Place
---@return string # nickname
function GameAPI.get_archive_rank_player_nickname(archive_key, num) end

--Gets the save value for the NTH player in the personal save field specified by the player
---@param archive_key integer # Player save field
---@param num integer # n Place
---@return integer # Archive value
function GameAPI.get_archive_rank_player_archive_value(archive_key, num) end

--Adjust the logical frame rate
---@param fps integer # Target frame rate
function GameAPI.api_change_logic_fps(fps) end

--Enable soft pause
function GameAPI.api_soft_pause_game() end

--Close soft pause
function GameAPI.api_soft_resume_game() end

--Local player number
---@return py.RoleID # Player number
function GameAPI.get_owner_role_id() end

--Local player mouse position
---@return py.Point # Mouse position
function GameAPI.get_local_player_pointing_pos() end

--Local player mouse screen position X
---@return integer # Mouse screen position X
function GameAPI.get_local_player_ui_pos_x() end

--Local player mouse screen position Y
---@return integer # Mouse screen position Y
function GameAPI.get_local_player_ui_pos_y() end

--Local player mouse screen position X window proportion
---@return number # Account for
function GameAPI.get_local_role_ui_x_per() end

--Local player mouse screen position y window proportion
---@return number # Account for
function GameAPI.get_local_role_ui_y_per() end

--Local player camera facing
---@return py.Point # Camera orientation
function GameAPI.get_local_player_camera_direction() end

--Local player camera center X-ray detection
---@return py.Point # Point of intersection
function GameAPI.get_local_player_camera_center_raycast() end

--Get the game start time stamp
---@return integer # Game start time stamp
function GameAPI.get_game_init_time_stamp() end

--Gets the local time stamp
---@return integer # Local timestamp
function GameAPI.get_local_time_stamp() end

--Add a local timer
---@param delay number # Put off
---@param callback function # callback
---@return integer # Timer number
function GameAPI.add_local_timer(delay, callback) end

--Add a local loop timer
---@param interval number # interval
---@param callback function # callback
---@return integer # Timer number
function GameAPI.add_local_repeat_timer(interval, callback) end

--Cancel local timer
---@param timer_id integer # Timer number
function GameAPI.cancel_local_timer(timer_id) end

--Forcibly enable or disable mouse synchronization
---@param enable boolean # Switch
function GameAPI.force_enable_mouse_sync(enable) end

--Forcibly enable/disable key synchronization
---@param enable boolean # Switch
function GameAPI.force_enable_keyboard_sync(enable) end

--Force lens sync on/off
---@param enable boolean # Switch
function GameAPI.force_enable_camera_sync(enable) end

--Start Cloudletter and bind the object
---@param role py.Role # Player
---@param entity py.Unit # unit
function GameAPI.init_bind_nim(role, entity) end

--Enable or disable vertical synchronization
---@param enable boolean # On
function GameAPI.api_set_v_sync(enable) end

--Set the local key change
---@param key py.KeyboardKey # Original key
---@param target_key py.KeyboardKey # Target key
function GameAPI.api_set_local_mapping_key(key, target_key) end

--Example Cancel local key change
---@param key py.KeyboardKey # Original key
function GameAPI.api_cancel_local_mapping_key(key) end

--Clear local keys
function GameAPI.api_clear_local_mapping_key() end

--Set whether to use the built-in local key change scheme
---@param enable boolean # Whether to use
function GameAPI.api_set_builtin_key_control_enable(enable) end

--Determine whether to use the built-in keyboard controls
---@return boolean # Boolean value
function GameAPI.api_is_builtin_key_control_enable() end

--Set the player shot mode
---@param role py.Role # Player
---@param cam_mod py.CameraMode # Lens mode
---@param ortho_scale? number # Orthogonal scaling
function GameAPI.api_set_role_camera_mode(role, cam_mod, ortho_scale) end

--Whether the player camera is playing an animation
---@param role py.Role # Player
---@return boolean # Whether to play animation
function GameAPI.is_cameraIS_playing_timeline(role) end

--Play shot animation
---@param role py.Role # Player
---@param camline_id py.CamlineID # Lens TimelineID
function GameAPI.play_camera_timeline(role, camline_id) end

--Stop the shot animation
---@param role py.Role # Player
function GameAPI.stop_camera_timeline(role) end

--Set the Fresnel effect switch for the object
---@param log_obj py.Actor # object
---@param visible boolean # Switch
function GameAPI.api_set_obj_fresnel_visible(log_obj, visible) end

--Sets the Fresnel effect of an object
---@param log_obj py.Actor # object
---@param color_r? integer # R
---@param color_g? integer # G
---@param color_b? integer # B
---@param alpha? number # alpha
---@param exp? number # exp
---@param strength? number # strength
function GameAPI.api_set_obj_fresnel_parameters(log_obj, color_r, color_g, color_b, alpha, exp, strength) end

--Set the model loading range
---@param focus_distance number # Radius
function GameAPI.set_focus_distance(focus_distance) end

--Set image quality
---@param role py.Role # Player
---@param quality string # Picture quality
function GameAPI.set_image_quality(role, quality) end

--Get the initial game quality
---@return string # value
function GameAPI.get_graphics_quality() end

--Set style
---@param role py.Role # Player
---@param post_style_type py.PostEffect # Painting style
---@param color_r? integer # R
---@param color_g? integer # R
---@param color_b? integer # R
---@param depth_scale? number # outline
---@param intensity? number # intensity
function GameAPI.set_post_effect(role, post_style_type, color_r, color_g, color_b, depth_scale, intensity) end

--Cascade shadow switch
---@param is_enable boolean # Switch
function GameAPI.set_cascaded_shadow_enable(is_enable) end

--Number of cascaded shadow layers
---@param levels integer # Number of floors
function GameAPI.set_dynamic_shadow_cascades(levels) end

--Cascade shadow distance
---@param distance number # distance
function GameAPI.set_dynamic_shadow_distance_movable_light(distance) end

--Shadow distance
---@param distance number # distance
function GameAPI.set_cascaded_shadow_distance(distance) end

--Gets the cascade shadow state
---@return boolean # status
function GameAPI.get_cascaded_shadow_enable() end

--Gets the number of cascaded shadow layers
---@return integer # Number of floors
function GameAPI.get_dynamic_shadow_cascades() end

--Gets the cascade shadow distance
---@return py.Fixed # distance
function GameAPI.get_dynamic_shadow_distance_movable_light() end

--Get shadow distance
---@return py.Fixed # distance
function GameAPI.get_cascaded_shadow_distance() end

--Gets the light source Float property
---@param light py.Light # illuminant
---@param attr_name string # Attribute name
---@return py.Fixed # value
function GameAPI.get_light_float_attr_value(light, attr_name) end

--Sets whether the light source produces shadows
---@param light py.Light # illuminant
---@param value boolean # value
function GameAPI.set_light_cast_shadow_attr_value(light, value) end

--Gets whether the light source produces shadows
---@param light py.Light # illuminant
---@return boolean # value
function GameAPI.get_light_cast_shadow_attr_value(light) end

--Return the local fog according to the local fog ID
---@param res_id py.FogID # Fog ID
---@return py.Fog # The fog
function GameAPI.get_fog_res_by_res_id(res_id) end

--Modify fog effect properties
---@param fog py.Fog # The fog
---@param op_flag integer # Default parameter
---@param yaw? number # orientation
---@param pos_x? number # Position x
---@param pos_y? number # Position y
---@param pos_z? number # Position z
---@param scale_x? number # Zoom x
---@param scale_y? number # Scale y
---@param scale_z? number # Zoom z
---@param color_r? number # Color r
---@param color_g? number # Color g
---@param color_b? number # Color b
---@param density? number # concentration
---@param flow_speed? number # Velocity of flow
function GameAPI.set_fog_attr(fog, op_flag, yaw, pos_x, pos_y, pos_z, scale_x, scale_y, scale_z, color_r, color_g, color_b, density, flow_speed) end

--Modified fog effect attribute new
---@param fog py.Fog # The fog
---@param fog_attr string # Fog attribute
---@param value number # value
function GameAPI.set_fog_attr_new(fog, fog_attr, value) end

--Switch the global view for the player
---@param enable boolean # Switch
function GameAPI.enable_fow_for_player(enable) end

--Set the minimap instead of the picture
---@param role py.Role # Player
---@param image_id integer # Picture id
function GameAPI.change_mini_map_img(role, image_id) end

--Set a minimap instead of an image (image type)
---@param role py.Role # Player
---@param image_id py.Texture # picture
---@param specify_mini_map? string # Specified mini-map
function GameAPI.change_mini_map_img_with_icon(role, image_id, specify_mini_map) end

--Set the minimap color display mode
---@param role py.Role # Player
---@param color_type integer # Display mode
---@param specify_mini_map? string # Specified mini-map
function GameAPI.change_mini_map_color_type(role, color_type, specify_mini_map) end

--Turn on drawing the unit path line
---@param role py.Role # Player
---@param unit py.Unit # unit
---@param specify_mini_map? string # Specified mini-map
function GameAPI.enable_unit_path_drawing(role, unit, specify_mini_map) end

--Turn off drawing unit path lines
---@param role py.Role # Player
---@param unit py.Unit # unit
---@param specify_mini_map? string # Specified mini-map
function GameAPI.disable_unit_path_drawing(role, unit, specify_mini_map) end

--Set the minimap display area
---@param role py.Role # Player
---@param rect_area py.RecArea # Rectangular region
function GameAPI.set_min_map_show_area(role, rect_area) end

--Turn off localplayer's presentation layer hops
---@param is_close boolean # Close or not
function GameAPI.set_local_player_jump_word_close(is_close) end

--Sets the base material properties of the object
---@param logic_obj py.Actor # Logical object
---@param color_r? integer # R
---@param color_g? integer # G
---@param color_b? integer # B
---@param color_a? integer # A
---@param base_model_opacity? integer # model_opacity
function GameAPI.api_change_obj_base_color(logic_obj, color_r, color_g, color_b, color_a, base_model_opacity) end

--Sets whether the lens floats with the height of the terrain
---@param enable boolean # Switch
---@param detect_range? integer # Detection range
function GameAPI.set_camera_floating_with_terrain(enable, detect_range) end

--Modify the terrain texture of a point
---@param position py.Point # Specified point
---@param texture_type integer # Texture type
---@param radius integer # Radius
---@param area_shape integer # Area type
function GameAPI.modify_point_texture(position, texture_type, radius, area_shape) end

--Modify the terrain height of a point
---@param position py.Point # Specified point
---@param terrain_height integer # Altitude
---@param radius integer # Radius
---@param area_shape integer # Area type
function GameAPI.modify_point_height(position, terrain_height, radius, area_shape) end

--Replaces the specified terrain texture in the area
---@param area py.Area # region
---@param texture_type integer # Texture type
---@param new_texture_type integer # New texture type
function GameAPI.replace_point_texture(area, texture_type, new_texture_type) end

--Get texture type
---@param position py.Point # point
---@return integer # Texture type
function GameAPI.get_texture_type(position) end

--Modify the player is surface texture
---@param role py.Role # Player
---@param bool_value boolean # Boolean value
function GameAPI.set_local_terrain_visible(role, bool_value) end

--Modify material properties
---@param obj py.Actor # object
---@param material_id integer # Material id
---@param r_value number # R
---@param g_value number # G
---@param b_value number # B
---@param intensity? number # intensity
---@param alpha? number # transparency
function GameAPI.set_material_param(obj, material_id, r_value, g_value, b_value, intensity, alpha) end

--Set the filter effect for the player
---@param role py.Role # Player
---@param value integer # id
function GameAPI.set_role_color_grading(role, value) end

--Set resolution
---@param role py.Role # Player
---@param x_resolution number # Lateral resolution
---@param y_resolution number # Longitudinal resolution
function GameAPI.set_screen_resolution(role, x_resolution, y_resolution) end

--Setup window
---@param role py.Role # Player
---@param window_type string # pattern
function GameAPI.set_window_type(role, window_type) end

--Switch the grass at the target point
---@param enable boolean # Switch
---@param point py.Point # point
function GameAPI.set_grass_enable_by_pos(enable, point) end

--Gets the initialization window category
---@return string # value
function GameAPI.get_window_mode() end

--Gets the initial horizontal resolution
---@return integer # value
function GameAPI.get_game_x_resolution() end

--Gets the initial vertical resolution
---@return integer # value
function GameAPI.get_game_y_resolution() end

--Current form landscape size
---@return integer # value
function GameAPI.get_window_real_x_size() end

--Current vertical size of form
---@return integer # value
function GameAPI.get_window_real_y_size() end

--Gets the screen landscape resolution
---@return integer # value
function GameAPI.get_screen_x_resolution() end

--Gets the screen portrait resolution
---@return integer # value
function GameAPI.get_screen_y_resolution() end

--Determine the player is unit type preconditions to meet the requirements
---@param player py.Role # Player
---@param unity_key py.UnitKey # Unit type
---@return boolean # Satisfy or not
function GameAPI.check_unit_key_precondition(player, unity_key) end

--Determine the player is item type preconditions to satisfy the need
---@param player py.Role # Player
---@param item_key py.ItemKey # Item type
---@return boolean # Satisfy or not
function GameAPI.check_item_key_precondition(player, item_key) end

--Determine the player is technology type preconditions to meet the needs
---@param player py.Role # Player
---@param tech_key py.TechKey # Science and technology type
---@return boolean # Satisfy or not
function GameAPI.check_tech_key_precondition(player, tech_key) end

--Determine the player is skill type preconditions to meet the requirements
---@param player py.Role # Player
---@param ability_key py.AbilityKey # Skill type
---@return boolean # Satisfy or not
function GameAPI.check_ability_key_precondition(player, ability_key) end

--Gets a list of preconditions for the skill type
---@param ability_key py.AbilityKey # Skill type
---@return py.List # Prerequisite list
function GameAPI.get_ability_key_precondition_list(ability_key) end

--Gets a list of preconditions for the unit type
---@param unit_key py.UnitKey # Unit type
---@return py.List # Prerequisite list
function GameAPI.get_unit_key_precondition_list(unit_key) end

--Gets a list of preconditions for the item type
---@param item_key py.ItemKey # Item type
---@return py.List # Prerequisite list
function GameAPI.get_item_key_precondition_list(item_key) end

--Gets the type of unit traversed by the precondition
---@param iter_data py.Actor # data
---@return py.UnitKey # Unit type
function GameAPI.get_pre_condition_iter_unit_key(iter_data) end

--Gets the type of technology traversed by the precondition
---@param iter_data py.Actor # data
---@return py.TechKey # Science and technology type
function GameAPI.get_pre_condition_iter_tech_key(iter_data) end

--Gets the unit label traversed by preconditions
---@param iter_data py.Actor # data
---@return string # Unit label
function GameAPI.get_pre_condition_iter_unit_tag(iter_data) end

--Gets the technology tag traversed by the preconditions
---@param iter_data py.Actor # data
---@return string # Technology label
function GameAPI.get_pre_condition_iter_tech_tag(iter_data) end

--Gets the required value of the pre-condition for the unit type
---@param source_item_key py.UnitKey # Unit of detection
---@param target_item_key py.UnitKey # Indicates the type of the unit to be queried
---@return integer # Required value
function GameAPI.get_unit_type_unit_key_pre_condition_require_count(source_item_key, target_item_key) end

--Gets the required value of the unit label prerequisite
---@param source_item_key py.UnitKey # Unit of detection
---@param target_item_key string # Label of the unit to be queried
---@return integer # Required value
function GameAPI.get_unit_type_unit_tag_pre_condition_require_count(source_item_key, target_item_key) end

--Gets the required value of the pre-condition for the unit technology type
---@param source_item_key py.UnitKey # Unit of detection
---@param target_item_key py.TechKey # Type of technology to be queried
---@return integer # Required value
function GameAPI.get_unit_type_tech_key_pre_condition_require_count(source_item_key, target_item_key) end

--Gets the required value of the unit technology label prerequisite
---@param source_item_key py.UnitKey # Unit of detection
---@param target_item_key string # Search for tech tags
---@return integer # Required value
function GameAPI.get_unit_type_tech_tag_pre_condition_require_count(source_item_key, target_item_key) end

--Gets the required value of the prerequisite for the skill unit type
---@param source_item_key py.AbilityKey # Detection skills
---@param target_item_key py.UnitKey # Indicates the type of the unit to be queried
---@return integer # Required value
function GameAPI.get_ability_type_unit_key_pre_condition_require_count(source_item_key, target_item_key) end

--Gets the required value of the skill unit label prerequisite
---@param source_item_key py.AbilityKey # Detection skills
---@param target_item_key string # Label of the unit to be queried
---@return integer # Required value
function GameAPI.get_ability_type_unit_tag_pre_condition_require_count(source_item_key, target_item_key) end

--Gets the requirement value of the prerequisite for the skill technology type
---@param source_item_key py.AbilityKey # Detection skills
---@param target_item_key py.TechKey # Type of technology to be queried
---@return integer # Required value
function GameAPI.get_ability_type_tech_key_pre_condition_require_count(source_item_key, target_item_key) end

--Gets the requirement value of the skill technology label prerequisite
---@param source_item_key py.AbilityKey # Detection skills
---@param target_item_key string # Search for tech tags
---@return integer # Required value
function GameAPI.get_ability_type_tech_tag_pre_condition_require_count(source_item_key, target_item_key) end

--Gets the required value of the item unit type precondition
---@param source_item_key py.ItemKey # Item tested
---@param target_item_key py.UnitKey # Indicates the type of the unit to be queried
---@return integer # Required value
function GameAPI.get_item_type_unit_key_pre_condition_require_count(source_item_key, target_item_key) end

--Gets the required value for item unit label preconditions
---@param source_item_key py.ItemKey # Item tested
---@param target_item_key string # Label of the unit to be queried
---@return integer # Required value
function GameAPI.get_item_type_unit_tag_pre_condition_require_count(source_item_key, target_item_key) end

--Gets the requirement value of the item technology type preconditions
---@param source_item_key py.ItemKey # Item tested
---@param target_item_key py.TechKey # Type of technology to be queried
---@return integer # Required value
function GameAPI.get_item_type_tech_key_pre_condition_require_count(source_item_key, target_item_key) end

--Gets the required value of the item is technology label preconditions
---@param source_item_key py.ItemKey # Item tested
---@param target_item_key string # Search for tech tags
---@return integer # Required value
function GameAPI.get_item_type_tech_tag_pre_condition_require_count(source_item_key, target_item_key) end

--Set control adaptation
---@param role py.Role # Player
---@param comp_name string # Control uid
---@param direction integer # direction
---@param offset number # offset
function GameAPI.set_ui_comp_adapt_option(role, comp_name, direction, offset) end

--Causes the player to trigger interface events
---@param role py.Role # Player
---@param comp_name string # Control uid
---@param event_name string # Event name
---@param not_wait_network? boolean # Do not wait for the network to return
function GameAPI.trigger_ui_event(role, comp_name, event_name, not_wait_network) end

--Control controls follow the mouse
---@param role py.Role # Player
---@param comp_name string # Control uid
---@param is_follow boolean # Whether to follow
---@param offset_x? number # Offset x
---@param offset_y? number # Offset y
function GameAPI.set_ui_comp_follow_mouse(role, comp_name, is_follow, offset_x, offset_y) end

--Asynchronous: Gets whether the coordinates are in the control
---@param role py.Role # Player
---@param x number # x
---@param y number # y
---@param comp_name string # Control uid
---@return boolean # Be in it or not
function GameAPI.pos_in_comp_box(role, x, y, comp_name) end

--Sets the lens mode of the model control
---@param role py.Role # Player
---@param comp_uid string # Control uid
---@param camera_mod integer # Lens mode
function GameAPI.set_model_comp_camera_mod(role, comp_uid, camera_mod) end

--Set the button text in different states
---@param role py.Role # Player
---@param comp_uid string # Control uid
---@param btn_status integer # Button state
---@param btn_text string # text
function GameAPI.set_ui_btn_status_string(role, comp_uid, btn_status, btn_text) end

--Set button images in different states
---@param role py.Role # Player
---@param comp_uid string # Control uid
---@param btn_status integer # Button state
---@param btn_image integer # picture
function GameAPI.set_ui_btn_status_image(role, comp_uid, btn_status, btn_image) end

--Sets the layout of the list control
---@param role py.Role # Player
---@param comp_uid string # Control uid
---@param scrollview_type integer # Layout mode
function GameAPI.set_ui_scrollview_type(role, comp_uid, scrollview_type) end

--Sets whether the size of the list control changes with the child control
---@param role py.Role # Player
---@param comp_uid string # Control uid
---@param flag boolean # Boolean value
function GameAPI.set_ui_scrollview_size_change_according_children(role, comp_uid, flag) end

--Set picture color
---@param role py.Role # Player
---@param comp_uid string # Control name
---@param r number # R
---@param g number # G
---@param b number # B
---@param a number # A
function GameAPI.set_ui_image_color(role, comp_uid, r, g, b, a) end

--Asynchronous interface - Gets the true width of the control
---@param role py.Role # Player
---@param comp_uid string # Control name
function GameAPI.get_role_ui_comp_real_width(role, comp_uid) end

--Asynchronous interface - Gets the true height of the control
---@param role py.Role # Player
---@param comp_uid string # Control name
function GameAPI.get_role_ui_comp_real_height(role, comp_uid) end

--[Asynchronous] Interface - Get the real x coordinates of the player is mouse
---@param role py.Role # Player
function GameAPI.get_role_real_mouse_x(role) end

--[Asynchronous] Interface - Get the real y coordinates of the player is mouse
---@param role py.Role # Player
function GameAPI.get_role_real_mouse_y(role) end

--Set the current chat box control
---@param role py.Role # Player
---@param comp_uid string # Chat box id
function GameAPI.set_cur_chatbox(role, comp_uid) end

--Check whether interface components exist
---@param ui_comp string # Interface component name
---@return boolean # Existence or not
function GameAPI.ui_comp_is_exist(ui_comp) end

--Display ui components and play animations
---@param role py.Role # Player
---@param comp_name string # Control name
---@param anim_name? string # Animation name
function GameAPI.show_ui_comp_animation(role, comp_name, anim_name) end

--Hide ui components and play animations
---@param role py.Role # Player
---@param comp_name string # Control name
---@param anim_name? string # Animation name
function GameAPI.hide_ui_comp_animation(role, comp_name, anim_name) end

--Set the ui component coordinates
---@param role py.Role # Player
---@param comp_name string # Control name
---@param x number # x
---@param y number # y
function GameAPI.set_ui_comp_pos(role, comp_name, x, y) end

--Set ui component coordinates without conversion
---@param role py.Role # Player
---@param comp_name string # Control name
---@param x number # x
---@param y number # y
function GameAPI.set_ui_comp_pos_no_trans(role, comp_name, x, y) end

--Set ui component scaling
---@param role py.Role # Player
---@param comp_name string # Control name
---@param width number # width
---@param height number # height
function GameAPI.set_ui_comp_scale(role, comp_name, width, height) end

--Set the ui component dimensions
---@param role py.Role # Player
---@param comp_name string # Control name
---@param width number # width
---@param height number # height
function GameAPI.set_ui_comp_size(role, comp_name, width, height) end

--Set the ui component depth
---@param role py.Role # Player
---@param comp_name string # Control name
---@param z_order integer # z_order
function GameAPI.set_ui_comp_z_order(role, comp_name, z_order) end

--Set the ui component picture
---@param role py.Role # Player
---@param comp_name string # Control name
---@param image_id integer # Picture id
function GameAPI.set_ui_comp_image(role, comp_name, image_id) end

--Set the ui list component spacing
---@param role py.Role # Player
---@param comp_name string # Control name
---@param margin integer # interval
function GameAPI.set_ui_comp_margin(role, comp_name, margin) end

--Set the ui component picture (picture type)
---@param role py.Role # Player
---@param comp_name string # Control name
---@param image_id py.Texture # picture
function GameAPI.set_ui_comp_image_with_icon(role, comp_name, image_id) end

--Sets the ui component sequence frame
---@param role py.Role # Player
---@param comp_name string # Control name
---@param image_id py.Sequence # picture
function GameAPI.set_ui_comp_sequence(role, comp_name, image_id) end

--Play sequence frame
---@param role py.Role # Player
---@param comp_name string # Control name
---@param loop? boolean # Loop
---@param space? number # interval
---@param start_frame? integer # Start frame
---@param end_frame? integer # End frame
function GameAPI.play_ui_comp_sequence(role, comp_name, loop, space, start_frame, end_frame) end

--Stop playing sequence frames
---@param role py.Role # Player
---@param comp_name string # Control name
function GameAPI.stop_ui_comp_sequence(role, comp_name) end

--The maximum value of the progress bar is set
---@param role py.Role # Player
---@param comp_name string # Control name
---@param max_value number # Maximum value
function GameAPI.set_progress_bar_max_value(role, comp_name, max_value) end

--Set the current value of the progress bar
---@param role py.Role # Player
---@param comp_name string # Control name
---@param current_value number # Current value
---@param time? number # Gradient time
function GameAPI.set_progress_bar_current_value(role, comp_name, current_value, time) end

--Set ui on/off
---@param role py.Role # Player
---@param comp_name string # Control name
---@param current_value boolean # Enable or not
function GameAPI.set_ui_comp_enable(role, comp_name, current_value) end

--Set ui display/hide
---@param role py.Role # Player
---@param visible boolean # Revealing/hidden
---@param comp_name string # Control name
function GameAPI.set_ui_comp_visible(role, visible, comp_name) end

--Set the ui text color
---@param role py.Role # Player
---@param comp_name string # Control name
---@param r number # R
---@param g number # G
---@param b number # B
---@param a number # A
function GameAPI.set_ui_comp_font_color(role, comp_name, r, g, b, a) end

--Set ui text
---@param role py.Role # Player
---@param comp_name string # Control name
---@param content string # text
function GameAPI.set_ui_comp_text(role, comp_name, content) end

--Set the ui text size
---@param role py.Role # Player
---@param comp_name string # Control name
---@param size integer # Text size
function GameAPI.set_ui_comp_font_size(role, comp_name, size) end

--Set the input box to get focus
---@param role py.Role # Player
---@param comp_name string # Control name
function GameAPI.set_input_field_focus(role, comp_name) end

--Set the input box out of focus
---@param role py.Role # Player
---@param comp_name string # Control name
function GameAPI.set_input_field_not_focus(role, comp_name) end

--Play the UI control timeline animation
function GameAPI.play_ui_comp_anim() end

--Stop the UI control timeline animation
---@param role py.Role # Player
---@param anim_id py.UIAnimKey # UI animation
function GameAPI.stop_ui_comp_anim(role, anim_id) end

--Bind a skill entity to a control
---@param role py.Role # Player
---@param ability py.Ability # Skill object
---@param comp_name string # Control name
function GameAPI.set_skill_on_ui_comp(role, ability, comp_name) end

--Unbind the skill entity to the control
---@param role py.Role # Player
---@param ability py.Ability # Skill object
---@param comp_name string # Control name
function GameAPI.unbind_skill_on_ui_comp(role, ability, comp_name) end

--Set control transparency
---@param role py.Role # Player
---@param comp_name string # Control name
---@param opacity number # transparency
function GameAPI.set_ui_comp_opacity(role, comp_name, opacity) end

--Bind an object to the BUFF control
---@param role py.Role # Player
---@param unit py.Unit # Unit object
---@param comp_name string # Control name
---@param effect? integer # BUFF effect type
function GameAPI.set_buff_on_ui_comp(role, unit, comp_name, effect) end

--Bind item entities to item bar controls
---@param role py.Role # Player
---@param item py.Item # Item object
---@param comp_name string # Control name
function GameAPI.set_item_on_ui_comp(role, item, comp_name) end

--Set the item bar control type and slot number
---@param role py.Role # Player
---@param comp_name string # Control name
---@param slot_type py.SlotType # type
---@param slot_index integer # Slot id
function GameAPI.set_ui_comp_slot(role, comp_name, slot_type, slot_index) end

--Set the item bar control type and slot number
---@param role py.Role # Player
---@param comp_name string # Control name
---@param unit py.Unit # unit
---@param slot_type py.SlotType # type
---@param slot_index integer # Slot id
function GameAPI.set_ui_comp_unit_slot(role, comp_name, unit, slot_type, slot_index) end

--Set default home screen UI display
---@param role py.Role # Player
---@param visible boolean # revealing
function GameAPI.set_prefab_ui_visible(role, visible) end

--Play/Stop Skill button activation effect
---@param role py.Role # Player
---@param comp_name string # Control name
---@param play boolean # Play/stop
function GameAPI.set_skill_btn_action_effect(role, comp_name, play) end

--Set button shortcut keys
---@param role py.Role # Player
---@param comp_name string # Control name
---@param btn integer # Key ID
function GameAPI.set_btn_short_cut(role, comp_name, btn) end

--Set button auxiliary key
---@param role py.Role # Player
---@param comp_name string # Control name
---@param btn integer # Key ID
function GameAPI.set_btn_func_short_cut(role, comp_name, btn) end

--Set the skill button smart casting shortcut key
---@param role py.Role # Player
---@param comp_name string # Control name
---@param btn integer # Key ID
function GameAPI.set_skill_btn_smart_cast_key(role, comp_name, btn) end

--Set the skill button intelligent casting assistant key
---@param role py.Role # Player
---@param comp_name string # Control name
---@param btn integer # Key ID
function GameAPI.set_skill_btn_func_smart_cast_key(role, comp_name, btn) end

--Set the UI model control ID
---@param role py.Role # Player
---@param comp_name string # Control name
---@param model_id py.Model # Model id
---@param idle_anim string # Normal animation
function GameAPI.set_ui_model_id(role, comp_name, model_id, idle_anim) end

--Set the target store unit of the player is store control
---@param role py.Role # Player
---@param comp_name string # Control name
---@param shop_unit py.Unit # Shop unit
---@param index py.Unit # TAB index
function GameAPI.set_shop_comp_bind_shop_unit(role, comp_name, shop_unit, index) end

--Set the parameters of the player is composition control and refresh them
---@param role py.Role # Player
---@param comp_name string # Control name
---@param item_id py.ItemID # Synthesize the object id
---@param shop_unit py.Unit # Shop unit
---@param buy_unit py.Unit # Purchasing unit
function GameAPI.set_compose_comp_refresh(role, comp_name, item_id, shop_unit, buy_unit) end

--Set the ui model control background color
---@param role py.Role # Player
---@param comp_name string # Control name
---@param r number # R
---@param g number # G
---@param b number # B
---@param a number # A
function GameAPI.set_show_room_background_color(role, comp_name, r, g, b, a) end

--Set the fov of the Showroom
---@param role py.Role # Player
---@param comp_name string # Control name
---@param fov number # fov
function GameAPI.change_showroom_fov(role, comp_name, fov) end

--Set the camera pos of the Showroom
---@param role py.Role # Player
---@param comp_name string # Control name
---@param x number # x
---@param y number # y
---@param z number # z
function GameAPI.change_showroom_cposition(role, comp_name, x, y, z) end

--Set the camera rotation of the Showroom
---@param role py.Role # Player
---@param comp_name string # Control name
---@param pitch number # pitch
---@param roll number # roll
---@param yaw number # yaw
function GameAPI.change_showroom_crotation(role, comp_name, pitch, roll, yaw) end

--Set control rotation
---@param role py.Role # Player
---@param comp_name string # Control name
---@param rotation number # Angle
function GameAPI.set_ui_comp_rotation(role, comp_name, rotation) end

--Sets whether the control blocks
---@param role py.Role # Player
---@param comp_name string # Control name
---@param swallow boolean # Whether to block clicks
function GameAPI.set_ui_comp_swallow(role, comp_name, swallow) end

--Sets whether the control can be dragged
---@param role py.Role # Player
---@param comp_name string # Control name
---@param can_drag boolean # Dragable or not
function GameAPI.set_ui_comp_drag(role, comp_name, can_drag) end

--Sets the control world coordinates
---@param role py.Role # Player
---@param comp_name string # Control name
---@param x number # x
---@param y number # y
function GameAPI.set_ui_comp_world_pos(role, comp_name, x, y) end

--Set control world rotation
---@param role py.Role # Player
---@param comp_name string # Control name
---@param rotation number # rotation
function GameAPI.set_ui_comp_world_rotation(role, comp_name, rotation) end

--Set the control world scaling
---@param role py.Role # Player
---@param comp_name string # Control name
---@param scale_x number # scale_x
---@param scale_y number # scale_y
function GameAPI.set_ui_comp_world_scale(role, comp_name, scale_x, scale_y) end

--[Asynchronous] Gets the relative position x of the current player control
---@param comp_name string # Control name
---@return py.Fixed # x
function GameAPI.get_ui_comp_pos_x(comp_name) end

--[Asynchronous] Gets the relative position y of the current player control
---@param comp_name string # Control name
---@return py.Fixed # y
function GameAPI.get_ui_comp_pos_y(comp_name) end

--[Asynchronous] Gets the absolute position x of the current player control
---@param comp_name string # Control name
---@return py.Fixed # x
function GameAPI.get_ui_comp_world_pos_x(comp_name) end

--[Asynchronous] Get the absolute position y of the current player control
---@param comp_name string # Control name
---@return py.Fixed # y
function GameAPI.get_ui_comp_world_pos_y(comp_name) end

--[Asynchronous] Gets the relative rotation of the current player control
---@param comp_name string # Control name
---@return py.Fixed # rotation
function GameAPI.get_ui_comp_rotation(comp_name) end

--[Asynchronous] Gets the absolute rotation of the current player control
---@param comp_name string # Control name
---@return py.Fixed # rotation
function GameAPI.get_ui_comp_world_rotation(comp_name) end

--[Asynchronous] Gets the relative scaling x of the current player control
---@param comp_name string # Control name
---@return py.Fixed # scale_x
function GameAPI.get_ui_comp_scale_x(comp_name) end

--[Asynchronous] Gets the relative scaling y of the current player control
---@param comp_name string # Control name
---@return py.Fixed # scale_y
function GameAPI.get_ui_comp_scale_y(comp_name) end

--[Asynchronous] Gets the absolute scaling x of the current player control
---@param comp_name string # Control name
---@return py.Fixed # scale_x
function GameAPI.get_ui_comp_world_scale_x(comp_name) end

--[Asynchronous] Gets the absolute scaling y of the current player control
---@param comp_name string # Control name
---@return py.Fixed # scale_y
function GameAPI.get_ui_comp_world_scale_y(comp_name) end

--Creating ui controls
---@param role py.Role # Player
---@param comp_name string # Parent node
---@param comp_type integer # Control type
---@return string # Control uid
function GameAPI.create_ui_comp(role, comp_name, comp_type) end

--Finds the UI control with the specified name
---@param role py.Role # Player
---@param comp_name string # Node name
---@return string # Control uid
function GameAPI.get_ui_comp_id_by_name(role, comp_name) end

--Create and bind ui control events
---@param role py.Role # Player
---@param comp_uid string # Control uid
---@param event_type integer # Control event type
---@return string # Event name
function GameAPI.create_ui_comp_event(role, comp_uid, event_type) end

--Create and bind ui control events (specify the event name)
---@param role py.Role # Player
---@param comp_uid string # Control uid
---@param event_type integer # Control event type
---@param name string # Custom event name
---@return string # Event name
function GameAPI.create_ui_comp_event_ex(role, comp_uid, event_type, name) end

--The new version creates and binds ui control events (specify the event name), no longer passes to the player, and supports both normal controls and dynamically created controls
---@param comp_uid string # Control uid
---@param event_type integer # Control event type
---@param name string # Custom event name
---@param user_data string # Custom data
---@param not_wait_network? boolean # Do not wait for the network to return
---@return string # Event name
function GameAPI.create_ui_comp_event_ex_ex(comp_uid, event_type, name, user_data, not_wait_network) end

--Create and bind ui control events (specify the event name)
---@param role py.Role # Player
---@param comp_uid string # Control uid
---@param event_type integer # Control event type
---@param name string # Custom event name
---@return string # Event name
function GameAPI.create_ui_comp_event_ex_no_check(role, comp_uid, event_type, name) end

--Gets the controls in the scene ui
---@param scene_node_entity py.SceneNode # Site attraction
---@param comp_path string # Control path
---@return string # Control name
function GameAPI.get_ui_comp_in_scene_ui(scene_node_entity, comp_path) end

--Gets the controls in the scene ui
---@param scene_node_entity py.SceneNode # Site attraction
---@param comp_uid string # Template control uid
---@return string # uid
function GameAPI.get_ui_comp_in_scene_ui_ex(scene_node_entity, comp_uid) end

--Get ui controls via Controls + paths
---@param role py.Role # Player
---@param comp_name string # Parent node
---@param path string # path
---@return string # Control uid
function GameAPI.get_comp_by_path(role, comp_name, path) end

--Get ui controls through the absolute path
---@param role py.Role # Player
---@param path string # path
---@return string # Control uid
function GameAPI.get_comp_by_absolute_path(role, path) end

--Play ui dynamic effect
---@param role py.Role # Player
---@param uid string # Control uid
---@param fx_id integer # Control dynamic project id
---@param ani_name string # nomenclature
---@param loop? boolean # Loop
function GameAPI.play_ui_comp_fx(role, uid, fx_id, ani_name, loop) end

--ui model controls play animations
---@param role py.Role # Player
---@param uid string # Control uid
---@param anim string # Animation name
---@param play_speed? number # Animation rate
---@param begin_t? number # Start time
---@param end_t? number # End time
---@param loop? boolean # Cyclic or not
---@param return_idle? boolean # Whether to return to default animation
function GameAPI.play_ui_model_anim(role, uid, anim, play_speed, begin_t, end_t, loop, return_idle) end

--Set the ui component floating state picture
---@param role py.Role # Player
---@param comp_name string # Control name
---@param image_id integer # Picture id
function GameAPI.set_ui_comp_suspend_image(role, comp_name, image_id) end

--Set the ui component press down image
---@param role py.Role # Player
---@param comp_name string # Control name
---@param image_id integer # Picture id
function GameAPI.set_ui_comp_press_image(role, comp_name, image_id) end

--Set the ui component to disable state images
---@param role py.Role # Player
---@param comp_name string # Control name
---@param image_id integer # Picture id
function GameAPI.set_ui_comp_disabled_image(role, comp_name, image_id) end

--Clear the drop-down box
---@param role py.Role # Player
---@param comp_id string # Drop-down box
function GameAPI.clear_combo_box(role, comp_id) end

--Add drop-down options
---@param role py.Role # Player
---@param comp_id string # Drop-down box
---@param text string # name
---@param value string # value
function GameAPI.add_combo_item(role, comp_id, text, value) end

--Set the default text of the drop-down box
---@param role py.Role # Player
---@param comp_id string # Drop-down box
---@param text string # Default text
function GameAPI.set_combo_text(role, comp_id, text) end

--[Asynchronous] Gets the current value of the drop-down box
---@param comp_id string # Drop-down box
---@return string # value
function GameAPI.get_combo_box_cur_value(comp_id) end

--[Asynchronous] Gets the current value of the slider
---@param comp_id string # slider
---@return py.Fixed # value
function GameAPI.get_slider_cur_percent(comp_id) end

--Set the current slider value
---@param role py.Role # Player
---@param comp_id string # slider
---@param value number # value
function GameAPI.set_slider_cur_percent(role, comp_id, value) end

--Asynchronous: Get the control width
---@param comp_id string # UI control
---@return integer # width
function GameAPI.get_ui_comp_width(comp_id) end

--[Asynchronous] Get control height
---@param comp_id string # UI control
---@return integer # height
function GameAPI.get_ui_comp_height(comp_id) end

--Set whether the ui button enables polymorphism
---@param role py.Role # Player
---@param comp_name string # Control name
---@param is_open boolean # Enable or not
function GameAPI.set_ui_comp_bar_status(role, comp_name, is_open) end

--Set UI control model focus
---@param player py.Role # Player
---@param comp_name string # UI control
---@param x number # x
---@param y number # y
---@param z number # z
function GameAPI.set_ui_model_focus_pos(player, comp_name, x, y, z) end

--Gets the child control of the ui control
---@param role py.Role # Player
---@param uid string # Control uid
---@return py.List # Child control uid
function GameAPI.get_ui_comp_children(role, uid) end

--Gets the child control of the ui control
---@param role py.Role # Player
---@param uid string # Control uid
---@return py.List # Child control uid
function GameAPI.get_ui_comp_children_no_check(role, uid) end

--Gets the name of the ui control
---@param role py.Role # Player
---@param comp_name string # Control uid
---@return string # Control name
function GameAPI.get_ui_comp_name(role, comp_name) end

--Unbind bound controls
---@param role py.Role # Player
---@param comp_name string # Control uid
function GameAPI.unbind_ui_comp(role, comp_name) end

--Bind a unit property or global variable to a property of a player interface control
---@param role py.Role # Player
---@param ui_comp string # Control uid
---@param ui_comp_attr string # Control property field
---@param attr_or_var string # Attribute name
---@param precision? integer # Preserve decimal precision
function GameAPI.set_ui_comp_bind_attr(role, ui_comp, ui_comp_attr, attr_or_var, precision) end

--Bind a unit property or global variable to a property of a player interface control
---@param role py.Role # Player
---@param ui_comp string # Control uid
---@param ui_comp_attr string # Control property field
---@param attr_or_var string # Attribute name
---@param precision? integer # Preserve decimal precision
function GameAPI.set_ui_comp_bind_var(role, ui_comp, ui_comp_attr, attr_or_var, precision) end

--Unbind interface control properties
---@param role py.Role # Player
---@param ui_comp string # Control uid
---@param ui_comp_attr string # Control property field
function GameAPI.ui_comp_unbind(role, ui_comp, ui_comp_attr) end

--Interface control properties bind to specified units
---@param role py.Role # Player
---@param ui_comp string # Control uid
---@param unit py.Unit # unit
function GameAPI.ui_comp_bind_unit(role, ui_comp, unit) end

--Interface control properties are dynamically bound to the master unit
---@param role py.Role # Player
---@param ui_comp string # Control uid
function GameAPI.ui_comp_bind_ctrl_unit(role, ui_comp) end

--Gets the parent of an interface control
---@param role py.Role # Player
---@param comp_uid string # Interface control
---@return string # Parent control
function GameAPI.get_ui_comp_parent(role, comp_uid) end

--Bind player properties to the properties of the player interface control
---@param role py.Role # Player
---@param ui_comp string # Control uid
---@param ui_comp_attr string # Control property field
---@param bind_role py.Role # Player
---@param attr_or_var string # Player attribute key
---@param precision? integer # Preserve decimal precision
function GameAPI.set_ui_comp_bind_player_prop(role, ui_comp, ui_comp_attr, bind_role, attr_or_var, precision) end

--Sets the control text alignment
---@param role py.Role # Player
---@param comp_name string # Control name
---@param align_type integer # Alignment mode
function GameAPI.set_ui_comp_align(role, comp_name, align_type) end

--Register interface controls to play specified action callbacks
---@param role py.Role # Player
---@param uid string # Control uid
---@param fx_id integer # Control dynamic project id
---@param ani_name string # nomenclature
---@param frame integer # Number of playback action callback frames
---@param handler string # Callback handle
function GameAPI.register_ui_comp_fx_cb(role, uid, fx_id, ani_name, frame, handler) end

--Creating an Interface Module
---@param role py.Role # Player
---@param prefab_id string # Default uid
---@param comp_name string # Parent control
---@return string # Control uid
function GameAPI.create_ui_prefab_instance(role, prefab_id, comp_name) end

--Delete interface controls
---@param role py.Role # Player
---@param comp_name string # Control uid
function GameAPI.del_ui_comp(role, comp_name) end

--Enable font size following content auto-adaptation
---@param role py.Role # Player
---@param comp_name string # Control uid
---@param is_open boolean # On/off
function GameAPI.set_ui_comp_text_adaptive(role, comp_name, is_open) end

--Bind the properties of the skill cd to the player interface control
---@param role py.Role # Player
---@param ui_comp string # Control uid
---@param ui_comp_attr string # Control property field
---@param ability py.Ability # Skill entity object
---@param is_smooth? boolean # Whether smooth or not
---@param decimal_digits? integer # Decimal place
function GameAPI.set_ui_comp_bind_ability_cd(role, ui_comp, ui_comp_attr, ability, is_smooth, decimal_digits) end

--Bind the Magic Effect cd to the properties of the player interface control
---@param role py.Role # Player
---@param ui_comp string # Control uid
---@param ui_comp_attr string # Control property field
---@param modifier py.ModifierEntity # Skill entity object
function GameAPI.set_ui_comp_bind_modifier_cd(role, ui_comp, ui_comp_attr, modifier) end

--Enable or disable the send chat function
---@param role py.Role # Player
---@param ui_comp string # Control uid
---@param enabled boolean # Switch
function GameAPI.set_chat_send_enabled(role, ui_comp, enabled) end

--Show/Do not show player chat
---@param role py.Role # Player
---@param ui_comp string # Control uid
---@param chat_role py.Role # Player
---@param is_show boolean # Switch
function GameAPI.set_player_chat_show(role, ui_comp, chat_role, is_show) end

--Clear chat
---@param role py.Role # Player
---@param ui_comp string # Control uid
function GameAPI.clear_player_chat_panel(role, ui_comp) end

--Send a chat to the player
---@param role py.Role # Player
---@param ui_comp string # Control uid
---@param target_role py.Role # Player
---@param context string # content
function GameAPI.send_chat_to_role(role, ui_comp, target_role, context) end

--Delete the interface prefabricated instance
---@param ui_prefab_ins string # Control name
function GameAPI.del_ui_prefab(ui_prefab_ins) end

--[Asynchronous] Get player controls implicit
---@param role py.Role # Player
---@param comp_name string # Control uid
---@return boolean # Show or not
function GameAPI.get_ui_comp_visible(role, comp_name) end

--Set up the player's sound master unit
---@param role py.Role # Player
---@param unit py.Unit # unit
function GameAPI.set_role_micro_unit(role, unit) end

--Turn off nearby voice chat for [player]
---@param role py.Role # Player
function GameAPI.close_role_micro_unit(role) end

--Set [Player is] peer voice chat listening switch to [Boolean]
---@param role py.Role # Player
---@param is_open boolean # Switch
function GameAPI.set_role_camp_sound_switch(role, is_open) end

--Set [Player is] peer voice chat speech switch to [Boolean]
---@param role py.Role # Player
---@param is_open boolean # Switch
function GameAPI.set_role_camp_micro_switch(role, is_open) end

--Set [Player is] nearby Voice chat speech switch to [Boolean]
---@param role py.Role # Player
---@param is_open boolean # Switch
function GameAPI.set_nearby_micro_switch(role, is_open) end

--Set [Player is] nearby voice chat listening switch to [Boolean]
---@param role py.Role # Player
---@param is_open boolean # Switch
function GameAPI.set_nearby_sound_switch(role, is_open) end

--Set the voice chat listening switch for all players to Boolean.
---@param role py.Role # Player
---@param is_open boolean # Switch
function GameAPI.set_role_all_sound_switch(role, is_open) end

--Set the voice chat talk switch for all players to Boolean.
---@param role py.Role # Player
---@param is_open boolean # Switch
function GameAPI.set_role_all_micro_switch(role, is_open) end

--Set the channel of the chat control to Allies or owners
---@param role py.Role # Player
---@param comp_name string # Control uid
---@param is_ally boolean # Alliance or not
function GameAPI.set_ui_comp_chat_channel(role, comp_name, is_ally) end

--Set the interface control anchor
---@param role py.Role # Player
---@param comp_name string # Control uid
---@param x number # x
---@param y number # y
function GameAPI.set_ui_comp_anchor(role, comp_name, x, y) end

--Set the nine palace switch of the interface control
---@param role py.Role # Player
---@param comp_name string # Control uid
---@param switch boolean # Switch
function GameAPI.set_ui_comp_scale_9_enable(role, comp_name, switch) end

--Set the nine palace value of the interface control
---@param role py.Role # Player
---@param comp_name string # Control uid
---@param x_left integer # x
---@param x_right integer # y
---@param y_top integer # width
---@param y_bottom integer # height
function GameAPI.set_ui_comp_cap_insets(role, comp_name, x_left, x_right, y_top, y_bottom) end

--Set the ui control binding formula
---@param role py.Role # Player
---@param comp_name string # Control name
---@param format_str string # formula
function GameAPI.set_ui_comp_bind_format(role, comp_name, format_str) end

--Set the list to scroll to the percentage position
---@param role py.Role # Player
---@param comp_name string # Control uid
---@param percent number # percent
function GameAPI.set_list_view_percent(role, comp_name, percent) end

--Get an instance of the player is interface module
---@param role py.Role # Player
---@param uid string # Interface module instance uid
---@return py.UIPrefabIns # Interface module instance
function GameAPI.get_ui_prefab_ins(role, uid) end

--Gets the interface module instance to which the interface control belongs (if so)
---@param role py.Role # Player
---@param comp_name string # Control uid
---@return py.UIPrefabIns # Interface precast example
function GameAPI.get_ui_comp_prefab(role, comp_name) end

--Set the font size to follow the content adaptive minimum (need to reset the text to take effect)
---@param role py.Role # Player
---@param min_value integer # Minimum value
function GameAPI.set_ui_comp_text_adaptive_min_size(role, min_value) end

--Get ui controls via prefabricated instance + path
---@param prefab_ins py.UIPrefabIns # prefabricate
---@param path string # path
---@return string # Control uid
function GameAPI.get_ui_prefab_child_by_path(prefab_ins, path) end

--Get the text of the player input box
---@param role py.Role # Player
---@param comp_name string # Control uid
---@return string # Text content
function GameAPI.get_input_field_content(role, comp_name) end

--Set animation movement
---@param role py.Role # Player
---@param comp_name string # Control uid
---@param start_x number # Start x
---@param start_y number # Start y
---@param end_x number # End x
---@param end_y number # End y
---@param duration number # duration
---@param ease_type? integer # Curve type
function GameAPI.set_ui_comp_anim_pos(role, comp_name, start_x, start_y, end_x, end_y, duration, ease_type) end

--Set animation transparency
---@param role py.Role # Player
---@param comp_name string # Control uid
---@param start_alpha number # Start alpha
---@param end_alpha number # End alpha
---@param duration number # duration
---@param ease_type? integer # Curve type
function GameAPI.set_ui_comp_anim_opacity(role, comp_name, start_alpha, end_alpha, duration, ease_type) end

--Set animation scaling
---@param role py.Role # Player
---@param comp_name string # Control uid
---@param start_x number # Start x
---@param start_y number # Start y
---@param end_x number # End x
---@param end_y number # End y
---@param duration number # duration
---@param ease_type? integer # Curve type
function GameAPI.set_ui_comp_anim_scale(role, comp_name, start_x, start_y, end_x, end_y, duration, ease_type) end

--Set animation rotation
---@param role py.Role # Player
---@param comp_name string # Control uid
---@param start_rotation number # Start spinning
---@param end_rotation number # End rotation
---@param duration number # duration
---@param ease_type? integer # Curve type
function GameAPI.set_ui_comp_anim_rotate(role, comp_name, start_rotation, end_rotation, duration, ease_type) end

--Create new unit objects
---@param old_entity_no py.UnitKey # Unit knitting
---@return py.UnitKey # Unit object knitting key
function GameAPI.create_unit_editor_data(old_entity_no) end

--Set the focal unit of the camera is perspective rays
---@param role py.Role # Owned player
---@param unit py.Unit # unit
function GameAPI.set_camera_perspective_ray_unit(role, unit) end

--create_spine
---@param ientity py.Unit # ientity
---@param spine string # spine
---@param vertical? boolean # vertical
---@param rate? number # rate
function GameAPI.create_spine(ientity, spine, vertical, rate) end

--Unit attribute m to cm
---@param attr string # Attribute name
---@param value py.Fixed # Attribute value
---@return py.Fixed # Attribute value
function GameAPI.convert_unit_attr_m2cm(attr, value) end

--Create new skill kits
---@param old_entity_no py.AbilityKey # Skill compilation
---@return py.AbilityKey # Skill compilation
function GameAPI.create_ability_editor_data(old_entity_no) end

--Create new projectile objects
---@param old_entity_no py.ProjectileKey # Throw objects and weave them
---@return py.ProjectileKey # Throw objects and weave them
function GameAPI.create_projectile_editor_data(old_entity_no) end

--Create new destructible objects
---@param old_entity_no py.DestructibleKey # Destructible stuff
---@return py.DestructibleKey # Destructible stuff
function GameAPI.create_destructible_editor_data(old_entity_no) end

--Gets the compilation data for the specified object type
---@param data_type string # Object type
---@param key integer # Braid key
---@return py.Dict # Object compilation data
function GameAPI.api_get_editor_type_data(data_type, key) end

--Sets the object data for the specified object type
---@param data_type string # Object type
---@param key integer # Braid key
---@param data py.Dict # Object compilation data
function GameAPI.api_set_editor_type_data(data_type, key, data) end

--Gets the rigid body to which the COLLIDER belongs
---@param collider py.Collider # Collider
---@return py.RigidBody # Body
function GameAPI.api_get_collider_body(collider) end

--Sets the Boolean type property of the collider
---@param collider py.RigidBody # Rigid body
---@param attr_name string # Boolean type attribute
---@param value py.Fixed # value
function GameAPI.api_set_collider_bool_attr(collider, attr_name, value) end

--Gets the Boolean type property of the collider
---@param collider py.RigidBody # Rigid body
---@param attr_name string # Boolean type attribute
function GameAPI.api_get_collider_bool_attr(collider, attr_name) end

--Sets the real type property of the collider
---@param collider py.RigidBody # Rigid body
---@param attr_name string # Real type attribute
---@param value boolean # value
function GameAPI.api_set_collider_float_attr(collider, attr_name, value) end

--Whether the collider is own collision class has a specified type
---@param collider py.Collider # collider
---@param mask py.Fixed # mask
---@return boolean # Boolean value
function GameAPI.api_is_collider_collision_category(collider, mask) end

--Whether the target collision class of the collider has a specified type
---@param collider py.Collider # collider
---@param mask py.Fixed # mask
---@return boolean # Boolean value
function GameAPI.api_is_collider_collide_with_mask(collider, mask) end

--Whether the collider is own collision class has players
---@param collider py.Collider # collider
---@return boolean # Boolean value
function GameAPI.api_is_collider_collision_category_player(collider) end

--Whether the collider is own collision class has ground
---@param collider py.Collider # collider
---@return boolean # Boolean value
function GameAPI.api_is_collider_collision_category_floor(collider) end

--Obtains the collider is own collision class
---@param collider py.Collider # collider
---@return integer # mask
function GameAPI.api_get_collider_collision_category(collider) end

--Gets the target collision class of the collider
---@param collider py.Collider # collider
---@return integer # mask
function GameAPI.api_get_collider_collide_with_mask(collider) end

--Sets the collider is own collision class
---@param collider py.Collider # collider
---@param mask integer # mask
function GameAPI.api_set_collider_collision_category(collider, mask) end

--Gets the target collision class of the collider
---@param collider py.Collider # collider
---@param mask integer # mask
function GameAPI.api_set_collider_collide_with_mask(collider, mask) end

--Get joint based on jid
---@param jid integer # joint ID
---@return py.Joint # Joint
function GameAPI.api_get_joint_by_bid(jid) end

--Create fixed joints
---@param pos py.FVector3 # Create location
---@param body_1 py.RigidBody # Rigid body
---@param body_2 py.RigidBody # Rigid body
---@param enable_collision? boolean # Collision detection
---@return py.RigidBody # Body
function GameAPI.api_create_fixed_joint(pos, body_1, body_2, enable_collision) end

--Destruction joint
---@param joint py.Joint # articulation
function GameAPI.api_destroy_joint(joint) end

--Obtain logical physical components based on their ids
---@param id integer # Physical component id
---@return py.PhysicsEntity # PhysicsEntity
function GameAPI.api_get_physics_entity_by_id(id) end

--Obtain the physical component based on its id
---@param comp_id integer # joint ID
---@return py.PhysicsObject # PhysicsObject
function GameAPI.api_get_physics_object_by_id(comp_id) end

--Gets the rigidbody in the logical physical component by name
---@param entity py.PhysicsEntity # Physical component
---@param name string # name
---@return py.RigidBody # RigidBody
function GameAPI.api_get_rigid_body_in_physics_entity(entity, name) end

--Gets the location of a unit or physical component
---@param unit py.Actor # Unit or physical component
---@return py.FVector3 # Position
function GameAPI.api_get_unit_or_physics_entity_pos(unit) end

--Radiographic inspection
---@param start_point py.FVector3 # Starting point
---@param end_point py.FVector3 # End point
---@param query_filter? py.PhysicsFilter # filter
---@return py.RigidBodyGroup # Whether there is overlap
function GameAPI.api_physics_raycast(start_point, end_point, query_filter) end

--X-ray detection of the first collision point is obtained
---@param start_point py.FVector3 # Starting point
---@param end_point py.FVector3 # End point
---@param query_filter? py.PhysicsFilter # filter
---@return py.FVector3 # Impact point
function GameAPI.api_get_physics_raycast_first_point(start_point, end_point, query_filter) end

--Set physical component visibility (and whether it is active)
---@param physics_object_id py.Actor # Physical component
---@param is_visible boolean # Visible or not
function GameAPI.api_set_physics_object_activated_and_visible(physics_object_id, is_visible) end

--Set logical physical component visibility (and whether it is in active state)
---@param entity py.Actor # Physical component
---@param is_visible boolean # Visible or not
function GameAPI.api_set_physics_entity_activated_and_visible(entity, is_visible) end

--Whether the unit/logical physical components overlap
---@param entity_1 py.Actor # Unit/Logical physical component
---@param entity_2 py.Actor # Unit/Logical physical component
---@return boolean # Whether there is overlap
function GameAPI.api_check_physics_is_overlapping(entity_1, entity_2) end

--Unit/logical physical components collide with each other
---@param entity_1 py.Actor # Unit/Logical physical component
---@param entity_2 py.Actor # Unit/Logical physical component
---@return boolean # Whether there is overlap
function GameAPI.api_check_physics_is_contacting(entity_1, entity_2) end

--Creating Physical Components
---@param physics_object_id py.PhysicsObjectKey # Physical component type
---@param translation py.FVector3 # position
---@param direction py.FVector3 # orientation
---@return py.PhysicsObject # Physical component
function GameAPI.api_create_physics_object(physics_object_id, translation, direction) end

--Create logical physical components
---@param physics_entity_id py.PhysicsObjectKey # Physical component type
---@param translation py.FVector3 # position
---@param direction py.FVector3 # orientation
---@param scale? py.Fixed # Zoom
function GameAPI.api_create_physics_entity(physics_entity_id, translation, direction, scale) end

--Deleting a physical component
---@param physics_object_id py.Actor # Logic-physical component
function GameAPI.api_del_physics_object(physics_object_id) end

--Example Delete logical physical components
---@param physics_entity py.Actor # Logic-physical component
function GameAPI.api_del_physics_entity(physics_entity) end

--Whether the logical physical component exists
---@param entity? py.PhysicsEntity # Logic-physical component
---@return boolean # Boolean value
function GameAPI.api_physics_entity_is_exist(entity) end

--The model of the specified rigid body in the logical physical component plays an animation
---@param entity py.PhysicsEntity # Physical component
---@param body py.RigidBody # Rigid body
---@param anim_name string # Animation name
---@param loop? boolean # Cyclic or not
---@param play_speed? py.Fixed # speed
function GameAPI.api_physics_play_animation(entity, body, anim_name, loop, play_speed) end

--Gets the state of the logical physical component
---@param entity py.PhysicsEntity # Physical component
---@return py.PhysicsEntityState # status
function GameAPI.api_get_physics_entity_state(entity) end

--Set the status of logical physical components
---@param entity py.PhysicsEntity # Physical component
---@param state py.PhysicsEntityState # status
function GameAPI.api_set_entity_state(entity, state) end

--Set the activation status of the logical physical component
---@param entity py.PhysicsEntity # Physical component
---@param is_active boolean # Active state
---@param visible? boolean # visibility
function GameAPI.api_set_entity_active(entity, is_active, visible) end

--Check whether the logical physical component is active
---@param entity py.PhysicsEntity # Physical component
---@return boolean # Active state
function GameAPI.api_is_physics_entity_active(entity) end

--Check whether the logical physical component is disabled
---@param entity py.PhysicsEntity # Physical component
---@return boolean # Off state
function GameAPI.api_is_physics_entity_deactive(entity) end

--Get logical physical components based on id
---@param entity_id py.Fixed # id
---@return py.PhysicsEntity # Logic-physical component
function GameAPI.api_get_physics_entity(entity_id) end

--Set gravity acceleration
---@param gravity py.FVector3 # Acceleration of gravity
function GameAPI.api_set_gravity(gravity) end

--Create effects to logical physical components
---@param entity py.PhysicsEntity # Logic-physical component
---@param body_name string # Rigid body name
---@param sfx_id py.Fixed # Special effect ID
---@param b_follow_rotate? boolean # Follow rotation
---@param b_follow_scale? boolean # Follow scale or not
---@param position? py.Vector3 # skew
---@param scale? py.Fixed # Zoom
---@param rotation? py.Vector3 # rotate
---@param duration? py.Fixed # duration
---@param immediately? boolean # Whether to remove after playing
---@return py.Sfx # VFX
function GameAPI.api_create_sfx_on_rigid(entity, body_name, sfx_id, b_follow_rotate, b_follow_scale, position, scale, rotation, duration, immediately) end

--Gets the logical physical component type
---@param entity py.PhysicsEntity # Logic-physical component
---@return integer # type
function GameAPI.api_get_physics_entity_type(entity) end

--Destroy logical physical components
---@param entity py.PhysicsEntity # Logic-physical component
function GameAPI.api_destroy_physics_entity(entity) end

--Set logical physical component rotation (Euler Angle)
---@param entity py.PhysicsEntity # Logic-physical component
---@param rotation py.FRotation # Euler Angle
function GameAPI.api_physics_entity_set_orientation(entity, rotation) end

--Whether the logical physical component has a specified tag
---@param entity py.PhysicsEntity # Logic-physical component
---@param tag string # tag
---@return boolean # Boolean value
function GameAPI.api_physics_entity_has_tag(entity, tag) end

--Add a tag to the logical physical component
---@param entity py.PhysicsEntity # Logic-physical component
---@param tag string # tag
function GameAPI.api_physics_entity_add_tag(entity, tag) end

--The tag of the logical physical component is deleted
---@param entity py.PhysicsEntity # Logic-physical component
---@param tag string # tag
function GameAPI.api_physics_entity_remove_tag(entity, tag) end

--World coordinates Convert screen coordinates
---@param world_pos py.Vector3 # World coordinates
function GameAPI.api_world_pos_to_camera_pos(world_pos) end

--World coordinates convert screen edge coordinates
---@param world_pos py.Vector3 # World coordinates
---@param delta_dis py.Fixed # Fixed point number
function GameAPI.api_world_pos_to_screen_edge_pos(world_pos, delta_dis) end

--Create a physical filter
---@param collision_category integer # Self-collision tag
---@param collide_with_mask integer # Target collision tag
---@param ignore_trigger boolean # Whether to ignore the trigger
---@param ignore_non_trigger boolean # Whether to ignore non-triggers
---@param ignore_static_rb boolean # Whether to ignore static rigid bodies
---@param ignore_dynamic_rb boolean # Whether to ignore dynamic rigid bodies
---@param ignore_kinematic_rb boolean # Whether to ignore kinematic rigid bodies
---@return py.PhysicsFilter # filter
function GameAPI.api_create_physics_filter(collision_category, collide_with_mask, ignore_trigger, ignore_non_trigger, ignore_static_rb, ignore_dynamic_rb, ignore_kinematic_rb) end

--Gets the rigidBody of the unit
---@param unit py.Unit # unit
---@return py.RigidBody # RigidBody
function GameAPI.api_get_rigid_body_in_unit(unit) end

--Set the physical control unit
---@param unit py.Unit # unit
---@param ragdoll_collide? boolean # Ragdoll whether to collide
function GameAPI.set_physics_ctrl_unit(unit, ragdoll_collide) end

--Obtain the physical master unit
---@param role py.Role # Player
---@return py.Unit # unit
function GameAPI.get_physics_ctrl_unit(role) end

--Set the master unit visibility visual
---@param unit py.Unit # unit
---@param is_visible boolean # visibility
---@param only_self? boolean # self-only
---@param only_self_friend? boolean # Take effect for yourself and friendly forces only
---@param only_enemy? boolean # Only against enemy forces
function GameAPI.api_set_cc_visibility(unit, is_visible, only_self, only_self_friend, only_enemy) end

--Create unit
---@param key py.UnitKey # Unit number
---@param location py.FVector3 # position
---@param direction py.FVector3 # orientation
---@param role_or_unit py.Role # Owned player
---@return py.Unit # The created unit
function GameAPI.create_unit_at_vector3(key, location, direction, role_or_unit) end

--The unit is transmitted to the specified coordinates
---@param unit py.Unit # unit
---@param position py.FVector3 # Target coordinate
---@param clear_speed boolean # Clear or not speed
function GameAPI.api_unit_transmit_3d(unit, position, clear_speed) end

--Reactivation unit
---@param unit py.Unit # unit
---@param position py.FVector3 # Reactivation position
---@param clear_speed boolean # Clearance rate
function GameAPI.api_revive_unit_3d(unit, position, clear_speed) end

--Obtain the name of the state machine node where the role resides
---@param unit py.Unit # unit
---@return string # Name of a state machine node
function GameAPI.api_get_character_state_name(unit) end

--Let the unit lookat the lens
---@param unit py.Unit # unit
function GameAPI.cc_look_at_camera(unit) end

--Make units lookat target units
---@param unit py.Unit # unit
---@param other_unit py.Unit # unit
function GameAPI.cc_look_at_other_unit(unit, other_unit) end

--Cancel unit lookat
---@param unit py.Unit # unit
function GameAPI.cc_cancel_look_at(unit) end

--Gets random units around units
---@param unit py.Unit # unit
---@param radius py.Fixed # distance
---@return py.Unit # Random unit
function GameAPI.cc_get_random_unit_around(unit, radius) end

--Animation state machine state judgment
---@param state1 py.CcAsmState # Animator state
---@param state2 py.CcAsmState # Animator state
---@return boolean # Whether it is equal or not
function GameAPI.api_check_asm_state(state1, state2) end

--Get the nearest grab unit in the unit crash box (for testing)
---@param unit py.Unit # unit
---@return py.Unit # The closest unit
function GameAPI.api_get_grab_character(unit) end

--Grasping skill
---@param source py.Unit # Casting unit
---@param target py.Unit # Target unit
function GameAPI.api_grab(source, target) end

--Judge - Whether you can cast the Smash Ability
---@param source py.Unit # Casting unit
---@param target py.Unit # Target unit
---@param bind string # Dot name
---@return boolean # Whether it can be cast
function GameAPI.check_catch_other_character(source, target, bind) end

--Thrashing skill
---@param source py.Unit # Casting unit
---@param target py.Unit # Target unit
---@param state integer # pummelling
---@param duration py.Fixed # duration
---@param bind string # Dot name
function GameAPI.api_physics_catch(source, target, state, duration, bind) end

--Remove hand adhesion
---@param unit py.Unit # unit
---@param handtype py.CcHandID # Left/right hand
function GameAPI.api_disconnect_hand(unit, handtype) end

--Remove the adhesion of your hands
---@param unit py.Unit # unit
function GameAPI.api_disconnect_both_hands(unit) end

--Check the hand for adhesion
---@param unit py.Unit # unit
---@param handtype py.CcHandID # Left/right hand
---@return boolean # Adhesion or not
function GameAPI.api_check_hand_connection(unit, handtype) end

--The main control role performs predefined actions
---@param unit py.Unit # CHARACTERS
---@param cc_action py.CcActionID # Predefined action ID
---@param cc_hand? py.CcHandID # Left/right hand
function GameAPI.cc_do_predefined_action(unit, cc_action, cc_hand) end

--Reload the character animation state
---@param unit py.Unit # CHARACTERS
---@param anim_status py.CcAnimationMachineStatus # Name of the animator node
---@param anim_name string # Animation name
function GameAPI.api_override_anim_status(unit, anim_status, anim_name) end

--The judging unit has limited upper body movement
---@param unit py.Unit # unit
---@return boolean # Restricted or not
function GameAPI.is_upper_body_limited(unit) end

--Throwing skill
---@param unit py.Unit # Casting unit
function GameAPI.api_physics_throw(unit) end

--Pick up goods
---@param unit py.Unit # Casting unit
function GameAPI.api_physics_pick_up(unit) end

--Pick up specified items
---@param unit py.Unit # unit
---@param item py.Unit # item
function GameAPI.api_physics_pick_up_item(unit, item) end

--Units discard physical items
---@param unit py.Unit # unit
function GameAPI.api_physics_drop(unit) end

--Apply a fall state
---@param unit py.Unit # Apply target
---@param duration py.Fixed # duration
function GameAPI.api_physics_hit_down_unit(unit, duration) end

--Get the snatch unit
---@param unit py.Unit # unit
function GameAPI.api_get_grab_unit(unit) end

--Check whether it is in snatch mode
---@param unit py.Unit # unit
---@return boolean # Whether it is in snatch mode
function GameAPI.api_check_grab_state(unit) end

--Get hand-held items
---@param unit py.Unit # unit
function GameAPI.api_get_pick_item(unit) end

--Check for hand-held items
---@param unit py.Unit # unit
---@return boolean # Whether to hold objects
function GameAPI.api_check_physics_unit_pick_item_exist(unit) end

--Increase knockdown value
---@param unit py.Unit # unit
---@param down_value py.Fixed # K.o. Point
function GameAPI.api_add_unit_down_value(unit, down_value) end

--Start using hand-held items
---@param unit py.Unit # unit
function GameAPI.api_character_try_begin_use(unit) end

--End the use of handheld props
---@param unit py.Unit # unit
function GameAPI.api_character_try_end_use(unit) end

--Set the animation state machine to a physical state
---@param unit py.Unit # unit
---@param duration py.Fixed # duration
function GameAPI.api_set_entity_anim_state_machine_physics(unit, duration) end

--Gets character movement speed
---@param unit py.Unit # unit
---@return py.FVector3 # speed
function GameAPI.api_physics_unit_get_move_speed(unit) end

--Set unit rotation (Euler Angle)
---@param unit py.Unit # unit
---@param rotation py.FRotation # X
function GameAPI.api_physics_unit_set_orientation(unit, rotation) end

--The main control role makes predefined expressions
---@param unit py.Unit # CHARACTERS
---@param cc_emo py.CcEmo # Predefined expression ID
---@param duration py.Fixed # Expression duration
function GameAPI.cc_change_emo(unit, cc_emo, duration) end

--Unit switching state machine
---@param unit py.Unit # unit
---@param state_name string # State machine name
function GameAPI.api_asm_jump_to_state(unit, state_name) end

--Set Role squash
---@param unit py.Unit # CHARACTERS
---@param squash py.Fixed # squash
function GameAPI.api_set_unit_squash(unit, squash) end

--Set unit movement
---@param unit py.Unit # unit
---@param move_direction py.MoveDirection # direction
function GameAPI.api_set_unit_move(unit, move_direction) end

--Set the unit to stop moving
---@param unit py.Unit # unit
---@param move_direction py.MoveDirection # direction
function GameAPI.api_set_unit_stop_move(unit, move_direction) end

--Notification change key
---@param enable boolean # Whether to use
function GameAPI.api_notify_custom_key(enable) end

--Set unit jump
---@param unit py.Unit # unit
function GameAPI.api_set_unit_jump(unit) end

--Set unit run (character configured running speed)
---@param unit py.Unit # unit
function GameAPI.api_set_unit_run(unit) end

--Set unit walk (character configured walk speed)
---@param unit py.Unit # unit
function GameAPI.api_set_unit_walk(unit) end

--Set unit speed
---@param unit py.Unit # unit
---@param speed py.Fixed # speed
function GameAPI.api_set_unit_speed(unit, speed) end

--Set voice command
---@param is_on boolean # Enable or not
function GameAPI.api_set_audio_cc(is_on) end

--Get the rigidBody according to the bid
---@param bid integer # body ID
---@return py.RigidBody # RigidBody
function GameAPI.api_get_rigid_body_by_bid(bid) end

--Rigid body adds spherical collider
---@param body py.RigidBody # Rigid body
---@param pos py.FVector3 # pos
---@param radius py.Fixed # radius
---@param euler_angle? py.FVector3 # euler_angle
---@param is_trigger? boolean # is_trigger
function GameAPI.api_add_sphere_collider(body, pos, radius, euler_angle, is_trigger) end

--Gets the rigidbody in the physical component by name
---@param physics_object py.PhysicsEntity # Physical component
---@param name string # name
---@return py.RigidBody # RigidBody
function GameAPI.api_get_rigid_body_in_physics_object(physics_object, name) end

--Gets the unit to which the rigid body belongs
---@param body py.RigidBody # Rigid body
---@return py.Unit # Owner
function GameAPI.api_get_rigid_body_owner_unit(body) end

--Gets the logical physical component to which the rigid body belongs
---@param body py.RigidBody # Rigid body
---@return py.PhysicsEntity # Owner
function GameAPI.api_get_rigid_body_owner_physics_entity(body) end

--Apply a force to a rigid body
---@param body py.RigidBody # Rigid body
---@param force py.Fixed # vigour
---@param direction py.FVector3 # direction
---@return py.RigidBody # RigidBody
function GameAPI.api_add_force_to_rigid_body(body, force, direction) end

--Add speed to rigid body
---@param body py.RigidBody # Rigid body
---@param speed py.Fixed # Magnitude of velocity
---@param direction py.FVector3 # Direction of velocity
---@return py.RigidBody # RigidBody
function GameAPI.api_add_velocity_to_rigid_body(body, speed, direction) end

--Gets the position of the rigid body
---@param body py.RigidBody # Rigid body
---@return py.FVector3 # Position
function GameAPI.api_get_rigid_body_pos(body) end

--Sets the position of the rigid body
---@param body py.RigidBody # Rigid body
---@param pos py.FVector3 # pos
function GameAPI.api_set_rigid_body_pos(body, pos) end

--Sets the orientation of the rigid body
---@param body py.RigidBody # Rigid body
---@param direction py.FRotation # direction
function GameAPI.api_set_rigid_body_direction(body, direction) end

--Sets the rigid body type of the rigid body
---@param body py.RigidBody # Rigid body
---@param body_type string # Rigid body type
function GameAPI.api_set_rigid_body_type(body, body_type) end

--Sets the Boolean type property of a rigid body
---@param body py.RigidBody # Rigid body
---@param attr_name string # Boolean type attribute
---@param value boolean # value
function GameAPI.api_set_rigid_body_bool_attr(body, attr_name, value) end

--Set rigid body validity
---@param body py.RigidBody # Rigid body
---@param is_active boolean # Whether it is valid or not
function GameAPI.api_set_rigidbody_active(body, is_active) end

--Set rigid model visibility
---@param body py.PhysicsEntity # Physical component
---@param visible py.RigidBody # Rigid body
function GameAPI.api_set_rigidbody_visible(body, visible) end

--Gets rigid body validity
---@param body py.RigidBody # Rigid body
---@return boolean # Whether it is valid or not
function GameAPI.api_get_rigidbody_active(body) end

--Set the rigid body speed
---@param body py.RigidBody # Rigid body
---@param speed py.Fixed # Velocity magnitude
---@param direction py.FVector3 # Velocity direction
function GameAPI.api_set_rigidbody_velocity(body, speed, direction) end

--Obtain rigid body velocity
---@param body py.RigidBody # Rigid body
---@return py.FVector3 # speed
function GameAPI.api_get_rigidbody_velocity(body) end

--Set the rigid body angular velocity
---@param body py.RigidBody # Rigid body
---@param angular_velocity py.FVector3 # Angular velocity
function GameAPI.api_set_rigidbody_angular_velocity(body, angular_velocity) end

--Set the rigid body angular velocity
---@param body py.RigidBody # Rigid body
function GameAPI.api_get_rigidbody_angular_velocity(body) end

--Get the rigid body orientation
---@param body py.RigidBody # Rigid body
---@return py.FVector3 # orientation
function GameAPI.api_get_rigidbody_forward(body) end

--Get a range of rigid body groups
---@param position py.FVector3 # position
---@param radius number # radius
---@param collision_category? integer # Self-collision class
---@param collide_with_mask? integer # Target collision class
---@param ignore_trigger? boolean # Ignore trigger
---@param ignore_non_trigger? boolean # Ignore non-flip-flop
---@param ignore_non_rigid? boolean # Ignore non-rigid bodies
---@param ignore_dynamic? boolean # Ignore dynamic objects
---@param ignore_kinematic? boolean # Ignoring kinematic object
---@param ignore_static? boolean # Ignore static objects
---@param ignore_logic_body? boolean # Ignore logical object
---@param ignore_non_logic_body? boolean # Ignore non-logical objects
---@return py.RigidBodyGroup # Rigid body system
function GameAPI.api_get_rigid_body_group_in_range(position, radius, collision_category, collide_with_mask, ignore_trigger, ignore_non_trigger, ignore_non_rigid, ignore_dynamic, ignore_kinematic, ignore_static, ignore_logic_body, ignore_non_logic_body) end

--Replace the rigid body model
---@param body py.RigidBody # Rigid body
---@param id py.ModelKey # Model id
function GameAPI.api_replace_rigid_body_model(body, id) end

--Restore the previous model of the rigid body
---@param body py.RigidBody # Rigid body
function GameAPI.api_restore_rigid_body_last_model(body) end

--Gets the collider with the specified name in the rigid body
---@param body py.RigidBody # Rigid body
---@param name string # Collider name
---@return py.Collider # Collider
function GameAPI.api_get_rigid_body_collider(body, name) end

--Whether a rigid body has a specified tag
---@param body py.RigidBody # Rigid body
---@param tag string # tag
---@return boolean # Boolean value
function GameAPI.api_is_rigid_has_tag(body, tag) end

--Get the rigid body mass
---@param body py.RigidBody # Rigid body
---@return py.Fixed # Quality
function GameAPI.api_rigid_body_get_mass(body) end

--Set the rigid body model scaling
---@param body py.RigidBody # Rigid body
---@param scale_x number # x zoom
---@param scale_y number # y zoom
---@param scale_z number # z zoom
function GameAPI.api_rigid_body_set_scale(body, scale_x, scale_y, scale_z) end

--The rigid body rotates on the specified axis
---@param body py.RigidBody # Rigid body
---@param axis py.Vector3 # shaft
---@param angle py.Fixed # Angle
function GameAPI.api_rigid_body_angle_axis(body, axis, angle) end

--Throw the rigid body
---@param body py.PhysicsEntity # Rigid body
---@param start py.Vector3 # Ejection point
---@param forward py.Vector3 # Throw direction
---@param length py.Fixed # Throw distance
---@param speed py.Fixed # Horizontal velocity
function GameAPI.api_throw_rigid_body(body, start, forward, length, speed) end

--Sets the velocity of the rigid body relative to the coordinate system
---@param body py.RigidBody # Rigid body
---@param speed py.Fixed # Velocity magnitude
---@param direction py.FVector3 # Velocity direction
function GameAPI.api_set_rigid_body_reference_frame_velocity(body, speed, direction) end

--Sets the relative coordinate system of the rigid body bound to the target rigid body
---@param body py.RigidBody # Rigid body
---@param target py.RigidBody # Target rigid body
function GameAPI.api_set_rigid_body_add_reference_frame(body, target) end

--Set the relative coordinate system of the rigid body to remove the target rigid body
---@param body py.RigidBody # Rigid body
---@param target py.RigidBody # Target rigid body
function GameAPI.api_set_rigid_body_remove_reference_frame(body, target) end

--Converts the local coordinates of the rigid body to the global coordinates
---@param body py.RigidBody # Rigid body
---@param local_pos py.FVector3 # local_pos
function GameAPI.api_transform_local_to_global_coords(body, local_pos) end

--Add a rigid body to a rigid body group
---@param body py.Unit # Rigid body
---@param group py.RigidBodyGroup # Rigid body system
function GameAPI.api_add_rigid_body_to_group(body, group) end

--Removes a rigid body from a rigid body group
---@param group py.UnitGroup # Rigid body system
---@param body py.Unit # Rigid body
function GameAPI.api_remove_rigid_body_in_group(group, body) end

--Deletion REACTION
---@param reaction py.Reaction # Reaction
function GameAPI.api_delete_reaction(reaction) end

--Delete REACTION Group
---@param reactions py.ReactionGroup # ReactionGroup
function GameAPI.api_delete_reaction_group(reactions) end

--Rigid bodies increase the uniform gravitational field
---@param body py.PhysicsEntity # Rigid body
---@param speed py.Fixed # Velocity magnitude
---@param position py.Vector3 # Source of force field
---@return py.Reaction # Physical Reaction
function GameAPI.api_add_uniform_gravitation_field_to_rigid_body(body, speed, position) end

--Rigid body increases wind field
---@param body py.PhysicsEntity # Rigid body
---@param speed py.Fixed # Velocity magnitude
---@param direction py.FVector3 # Velocity direction
---@return py.RigidBody # RigidBody
function GameAPI.api_add_wind_force_field_to_rigid_body(body, speed, direction) end

--Physical object ejection
---@param physics_item py.Unit # Item unit
---@param length py.Fixed # Throw distance
---@param vel py.Fixed # Horizontal velocity
---@param socket_name string # Hand tie point
function GameAPI.throw_physics_item(physics_item, length, vel, socket_name) end

--Gets the rigid body of a physical item
---@param physics_item py.Unit # Item unit
function GameAPI.get_physics_item_body_object(physics_item) end

--Delete logical physical items
---@param physics_item py.Unit # Item unit
function GameAPI.api_remove_physics_item(physics_item) end

--Logical physical item model unbind holder
---@param physics_item py.Unit # Item unit
function GameAPI.api_physics_item_viewer_detach(physics_item) end

--Gain logical physical item binding ability
---@param physics_item py.Unit # Item unit
function GameAPI.api_physics_item_get_ability(physics_item) end

--Create effects for logical physical items
---@param physics_item py.PhysicsEntity # Physical component
---@param sfx_id py.Fixed # Special effect ID
---@param position py.FVector3 # position
---@param duration? py.Fixed # duration
function GameAPI.api_physics_item_create_sfx(physics_item, sfx_id, position, duration) end

--Logical physical items play animation
---@param physics_item py.Unit # Physical component
---@param anim string # Animation name
---@param play_speed number # Playback ratio
---@param begin_t number # Start time (s)
---@param end_t number # End time (s). A positive number -1 indicates that the end is not finished
---@param loop boolean # Cyclic or not
---@param return_idle boolean # Whether to return to idle after the playback is complete
function GameAPI.api_physics_item_play_animation(physics_item, anim, play_speed, begin_t, end_t, loop, return_idle) end

--The unit throws physical components
---@param entity py.PhysicsEntity # Physical component
---@param length py.Fixed # Throw distance
---@param vel py.Fixed # Horizontal velocity
---@param socket_name string # Hand tie point
function GameAPI.throw_physics_entity(entity, length, vel, socket_name) end

--The holder unties the logic-physical component model
---@param entity py.Unit # Logic-physical component
function GameAPI.api_detach_physics_entity_viewer(entity) end

--Gets the holder of the logical physical component
---@param entity py.PhysicsEntity # Logic-physical component
---@return py.Unit # holder
function GameAPI.api_get_physics_entity_owner(entity) end

--Create effects to 3D coordinates
---@param sfx_id py.SfxKey # Special effect number
---@param position py.FVector3 # position
---@param direction? py.FVector3 # orientation
---@param scale? number # Zoom ratio
---@param duration? number # duration
---@param immediately? boolean # Whether to delete now
---@return py.Sfx # VFX
function GameAPI.create_sfx_on_point_3d(sfx_id, position, direction, scale, duration, immediately) end

--Burial point
---@param key string # key
---@param value string # value
---@param str1 string # Extra parameter 1
---@param str2 string # Extra parameter 2
---@param str3 string # Additional parameter 3
---@param str4 string # Additional parameter 4
---@param str5 string # Additional parameters 5
function GameAPI.report_info(key, value, str1, str2, str3, str4, str5) end

--Debug pause
function GameAPI.api_debug_pause() end

--LUA layer initialization parameters
---@param name string # name
---@param value string # value
---@param if_list boolean # Yes no array
---@return py.Actor # variable
function GameAPI.init_lua_var(name, value, if_list) end

--Set variables from lua
---@param func_name string # Function name
---@param actor py.Actor # actor
---@param key integer # index
---@param index string # key
---@param value string # value
function GameAPI.set_lua_var(func_name, actor, key, index, value) end

--Read variables from lua
---@param func_name string # Function name
---@param actor py.Actor # actor
---@param key string # key
---@param index? integer # index
function GameAPI.get_lua_var(func_name, actor, key, index) end

--Set the random number seed
---@param v integer # Random number seed
function GameAPI.set_random_seed(v) end

--Get random number seeds
---@return integer # Random number seed
function GameAPI.get_random_seed() end

--Create unit
---@param key py.UnitKey # Unit number
---@param pos py.FVector3 # position
---@param angle py.Fixed # orientation
---@param role_or_unit py.Role # Owned player
---@param lua_table? py.Table # User-defined configuration table
---@return py.Unit # The created unit
function GameAPI.create_unit(key, pos, angle, role_or_unit, lua_table) end

--Change the player the unit belongs to
---@param unit py.Unit # unit
---@param role py.Role # Owned player
function GameAPI.change_unit_role(unit, role) end

--Change the unit of the projectile
---@param projectile py.ProjectileEntity # projectile
---@param unit py.Unit # unit
function GameAPI.change_projectile_owner(projectile, unit) end

--Change the ability of the projectile
---@param projectile py.ProjectileEntity # projectile
---@param related_ability py.Ability # unit
function GameAPI.change_projectile_ability(projectile, related_ability) end

--Modify the player resource icon
---@param res_key py.RoleResKey # Resource name
---@param icon_id integer # Icon number
function GameAPI.change_role_res_icon(res_key, icon_id) end

--Modify the player resource icon (image type)
---@param res_key py.RoleResKey # Resource name
---@param icon_id py.Texture # icon
function GameAPI.change_role_res_icon_with_icon(res_key, icon_id) end

--Removes a unit from the control list
---@param role py.Role # Player
---@param unit py.Unit # unit
function GameAPI.remove_control_unit(role, unit) end

--Gets a list of units in the team
---@param role py.Role # Player
---@param team_id integer # Team number
function GameAPI.get_unit_ids_in_team(role, team_id) end

--Add units to the team
---@param role py.Role # Player
---@param team_id integer # Team number
---@param unit py.Unit # unit
function GameAPI.add_unit_to_team(role, team_id, unit) end

--Remove units from the party
---@param role py.Role # Player
---@param team_id integer # Team number
---@param unit py.Unit # unit
function GameAPI.remove_unit_from_team(role, team_id, unit) end

--Create illusion
---@param clone_unit py.Unit # Replication target
---@param caller_unit py.Unit # summoner
---@param role py.Role # Player
---@param pos py.FVector3 # position
---@param angle py.Fixed # orientation
---@param clone_hp_mp? boolean # Whether to inherit life and magic
function GameAPI.create_illusion(clone_unit, caller_unit, role, pos, angle, clone_hp_mp) end

--Determine if the unit is an illusion unit
---@param unit py.Unit # unit
---@return boolean # Is it an illusion?
function GameAPI.is_unit_illusion(unit) end

--Get the Phantom Summoner
---@param illusion_unit py.Unit # Phantom unit
---@return py.Unit # Call unit
function GameAPI.get_illusion_caller_unit(illusion_unit) end

--Create a projectile at the unit is mount point
---@param p_key py.ProjectileKey # Projectile number
---@param socket_unit py.Unit # Owning unit of the hanging node
---@param socket_name string # Name of the mounting contact
---@param face py.Fixed # orientation
---@param owner_unit_or_player? py.Actor # Unit or player
---@param related_ability? py.Ability # Relevance skill
---@param visibility? integer # Particle effect visibility rules
---@param duration? py.Fixed # duration
---@param is_open_duration? boolean # Whether to enable the duration
---@param immediately? boolean # Remove present now
---@param use_sys_d_destroy_way? boolean # Effects delete the way to read table or not
---@param show_in_fog? boolean # Whether visible in the fog
---@return py.ProjectileEntity # Created projectiles
function GameAPI.create_projectile_on_socket(p_key, socket_unit, socket_name, face, owner_unit_or_player, related_ability, visibility, duration, is_open_duration, immediately, use_sys_d_destroy_way, show_in_fog) end

--Create a projectile
---@param p_key py.ProjectileKey # Projectile number
---@param location py.FVector3 # position
---@param face? py.Fixed # orientation
---@param owner_unit_or_player? py.Unit # Affiliated unit
---@param related_ability? py.Ability # Relevance skill
---@param duration? py.Fixed # duration
---@param is_open_duration? boolean # Whether to enable the duration
---@param height? py.Fixed # Altitude
---@param visibility? integer # Particle effect visibility rules
---@param immediately? boolean # Remove present now
---@param use_sys_d_destroy_way? boolean # Effects delete the way to read table or not
---@return py.ProjectileEntity # Created projectiles
function GameAPI.create_projectile_in_scene(p_key, location, face, owner_unit_or_player, related_ability, duration, is_open_duration, height, visibility, immediately, use_sys_d_destroy_way) end

--Create a projectile
---@param p_key py.ProjectileKey # Projectile number
---@param location py.FVector3 # position
---@param owner_unit_or_player py.Actor # Unit or player
---@param face? py.Fixed # orientation
---@param related_ability? py.Ability # Relevance skill
---@param duration? py.Fixed # duration
---@param is_open_duration? boolean # Whether to enable the duration
---@param height? py.Fixed # Altitude
---@param visibility? integer # Particle effect visibility rules
---@param immediately? boolean # Remove present now
---@param use_sys_d_destroy_way? boolean # Effects delete the way to read table or not
---@param show_in_fog? boolean # Whether visible in the fog
---@return py.ProjectileEntity # Created projectiles
function GameAPI.create_projectile_in_scene_new(p_key, location, owner_unit_or_player, face, related_ability, duration, is_open_duration, height, visibility, immediately, use_sys_d_destroy_way, show_in_fog) end

--Add a player to a player group
---@param role py.Role # Player
---@param group py.RoleGroup # Player group
function GameAPI.add_role_to_group(role, group) end

--Delete a player from the player group
---@param role py.Role # Player
---@param group py.RoleGroup # Player group
function GameAPI.rem_role_from_group(role, group) end

--Get the unit based on the unit ID
---@param unit_id py.UnitID # Unit id
---@return py.Unit # unit
function GameAPI.get_unit_by_id(unit_id) end

--Get the effect according to the effect ID
---@param projectile_id py.ProjectileID # Special effect id
---@return py.ProjectileEntity # VFX
function GameAPI.get_projectile_by_id(projectile_id) end

--Check whether the unit is in the unit group
---@param unit py.Unit # unit
---@param group py.UnitGroup # Unit group
---@return boolean # Whether it is in the unit group
function GameAPI.judge_unit_in_group(unit, group) end

--Get Technology ICONS
---@param tech_key py.TechKey # Technology number
---@param target_level integer # Lv.
---@return py.Texture # picture
function GameAPI.api_get_tech_icon(tech_key, target_level) end

--Set global weather
---@param weather_type integer # Weather type
function GameAPI.update_global_weather(weather_type) end

--Get global weather
---@return integer # Weather type
function GameAPI.get_global_weather() end

--Turn on skill indicator
---@param role py.Role # Player
---@param ability py.Ability # skill
---@param dry_run? boolean # Whether to simulate only without casting spells
---@param ignore_unit_ids? py.UnitGroup # Ignore the id list of the unit
function GameAPI.start_skill_pointer(role, ability, dry_run, ignore_unit_ids) end

--Turn off skill indicator
---@param role py.Role # Player
---@param ability py.Ability # skill
function GameAPI.stop_skill_pointer(role, ability) end

--Turn on skill indicator
---@param role py.Role # Player
---@param ability py.Ability # skill
function GameAPI.create_preview_skill_pointer(role, ability) end

--Turn off skill indicator
---@param role py.Role # Player
function GameAPI.clear_preview_skill_pointer(role) end

--Skill type indicator
---@param ability_id py.AbilityKey # Skill ID
---@return integer # Indicator type
function GameAPI.get_ability_key_skill_pointer(ability_id) end

--Send signal
---@param role_or_role_id py.RoleID # Player ID
---@param signal_type py.SignalType # Signal type
---@param world_pos py.Point # position
---@param visible_type py.SignalVisibleType # Display type
function GameAPI.send_signal(role_or_role_id, signal_type, world_pos, visible_type) end

--Return the point light source based on its ID
---@param res_id py.LightID # Light source ID
---@return py.PointLight # Point light source
function GameAPI.get_point_light_res_by_res_id(res_id) end

--Return to the direction light source according to the direction light source ID
---@param res_id py.LightID # Light source ID
---@return py.SpotLight # Directional light source
function GameAPI.get_spot_light_res_by_res_id(res_id) end

--Create point light source to point
---@param point py.Point # point
---@param offset_y? py.Fixed # Offset height
---@return py.PointLight # Point light source
function GameAPI.create_point_light_to_point(point, offset_y) end

--Create point light source to unit tie point
---@param unit py.Unit # unit
---@param socket_name string # Hanging node
---@param offset_y? py.Fixed # Offset height
---@return py.PointLight # Point light source
function GameAPI.create_point_light_to_unit_socket(unit, socket_name, offset_y) end

--Create directional light source to point
---@param point py.Point # point
---@param pos_offset_y? py.Fixed # Departure height
---@param target? py.Actor # goal-oriented
---@param target_offset_y? py.Fixed # Offset height towards target
---@return py.SpotLight # Directional light source
function GameAPI.create_spot_light_to_point(point, pos_offset_y, target, target_offset_y) end

--Create a directional light source to the unit tie point
---@param unit py.Unit # unit
---@param socket_name string # Hanging node
---@param pos_offset_y? py.Fixed # Departure height
---@param target? py.Actor # goal-oriented
---@param target_offset_y? py.Fixed # Offset height towards target
---@return py.SpotLight # Directional light source
function GameAPI.create_spot_light_to_unit_socket(unit, socket_name, pos_offset_y, target, target_offset_y) end

--Remove light source
---@param light py.Light # illuminant
function GameAPI.remove_light(light) end

--Set the light source Float property
---@param light py.Light # illuminant
---@param attr_name string # Attribute name
---@param value py.Fixed # value
function GameAPI.set_light_float_attr_value(light, attr_name, value) end

--Gets the unit group with a fixed unit number
---@param unit_key py.UnitKey # Unit number
---@return py.UnitGroup # Unit group
function GameAPI.get_units_by_key(unit_key) end

--A random integer in a unit group
---@param units py.UnitGroup # Unit group
---@param n integer # Random number
---@return py.UnitGroup # Random group of units
function GameAPI.get_random_n_unit_in_group(units, n) end

--Unit The first unit in a group
---@param units py.UnitGroup # Unit group
---@return py.Unit # First unit
function GameAPI.get_first_unit_in_group(units) end

--Unit The last unit in a group
---@param units py.UnitGroup # Unit group
---@return py.Unit # Last unit
function GameAPI.get_last_unit_in_group(units) end

--Gets an integer number of units from the unit group based on the attribute value
---@param units py.UnitGroup # Unit group
---@param attr string # Stats
---@param rise boolean # Whether to sort in ascending order
---@param num integer # Number of units
---@return py.UnitGroup # Unit group
function GameAPI.get_unit_sort_by_attr(units, attr, rise, num) end

--Integer units from the unit group based on distance
---@param units py.UnitGroup # Unit group
---@param point py.FPoint # point
---@param rise boolean # Whether to sort in ascending order
---@param num integer # Number of units
---@return py.UnitGroup # Unit group
function GameAPI.get_unit_sort_by_position(units, point, rise, num) end

--A unit is randomly assigned to a unit group
---@param units py.UnitGroup # Unit group
---@return py.Unit # unit
function GameAPI.get_random_unit_in_unit_group(units) end

--Whether the skill type is affected by cooldown reduction
---@param ability_id py.AbilityKey # Skill type
---@return boolean # Boolean value
function GameAPI.api_get_influenced_by_cd_reduce(ability_id) end

--String property of the skill type
---@param ability_id py.AbilityKey # Skill type
---@param attr_name py.AbilityStrAttr # String attribute
---@return string # Character string
function GameAPI.get_ability_conf_str_attr(ability_id, attr_name) end

--Boolean properties of skill types
---@param ability_id py.AbilityKey # Skill type
---@param attr_name string # Boolean attribute
---@return boolean # Boolean attribute
function GameAPI.get_ability_conf_bool_attr(ability_id, attr_name) end

--The real attribute of the skill type
---@param ability_id py.AbilityKey # Skill type
---@param attr_name string # Real attribute
---@return py.Fixed # Real number
function GameAPI.get_ability_conf_float_attr(ability_id, attr_name) end

--Integer attribute of the skill type
---@param ability_id py.AbilityKey # Skill type
---@param attr_name string # Integer attribute
---@return integer # Real number
function GameAPI.get_ability_conf_int_attr(ability_id, attr_name) end

--Formula properties for skill types
---@param ability_id py.AbilityKey # Skill type
---@param attr_name string # Formula attribute
---@param level integer # Current level
---@param stack_count integer # Current number of charged layers
---@param unit_hp_max? py.Fixed # Maximum caster health
---@param unit_hp_cur? py.Fixed # Current health of the caster
---@return py.Fixed # Real number
function GameAPI.get_ability_conf_formula_attr(ability_id, attr_name, level, stack_count, unit_hp_max, unit_hp_cur) end

--Formula properties for skill types
---@param ability_id py.AbilityKey # Skill type
---@param attr_name string # Formula attribute
---@param level integer # Current level
---@param stack_count integer # Current number of charged layers
---@param unit? py.Unit # The unit of spellcasting calculation
---@param return_cm? boolean # Whether to return cm
---@return py.Fixed # Real number
function GameAPI.get_ability_conf_formula_attr_with_unit(ability_id, attr_name, level, stack_count, unit, return_cm) end

--Target unit for skill selection
---@param ability py.Ability # skill
---@param runtime_id? integer # runtime_id
---@return py.Unit # unit
function GameAPI.get_target_unit_in_ability(ability, runtime_id) end

--Skill selected target item
---@param ability py.Ability # skill
---@param runtime_id? integer # runtime_id
---@return py.Item # item
function GameAPI.get_target_item_in_ability(ability, runtime_id) end

--The target of the skill selection is destructible
---@param ability py.Ability # skill
---@param runtime_id? integer # runtime_id
---@return py.Destructible # destructible
function GameAPI.get_target_dest_in_ability(ability, runtime_id) end

--Screened units (abandoned)
---@param pos py.Vector3 # coordinate
---@param shape py.Shape # shape
---@return py.UnitGroup # Unit group
function GameAPI.filter_unit_id_list_in_area(pos, shape) end

--Filter the range of units
---@param pos py.Vector3 # coordinate
---@param shape py.Shape # shape
---@param belong_role_group? py.Role # Belong to a player or group of players
---@param visible_role? py.Role # Visible to the player
---@param invisible_role? py.Role # Not visible to the player
---@param exclude_unit_group? py.UnitGroup # Not in the unit group
---@param with_tag? string # tagged
---@param without_tag? string # No label
---@param entity_no? py.UnitKey # Unit name
---@param exclude_unit? py.Unit # Exclusion unit
---@param unit_type? py.UnitType # Type of unit
---@param in_state? integer # Having state
---@param not_in_state? integer # nonstate
---@param include_dead? boolean # Whether death units are included
---@param max_count? integer # Quantity ceiling
---@param sort_type? py.SortType # Sort type
---@param filter_ability? py.Ability # Screening skill
---@return py.UnitGroup # Unit group
function GameAPI.filter_unit_id_list_in_area_v2(pos, shape, belong_role_group, visible_role, invisible_role, exclude_unit_group, with_tag, without_tag, entity_no, exclude_unit, unit_type, in_state, not_in_state, include_dead, max_count, sort_type, filter_ability) end

--Screen projectiles within range
---@param pos py.Vector3 # coordinate
---@param shape py.Shape # shape
---@param sort_type? py.SortType # Sort type
---@return py.ProjectileGroup # Projectile set
function GameAPI.filter_projectile_id_list_in_area(pos, shape, sort_type) end

--Screen projectiles with tags
---@param tag string # tag
---@return py.ProjectileGroup # Projectile set
function GameAPI.get_all_projectiles_with_tag(tag) end

--Gets a camp object by camp number
---@param camp_id py.CampID # Camp number
---@return py.Camp # Camp object
function GameAPI.get_camp_by_camp_id(camp_id) end

--Get the party number by player number
---@param role_id py.RoleID # Player number
---@return py.Camp # Camp number
function GameAPI.get_camp_id_by_role_id(role_id) end

--Gets player objects by player number
---@param role_id py.RoleID # Player number
---@return py.Role # Player
function GameAPI.get_role_by_role_id(role_id) end

--Gets the player object by integer type
---@param role_id integer # Player number
---@return py.Role # Player
function GameAPI.get_role_by_int(role_id) end

--Gets the number of faction survival units
---@param camp_id py.CampID # Camp number
---@return integer # Unit quantity
function GameAPI.get_alive_unit_num_by_camp_id(camp_id) end

--All players
---@return py.RoleGroup # Player group
function GameAPI.get_all_role_ids() end

--All players in camp
---@param camp py.Camp # Camp object
---@return py.RoleGroup # Player group
function GameAPI.get_role_ids_by_camp(camp) end

--Type of player
---@param role_type integer # Player type
---@return py.RoleGroup # Player group
function GameAPI.get_role_ids_by_type(role_type) end

--Allied player
---@param role py.Role # Player
---@return py.RoleGroup # Player group
function GameAPI.get_ally_ids_by_role(role) end

--Gets a group of hostile players for a player
---@param role py.Role # Player
---@return py.RoleGroup # Player group
function GameAPI.get_enemy_ids_by_role(role) end

--Get the winning player group
---@return py.RoleGroup # Player group
function GameAPI.get_victorious_role_ids() end

--Get the losing player group
---@return py.RoleGroup # Player group
function GameAPI.get_defeated_role_ids() end

--Whether 3D properties are enabled
---@return boolean # Enable or not
function GameAPI.api_if_pri_attr_state_open() end

--Judge the unit hostile relationship
---@param unit1 py.Unit # unit
---@param unit2 py.Unit # unit
---@return boolean # Hostile or not
function GameAPI.is_enemy(unit1, unit2) end

--Determine the friendly relations between units
---@param unit1 py.Unit # unit
---@param unit2 py.Unit # unit
---@return boolean # Friendly or not
function GameAPI.is_ally(unit1, unit2) end

--Whether the player or unit has visibility into the unit
---@param role_or_unit py.Role # Player
---@param unit py.Unit # unit
---@return boolean # Visible or not
function GameAPI.get_visibility_of_unit(role_or_unit, unit) end

--Whether the player joins the game
---@param role py.Role # Player
---@return boolean # Whether the player joins the game
function GameAPI.role_in_game(role) end

--Whether the player has a charge item
---@param role py.Role # Player
---@param no py.StoreKey # Charge item key
---@return boolean # Whether the player has a charge item
function GameAPI.role_has_store_item(role, no) end

--Player downloads save whether callback
---@param role py.Role # Player
---@return boolean # Player downloads save whether callback
function GameAPI.has_download_save_data_callback(role) end

--Gets the recently created item
---@return py.Item # Item object
function GameAPI.get_last_created_item() end

--Create item
---@param position py.FVector3 # position
---@param num integer # quantity
---@param eid py.ItemKey # Item number
---@param player py.Role # Owned player
function GameAPI.create_items(position, num, eid, player) end

--Get items based on id
---@param id py.ItemID # Item ID
---@return py.Item # item
function GameAPI.get_item(id) end

--Get the item based on the item id
---@param item_unit_id integer # unit_id
---@return py.Item # item
function GameAPI.get_item_by_unit_id(item_unit_id) end

--Gets the item configuration name
---@param key py.ItemKey # item_id
---@return string # Item name
function GameAPI.get_item_conf_name(key) end

--Create a single item
---@param position py.FVector3 # position
---@param item_key py.ItemKey # Item number
---@param player py.Role # Owned player
---@param lua_table? py.Table # User-defined configuration table
---@return py.Item # Created out of items
function GameAPI.create_item_by_id(position, item_key, player, lua_table) end

--Get pictures based on ID
---@param icon_id integer # Picture ID
---@return py.Texture # picture
function GameAPI.get_texture_by_icon_id(icon_id) end

--Get the ID from the picture
---@param texture py.Texture # picture
---@return integer # Picture ID
function GameAPI.get_icon_id_by_texture(texture) end

--Refresh trigger
function GameAPI.refresh_triggers() end

--Activate the Lua dynamic trigger
---@param lua_conf py.Dict # Lua flip-flop
function GameAPI.enable_global_lua_trigger(lua_conf) end

--Gets destructible according to the default id
---@param dest_unit_id py.DestructibleID # Default destructor unit_id
---@return py.Destructible # destructible
function GameAPI.get_dest_by_id(dest_unit_id) end

--Gets the destructible type
---@param dest py.Destructible # destructible
---@return py.DestructibleKey # Destructible type
function GameAPI.get_dest_type(dest) end

--Determine if destructible objects are in the area
---@param dest_id py.Destructible # destructible
---@param area py.Area # region
---@return boolean # Boolean value
function GameAPI.is_dest_in_area(dest_id, area) end

--Create destructible objects
---@param location py.FVector3 # position
---@param dest_key py.DestructibleKey # Item number
---@param angle py.Fixed # Angle oriented
---@param size number # size
---@return py.Destructible # Create destructible objects
function GameAPI.create_destructible(location, dest_key, angle, size) end

--Create destructible objects
---@param dest_key py.DestructibleKey # Item number
---@param location py.FVector3 # position
---@param angle py.Fixed # Angle oriented
---@param scale_x? py.Fixed # Zoom x
---@param scale_y? py.Fixed # Scale y
---@param scale_z? py.Fixed # Zoom z
---@param height_offset? py.Fixed # Altitude
---@param lua_table? py.Table # User-defined configuration table
---@return py.Destructible # Create destructible objects
function GameAPI.create_destructible_new(dest_key, location, angle, scale_x, scale_y, scale_z, height_offset, lua_table) end

--Gets a list of destructible objects in the area
---@param area py.Area # Area object
---@param sort_type? py.SortType # Screening rule
---@return py.List # List of destructible objects
function GameAPI.get_all_dest_in_area(area, sort_type) end

--Gets a list of destructible objects within the range of points
---@param point py.Point # Area object
---@param rng number # radius
---@return py.List # List of destructible objects
function GameAPI.get_all_dest_in_point_rng(point, rng) end

--Gets a list of destructible objects in different shape ranges
---@param point py.Point # Area object
---@param shape py.Shape # shape
---@param sort_type? py.SortType # Screening rule
---@return py.List # List of destructible objects
function GameAPI.get_all_dest_in_shapes(point, shape, sort_type) end

--Create shot
---@param focus_point py.FVector3 # point
---@param dis number # Focus Distance
---@param focus_y? number # Focal height
---@param yaw? number # yaw
---@param pitch? number # pitch
---@param fov? number # fov
---@return integer # Lens ID
function GameAPI.add_camera_conf(focus_point, dis, focus_y, yaw, pitch, fov) end

--Application lens configuration
---@param role py.Role # Player
---@param conf_id py.Camera # Lens configuration
---@param duration number # Transition time
---@param slope_mode? integer # Lens movement type
function GameAPI.apply_camera_conf(role, conf_id, duration, slope_mode) end

--Linear moving lens (time)
---@param role py.Role # Player
---@param point py.FVector3 # point
---@param duration py.Fixed # duration
---@param acc integer # acceleration
function GameAPI.camera_linear_move_duration(role, point, duration, acc) end

--Linear moving lens (initial speed)
---@param role py.Role # Player
---@param point py.FVector3 # point
---@param speed py.Fixed # Initial velocity
---@param acc integer # acceleration
function GameAPI.camera_linear_move_speed(role, point, speed, acc) end

--Let the camera look at a point
---@param role py.Role # Player
---@param point py.FVector3 # point
---@param move_time? py.Fixed # time
function GameAPI.camera_look_at(role, point, move_time) end

--Set the lens parameter roll
---@param role py.Role # Player
---@param roll py.Fixed # Roll Angle
---@param move_time? py.Fixed # time
function GameAPI.camera_set_param_roll(role, roll, move_time) end

--Set the lens parameter pitch
---@param role py.Role # Player
---@param pitch py.Fixed # Pitch Angle
---@param move_time? py.Fixed # time
function GameAPI.camera_set_param_pitch(role, pitch, move_time) end

--Set the lens parameter yaw
---@param role py.Role # Player
---@param yaw py.Fixed # Navigation Angle
---@param move_time? py.Fixed # time
function GameAPI.camera_set_param_yaw(role, yaw, move_time) end

--Set the lens Angle parameters
---@param role py.Role # Player
---@param rotate_type py.CameraRotate # Angle type
---@param angle py.Fixed # Angular value
---@param move_time? py.Fixed # time
function GameAPI.camera_set_param_rotate(role, rotate_type, angle, move_time) end

--Set the lens parameter distance
---@param role py.Role # Player
---@param distance py.Fixed # Focal distance
---@param move_time? py.Fixed # time
function GameAPI.camera_set_param_distance(role, distance, move_time) end

--Rotation Angle (Angle, time)
---@param role py.Role # Player
---@param angle py.Fixed # Angle
---@param duration py.Fixed # time
function GameAPI.camera_rotate_pitch_angle_duration(role, angle, duration) end

--Rotation lens pitch Angle (angular velocity, time)
---@param role py.Role # Player
---@param angle_speed py.Fixed # Angular velocity
---@param duration py.Fixed # time
function GameAPI.camera_rotate_pitch_speed_duration(role, angle_speed, duration) end

--Rotation Angle (angular velocity, Angle)
---@param role py.Role # Player
---@param angle_speed py.Fixed # Angular velocity
---@param angle py.Fixed # Angle
function GameAPI.camera_rotate_pitch_speed_angle(role, angle_speed, angle) end

--Rotate lens navigation Angle (Angle, time)
---@param role py.Role # Player
---@param angle py.Fixed # Angle
---@param duration py.Fixed # time
function GameAPI.camera_rotate_yaw_angle_duration(role, angle, duration) end

--Rotating lens navigation Angle (angular speed, time)
---@param role py.Role # Player
---@param angle_speed py.Fixed # Angular velocity
---@param duration py.Fixed # time
function GameAPI.camera_rotate_yaw_speed_duration(role, angle_speed, duration) end

--Rotating lens navigation Angle (angular velocity, Angle)
---@param role py.Role # Player
---@param angle_speed py.Fixed # Angular velocity
---@param angle py.Fixed # Angle
function GameAPI.camera_rotate_yaw_speed_angle(role, angle_speed, angle) end

--Rotating lens roll Angle (Angle, time)
---@param role py.Role # Player
---@param angle py.Fixed # Angle
---@param duration py.Fixed # time
function GameAPI.camera_rotate_roll_angle_duration(role, angle, duration) end

--Rotating lens roll Angle (angular speed, time)
---@param role py.Role # Player
---@param angle_speed py.Fixed # Angular velocity
---@param duration py.Fixed # time
function GameAPI.camera_rotate_roll_speed_duration(role, angle_speed, duration) end

--Rotating lens roll Angle (angular speed, Angle)
---@param role py.Role # Player
---@param angle_speed py.Fixed # Angular velocity
---@param angle py.Fixed # Angle
function GameAPI.camera_rotate_roll_speed_angle(role, angle_speed, angle) end

--Camera shake xy
---@param role py.Role # Player
---@param amplitude py.Fixed # Rocking amplitude
---@param speed py.Fixed # Rocking rate
---@param duration py.Fixed # duration
---@param t integer # Rocking mode
function GameAPI.camera_shake_xy(role, amplitude, speed, duration, t) end

--Camera wobble z
---@param role py.Role # Player
---@param amplitude py.Fixed # Rocking amplitude
---@param speed py.Fixed # Rocking rate
---@param duration py.Fixed # duration
function GameAPI.camera_shake_z(role, amplitude, speed, duration) end

--Camera shake xy
---@param role py.Role # Player
---@param amplitude py.Fixed # Rocking amplitude
---@param speed py.Fixed # Rocking rate
---@param duration py.Fixed # duration
---@param shake_mode integer # Rocking mode
function GameAPI.camera_shake(role, amplitude, speed, duration, shake_mode) end

--The lens tape attenuates vibration
---@param role py.Role # Player
---@param amplitude py.Fixed # Amplitude of vibration
---@param decay py.Fixed # Rate of decay
---@param frequency py.Fixed # frequency
---@param duration py.Fixed # duration
---@param shake_type integer # Vibration mode
function GameAPI.camera_shake_with_decay(role, amplitude, decay, frequency, duration, shake_type) end

--Lens restricted movement area
---@param role py.Role # Player
---@param area py.Area # Restricted area
---@param clear_mover? boolean # Whether to stop the mover when the area is exceeded
function GameAPI.camera_limit_area(role, area, clear_mover) end

--Lens restricted movement area
---@param role py.Role # Player
function GameAPI.camera_limit_area_close(role) end

--The camera follows a unit
---@param role py.Role # Player
---@param unit py.Unit # Follower unit
---@param offset_x? number # Offset distance x
---@param offset_y? number # Offset distance y
---@param offset_height? number # Offset height
---@param socket? string # Hanging contact
function GameAPI.camera_set_follow_unit(role, unit, offset_x, offset_y, offset_height, socket) end

--Lens tps follows a unit
---@param role py.Role # Player
---@param unit py.Unit # Follower unit
---@param sensitive? number # sensitivity
---@param pitch? number # Pitch Angle
---@param yaw? number # Yaw Angle
---@param offset_x? number # Offset distance x
---@param offset_y? number # Offset distance y
---@param offset_z? number # Offset height
---@param distance? number # Camera distance
function GameAPI.camera_set_tps_follow_unit(role, unit, sensitive, pitch, yaw, offset_x, offset_y, offset_z, distance) end

--Cancel lens tps following unit
---@param role py.Role # Player
function GameAPI.camera_cancel_tps_follow_unit(role) end

--Unbind the player is camera
---@param role py.Role # Player
function GameAPI.camera_cancel_follow_unit(role) end

--Local lens is following
---@return boolean # Whether to follow
function GameAPI.camera_is_following_target() end

--Set the player is lens focus height
---@param role py.Role # Player
---@param y py.Fixed # Altitude
---@param move_time? py.Fixed # time
function GameAPI.camera_set_focus_y(role, y, move_time) end

--Set the player is camera to allow movement
---@param role py.Role # Player
function GameAPI.camera_set_move_enable(role) end

--Set the player is camera to stop moving
---@param role py.Role # Player
function GameAPI.camera_set_move_not_enable(role) end

--Set the mouse control switch for third person following lens
---@param role py.Role # Player
---@param enable boolean # Switch
function GameAPI.set_tps_mode_ctrl(role, enable) end

--Gets the real properties of the local player shot
---@param attr_name string # Attribute name
---@return py.Fixed # Attribute value
function GameAPI.get_camera_attr_real_num(attr_name) end

--Gets integer properties for local player shots
---@param attr_name string # Attribute name
---@return integer # Attribute value
function GameAPI.get_camera_attr_integer(attr_name) end

--Displays a message directly above the player
---@param role py.Role # Player
---@param seconds? number # duration
---@param text? string # Message
---@param localize? boolean # Multilingual transformation
function GameAPI.api_show_text(role, seconds, text, localize) end

--Display multilingual information to the player
---@param role py.Role # Player
---@param text string # Display information
---@param second py.Fixed # Duration, in seconds
---@param localize? boolean # Multilingual transformation
function GameAPI.show_tips_text(role, text, second, localize) end

--API test logs are logged and optionally displayed
---@param text string # Message
---@param seconds py.Fixed # Duration, in seconds
---@param show boolean # Whether to display on the screen
function GameAPI.api_test_log_msg(text, seconds, show) end

--API tests display UI information
---@param text string # Message
---@param seconds py.Fixed # Duration, in seconds
function GameAPI.api_test_show_msg_tip(text, seconds) end

--API Tests - Add Assert results to Log
---@param is_pass boolean # Pass or not
---@param info_str string # Message
function GameAPI.api_test_add_log_assert_result(is_pass, info_str) end

--Dialog window output information
---@param type integer # Window level
---@param text string # Print message
---@param trigger_info? py.Dict # dictionary
function GameAPI.print_to_dialog(type, text, trigger_info) end

--Show the unit dialogue to the player
---@param unit py.Unit # unit
---@param role py.Role # Player
---@param text string # Message
---@param second py.Fixed # duration
---@param localize? boolean # Multilingual transformation
function GameAPI.show_unit_text_to_role(unit, role, text, second, localize) end

--Display information to the lower left corner of the player
---@param role py.Role # Player
---@param text string # Message
---@param localize? boolean # Multilingual transformation
function GameAPI.show_msg_to_role(role, text, localize) end

--Displays game end messages by camp
---@param camp_id py.CampID # Camp number
---@param result string # End message
function GameAPI.show_game_end_ui_by_camp_id(camp_id, result) end

--Random integer in range
---@param min_num integer # Minimum value
---@param max_num integer # Maximum value
---@return integer # Random integer
function GameAPI.get_random_int(min_num, max_num) end

--Number of random fixed points in the range
---@param min_num py.Fixed # Minimum value
---@param max_num py.Fixed # Maximum value
---@return py.Fixed # Random fixed point number
function GameAPI.get_random_fixed(min_num, max_num) end

--Random Angle
---@return py.Fixed # Random fixed point number
function GameAPI.get_random_angle() end

--Calculation formula type KV
---@param actor py.Actor # Formula owning object
---@param k string # key
---@return py.Fixed # value
function GameAPI.api_calc_formula_kv(actor, k) end

--Unit Number of units in all states in a unit group
---@param unit_group py.UnitGroup # Unit group
---@return integer # Unit quantity
function GameAPI.get_unit_group_num(unit_group) end

--Traversal filtering unit group
---@param unit_group py.UnitGroup # Unit group
---@return py.UnitGroup # Unit group
function GameAPI.refresh_unit_group(unit_group) end

--Traversal filter projectile group
---@param proj_group py.UnitGroup # Projectile set
---@return py.UnitGroup # Projectile set
function GameAPI.refresh_projectile_group(proj_group) end

--Unit Group Number of units in a state
---@param unit_group py.UnitGroup # Unit group
---@param status string # Status name
---@return integer # Unit quantity
function GameAPI.get_state_unit_num_in_group(unit_group, status) end

--The number of units in a specific unit number in a unit group
---@param unit_group py.UnitGroup # Unit group
---@param unit_key py.UnitKey # Unit number
---@return integer # An unsigned integer
function GameAPI.get_num_of_unit_key_in_group(unit_group, unit_key) end

--Example Delete a unit from a unit group
---@param unit_group py.UnitGroup # Unit group
---@param unit_key py.UnitKey # Unit number
function GameAPI.remove_unit_in_group_by_key(unit_group, unit_key) end

--Example Delete a unit from a unit group
---@param unit_group py.UnitGroup # Unit group
---@param unit py.Unit # unit
function GameAPI.remove_unit_in_group(unit_group, unit) end

--Unit Group Select a unit
---@param unit_group_id py.UnitGroup # Unit group
function GameAPI.set_unit_group_selected(unit_group_id) end

--Unit Number Adds a unit number to the pool
---@param pool py.UnitKeyPool # Unit numbering pool
---@param key py.UnitKey # Unit number
---@param pro py.Fixed # Fixed point number
function GameAPI.unit_key_pool_add_key(pool, key, pro) end

--Unit Number Deletes a unit number from the pool
---@param pool py.UnitKeyPool # Unit numbering pool
---@param key py.UnitKey # Unit number
function GameAPI.unit_key_pool_rem_key(pool, key) end

--Unit Number Pool Returns the unit number
---@param pool py.UnitKeyPool # Unit numbering pool
---@return py.UnitKey # Unit number
function GameAPI.get_unit_key_from_pool(pool) end

--Gets the icon path for the unit default library configuration
---@param key py.UnitKey # Unit number
---@return string # icon
function GameAPI.get_unit_key_icon(key) end

--Gets the icon path to the item default library configuration
---@param key py.ItemKey # Item number
---@return string # icon
function GameAPI.get_item_key_icon(key) end

--Gets the picture path to the unit default library configuration
---@param key py.UnitKey # Unit number
---@param pic_type string # Picture type
---@return string # picture
function GameAPI.get_unit_key_pic(key, pic_type) end

--Gets an attribute of type string for the unit default library configuration
---@param unit_key py.UnitKey # Unit number
---@param attr string # Attribute name
---@return string # String attribute value
function GameAPI.get_unit_key_str(unit_key, attr) end

--Gets the property of type real for the unit default library configuration
---@param unit_key py.UnitKey # Unit number
---@param attr string # Attribute name
---@return py.Fixed # Real attribute value
function GameAPI.get_unit_key_fixed(unit_key, attr) end

--Gets the icon path of the default library configuration based on the UID
---@param icon_uid string # Icon unique ID
---@return string # icon
function GameAPI.get_icon_by_uid(icon_uid) end

--Gets the icon path to the skill preset library configuration
---@param key py.AbilityKey # Skill number
---@return string # icon
function GameAPI.get_ability_key_icon(key) end

--Variable length
---@param var py.List # variable
---@return integer # Variable length
function GameAPI.len_of_var(var) end

--Gets the slave coefficient of the 3D property
---@param pri string # Three-dimensional attribute
---@param slave string # slave attribute
---@return py.Fixed # slave coefficient
function GameAPI.get_slave_coeff(pri, slave) end

--Set the slave coefficient of the 3D property
---@param pri string # Three-dimensional attribute
---@param slave string # slave attribute
---@param coeff py.Fixed # slave coefficient
function GameAPI.set_slave_coeff(pri, slave, coeff) end

--Damage coefficient corresponding to attack type and defense type
---@param attack_idx integer # Attack type
---@param armor_idx integer # Defense type
---@return py.Fixed # Damage coefficient
function GameAPI.get_damage_ratio(attack_idx, armor_idx) end

--Set the damage coefficient corresponding to the attack type and defense type
---@param attack_idx integer # Attack type
---@param armor_idx integer # Defense type
---@param damage_ratio py.Fixed # Damage coefficient
function GameAPI.set_damage_ratio(attack_idx, armor_idx, damage_ratio) end

--Applied injury
---@param source_unit? py.Unit # injurer
---@param ability? py.Ability # Source association skill
---@param target_unit? py.Unit # Unit or article
---@param damage_type? integer # Injury type
---@param damage? py.Fixed # Damage
---@param jump_word? boolean # Skip or not
---@param extra_context? py.Actor # extra_data
---@param as_normal_hit? boolean # Regarded as a general attack
---@param critical? boolean # Certain critical strike
---@param no_miss? boolean # Blind dodge
---@param hit_sfx? py.SfxKey # Hit effect
---@param hit_socket? string # Hanging contact
---@param harm_text_enum? string # Hop enumeration
---@param jump_word_track? integer # Skip trace
---@param attack_type? integer # Attack type
---@param pos_socket? string # Jump start position of the node
function GameAPI.apply_damage(source_unit, ability, target_unit, damage_type, damage, jump_word, extra_context, as_normal_hit, critical, no_miss, hit_sfx, hit_socket, harm_text_enum, jump_word_track, attack_type, pos_socket) end

--Attack damage absolute value
---@param damage py.Fixed # Damage
---@return py.Fixed # Absolute value of damage
function GameAPI.get_hurt_damage(damage) end

--Sets the value of current attack damage
---@param damage py.Fixed # Damage
function GameAPI.set_cur_damage(damage) end

--Gets whether to dodge when an attack occurs
---@param damage_result_state integer # damage_result_state
---@return boolean # Absolute value of damage
function GameAPI.get_cur_damage_is_miss(damage_result_state) end

--Gets the item number UNIT_GROUP_COMMAND_TYPE key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.UnitGroupCommandType # Key value
function GameAPI.get_item_key_unit_group_command_type_kv(item_key, key) end

--Gets the skill number UNIT_GROUP_COMMAND_TYPE key value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.UnitGroupCommandType # Key value
function GameAPI.get_ability_key_unit_group_command_type_kv(ability_key, key) end

--Gets the Magic effect number UNIT_GROUP_COMMAND_TYPE key-value pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.UnitGroupCommandType # Key value
function GameAPI.get_modifier_key_unit_group_command_type_kv(modifier_key, key) end

--Gets the UNIT_GROUP_COMMAND_TYPE key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.UnitGroupCommandType # Key value
function GameAPI.get_projectile_key_unit_group_command_type_kv(projectile_key, key) end

--Gets the destructible number UNIT_GROUP_COMMAND_TYPE key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.UnitGroupCommandType # Key value
function GameAPI.get_destructible_key_unit_group_command_type_kv(destructible_key, key) end

--Gets the technology number UNIT_GROUP_COMMAND_TYPE key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.UnitGroupCommandType # Key value
function GameAPI.get_tech_key_unit_group_command_type_kv(tech_key, key) end

--Gets the image UNIT_GROUP_COMMAND_TYPE key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.UnitGroupCommandType # Key value
function GameAPI.get_icon_id_unit_group_command_type_kv(icon_id, key) end

--Gets the UNIT_GROUP_COMMAND_TYPE key pair of the logical physical component type
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.UnitGroupCommandType # Key value
function GameAPI.get_physics_entity_key_unit_group_command_type_kv(physics_entity_key, key) end

--Gets the UNIT_GROUP_COMMAND_TYPE key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.UnitGroupCommandType # Key value
function GameAPI.get_kv_pair_value_unit_group_command_type(kvbase, key) end

--Obtain the key pair with the unit number RESCUE_SEEKER_TYPE
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.ERescueSeekerType # Key value
function GameAPI.get_unit_key_rescue_seeker_type_kv(unit_key, key) end

--Get item number RESCUE_SEEKER_TYPE key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.ERescueSeekerType # Key value
function GameAPI.get_item_key_rescue_seeker_type_kv(item_key, key) end

--Obtain the skill number RESCUE_SEEKER_TYPE key and value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.ERescueSeekerType # Key value
function GameAPI.get_ability_key_rescue_seeker_type_kv(ability_key, key) end

--Get Magic effect number RESCUE_SEEKER_TYPE key-value pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.ERescueSeekerType # Key value
function GameAPI.get_modifier_key_rescue_seeker_type_kv(modifier_key, key) end

--Obtain the RESCUE_SEEKER_TYPE key and value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.ERescueSeekerType # Key value
function GameAPI.get_projectile_key_rescue_seeker_type_kv(projectile_key, key) end

--Obtain the destructible number RESCUE_SEEKER_TYPE key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.ERescueSeekerType # Key value
function GameAPI.get_destructible_key_rescue_seeker_type_kv(destructible_key, key) end

--Obtain the technology number RESCUE_SEEKER_TYPE key and value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.ERescueSeekerType # Key value
function GameAPI.get_tech_key_rescue_seeker_type_kv(tech_key, key) end

--Obtain the picture RESCUE_SEEKER_TYPE key and value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.ERescueSeekerType # Key value
function GameAPI.get_icon_id_rescue_seeker_type_kv(icon_id, key) end

--Obtain the key pair of the logical physical component type RESCUE_SEEKER_TYPE
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.ERescueSeekerType # Key value
function GameAPI.get_physics_entity_key_rescue_seeker_type_kv(physics_entity_key, key) end

--Obtain the RESCUE_SEEKER_TYPE key and value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.ERescueSeekerType # Key value
function GameAPI.get_kv_pair_value_rescue_seeker_type(kvbase, key) end

--Obtain the unit number RESCUER_TYPE key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.ERescuerType # Key value
function GameAPI.get_unit_key_rescuer_type_kv(unit_key, key) end

--Get item number RESCUER_TYPE key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.ERescuerType # Key value
function GameAPI.get_item_key_rescuer_type_kv(item_key, key) end

--Obtain the skill number RESCUER_TYPE key-value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.ERescuerType # Key value
function GameAPI.get_ability_key_rescuer_type_kv(ability_key, key) end

--Get magic effect number RESCUER_TYPE key-value pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.ERescuerType # Key value
function GameAPI.get_modifier_key_rescuer_type_kv(modifier_key, key) end

--Obtain the special effect number RESCUER_TYPE key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.ERescuerType # Key value
function GameAPI.get_projectile_key_rescuer_type_kv(projectile_key, key) end

--Obtain the destructible number RESCUER_TYPE key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.ERescuerType # Key value
function GameAPI.get_destructible_key_rescuer_type_kv(destructible_key, key) end

--Obtain technology number RESCUER_TYPE key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.ERescuerType # Key value
function GameAPI.get_tech_key_rescuer_type_kv(tech_key, key) end

--Obtain the picture RESCUER_TYPE key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.ERescuerType # Key value
function GameAPI.get_icon_id_rescuer_type_kv(icon_id, key) end

--Obtain the RESCUER_TYPE key pair of the logical physical component type
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.ERescuerType # Key value
function GameAPI.get_physics_entity_key_rescuer_type_kv(physics_entity_key, key) end

--Obtain RESCUER_TYPE key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.ERescuerType # Key value
function GameAPI.get_kv_pair_value_rescuer_type(kvbase, key) end

--Gets the unit number STORE_ITEM_TYPE key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.StoreItemType # Key value
function GameAPI.get_unit_key_store_item_type_kv(unit_key, key) end

--Gets the item number STORE_ITEM_TYPE key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.StoreItemType # Key value
function GameAPI.get_item_key_store_item_type_kv(item_key, key) end

--Gets skill number STORE_ITEM_TYPE key-value pairs
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.StoreItemType # Key value
function GameAPI.get_ability_key_store_item_type_kv(ability_key, key) end

--Gets the magic effect number STORE_ITEM_TYPE key-value pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.StoreItemType # Key value
function GameAPI.get_modifier_key_store_item_type_kv(modifier_key, key) end

--Gets the special effect number STORE_ITEM_TYPE key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.StoreItemType # Key value
function GameAPI.get_projectile_key_store_item_type_kv(projectile_key, key) end

--Gets the destructible number STORE_ITEM_TYPE key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.StoreItemType # Key value
function GameAPI.get_destructible_key_store_item_type_kv(destructible_key, key) end

--Gets the technology number STORE_ITEM_TYPE key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.StoreItemType # Key value
function GameAPI.get_tech_key_store_item_type_kv(tech_key, key) end

--Gets the image STORE_ITEM_TYPE key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.StoreItemType # Key value
function GameAPI.get_icon_id_store_item_type_kv(icon_id, key) end

--Gets the logical physical component type STORE_ITEM_TYPE key-value pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.StoreItemType # Key value
function GameAPI.get_physics_entity_key_store_item_type_kv(physics_entity_key, key) end

--Gets STORE_ITEM_TYPE key-value pairs
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.StoreItemType # Key value
function GameAPI.get_kv_pair_value_store_item_type(kvbase, key) end

--Gets the unit number SITE_STATE key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.SITE_STATE # Key value
function GameAPI.get_unit_key_site_state_kv(unit_key, key) end

--Gets item number SITE_STATE key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.SITE_STATE # Key value
function GameAPI.get_item_key_site_state_kv(item_key, key) end

--Obtain the skill number SITE_STATE key and value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.SITE_STATE # Key value
function GameAPI.get_ability_key_site_state_kv(ability_key, key) end

--Get Magic effect number SITE_STATE key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.SITE_STATE # Key value
function GameAPI.get_modifier_key_site_state_kv(modifier_key, key) end

--Gets the special effect number SITE_STATE key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.SITE_STATE # Key value
function GameAPI.get_projectile_key_site_state_kv(projectile_key, key) end

--Gets the destructible number SITE_STATE key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.SITE_STATE # Key value
function GameAPI.get_destructible_key_site_state_kv(destructible_key, key) end

--Gets the technology number SITE_STATE key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.SITE_STATE # Key value
function GameAPI.get_tech_key_site_state_kv(tech_key, key) end

--Gets the image SITE_STATE key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.SITE_STATE # Key value
function GameAPI.get_icon_id_site_state_kv(icon_id, key) end

--Obtain the SITE_STATE key-value pair of the logical physical component type
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.SITE_STATE # Key value
function GameAPI.get_physics_entity_key_site_state_kv(physics_entity_key, key) end

--Gets the SITE_STATE key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.SITE_STATE # Key value
function GameAPI.get_kv_pair_value_site_state(kvbase, key) end

--Gets the unit number COIN_CURRENCY key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.COIN_CURRENCY # Key value
function GameAPI.get_unit_key_coin_currency_kv(unit_key, key) end

--Gets the item number COIN_CURRENCY key value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.COIN_CURRENCY # Key value
function GameAPI.get_item_key_coin_currency_kv(item_key, key) end

--Gets the skill number COIN_CURRENCY key value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.COIN_CURRENCY # Key value
function GameAPI.get_ability_key_coin_currency_kv(ability_key, key) end

--Get the Magic effect number COIN_CURRENCY key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.COIN_CURRENCY # Key value
function GameAPI.get_modifier_key_coin_currency_kv(modifier_key, key) end

--Gets the special effect number COIN_CURRENCY key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.COIN_CURRENCY # Key value
function GameAPI.get_projectile_key_coin_currency_kv(projectile_key, key) end

--Gets the destructible number COIN_CURRENCY key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.COIN_CURRENCY # Key value
function GameAPI.get_destructible_key_coin_currency_kv(destructible_key, key) end

--Get the technology number COIN_CURRENCY key value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.COIN_CURRENCY # Key value
function GameAPI.get_tech_key_coin_currency_kv(tech_key, key) end

--Get the picture COIN_CURRENCY key pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.COIN_CURRENCY # Key value
function GameAPI.get_icon_id_coin_currency_kv(icon_id, key) end

--Gets a logical physical component type COIN_CURRENCY key-value pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.COIN_CURRENCY # Key value
function GameAPI.get_physics_entity_key_coin_currency_kv(physics_entity_key, key) end

--Gets the COIN_CURRENCY key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.COIN_CURRENCY # Key value
function GameAPI.get_kv_pair_value_coin_currency(kvbase, key) end

--Gets the global trigger UI_GRIDVIEW_TYPE non-array variable
---@param key string # Variable name
---@return integer # value
function GameAPI.get_trigger_variable_ui_gridview_type(key) end

--Gets trigger UI_GRIDVIEW_TYPE non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return integer # value
function GameAPI.get_trigger_actor_variable_ui_gridview_type(actor, key) end

--Gets the global trigger UI_GRIDVIEW_TYPE array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@return integer # value
function GameAPI.get_trigger_list_variable_ui_gridview_type(key, index) end

--Gets trigger UI_GRIDVIEW_TYPE array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@return integer # value
function GameAPI.get_trigger_list_actor_variable_ui_gridview_type(actor, key, index) end

--Gets the global trigger UI_GRIDVIEW_TYPE array variable
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_variable_all_ui_gridview_type(key) end

--Gets the trigger UI_GRIDVIEW_TYPE group variable array
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_actor_variable_all_ui_gridview_type(actor, key) end

--Gets the global trigger UI_GRIDVIEW_BAR_TYPE non-array variable
---@param key string # Variable name
---@return integer # value
function GameAPI.get_trigger_variable_ui_gridview_bar_type(key) end

--Gets trigger UI_GRIDVIEW_BAR_TYPE non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return integer # value
function GameAPI.get_trigger_actor_variable_ui_gridview_bar_type(actor, key) end

--Gets a global trigger UI_GRIDVIEW_BAR_TYPE array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@return integer # value
function GameAPI.get_trigger_list_variable_ui_gridview_bar_type(key, index) end

--Gets the trigger UI_GRIDVIEW_BAR_TYPE array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@return integer # value
function GameAPI.get_trigger_list_actor_variable_ui_gridview_bar_type(actor, key, index) end

--Gets the global trigger UI_GRIDVIEW_BAR_TYPE array variable
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_variable_all_ui_gridview_bar_type(key) end

--Gets the trigger UI_GRIDVIEW_BAR_TYPE group variable array
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_actor_variable_all_ui_gridview_bar_type(actor, key) end

--Gets the global trigger UI_EFFECT_CAMERA_MODE non-array variable
---@param key string # Variable name
---@return integer # value
function GameAPI.get_trigger_variable_ui_effect_camera_mode(key) end

--Gets trigger UI_EFFECT_CAMERA_MODE non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return integer # value
function GameAPI.get_trigger_actor_variable_ui_effect_camera_mode(actor, key) end

--Gets the global trigger UI_EFFECT_CAMERA_MODE array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@return integer # value
function GameAPI.get_trigger_list_variable_ui_effect_camera_mode(key, index) end

--Gets trigger UI_EFFECT_CAMERA_MODE array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@return integer # value
function GameAPI.get_trigger_list_actor_variable_ui_effect_camera_mode(actor, key, index) end

--Gets the global trigger UI_EFFECT_CAMERA_MODE array variable
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_variable_all_ui_effect_camera_mode(key) end

--Gets the trigger UI_EFFECT_CAMERA_MODE group variable array
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_actor_variable_all_ui_effect_camera_mode(actor, key) end

--Gets the global trigger UI_EQUIP_SLOT_USE_TYPE non-array variable
---@param key string # Variable name
---@return integer # value
function GameAPI.get_trigger_variable_ui_equip_slot_use_type(key) end

--Gets the trigger UI_EQUIP_SLOT_USE_TYPE non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return integer # value
function GameAPI.get_trigger_actor_variable_ui_equip_slot_use_type(actor, key) end

--Gets the global trigger UI_EQUIP_SLOT_USE_TYPE array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@return integer # value
function GameAPI.get_trigger_list_variable_ui_equip_slot_use_type(key, index) end

--Gets the trigger UI_EQUIP_SLOT_USE_TYPE array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@return integer # value
function GameAPI.get_trigger_list_actor_variable_ui_equip_slot_use_type(actor, key, index) end

--Gets the global trigger UI_EQUIP_SLOT_USE_TYPE array variable
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_variable_all_ui_equip_slot_use_type(key) end

--Gets the trigger UI_EQUIP_SLOT_USE_TYPE group variable array
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_actor_variable_all_ui_equip_slot_use_type(actor, key) end

--Gets the global trigger UI_EQUIP_SLOT_DRAG_TYPE non-array variable
---@param key string # Variable name
---@return integer # value
function GameAPI.get_trigger_variable_ui_equip_slot_drag_type(key) end

--Gets the trigger UI_EQUIP_SLOT_DRAG_TYPE non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return integer # value
function GameAPI.get_trigger_actor_variable_ui_equip_slot_drag_type(actor, key) end

--Gets the global trigger UI_EQUIP_SLOT_DRAG_TYPE array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@return integer # value
function GameAPI.get_trigger_list_variable_ui_equip_slot_drag_type(key, index) end

--Gets the trigger UI_EQUIP_SLOT_DRAG_TYPE array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@return integer # value
function GameAPI.get_trigger_list_actor_variable_ui_equip_slot_drag_type(actor, key, index) end

--Gets the global trigger UI_EQUIP_SLOT_DRAG_TYPE array variable
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_variable_all_ui_equip_slot_drag_type(key) end

--Gets the trigger UI_EQUIP_SLOT_DRAG_TYPE group variable array
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_actor_variable_all_ui_equip_slot_drag_type(actor, key) end

--Gets the global trigger UI_LAYOUT_CLIPPING_TYPE non-array variable
---@param key string # Variable name
---@return integer # value
function GameAPI.get_trigger_variable_ui_layout_clipping_type(key) end

--Gets trigger UI_LAYOUT_CLIPPING_TYPE non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return integer # value
function GameAPI.get_trigger_actor_variable_ui_layout_clipping_type(actor, key) end

--Gets the UI_LAYOUT_CLIPPING_TYPE array variable subentry of the global trigger
---@param key string # Variable name
---@param index integer # subscript
---@return integer # value
function GameAPI.get_trigger_list_variable_ui_layout_clipping_type(key, index) end

--Gets trigger UI_LAYOUT_CLIPPING_TYPE array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@return integer # value
function GameAPI.get_trigger_list_actor_variable_ui_layout_clipping_type(actor, key, index) end

--Gets the global trigger UI_LAYOUT_CLIPPING_TYPE array variable
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_variable_all_ui_layout_clipping_type(key) end

--Gets the trigger UI_LAYOUT_CLIPPING_TYPE group variable array
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_actor_variable_all_ui_layout_clipping_type(actor, key) end

--Gets the global trigger UI_TEXT_OVER_LENGTH_HANDLING_TYPE non-array variable
---@param key string # Variable name
---@return integer # value
function GameAPI.get_trigger_variable_ui_text_over_length_handling_type(key) end

--Gets the trigger UI_TEXT_OVER_LENGTH_HANDLING_TYPE non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return integer # value
function GameAPI.get_trigger_actor_variable_ui_text_over_length_handling_type(actor, key) end

--Gets the UI_TEXT_OVER_LENGTH_HANDLING_TYPE array variable subentry of the global trigger
---@param key string # Variable name
---@param index integer # subscript
---@return integer # value
function GameAPI.get_trigger_list_variable_ui_text_over_length_handling_type(key, index) end

--Gets the trigger UI_TEXT_OVER_LENGTH_HANDLING_TYPE array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@return integer # value
function GameAPI.get_trigger_list_actor_variable_ui_text_over_length_handling_type(actor, key, index) end

--Gets the UI_TEXT_OVER_LENGTH_HANDLING_TYPE array variable of the global trigger
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_variable_all_ui_text_over_length_handling_type(key) end

--Gets the trigger UI_TEXT_OVER_LENGTH_HANDLING_TYPE group variable array
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_actor_variable_all_ui_text_over_length_handling_type(actor, key) end

--Gets the global trigger UI_POS_ADAPT_MODE non-array variable
---@param key string # Variable name
---@return integer # value
function GameAPI.get_trigger_variable_ui_pos_adapt_mode(key) end

--Gets the trigger UI_POS_ADAPT_MODE non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return integer # value
function GameAPI.get_trigger_actor_variable_ui_pos_adapt_mode(actor, key) end

--Gets the global trigger UI_POS_ADAPT_MODE array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@return integer # value
function GameAPI.get_trigger_list_variable_ui_pos_adapt_mode(key, index) end

--Gets the trigger UI_POS_ADAPT_MODE array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@return integer # value
function GameAPI.get_trigger_list_actor_variable_ui_pos_adapt_mode(actor, key, index) end

--Gets the global trigger UI_POS_ADAPT_MODE array variable
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_variable_all_ui_pos_adapt_mode(key) end

--Gets the trigger UI_POS_ADAPT_MODE group variable array
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_actor_variable_all_ui_pos_adapt_mode(actor, key) end

--Gets the global trigger UI_CHAT_SEND_CHANNEL non-array variable
---@param key string # Variable name
---@return integer # value
function GameAPI.get_trigger_variable_ui_chat_send_channel(key) end

--Gets the trigger UI_CHAT_SEND_CHANNEL non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return integer # value
function GameAPI.get_trigger_actor_variable_ui_chat_send_channel(actor, key) end

--Gets the global trigger UI_CHAT_SEND_CHANNEL array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@return integer # value
function GameAPI.get_trigger_list_variable_ui_chat_send_channel(key, index) end

--Gets the trigger UI_CHAT_SEND_CHANNEL array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@return integer # value
function GameAPI.get_trigger_list_actor_variable_ui_chat_send_channel(actor, key, index) end

--Gets the global trigger UI_CHAT_SEND_CHANNEL array variable
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_variable_all_ui_chat_send_channel(key) end

--Gets the trigger UI_CHAT_SEND_CHANNEL group variable array
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_actor_variable_all_ui_chat_send_channel(actor, key) end

--Gets the global trigger UI_CHAT_RECV_CHANNEL non-array variable
---@param key string # Variable name
---@return integer # value
function GameAPI.get_trigger_variable_ui_chat_recv_channel(key) end

--Gets the trigger UI_CHAT_RECV_CHANNEL non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return integer # value
function GameAPI.get_trigger_actor_variable_ui_chat_recv_channel(actor, key) end

--Gets the global trigger UI_CHAT_RECV_CHANNEL array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@return integer # value
function GameAPI.get_trigger_list_variable_ui_chat_recv_channel(key, index) end

--Gets the trigger UI_CHAT_RECV_CHANNEL array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@return integer # value
function GameAPI.get_trigger_list_actor_variable_ui_chat_recv_channel(actor, key, index) end

--Gets the global trigger UI_CHAT_RECV_CHANNEL array variable
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_variable_all_ui_chat_recv_channel(key) end

--Gets the trigger UI_CHAT_RECV_CHANNEL group variable array
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_actor_variable_all_ui_chat_recv_channel(actor, key) end

--Gets the global trigger UI_ANIM_PLAY_MODE non-array variable
---@param key string # Variable name
---@return integer # value
function GameAPI.get_trigger_variable_ui_anim_play_mode(key) end

--Gets the trigger UI_ANIM_PLAY_MODE non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return integer # value
function GameAPI.get_trigger_actor_variable_ui_anim_play_mode(actor, key) end

--Gets the global trigger UI_ANIM_PLAY_MODE array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@return integer # value
function GameAPI.get_trigger_list_variable_ui_anim_play_mode(key, index) end

--Gets the trigger UI_ANIM_PLAY_MODE array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@return integer # value
function GameAPI.get_trigger_list_actor_variable_ui_anim_play_mode(actor, key, index) end

--Gets the global trigger UI_ANIM_PLAY_MODE array variable
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_variable_all_ui_anim_play_mode(key) end

--Gets the trigger UI_ANIM_PLAY_MODE group variable array
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_actor_variable_all_ui_anim_play_mode(actor, key) end

--Gets the global trigger UI_TEXT_FONT_NAME non-array variable
---@param key string # Variable name
---@return string # value
function GameAPI.get_trigger_variable_ui_text_font_name(key) end

--Gets the trigger UI_TEXT_FONT_NAME non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return string # value
function GameAPI.get_trigger_actor_variable_ui_text_font_name(actor, key) end

--Gets the global trigger UI_TEXT_FONT_NAME array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@return string # value
function GameAPI.get_trigger_list_variable_ui_text_font_name(key, index) end

--Gets the trigger UI_TEXT_FONT_NAME array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@return string # value
function GameAPI.get_trigger_list_actor_variable_ui_text_font_name(actor, key, index) end

--Gets the UI_TEXT_FONT_NAME array variable of the global trigger
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_variable_all_ui_text_font_name(key) end

--Gets the trigger UI_TEXT_FONT_NAME group variable array
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_actor_variable_all_ui_text_font_name(actor, key) end

--Gets the global trigger UI_ECA_ANIM_TYPE non-array variable
---@param key string # Variable name
---@return integer # value
function GameAPI.get_trigger_variable_ui_eca_anim_type(key) end

--Gets the trigger UI_ECA_ANIM_TYPE non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return integer # value
function GameAPI.get_trigger_actor_variable_ui_eca_anim_type(actor, key) end

--Gets the global trigger UI_ECA_ANIM_TYPE array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@return integer # value
function GameAPI.get_trigger_list_variable_ui_eca_anim_type(key, index) end

--Gets the trigger UI_ECA_ANIM_TYPE array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@return integer # value
function GameAPI.get_trigger_list_actor_variable_ui_eca_anim_type(actor, key, index) end

--Gets the global trigger UI_ECA_ANIM_TYPE array variable
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_variable_all_ui_eca_anim_type(key) end

--Gets the trigger UI_ECA_ANIM_TYPE group variable array
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_actor_variable_all_ui_eca_anim_type(actor, key) end

--Gets the global trigger LOCAL_UNIT_ENTITY non-array variable
---@param key string # Variable name
---@return py.LocalUnit # value
function GameAPI.get_trigger_variable_local_unit_entity(key) end

--Gets trigger LOCAL_UNIT_ENTITY non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.LocalUnit # value
function GameAPI.get_trigger_actor_variable_local_unit_entity(actor, key) end

--Gets the LOCAL_UNIT_ENTITY array variable subentry of the global trigger
---@param key string # Variable name
---@param index integer # subscript
---@return py.LocalUnit # value
function GameAPI.get_trigger_list_variable_local_unit_entity(key, index) end

--Gets the trigger LOCAL_UNIT_ENTITY array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@return py.LocalUnit # value
function GameAPI.get_trigger_list_actor_variable_local_unit_entity(actor, key, index) end

--Gets the LOCAL_UNIT_ENTITY array variable of the global trigger
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_variable_all_local_unit_entity(key) end

--Gets the LOCAL_UNIT_ENTITY group variable array of the trigger
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_actor_variable_all_local_unit_entity(actor, key) end

--Gets the LOCAL_UNIT_GROUP non-array variable of the global trigger
---@param key string # Variable name
---@return py.LocalUnitGroup # value
function GameAPI.get_trigger_variable_local_unit_group(key) end

--Gets the trigger LOCAL_UNIT_GROUP non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.LocalUnitGroup # value
function GameAPI.get_trigger_actor_variable_local_unit_group(actor, key) end

--Gets the global trigger LOCAL_UNIT_GROUP array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@return py.LocalUnitGroup # value
function GameAPI.get_trigger_list_variable_local_unit_group(key, index) end

--Gets the trigger LOCAL_UNIT_GROUP array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@return py.LocalUnitGroup # value
function GameAPI.get_trigger_list_actor_variable_local_unit_group(actor, key, index) end

--Gets the global trigger LOCAL_UNIT_GROUP array variable
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_variable_all_local_unit_group(key) end

--Gets the trigger LOCAL_UNIT_GROUP array of group variables
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_actor_variable_all_local_unit_group(actor, key) end

--Gets the global trigger DECO_ENTITY non-array variable
---@param key string # Variable name
---@return py.DecoID # value
function GameAPI.get_trigger_variable_deco_entity(key) end

--Gets trigger DECO_ENTITY non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.DecoID # value
function GameAPI.get_trigger_actor_variable_deco_entity(actor, key) end

--Gets the global trigger DECO_ENTITY array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@return py.DecoID # value
function GameAPI.get_trigger_list_variable_deco_entity(key, index) end

--Gets the trigger DECO_ENTITY array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@return py.DecoID # value
function GameAPI.get_trigger_list_actor_variable_deco_entity(actor, key, index) end

--Gets the global trigger DECO_ENTITY array variable
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_variable_all_deco_entity(key) end

--Gets the trigger DECO_ENTITY group variable array
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_actor_variable_all_deco_entity(actor, key) end

--Gets the global trigger SCENE_PRESET non-array variable
---@param key string # Variable name
---@return py.ScenePreset # value
function GameAPI.get_trigger_variable_scene_preset(key) end

--Gets the trigger SCENE_PRESET non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.ScenePreset # value
function GameAPI.get_trigger_actor_variable_scene_preset(actor, key) end

--Gets the global trigger SCENE_PRESET array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@return py.ScenePreset # value
function GameAPI.get_trigger_list_variable_scene_preset(key, index) end

--Gets the trigger SCENE_PRESET array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@return py.ScenePreset # value
function GameAPI.get_trigger_list_actor_variable_scene_preset(actor, key, index) end

--Gets the global trigger SCENE_PRESET array variable
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_variable_all_scene_preset(key) end

--Gets the trigger SCENE_PRESET group variable array
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_actor_variable_all_scene_preset(actor, key) end

--Gets the global trigger ITEM_STACK_TYPE non-array variable
---@param key string # Variable name
---@return py.ItemStackType # value
function GameAPI.get_trigger_variable_item_stack_type(key) end

--Gets the trigger ITEM_STACK_TYPE non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.ItemStackType # value
function GameAPI.get_trigger_actor_variable_item_stack_type(actor, key) end

--Gets the subentry of the global trigger ITEM_STACK_TYPE array variable
---@param key string # Variable name
---@param index integer # subscript
---@return py.ItemStackType # value
function GameAPI.get_trigger_list_variable_item_stack_type(key, index) end

--Gets the trigger ITEM_STACK_TYPE array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@return py.ItemStackType # value
function GameAPI.get_trigger_list_actor_variable_item_stack_type(actor, key, index) end

--Gets the global trigger ITEM_STACK_TYPE array variable
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_variable_all_item_stack_type(key) end

--Gets the trigger ITEM_STACK_TYPE group variable array
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_actor_variable_all_item_stack_type(actor, key) end

--Gets the global trigger ABILITY_RELEASE_ID non-array variable
---@param key string # Variable name
---@return py.AbilityReleaseId # value
function GameAPI.get_trigger_variable_ability_release_id(key) end

--Gets the trigger ABILITY_RELEASE_ID non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.AbilityReleaseId # value
function GameAPI.get_trigger_actor_variable_ability_release_id(actor, key) end

--Gets the global trigger ABILITY_RELEASE_ID array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@return py.AbilityReleaseId # value
function GameAPI.get_trigger_list_variable_ability_release_id(key, index) end

--Gets the trigger ABILITY_RELEASE_ID array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@return py.AbilityReleaseId # value
function GameAPI.get_trigger_list_actor_variable_ability_release_id(actor, key, index) end

--Gets the global trigger ABILITY_RELEASE_ID array variable
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_variable_all_ability_release_id(key) end

--Gets an array of trigger ABILITY_RELEASE_ID group variables
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_actor_variable_all_ability_release_id(actor, key) end

--Gets the global trigger DECO_NAME non-array variable
---@param key string # Variable name
---@return py.DecoKey # value
function GameAPI.get_trigger_variable_deco_name(key) end

--Gets trigger DECO_NAME non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.DecoKey # value
function GameAPI.get_trigger_actor_variable_deco_name(actor, key) end

--Gets the global trigger DECO_NAME array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@return py.DecoKey # value
function GameAPI.get_trigger_list_variable_deco_name(key, index) end

--Gets trigger DECO_NAME array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@return py.DecoKey # value
function GameAPI.get_trigger_list_actor_variable_deco_name(actor, key, index) end

--Gets the global trigger DECO_NAME array variable
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_variable_all_deco_name(key) end

--Gets the trigger DECO_NAME group variable array
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_actor_variable_all_deco_name(actor, key) end

--Gets the global trigger UI_POINT non-array variable
---@param key string # Variable name
---@return py.FUIPoint # value
function GameAPI.get_trigger_variable_ui_point(key) end

--Gets trigger UI_POINT non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.FUIPoint # value
function GameAPI.get_trigger_actor_variable_ui_point(actor, key) end

--Gets the global trigger UI_POINT array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@return py.FUIPoint # value
function GameAPI.get_trigger_list_variable_ui_point(key, index) end

--Gets trigger UI_POINT array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@return py.FUIPoint # value
function GameAPI.get_trigger_list_actor_variable_ui_point(actor, key, index) end

--Gets the global trigger UI_POINT array variable
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_variable_all_ui_point(key) end

--Gets an array of trigger UI_POINT group variables
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_actor_variable_all_ui_point(actor, key) end

--Gets global trigger ATTACH_MODEL_ENTITY non-array variable
---@param key string # Variable name
---@return py.AttachModelEntity # value
function GameAPI.get_trigger_variable_attach_model_entity(key) end

--Gets trigger ATTACH_MODEL_ENTITY non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.AttachModelEntity # value
function GameAPI.get_trigger_actor_variable_attach_model_entity(actor, key) end

--Gets the global trigger ATTACH_MODEL_ENTITY array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@return py.AttachModelEntity # value
function GameAPI.get_trigger_list_variable_attach_model_entity(key, index) end

--Gets trigger ATTACH_MODEL_ENTITY array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@return py.AttachModelEntity # value
function GameAPI.get_trigger_list_actor_variable_attach_model_entity(actor, key, index) end

--Gets the global trigger ATTACH_MODEL_ENTITY array variable
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_variable_all_attach_model_entity(key) end

--Gets the trigger ATTACH_MODEL_ENTITY group variable array
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_actor_variable_all_attach_model_entity(actor, key) end

--Gets the global trigger LIVE2D non-array variable
---@param key string # Variable name
---@return py.Live2dKey # value
function GameAPI.get_trigger_variable_live2d(key) end

--Gets trigger LIVE2D non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.Live2dKey # value
function GameAPI.get_trigger_actor_variable_live2d(actor, key) end

--Gets the global trigger LIVE2D array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@return py.Live2dKey # value
function GameAPI.get_trigger_list_variable_live2d(key, index) end

--Gets trigger LIVE2D array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@return py.Live2dKey # value
function GameAPI.get_trigger_list_actor_variable_live2d(actor, key, index) end

--Gets the global trigger LIVE2D array variable
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_variable_all_live2d(key) end

--Gets the trigger LIVE2D group variable array
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_actor_variable_all_live2d(actor, key) end

--Gets the global trigger SPINE non-array variable
---@param key string # Variable name
---@return py.Spine # value
function GameAPI.get_trigger_variable_spine(key) end

--Gets the trigger SPINE non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.Spine # value
function GameAPI.get_trigger_actor_variable_spine(actor, key) end

--Gets the global trigger SPINE array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@return py.Spine # value
function GameAPI.get_trigger_list_variable_spine(key, index) end

--Gets the trigger SPINE array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@return py.Spine # value
function GameAPI.get_trigger_list_actor_variable_spine(actor, key, index) end

--Gets the global trigger SPINE array variable
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_variable_all_spine(key) end

--Gets the trigger SPINE group variable array
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_actor_variable_all_spine(actor, key) end

--Gets the global trigger DEBUG_SHAPE non-array variable
---@param key string # Variable name
---@return integer # value
function GameAPI.get_trigger_variable_debug_shape(key) end

--Gets the trigger DEBUG_SHAPE non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return integer # value
function GameAPI.get_trigger_actor_variable_debug_shape(actor, key) end

--Gets the global trigger DEBUG_SHAPE array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@return integer # value
function GameAPI.get_trigger_list_variable_debug_shape(key, index) end

--Gets the trigger DEBUG_SHAPE array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@return integer # value
function GameAPI.get_trigger_list_actor_variable_debug_shape(actor, key, index) end

--Gets the global trigger DEBUG_SHAPE array variable
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_variable_all_debug_shape(key) end

--Gets the trigger DEBUG_SHAPE group variable array
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_actor_variable_all_debug_shape(actor, key) end

--Gets the global trigger WATCHING_MODE_STATUS non-array variable
---@param key string # Variable name
---@return py.WatchingModeStatus # value
function GameAPI.get_trigger_variable_watching_mode_status(key) end

--Gets the trigger WATCHING_MODE_STATUS non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.WatchingModeStatus # value
function GameAPI.get_trigger_actor_variable_watching_mode_status(actor, key) end

--Gets the global trigger WATCHING_MODE_STATUS array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@return py.WatchingModeStatus # value
function GameAPI.get_trigger_list_variable_watching_mode_status(key, index) end

--Gets the trigger WATCHING_MODE_STATUS array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@return py.WatchingModeStatus # value
function GameAPI.get_trigger_list_actor_variable_watching_mode_status(actor, key, index) end

--Gets the global trigger WATCHING_MODE_STATUS array variable
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_variable_all_watching_mode_status(key) end

--Gets the trigger WATCHING_MODE_STATUS group variable array
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_actor_variable_all_watching_mode_status(actor, key) end

--Gets the global trigger FORCE_ENTITY non-array variable
---@param key string # Variable name
---@return py.Force # value
function GameAPI.get_trigger_variable_force_entity(key) end

--Gets trigger FORCE_ENTITY non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.Force # value
function GameAPI.get_trigger_actor_variable_force_entity(actor, key) end

--Gets the global trigger FORCE_ENTITY array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@return py.Force # value
function GameAPI.get_trigger_list_variable_force_entity(key, index) end

--Gets the trigger FORCE_ENTITY array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@return py.Force # value
function GameAPI.get_trigger_list_actor_variable_force_entity(actor, key, index) end

--Gets the global trigger FORCE_ENTITY array variable
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_variable_all_force_entity(key) end

--Gets an array of trigger FORCE_ENTITY group variables
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_actor_variable_all_force_entity(actor, key) end

--Gets the global trigger GOODS_KEY non-array variable
---@param key string # Variable name
---@return py.GoodsKey # value
function GameAPI.get_trigger_variable_goods_key(key) end

--Gets the trigger GOODS_KEY non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.GoodsKey # value
function GameAPI.get_trigger_actor_variable_goods_key(actor, key) end

--Gets the global trigger GOODS_KEY array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@return py.GoodsKey # value
function GameAPI.get_trigger_list_variable_goods_key(key, index) end

--Gets the trigger GOODS_KEY array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@return py.GoodsKey # value
function GameAPI.get_trigger_list_actor_variable_goods_key(actor, key, index) end

--Gets the global trigger GOODS_KEY array variable
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_variable_all_goods_key(key) end
