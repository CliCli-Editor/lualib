--This file is generated by tools/genGameAPI, do not modify it manually.
---@meta

---@class EventConfig
local M = {}

M.config = {}

---@alias EventParam.Unknown-et_logic_unit_destroy EventParam.ET_LOGIC_UNIT_DESTROY
M.config["Unknown-et_logic_unit_destroy"] = {
    _deprecated = true,
    desc = "ET_LOGIC_UNIT_DESTROY",
    key = "ET_LOGIC_UNIT_DESTROY",
    name = "Unknown-et_logic_unit_destroy",
    params = {
    },
}

---@alias EventParam.Game-Initialization EventParam.ET_GAME_INIT
M.config["Game-Initialization"] = {
    desc = "Triggered when the game is initialized.",
    key = "ET_GAME_INIT",
    name = "Game-Initialization",
    params = {
    },
}

---@alias EventParam.Game-FrameChasingComplete EventParam.ET_RELAUNCH_FRAME_CATCHING_FINISHED
M.config["Game-FrameChasingComplete"] = {
    desc = "",
    key = "ET_RELAUNCH_FRAME_CATCHING_FINISHED",
    name = "Game-FrameChasingComplete",
    params = {
    },
}

---@alias EventParam.Game-LogicIsOutOfSync EventParam.ET_GAME_SNAPSHOT_MISMATCH
M.config["Game-LogicIsOutOfSync"] = {
    desc = "",
    key = "ET_GAME_SNAPSHOT_MISMATCH",
    name = "Game-LogicIsOutOfSync",
    params = {
    },
}

---@alias EventParam.Game-TerrainPresetsLoadedComplete EventParam.ET_SCENE_PRESET_LOADING_FINISH
M.config["Game-TerrainPresetsLoadedComplete"] = {
    desc = "",
    key = "ET_SCENE_PRESET_LOADING_FINISH",
    name = "Game-TerrainPresetsLoadedComplete",
    params = {
    },
}

---@alias EventParam.Unknown-et_recv_trigger EventParam.ET_RECV_TRIGGER
M.config["Unknown-et_recv_trigger"] = {
    _deprecated = true,
    desc = "ET_RECV_TRIGGER",
    key = "ET_RECV_TRIGGER",
    name = "Unknown-et_recv_trigger",
    params = {
    },
}

---@alias EventParam.Game-Over EventParam.ET_GAME_END
M.config["Game-Over"] = {
    desc = "Triggered when the game ends",
    key = "ET_GAME_END",
    name = "Game-Over",
    params = {
    },
}

---@alias EventParam.Game-Pause EventParam.ET_GAME_PAUSE
M.config["Game-Pause"] = {
    desc = "Triggered when the game is paused",
    key = "ET_GAME_PAUSE",
    name = "Game-Pause",
    params = {
    },
}

---@alias EventParam.Game-Recovery EventParam.ET_GAME_RESUME
M.config["Game-Recovery"] = {
    desc = "Triggered when the game resumes",
    key = "ET_GAME_RESUME",
    name = "Game-Recovery",
    params = {
    },
}

---@alias EventParam.Unknown-et_empty EventParam.ET_EMPTY
M.config["Unknown-et_empty"] = {
    _deprecated = true,
    desc = "ET_EMPTY",
    key = "ET_EMPTY",
    name = "Unknown-et_empty",
    params = {
    },
}

---@alias EventParam.Unknown-timer_timeout EventParam.TIMER_TIMEOUT
M.config["Unknown-timer_timeout"] = {
    _deprecated = true,
    desc = "TIMER_TIMEOUT",
    key = "TIMER_TIMEOUT",
    name = "Unknown-timer_timeout",
    params = {
    },
}

---@alias EventParam.Game-DayAndNightChange EventParam.ET_DAY_NIGHT_CHANGE
M.config["Game-DayAndNightChange"] = {
    desc = "Enter the day or enter the night according to the parameters",
    key = "ET_DAY_NIGHT_CHANGE",
    name = "Game-DayAndNightChange",
    params = {
    },
}

---@alias EventParam.Unknown-et_container_added EventParam.ET_CONTAINER_ADDED
M.config["Unknown-et_container_added"] = {
    _deprecated = true,
    desc = "ET_CONTAINER_ADDED",
    key = "ET_CONTAINER_ADDED",
    name = "Unknown-et_container_added",
    params = {
    },
}

---@alias EventParam.Unknown-et_container_actor_added EventParam.ET_CONTAINER_ACTOR_ADDED
M.config["Unknown-et_container_actor_added"] = {
    _deprecated = true,
    desc = "ET_CONTAINER_ACTOR_ADDED",
    key = "ET_CONTAINER_ACTOR_ADDED",
    name = "Unknown-et_container_actor_added",
    params = {
    },
}

---@alias EventParam.Unknown-et_container_actor_removed EventParam.ET_CONTAINER_ACTOR_REMOVED
M.config["Unknown-et_container_actor_removed"] = {
    _deprecated = true,
    desc = "ET_CONTAINER_ACTOR_REMOVED",
    key = "ET_CONTAINER_ACTOR_REMOVED",
    name = "Unknown-et_container_actor_removed",
    params = {
    },
}

---@alias EventParam.Unknown-et_actor_attr_updated EventParam.ET_ACTOR_ATTR_UPDATED
M.config["Unknown-et_actor_attr_updated"] = {
    _deprecated = true,
    desc = "ET_ACTOR_ATTR_UPDATED",
    key = "ET_ACTOR_ATTR_UPDATED",
    name = "Unknown-et_actor_attr_updated",
    params = {
    },
}

---@alias EventParam.Zone-access EventParam.ET_AREA_ENTER
M.config["Zone-access"] = {
    desc = "Triggered when any unit enters the zone",
    key = "ET_AREA_ENTER",
    name = "Zone-access",
    object = "Area",
    params = {
        [1] = {
            call = true,
            desc = "region",
            name = "area",
            type = "Area",
        },
    },
}

---@alias EventParam.Zone-Leave EventParam.ET_AREA_LEAVE
M.config["Zone-Leave"] = {
    desc = "Triggered when any unit leaves the zone",
    key = "ET_AREA_LEAVE",
    name = "Zone-Leave",
    object = "Area",
    params = {
        [1] = {
            call = true,
            desc = "region",
            name = "area",
            type = "Area",
        },
    },
}

---@alias EventParam.Game-httpReturn EventParam.ET_HTTP_RESPONSE
M.config["Game-httpReturn"] = {
    desc = "",
    key = "ET_HTTP_RESPONSE",
    name = "Game-httpReturn",
    params = {
    },
}

---@alias EventParam.Games-ReceiveBroadcastInformation EventParam.ET_BROADCAST_LUA_MSG
M.config["Games-ReceiveBroadcastInformation"] = {
    desc = "",
    key = "ET_BROADCAST_LUA_MSG",
    name = "Games-ReceiveBroadcastInformation",
    params = {
    },
}

---@alias EventParam.Player-JoinTheGame EventParam.ET_ROLE_JOIN_BATTLE
M.config["Player-JoinTheGame"] = {
    desc = "Triggered when the player joins the game",
    key = "ET_ROLE_JOIN_BATTLE",
    name = "Player-JoinTheGame",
    object = "Player",
    params = {
    },
}

---@alias EventParam.Player-LeaveTheGame EventParam.ET_ROLE_ACTIVE_EXIT_GAME_EVENT
M.config["Player-LeaveTheGame"] = {
    desc = "Triggered when the player leaves the game",
    key = "ET_ROLE_ACTIVE_EXIT_GAME_EVENT",
    name = "Player-LeaveTheGame",
    object = "Player",
    params = {
    },
}

---@alias EventParam.Player-DroppedCall EventParam.ET_ROLE_LOSE_CONNECT
M.config["Player-DroppedCall"] = {
    desc = "Triggered when the player drops out",
    key = "ET_ROLE_LOSE_CONNECT",
    name = "Player-DroppedCall",
    object = "Player",
    params = {
    },
}

---@alias EventParam.Unknown-et_ai_take_control EventParam.ET_AI_TAKE_CONTROL
M.config["Unknown-et_ai_take_control"] = {
    _deprecated = true,
    desc = "ET_AI_TAKE_CONTROL",
    key = "ET_AI_TAKE_CONTROL",
    name = "Unknown-et_ai_take_control",
    params = {
    },
}

---@alias EventParam.Unknown-et_download_map_archive_callback EventParam.ET_DOWNLOAD_MAP_ARCHIVE_CALLBACK
M.config["Unknown-et_download_map_archive_callback"] = {
    _deprecated = true,
    desc = "ET_DOWNLOAD_MAP_ARCHIVE_CALLBACK",
    key = "ET_DOWNLOAD_MAP_ARCHIVE_CALLBACK",
    name = "Unknown-et_download_map_archive_callback",
    params = {
    },
}

---@alias EventParam.Player-UsePlatformItems EventParam.ET_ROLE_USE_STORE_ITEM_END
M.config["Player-UsePlatformItems"] = {
    desc = "Triggered when the player uses a platform item",
    key = "ET_ROLE_USE_STORE_ITEM_END",
    name = "Player-UsePlatformItems",
    object = "Player",
    params = {
    },
}

---@alias EventParam.Unknown-et_consume_store_item EventParam.ET_CONSUME_STORE_ITEM
M.config["Unknown-et_consume_store_item"] = {
    _deprecated = true,
    desc = "ET_CONSUME_STORE_ITEM",
    key = "ET_CONSUME_STORE_ITEM",
    name = "Unknown-et_consume_store_item",
    params = {
    },
}

---@alias EventParam.Player-HoldsPlatformItems EventParam.ET_ROLE_HOLD_STORE_ITEM
M.config["Player-HoldsPlatformItems"] = {
    desc = "Triggers when the player enters the game with a specific platform item",
    key = "ET_ROLE_HOLD_STORE_ITEM",
    name = "Player-HoldsPlatformItems",
    object = "Player",
    params = {
    },
}

---@alias EventParam.Player-AttributesChange EventParam.ET_ROLE_RESOURCE_CHANGED
M.config["Player-AttributesChange"] = {
    desc = "Triggered when player stats change",
    key = "ET_ROLE_RESOURCE_CHANGED",
    name = "Player-AttributesChange",
    object = "Player",
    params = {
    },
}

---@alias EventParam.Player-SendTheSpecifiedMessage EventParam.ET_ROLE_INPUT_MSG
M.config["Player-SendTheSpecifiedMessage"] = {
    desc = "Triggered when the player sends the specified message",
    from_global = true,
    key = "ET_ROLE_INPUT_MSG",
    name = "Player-SendTheSpecifiedMessage",
    object = "Player",
    params = {
        [1] = {
            desc = "Message content",
            name = "msg",
            type = "string",
        },
    },
}

---@alias EventParam.Unknown-et_role_input_activation_code EventParam.ET_ROLE_INPUT_ACTIVATION_CODE
M.config["Unknown-et_role_input_activation_code"] = {
    _deprecated = true,
    desc = "ET_ROLE_INPUT_ACTIVATION_CODE",
    key = "ET_ROLE_INPUT_ACTIVATION_CODE",
    name = "Unknown-et_role_input_activation_code",
    params = {
    },
}

---@alias EventParam.Player-TechnologyEnhancement EventParam.ET_ROLE_TECH_UPGRADE
M.config["Player-TechnologyEnhancement"] = {
    desc = "This is triggered for every level of player technology",
    key = "ET_ROLE_TECH_UPGRADE",
    name = "Player-TechnologyEnhancement",
    object = "Player",
    params = {
    },
}

---@alias EventParam.Player-TechDown EventParam.ET_ROLE_TECH_DOWNGRADE
M.config["Player-TechDown"] = {
    desc = "Triggers each level the player's tech drops",
    key = "ET_ROLE_TECH_DOWNGRADE",
    name = "Player-TechDown",
    object = "Player",
    params = {
    },
}

---@alias EventParam.Player-TechnologyChanges EventParam.ET_ROLE_TECH_CHANGED
M.config["Player-TechnologyChanges"] = {
    desc = "Triggered when the player's technology changes, changing multiple levels at a time will only trigger once",
    key = "ET_ROLE_TECH_CHANGED",
    name = "Player-TechnologyChanges",
    object = "Player",
    params = {
    },
}

---@alias EventParam.Unit-ResearchAndDevelopmentTechnology EventParam.ET_UNIT_UPGRADE_TECH
M.config["Unit-ResearchAndDevelopmentTechnology"] = {
    desc = "Triggered when the unit develops technology",
    key = "ET_UNIT_UPGRADE_TECH",
    name = "Unit-ResearchAndDevelopmentTechnology",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unit-AccessToTechnology EventParam.ET_UNIT_ADD_TECH
M.config["Unit-AccessToTechnology"] = {
    desc = "Triggered when a unit acquires technology",
    key = "ET_UNIT_ADD_TECH",
    name = "Unit-AccessToTechnology",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unit-LostTechnology EventParam.ET_UNIT_REMOVE_TECH
M.config["Unit-LostTechnology"] = {
    desc = "Triggered when unit loses tech",
    key = "ET_UNIT_REMOVE_TECH",
    name = "Unit-LostTechnology",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Player-RelationshipChanges EventParam.ET_ROLE_CHANGE_RELATION
M.config["Player-RelationshipChanges"] = {
    desc = "Triggered when the relationship between players changes",
    key = "ET_ROLE_CHANGE_RELATION",
    name = "Player-RelationshipChanges",
    object = "Player",
    params = {
    },
}

---@alias EventParam.Player-Reconnect EventParam.ET_ROLE_RECONNECT
M.config["Player-Reconnect"] = {
    desc = "Triggered when the player reconnects",
    key = "ET_ROLE_RECONNECT",
    name = "Player-Reconnect",
    object = "Player",
    params = {
    },
}

---@alias EventParam.Unit-BuildingUpgradeStarts EventParam.ET_UNIT_BUILD_UPGRADE_START
M.config["Unit-BuildingUpgradeStarts"] = {
    desc = "",
    key = "ET_UNIT_BUILD_UPGRADE_START",
    name = "Unit-BuildingUpgradeStarts",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unit-BuildingUpgradeCancelled EventParam.ET_UNIT_BUILD_UPGRADE_CANCEL
M.config["Unit-BuildingUpgradeCancelled"] = {
    desc = "",
    key = "ET_UNIT_BUILD_UPGRADE_CANCEL",
    name = "Unit-BuildingUpgradeCancelled",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unit-BuildingUpgradeCompleted EventParam.ET_UNIT_BUILD_UPGRADE_FINISH
M.config["Unit-BuildingUpgradeCompleted"] = {
    desc = "",
    key = "ET_UNIT_BUILD_UPGRADE_FINISH",
    name = "Unit-BuildingUpgradeCompleted",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unit-ConstructionBegins EventParam.ET_UNIT_CONSTRUCT_START
M.config["Unit-ConstructionBegins"] = {
    desc = "",
    key = "ET_UNIT_CONSTRUCT_START",
    name = "Unit-ConstructionBegins",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unit-BuildCancelled EventParam.ET_UNIT_CONSTRUCT_CANCEL
M.config["Unit-BuildCancelled"] = {
    desc = "",
    key = "ET_UNIT_CONSTRUCT_CANCEL",
    name = "Unit-BuildCancelled",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unit-ConstructionCompleted EventParam.ET_UNIT_CONSTRUCT_FINISH
M.config["Unit-ConstructionCompleted"] = {
    desc = "",
    key = "ET_UNIT_CONSTRUCT_FINISH",
    name = "Unit-ConstructionCompleted",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Skill-BuiltComplete EventParam.ET_ABILITY_BUILD_FINISH
M.config["Skill-BuiltComplete"] = {
    desc = "By building skills triggered when the construction is complete, you can obtain the units that have been built",
    extraObjs = {
        [1] = {
            getter = function (self) return self:get_owner() end,
            luaType = "Unit",
        },
    },
    key = "ET_ABILITY_BUILD_FINISH",
    name = "Skill-BuiltComplete",
    object = "Ability",
    params = {
    },
}

---@alias EventParam.Unknown-et_active_ability_changed EventParam.ET_ACTIVE_ABILITY_CHANGED
M.config["Unknown-et_active_ability_changed"] = {
    _deprecated = true,
    desc = "ET_ACTIVE_ABILITY_CHANGED",
    key = "ET_ACTIVE_ABILITY_CHANGED",
    name = "Unknown-et_active_ability_changed",
    params = {
    },
}

---@alias EventParam.Skills-Learning EventParam.ET_ABILITY_PLUS_POINT
M.config["Skills-Learning"] = {
    desc = "Triggered after learning skills",
    extraObjs = {
        [1] = {
            getter = function (self) return self:get_owner() end,
            luaType = "Unit",
        },
    },
    key = "ET_ABILITY_PLUS_POINT",
    name = "Skills-Learning",
    object = "Ability",
    params = {
    },
}

---@alias EventParam.Skills-AvailableStatusChanges EventParam.ET_ABILITY_FORBIDDEN_CHANGED
M.config["Skills-AvailableStatusChanges"] = {
    desc = "",
    extraObjs = {
        [1] = {
            getter = function (self) return self:get_owner() end,
            luaType = "Unit",
        },
    },
    key = "ET_ABILITY_FORBIDDEN_CHANGED",
    name = "Skills-AvailableStatusChanges",
    object = "Ability",
    params = {
    },
}

---@alias EventParam.Skill-SilentStateChanges EventParam.ET_ABILITY_SILENT_CHANGED
M.config["Skill-SilentStateChanges"] = {
    desc = "",
    extraObjs = {
        [1] = {
            getter = function (self) return self:get_owner() end,
            luaType = "Unit",
        },
    },
    key = "ET_ABILITY_SILENT_CHANGED",
    name = "Skill-SilentStateChanges",
    object = "Ability",
    params = {
    },
}

---@alias EventParam.Skills-IconChanges EventParam.ET_ABILITY_ICON_CHANGED
M.config["Skills-IconChanges"] = {
    desc = "",
    key = "ET_ABILITY_ICON_CHANGED",
    name = "Skills-IconChanges",
    params = {
    },
}

---@alias EventParam.Unit-NameChange EventParam.ET_UNIT_NAME_CHANGE
M.config["Unit-NameChange"] = {
    desc = "",
    key = "ET_UNIT_NAME_CHANGE",
    name = "Unit-NameChange",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unit-MinimapIconChanges EventParam.ET_UNIT_CHANGE_MINI_MAP_ICON
M.config["Unit-MinimapIconChanges"] = {
    desc = "",
    key = "ET_UNIT_CHANGE_MINI_MAP_ICON",
    name = "Unit-MinimapIconChanges",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unit-HeadChange EventParam.ET_UNIT_ICON_CHANGE
M.config["Unit-HeadChange"] = {
    desc = "",
    key = "ET_UNIT_ICON_CHANGE",
    name = "Unit-HeadChange",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unknown-et_role_unit_change EventParam.ET_ROLE_UNIT_CHANGE
M.config["Unknown-et_role_unit_change"] = {
    _deprecated = true,
    desc = "ET_ROLE_UNIT_CHANGE",
    key = "ET_ROLE_UNIT_CHANGE",
    name = "Unknown-et_role_unit_change",
    params = {
    },
}

---@alias EventParam.Unknown-et_role_unit_tag_change EventParam.ET_ROLE_UNIT_TAG_CHANGE
M.config["Unknown-et_role_unit_tag_change"] = {
    _deprecated = true,
    desc = "ET_ROLE_UNIT_TAG_CHANGE",
    key = "ET_ROLE_UNIT_TAG_CHANGE",
    name = "Unknown-et_role_unit_tag_change",
    params = {
    },
}

---@alias EventParam.Unknown-et_unit_enter_mover_state EventParam.ET_UNIT_ENTER_MOVER_STATE
M.config["Unknown-et_unit_enter_mover_state"] = {
    _deprecated = true,
    desc = "ET_UNIT_ENTER_MOVER_STATE",
    key = "ET_UNIT_ENTER_MOVER_STATE",
    name = "Unknown-et_unit_enter_mover_state",
    params = {
    },
}

---@alias EventParam.Unit-Remove EventParam.ET_UNIT_REMOVE
M.config["Unit-Remove"] = {
    desc = "Triggered when the unit is removed",
    key = "ET_UNIT_REMOVE",
    name = "Unit-Remove",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unit-AfterRemoval EventParam.ET_UNIT_DELETE
M.config["Unit-AfterRemoval"] = {
    desc = "",
    key = "ET_UNIT_DELETE",
    name = "Unit-AfterRemoval",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unit-EndOfTransmission EventParam.ET_UNIT_END_TRANSLATE
M.config["Unit-EndOfTransmission"] = {
    desc = "",
    key = "ET_UNIT_END_TRANSLATE",
    name = "Unit-EndOfTransmission",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unit-AttributeChange EventParam.ET_UNIT_ATTR_CHANGE
M.config["Unit-AttributeChange"] = {
    desc = "Triggered after the specified property of the specified unit is changed",
    key = "ET_UNIT_ATTR_CHANGE",
    name = "Unit-AttributeChange",
    object = "Unit",
    params = {
        [1] = {
            call = true,
            desc = "unit",
            name = "unit",
            type = "Unit",
        },
        [2] = {
            desc = "Attribute name",
            name = "attr",
            type = "string",
        },
    },
}

---@alias EventParam.Unit-AboutToDie EventParam.ET_BEFORE_UNIT_DIE
M.config["Unit-AboutToDie"] = {
    desc = "Triggered before unit death",
    dispatch = true,
    key = "ET_BEFORE_UNIT_DIE",
    master = "target_unit",
    name = "Unit-AboutToDie",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unit-Death EventParam.ET_UNIT_DIE
M.config["Unit-Death"] = {
    desc = "Triggered after unit death",
    key = "ET_UNIT_DIE",
    master = "unit",
    name = "Unit-Death",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unknown-et_unit_on_unbind_role EventParam.ET_UNIT_ON_UNBIND_ROLE
M.config["Unknown-et_unit_on_unbind_role"] = {
    _deprecated = true,
    desc = "ET_UNIT_ON_UNBIND_ROLE",
    key = "ET_UNIT_ON_UNBIND_ROLE",
    name = "Unknown-et_unit_on_unbind_role",
    params = {
    },
}

---@alias EventParam.Unknown-et_unit_on_bind_role EventParam.ET_UNIT_ON_BIND_ROLE
M.config["Unknown-et_unit_on_bind_role"] = {
    _deprecated = true,
    desc = "ET_UNIT_ON_BIND_ROLE",
    key = "ET_UNIT_ON_BIND_ROLE",
    name = "Unknown-et_unit_on_bind_role",
    params = {
    },
}

---@alias EventParam.Unit-BeforeTakingDamage EventParam.ET_UNIT_BE_HURT
M.config["Unit-BeforeTakingDamage"] = {
    desc = "Triggered before other calculations, you can modify the dodge",
    dispatch = true,
    key = "ET_UNIT_BE_HURT",
    master = "target_unit",
    name = "Unit-BeforeTakingDamage",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unit-BeforeDealingDamage EventParam.ET_UNIT_HURT_OTHER
M.config["Unit-BeforeDealingDamage"] = {
    desc = "Triggered before other calculations, you can modify the dodge",
    dispatch = true,
    key = "ET_UNIT_HURT_OTHER",
    name = "Unit-BeforeDealingDamage",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unit-WhenTakingDamage EventParam.ET_UNIT_BE_HURT_BEFORE_APPLY
M.config["Unit-WhenTakingDamage"] = {
    desc = "The damage value can be modified",
    dispatch = true,
    key = "ET_UNIT_BE_HURT_BEFORE_APPLY",
    master = "target_unit",
    name = "Unit-WhenTakingDamage",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unit-WhenDealingDamage EventParam.ET_UNIT_HURT_OTHER_BEFORE_APPLY
M.config["Unit-WhenDealingDamage"] = {
    desc = "The damage value can be modified",
    dispatch = true,
    key = "ET_UNIT_HURT_OTHER_BEFORE_APPLY",
    name = "Unit-WhenDealingDamage",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unit-AfterDealingDamage EventParam.ET_UNIT_HURT_OTHER_FINISH
M.config["Unit-AfterDealingDamage"] = {
    desc = "Damage is settled, only damage value can be obtained",
    key = "ET_UNIT_HURT_OTHER_FINISH",
    name = "Unit-AfterDealingDamage",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unit-AfterTakingDamage EventParam.ET_UNIT_BE_HURT_COMPLETE
M.config["Unit-AfterTakingDamage"] = {
    desc = "Damage is settled, only damage value can be obtained",
    key = "ET_UNIT_BE_HURT_COMPLETE",
    master = "target_unit",
    name = "Unit-AfterTakingDamage",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unit-BeforeBeingTreated EventParam.ET_UNIT_GET_CURE_BEFORE_APPLY
M.config["Unit-BeforeBeingTreated"] = {
    desc = "Can be triggered before other calculations, can modify the validity",
    dispatch = true,
    key = "ET_UNIT_GET_CURE_BEFORE_APPLY",
    name = "Unit-BeforeBeingTreated",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unit-AfterBeingTreated EventParam.ET_UNIT_GET_CURE_FINISH
M.config["Unit-AfterBeingTreated"] = {
    desc = "Treatment has been billed and only treatment values can be obtained",
    key = "ET_UNIT_GET_CURE_FINISH",
    name = "Unit-AfterBeingTreated",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unit-WhenBeingTreated EventParam.ET_UNIT_GET_CURE
M.config["Unit-WhenBeingTreated"] = {
    desc = "Treatment values can be modified",
    dispatch = true,
    key = "ET_UNIT_GET_CURE",
    name = "Unit-WhenBeingTreated",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Player-PropertiesIconChanges EventParam.ET_RES_ICON_CHANGED
M.config["Player-PropertiesIconChanges"] = {
    desc = "",
    key = "ET_RES_ICON_CHANGED",
    name = "Player-PropertiesIconChanges",
    params = {
    },
}

---@alias EventParam.Unit-CastSkills EventParam.ET_UNIT_RELEASE_ABILITY
M.config["Unit-CastSkills"] = {
    desc = "Triggered when a unit casts a skill",
    key = "ET_UNIT_RELEASE_ABILITY",
    name = "Unit-CastSkills",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unknown-et_unit_release_ability_start EventParam.ET_UNIT_RELEASE_ABILITY_START
M.config["Unknown-et_unit_release_ability_start"] = {
    _deprecated = true,
    desc = "ET_UNIT_RELEASE_ABILITY_START",
    key = "ET_UNIT_RELEASE_ABILITY_START",
    name = "Unknown-et_unit_release_ability_start",
    params = {
    },
}

---@alias EventParam.Unknown-et_unit_release_ability_end EventParam.ET_UNIT_RELEASE_ABILITY_END
M.config["Unknown-et_unit_release_ability_end"] = {
    _deprecated = true,
    desc = "ET_UNIT_RELEASE_ABILITY_END",
    key = "ET_UNIT_RELEASE_ABILITY_END",
    name = "Unknown-et_unit_release_ability_end",
    params = {
    },
}

---@alias EventParam.Unknown-et_unit_release_magic_book EventParam.ET_UNIT_RELEASE_MAGIC_BOOK
M.config["Unknown-et_unit_release_magic_book"] = {
    _deprecated = true,
    desc = "ET_UNIT_RELEASE_MAGIC_BOOK",
    key = "ET_UNIT_RELEASE_MAGIC_BOOK",
    name = "Unknown-et_unit_release_magic_book",
    params = {
    },
}

---@alias EventParam.Unknown-et_unit_level_change EventParam.ET_UNIT_LEVEL_CHANGE
M.config["Unknown-et_unit_level_change"] = {
    _deprecated = true,
    desc = "ET_UNIT_LEVEL_CHANGE",
    key = "ET_UNIT_LEVEL_CHANGE",
    name = "Unknown-et_unit_level_change",
    params = {
    },
}

---@alias EventParam.Unknown-et_unit_exp_change EventParam.ET_UNIT_EXP_CHANGE
M.config["Unknown-et_unit_exp_change"] = {
    _deprecated = true,
    desc = "ET_UNIT_EXP_CHANGE",
    key = "ET_UNIT_EXP_CHANGE",
    name = "Unknown-et_unit_exp_change",
    params = {
    },
}

---@alias EventParam.Unit-BeforeGainingExperience EventParam.ET_UNIT_PRE_ADD_EXP
M.config["Unit-BeforeGainingExperience"] = {
    desc = "Units gain experience before triggering",
    dispatch = true,
    key = "ET_UNIT_PRE_ADD_EXP",
    name = "Unit-BeforeGainingExperience",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unit-AfterGainingExperience EventParam.ET_UNIT_ON_ADD_EXP
M.config["Unit-AfterGainingExperience"] = {
    desc = "Unit triggers after gaining experience",
    key = "ET_UNIT_ON_ADD_EXP",
    name = "Unit-AfterGainingExperience",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unit-ReceiveCommand EventParam.ET_UNIT_ON_COMMAND
M.config["Unit-ReceiveCommand"] = {
    desc = "When a command is received, if the command has a target, it will be stored in different fields according to the target type",
    key = "ET_UNIT_ON_COMMAND",
    name = "Unit-ReceiveCommand",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unit-Kill EventParam.ET_KILL_UNIT
M.config["Unit-Kill"] = {
    desc = "Triggered when a unit kills another unit",
    key = "ET_KILL_UNIT",
    name = "Unit-Kill",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unit-Create EventParam.ET_UNIT_BORN
M.config["Unit-Create"] = {
    desc = "Triggered after a unit is created",
    key = "ET_UNIT_BORN",
    name = "Unit-Create",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unit-EnterTheBattle EventParam.ET_UNIT_ENTER_BATTLE
M.config["Unit-EnterTheBattle"] = {
    desc = "Triggered when a unit enters battle",
    key = "ET_UNIT_ENTER_BATTLE",
    name = "Unit-EnterTheBattle",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unit-OutOfCombat EventParam.ET_UNIT_EXIT_BATTLE
M.config["Unit-OutOfCombat"] = {
    desc = "Triggered when unit leaves battle",
    key = "ET_UNIT_EXIT_BATTLE",
    name = "Unit-OutOfCombat",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unknown-et_unit_create_slave EventParam.ET_UNIT_CREATE_SLAVE
M.config["Unknown-et_unit_create_slave"] = {
    _deprecated = true,
    desc = "ET_UNIT_CREATE_SLAVE",
    key = "ET_UNIT_CREATE_SLAVE",
    name = "Unknown-et_unit_create_slave",
    params = {
    },
}

---@alias EventParam.Unit-AboutToPickUpItems EventParam.ET_UNIT_TRY_PICK_ITEM
M.config["Unit-AboutToPickUpItems"] = {
    desc = "",
    key = "ET_UNIT_TRY_PICK_ITEM",
    name = "Unit-AboutToPickUpItems",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unit-TogglesDefaultBehavior EventParam.ET_UNIT_LOAD_DEFAULT_AI
M.config["Unit-TogglesDefaultBehavior"] = {
    desc = "",
    key = "ET_UNIT_LOAD_DEFAULT_AI",
    name = "Unit-TogglesDefaultBehavior",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unit-ApproachingEnemy EventParam.ET_UNIT_TRY_ACQUIRE_TARGET
M.config["Unit-ApproachingEnemy"] = {
    desc = "",
    key = "ET_UNIT_TRY_ACQUIRE_TARGET",
    name = "Unit-ApproachingEnemy",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unit-SpottedTarget EventParam.ET_UNIT_ACQUIRED_TARGET
M.config["Unit-SpottedTarget"] = {
    desc = "",
    key = "ET_UNIT_ACQUIRED_TARGET",
    name = "Unit-SpottedTarget",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Local-BoneCollision EventParam.ET_DETECT_BONE_COLLISON
M.config["Local-BoneCollision"] = {
    desc = "Triggered when bones collide",
    key = "ET_DETECT_BONE_COLLISON",
    name = "Local-BoneCollision",
    params = {
    },
}

---@alias EventParam.Physical-BoneCollision EventParam.ET_DETECT_BONE_COLLISON
M.config["Physical-BoneCollision"] = {
    desc = "Triggered when bones collide",
    key = "ET_DETECT_BONE_COLLISON",
    name = "Physical-BoneCollision",
    params = {
    },
}

---@alias EventParam.Unknown-et_item_attached_attr_changed EventParam.ET_ITEM_ATTACHED_ATTR_CHANGED
M.config["Unknown-et_item_attached_attr_changed"] = {
    _deprecated = true,
    desc = "ET_ITEM_ATTACHED_ATTR_CHANGED",
    key = "ET_ITEM_ATTACHED_ATTR_CHANGED",
    name = "Unknown-et_item_attached_attr_changed",
    params = {
    },
}

---@alias EventParam.Unit-PurchaseItems EventParam.ET_UNIT_SHOP_BUY_ITEM
M.config["Unit-PurchaseItems"] = {
    desc = "Triggered when an item is purchased",
    key = "ET_UNIT_SHOP_BUY_ITEM",
    name = "Unit-PurchaseItems",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Units-PurchaseUnits EventParam.ET_UNIT_SHOP_BUY_UNIT
M.config["Units-PurchaseUnits"] = {
    desc = "Triggered when a unit is purchased",
    key = "ET_UNIT_SHOP_BUY_UNIT",
    name = "Units-PurchaseUnits",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unit-ItemsForSale EventParam.ET_UNIT_ITEM_SELL
M.config["Unit-ItemsForSale"] = {
    desc = "Triggered when selling items",
    key = "ET_UNIT_ITEM_SELL",
    name = "Unit-ItemsForSale",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Store-MerchandiseChanges EventParam.ET_SHOP_ITEM_CHANGED
M.config["Store-MerchandiseChanges"] = {
    desc = "",
    key = "ET_SHOP_ITEM_CHANGED",
    name = "Store-MerchandiseChanges",
    params = {
    },
}

---@alias EventParam.Store-StockChanges EventParam.ET_SHOP_STOCK_CHANGED
M.config["Store-StockChanges"] = {
    desc = "",
    key = "ET_SHOP_STOCK_CHANGED",
    name = "Store-StockChanges",
    params = {
    },
}

---@alias EventParam.Store-PriceChanges EventParam.ET_SHOP_RES_COST_CHANGED
M.config["Store-PriceChanges"] = {
    desc = "",
    key = "ET_SHOP_RES_COST_CHANGED",
    name = "Store-PriceChanges",
    params = {
    },
}

---@alias EventParam.Unit-ItemComposition EventParam.ET_UNIT_ITEM_COMPOSE
M.config["Unit-ItemComposition"] = {
    desc = "Triggered when item is synthesized",
    key = "ET_UNIT_ITEM_COMPOSE",
    name = "Unit-ItemComposition",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unit-PurchaseItemCompositing EventParam.ET_UNIT_SHOP_BUY_WITH_COMPOSE
M.config["Unit-PurchaseItemCompositing"] = {
    desc = "Triggered when the purchased item is synthesized",
    key = "ET_UNIT_SHOP_BUY_WITH_COMPOSE",
    name = "Unit-PurchaseItemCompositing",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unit-Resurrection EventParam.ET_REVIVE_UNIT
M.config["Unit-Resurrection"] = {
    desc = "Triggered after unit revives",
    key = "ET_REVIVE_UNIT",
    name = "Unit-Resurrection",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unit-Upgrade EventParam.ET_UPGRADE_UNIT
M.config["Unit-Upgrade"] = {
    desc = "Triggered after the unit is upgraded",
    key = "ET_UPGRADE_UNIT",
    name = "Unit-Upgrade",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unknown-et_reach_move_target_unit EventParam.ET_REACH_MOVE_TARGET_UNIT
M.config["Unknown-et_reach_move_target_unit"] = {
    _deprecated = true,
    desc = "ET_REACH_MOVE_TARGET_UNIT",
    key = "ET_REACH_MOVE_TARGET_UNIT",
    name = "Unknown-et_reach_move_target_unit",
    params = {
    },
}

---@alias EventParam.Unknown-et_collide_obstacle_unit EventParam.ET_COLLIDE_OBSTACLE_UNIT
M.config["Unknown-et_collide_obstacle_unit"] = {
    _deprecated = true,
    desc = "ET_COLLIDE_OBSTACLE_UNIT",
    key = "ET_COLLIDE_OBSTACLE_UNIT",
    name = "Unknown-et_collide_obstacle_unit",
    params = {
    },
}

---@alias EventParam.Unit-IntoTheGrass EventParam.ET_UNIT_ENTER_GRASS
M.config["Unit-IntoTheGrass"] = {
    desc = "Triggered when a unit enters the grass",
    key = "ET_UNIT_ENTER_GRASS",
    name = "Unit-IntoTheGrass",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unit-GetOutOfTheGrass EventParam.ET_UNIT_LEAVE_GRASS
M.config["Unit-GetOutOfTheGrass"] = {
    desc = "Triggered when unit leaves grass",
    key = "ET_UNIT_LEAVE_GRASS",
    name = "Unit-GetOutOfTheGrass",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unknown-et_map_visibility_change EventParam.ET_MAP_VISIBILITY_CHANGE
M.config["Unknown-et_map_visibility_change"] = {
    _deprecated = true,
    desc = "ET_MAP_VISIBILITY_CHANGE",
    key = "ET_MAP_VISIBILITY_CHANGE",
    name = "Unknown-et_map_visibility_change",
    params = {
    },
}

---@alias EventParam.Unit-ChangeOwnership EventParam.ET_UNIT_ROLE_CHANGED
M.config["Unit-ChangeOwnership"] = {
    desc = "Unit owner triggers when the player changes",
    key = "ET_UNIT_ROLE_CHANGED",
    name = "Unit-ChangeOwnership",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unknown-et_unit_kv_change EventParam.ET_UNIT_KV_CHANGE
M.config["Unknown-et_unit_kv_change"] = {
    _deprecated = true,
    desc = "ET_UNIT_KV_CHANGE",
    key = "ET_UNIT_KV_CHANGE",
    name = "Unknown-et_unit_kv_change",
    params = {
    },
}

---@alias EventParam.Unknown-et_unit_mul_kv_change EventParam.ET_UNIT_MUL_KV_CHANGE
M.config["Unknown-et_unit_mul_kv_change"] = {
    _deprecated = true,
    desc = "ET_UNIT_MUL_KV_CHANGE",
    key = "ET_UNIT_MUL_KV_CHANGE",
    name = "Unknown-et_unit_mul_kv_change",
    params = {
    },
}

---@alias EventParam.UnitType-ThePrerequisiteIsTrue EventParam.ET_UNIT_PRECONDITION_SUCCEED
M.config["UnitType-ThePrerequisiteIsTrue"] = {
    desc = "Triggered when the precondition changes from invalid to valid",
    key = "ET_UNIT_PRECONDITION_SUCCEED",
    name = "UnitType-ThePrerequisiteIsTrue",
    params = {
    },
}

---@alias EventParam.UnitType-ThePreconditionIsNotValid EventParam.ET_UNIT_PRECONDITION_FAILED
M.config["UnitType-ThePreconditionIsNotValid"] = {
    desc = "Trigger when the precondition changes from true to not true",
    key = "ET_UNIT_PRECONDITION_FAILED",
    name = "UnitType-ThePreconditionIsNotValid",
    params = {
    },
}

---@alias EventParam.ItemType-PreconditionsHold EventParam.ET_ITEM_PRECONDITION_SUCCEED
M.config["ItemType-PreconditionsHold"] = {
    desc = "Triggered when the precondition changes from invalid to valid",
    key = "ET_ITEM_PRECONDITION_SUCCEED",
    name = "ItemType-PreconditionsHold",
    params = {
    },
}

---@alias EventParam.ItemType-PreconditionsAreNotValid EventParam.ET_ITEM_PRECONDITION_FAILED
M.config["ItemType-PreconditionsAreNotValid"] = {
    desc = "Trigger when the precondition changes from true to not true",
    key = "ET_ITEM_PRECONDITION_FAILED",
    name = "ItemType-PreconditionsAreNotValid",
    params = {
    },
}

---@alias EventParam.SkillType-ThePrerequisiteIsTrue EventParam.ET_ABILITY_PRECONDITION_SUCCEED
M.config["SkillType-ThePrerequisiteIsTrue"] = {
    desc = "Triggered when the precondition changes from invalid to valid",
    extraObjs = {
        [1] = {
            getter = function (self) return self:get_owner() end,
            luaType = "Unit",
        },
    },
    key = "ET_ABILITY_PRECONDITION_SUCCEED",
    name = "SkillType-ThePrerequisiteIsTrue",
    params = {
    },
}

---@alias EventParam.SkillType-PreconditionsAreNotValid EventParam.ET_ABILITY_PRECONDITION_FAILED
M.config["SkillType-PreconditionsAreNotValid"] = {
    desc = "Trigger when the precondition changes from true to not true",
    extraObjs = {
        [1] = {
            getter = function (self) return self:get_owner() end,
            luaType = "Unit",
        },
    },
    key = "ET_ABILITY_PRECONDITION_FAILED",
    name = "SkillType-PreconditionsAreNotValid",
    params = {
    },
}

---@alias EventParam.TechnologyType-PreconditionsHold EventParam.ET_TECH_PRECONDITION_SUCCEED
M.config["TechnologyType-PreconditionsHold"] = {
    desc = "Triggered when the precondition changes from invalid to valid",
    extraObjs = {
        [1] = {
            getter = function (self) return self:get_owner() end,
            luaType = "Unit",
        },
    },
    key = "ET_TECH_PRECONDITION_SUCCEED",
    name = "TechnologyType-PreconditionsHold",
    params = {
    },
}

---@alias EventParam.TechnologyType-PreconditionNotValid EventParam.ET_TECH_PRECONDITION_FAILED
M.config["TechnologyType-PreconditionNotValid"] = {
    desc = "Trigger when the precondition changes from true to not true",
    extraObjs = {
        [1] = {
            getter = function (self) return self:get_owner() end,
            luaType = "Unit",
        },
    },
    key = "ET_TECH_PRECONDITION_FAILED",
    name = "TechnologyType-PreconditionNotValid",
    params = {
    },
}

---@alias EventParam.Skills-Upgrades EventParam.ET_ABILITY_UPGRADE
M.config["Skills-Upgrades"] = {
    desc = "Triggered after skill level",
    extraObjs = {
        [1] = {
            getter = function (self) return self:get_owner() end,
            luaType = "Unit",
        },
    },
    key = "ET_ABILITY_UPGRADE",
    name = "Skills-Upgrades",
    object = "Ability",
    params = {
    },
}

---@alias EventParam.Casting.-AboutToBegin EventParam.ET_ABILITY_CS_START
M.config["Casting.-AboutToBegin"] = {
    desc = "Triggered when a spell is about to be cast",
    dispatch = true,
    extraObjs = {
        [1] = {
            getter = function (self) return self:get_owner() end,
            luaType = "Unit",
        },
    },
    key = "ET_ABILITY_CS_START",
    name = "Casting.-AboutToBegin",
    object = "Ability",
    params = {
    },
}

---@alias EventParam.Unknown-et_ability_cs_end EventParam.ET_ABILITY_CS_END
M.config["Unknown-et_ability_cs_end"] = {
    _deprecated = true,
    desc = "ET_ABILITY_CS_END",
    key = "ET_ABILITY_CS_END",
    name = "Unknown-et_ability_cs_end",
    params = {
    },
}

---@alias EventParam.CastTheSpell.-HereWeGo EventParam.ET_ABILITY_PS_START
M.config["CastTheSpell.-HereWeGo"] = {
    desc = "When the spell begins, it triggers before the front shake begins",
    extraObjs = {
        [1] = {
            getter = function (self) return self:get_owner() end,
            luaType = "Unit",
        },
    },
    key = "ET_ABILITY_PS_START",
    name = "CastTheSpell.-HereWeGo",
    object = "Ability",
    params = {
    },
}

---@alias EventParam.Cast-Guide EventParam.ET_ABILITY_PS_END
M.config["Cast-Guide"] = {
    desc = "After the front shake is complete, continue to guide the front trigger",
    extraObjs = {
        [1] = {
            getter = function (self) return self:get_owner() end,
            luaType = "Unit",
        },
    },
    key = "ET_ABILITY_PS_END",
    name = "Cast-Guide",
    object = "Ability",
    params = {
    },
}

---@alias EventParam.Unknown-et_item_ability_ps_end EventParam.ET_ITEM_ABILITY_PS_END
M.config["Unknown-et_item_ability_ps_end"] = {
    _deprecated = true,
    desc = "ET_ITEM_ABILITY_PS_END",
    key = "ET_ITEM_ABILITY_PS_END",
    name = "Unknown-et_item_ability_ps_end",
    params = {
    },
}

---@alias EventParam.CastSpells.-Strike EventParam.ET_ABILITY_SP_END
M.config["CastSpells.-Strike"] = {
    desc = "After continuing to boot, the backshake is triggered before starting",
    extraObjs = {
        [1] = {
            getter = function (self) return self:get_owner() end,
            luaType = "Unit",
        },
    },
    key = "ET_ABILITY_SP_END",
    name = "CastSpells.-Strike",
    object = "Ability",
    params = {
    },
}

---@alias EventParam.CastASpell.-Finished EventParam.ET_ABILITY_CST_END
M.config["CastASpell.-Finished"] = {
    desc = "Trigger when the back shake ends. It only triggers when the spell is properly completed.",
    extraObjs = {
        [1] = {
            getter = function (self) return self:get_owner() end,
            luaType = "Unit",
        },
    },
    key = "ET_ABILITY_CST_END",
    name = "CastASpell.-Finished",
    object = "Ability",
    params = {
    },
}

---@alias EventParam.CastSpells.-Over EventParam.ET_ABILITY_BS_END
M.config["CastSpells.-Over"] = {
    desc = "The entire spell is triggered after the performance is over",
    extraObjs = {
        [1] = {
            getter = function (self) return self:get_owner() end,
            luaType = "Unit",
        },
    },
    key = "ET_ABILITY_BS_END",
    name = "CastSpells.-Over",
    object = "Ability",
    params = {
    },
}

---@alias EventParam.Unknown-et_ability_cs_interrupt EventParam.ET_ABILITY_CS_INTERRUPT
M.config["Unknown-et_ability_cs_interrupt"] = {
    _deprecated = true,
    desc = "ET_ABILITY_CS_INTERRUPT",
    key = "ET_ABILITY_CS_INTERRUPT",
    name = "Unknown-et_ability_cs_interrupt",
    params = {
    },
}

---@alias EventParam.CastASpell.-InterruptTheStart EventParam.ET_ABILITY_PS_INTERRUPT
M.config["CastASpell.-InterruptTheStart"] = {
    desc = "Interrupted between 'start' and 'lead.",
    extraObjs = {
        [1] = {
            getter = function (self) return self:get_owner() end,
            luaType = "Unit",
        },
    },
    key = "ET_ABILITY_PS_INTERRUPT",
    name = "CastASpell.-InterruptTheStart",
    object = "Ability",
    params = {
    },
}

---@alias EventParam.CastSpells.-InterruptTheLead EventParam.ET_ABILITY_SP_INTERRUPT
M.config["CastSpells.-InterruptTheLead"] = {
    desc = "Interrupted between 'lead' and 'hand.",
    extraObjs = {
        [1] = {
            getter = function (self) return self:get_owner() end,
            luaType = "Unit",
        },
    },
    key = "ET_ABILITY_SP_INTERRUPT",
    name = "CastSpells.-InterruptTheLead",
    object = "Ability",
    params = {
    },
}

---@alias EventParam.CastASpell.-BreakTheShot EventParam.ET_ABILITY_CST_INTERRUPT
M.config["CastASpell.-BreakTheShot"] = {
    desc = "Interrupted between 'shot' and 'done.",
    extraObjs = {
        [1] = {
            getter = function (self) return self:get_owner() end,
            luaType = "Unit",
        },
    },
    key = "ET_ABILITY_CST_INTERRUPT",
    name = "CastASpell.-BreakTheShot",
    object = "Ability",
    params = {
    },
}

---@alias EventParam.Unknown-et_ability_bs_interrupt EventParam.ET_ABILITY_BS_INTERRUPT
M.config["Unknown-et_ability_bs_interrupt"] = {
    _deprecated = true,
    desc = "ET_ABILITY_BS_INTERRUPT",
    key = "ET_ABILITY_BS_INTERRUPT",
    name = "Unknown-et_ability_bs_interrupt",
    params = {
    },
}

---@alias EventParam.CastSpells.-Stop EventParam.ET_ABILITY_END
M.config["CastSpells.-Stop"] = {
    desc = "Triggered after a spell has stopped, is the last event in the casting process.",
    extraObjs = {
        [1] = {
            getter = function (self) return self:get_owner() end,
            luaType = "Unit",
        },
    },
    key = "ET_ABILITY_END",
    name = "CastSpells.-Stop",
    object = "Ability",
    params = {
    },
}

---@alias EventParam.Skills-Acquisition EventParam.ET_ABILITY_OBTAIN
M.config["Skills-Acquisition"] = {
    desc = "Triggered after gaining a skill",
    extraObjs = {
        [1] = {
            getter = function (self) return self:get_owner() end,
            luaType = "Unit",
        },
    },
    key = "ET_ABILITY_OBTAIN",
    name = "Skills-Acquisition",
    object = "Ability",
    params = {
    },
}

---@alias EventParam.SkillLoss EventParam.ET_ABILITY_LOSE
M.config["SkillLoss"] = {
    desc = "Triggered after loss of skill",
    extraObjs = {
        [1] = {
            getter = function (self) return self:get_owner() end,
            luaType = "Unit",
        },
    },
    key = "ET_ABILITY_LOSE",
    name = "SkillLoss",
    object = "Ability",
    params = {
    },
}

---@alias EventParam.Skill-exchange EventParam.ET_ABILITY_SWITCH
M.config["Skill-exchange"] = {
    desc = "Triggered after skill exchange",
    extraObjs = {
        [1] = {
            getter = function (self) return self:get_owner() end,
            luaType = "Unit",
        },
    },
    key = "ET_ABILITY_SWITCH",
    name = "Skill-exchange",
    object = "Ability",
    params = {
    },
}

---@alias EventParam.Skills-Disabled EventParam.ET_ABILITY_DISABLE
M.config["Skills-Disabled"] = {
    desc = "",
    extraObjs = {
        [1] = {
            getter = function (self) return self:get_owner() end,
            luaType = "Unit",
        },
    },
    key = "ET_ABILITY_DISABLE",
    name = "Skills-Disabled",
    object = "Ability",
    params = {
    },
}

---@alias EventParam.Skills-Enabled EventParam.ET_ABILITY_ENABLE
M.config["Skills-Enabled"] = {
    desc = "",
    extraObjs = {
        [1] = {
            getter = function (self) return self:get_owner() end,
            luaType = "Unit",
        },
    },
    key = "ET_ABILITY_ENABLE",
    name = "Skills-Enabled",
    object = "Ability",
    params = {
    },
}

---@alias EventParam.Skill-CooldownEnds EventParam.ET_ABILITY_CD_END
M.config["Skill-CooldownEnds"] = {
    desc = "Trigger when cooldown ends",
    extraObjs = {
        [1] = {
            getter = function (self) return self:get_owner() end,
            luaType = "Unit",
        },
    },
    key = "ET_ABILITY_CD_END",
    name = "Skill-CooldownEnds",
    object = "Ability",
    params = {
    },
}

---@alias EventParam.Skills-CustomAnimationAxis EventParam.ET_ABILITY_SEND_CUE_EVENT
M.config["Skills-CustomAnimationAxis"] = {
    desc = "",
    extraObjs = {
        [1] = {
            getter = function (self) return self:get_owner() end,
            luaType = "Unit",
        },
    },
    key = "ET_ABILITY_SEND_CUE_EVENT",
    name = "Skills-CustomAnimationAxis",
    object = "Ability",
    params = {
        [1] = {
            desc = "CUE event name",
            name = "string",
            type = "string",
        },
    },
}

---@alias EventParam.Effect-Gain EventParam.ET_OBTAIN_MODIFIER
M.config["Effect-Gain"] = {
    desc = "Triggered after obtaining a magic effect",
    extraObjs = {
        [1] = {
            getter = function (self) return self:get_owner() end,
            luaType = "Unit",
        },
    },
    key = "ET_OBTAIN_MODIFIER",
    name = "Effect-Gain",
    object = "Buff",
    params = {
    },
}

---@alias EventParam.Effect-loss EventParam.ET_LOSS_MODIFIER
M.config["Effect-loss"] = {
    desc = "Triggered after losing magic effects",
    extraObjs = {
        [1] = {
            getter = function (self) return self:get_owner() end,
            luaType = "Unit",
        },
    },
    key = "ET_LOSS_MODIFIER",
    name = "Effect-loss",
    object = "Buff",
    params = {
    },
}

---@alias EventParam.Effect-Heartbeat EventParam.ET_MODIFIER_CYCLE_TRIGGER
M.config["Effect-Heartbeat"] = {
    desc = "Periodic triggering of magical effects",
    extraObjs = {
        [1] = {
            getter = function (self) return self:get_owner() end,
            luaType = "Unit",
        },
    },
    key = "ET_MODIFIER_CYCLE_TRIGGER",
    name = "Effect-Heartbeat",
    object = "Buff",
    params = {
    },
}

---@alias EventParam.Effects-Overlay EventParam.ET_MODIFIER_ADDTION
M.config["Effects-Overlay"] = {
    desc = "Triggered when magic effects are overlaid",
    extraObjs = {
        [1] = {
            getter = function (self) return self:get_owner() end,
            luaType = "Unit",
        },
    },
    key = "ET_MODIFIER_ADDTION",
    name = "Effects-Overlay",
    object = "Buff",
    params = {
    },
}

---@alias EventParam.Effect-NumberOfLayersChange EventParam.ET_MODIFIER_LAYER_CHANGE
M.config["Effect-NumberOfLayersChange"] = {
    desc = "Trigger when the number of magic effect layers changes",
    extraObjs = {
        [1] = {
            getter = function (self) return self:get_owner() end,
            luaType = "Unit",
        },
    },
    key = "ET_MODIFIER_LAYER_CHANGE",
    name = "Effect-NumberOfLayersChange",
    object = "Buff",
    params = {
    },
}

---@alias EventParam.Effect-ComingSoon EventParam.ET_MODIFIER_GET_BEFORE_CREATE
M.config["Effect-ComingSoon"] = {
    desc = "Trigger before magic effect is obtained",
    dispatch = true,
    extraObjs = {
        [1] = {
            getter = function (self) return self:get_owner() end,
            luaType = "Unit",
        },
    },
    key = "ET_MODIFIER_GET_BEFORE_CREATE",
    name = "Effect-ComingSoon",
    object = "Buff",
    params = {
    },
}

---@alias EventParam.Effects-Overlay EventParam.ET_MODIFIER_BE_COVERED
M.config["Effects-Overlay"] = {
    desc = "Triggered when the magic effect overlays",
    dispatch = true,
    extraObjs = {
        [1] = {
            getter = function (self) return self:get_owner() end,
            luaType = "Unit",
        },
    },
    key = "ET_MODIFIER_BE_COVERED",
    name = "Effects-Overlay",
    object = "Buff",
    params = {
    },
}

---@alias EventParam.Destructible-Create EventParam.ET_DEST_CREATE_NEW
M.config["Destructible-Create"] = {
    desc = "Triggered after destructible is created",
    key = "ET_DEST_CREATE_NEW",
    name = "Destructible-Create",
    object = "Destructible",
    params = {
    },
}

---@alias EventParam.Destructible-Death EventParam.ET_DEST_DIE_NEW
M.config["Destructible-Death"] = {
    desc = "Triggered when destructible dies",
    key = "ET_DEST_DIE_NEW",
    name = "Destructible-Death",
    object = "Destructible",
    params = {
    },
}

---@alias EventParam.Destructible.-Resurrection EventParam.ET_DEST_REVIVE_NEW
M.config["Destructible.-Resurrection"] = {
    desc = "Triggered when destructible comes back to life",
    key = "ET_DEST_REVIVE_NEW",
    name = "Destructible.-Resurrection",
    object = "Destructible",
    params = {
    },
}

---@alias EventParam.Destructible-ResourceChange EventParam.ET_DEST_RES_CNT_CHG_NEW
M.config["Destructible-ResourceChange"] = {
    desc = "Destructible storage triggers after resource changes",
    key = "ET_DEST_RES_CNT_CHG_NEW",
    name = "Destructible-ResourceChange",
    object = "Destructible",
    params = {
    },
}

---@alias EventParam.Destructible-Collection EventParam.ET_DEST_COLLECTED_NEW
M.config["Destructible-Collection"] = {
    desc = "Triggered after the destructible is collected",
    key = "ET_DEST_COLLECTED_NEW",
    name = "Destructible-Collection",
    object = "Destructible",
    params = {
    },
}

---@alias EventParam.Destructible-Damaged EventParam.ET_GET_HURT_NEW
M.config["Destructible-Damaged"] = {
    desc = "Destructible triggers when it takes damage",
    key = "ET_GET_HURT_NEW",
    name = "Destructible-Damaged",
    object = "Destructible",
    params = {
    },
}

---@alias EventParam.Check-Destructible EventParam.ET_SELECT_DEST
M.config["Check-Destructible"] = {
    desc = "The destructible is triggered when the player selects it",
    key = "ET_SELECT_DEST",
    name = "Check-Destructible",
    object = "Player",
    params = {
    },
}

---@alias EventParam.Local-Select-Destructible EventParam.ET_ASYNC_SELECT_DEST
M.config["Local-Select-Destructible"] = {
    desc = "Local players select destructible when triggered",
    key = "ET_ASYNC_SELECT_DEST",
    name = "Local-Select-Destructible",
    object = "Player",
    params = {
    },
}

---@alias EventParam.Destructible-Remove EventParam.ET_DEST_DELETE
M.config["Destructible-Remove"] = {
    desc = "Triggered after destructible is removed",
    key = "ET_DEST_DELETE",
    name = "Destructible-Remove",
    object = "Destructible",
    params = {
    },
}

---@alias EventParam.Projectiles-Created EventParam.ET_PRODUCE_PROJECTILE
M.config["Projectiles-Created"] = {
    desc = "Triggers after projectile creation",
    key = "ET_PRODUCE_PROJECTILE",
    name = "Projectiles-Created",
    object = "Projectile",
    params = {
    },
}

---@alias EventParam.Projectiles-Death EventParam.ET_DEATH_PROJECTILE
M.config["Projectiles-Death"] = {
    desc = "Triggered when the projectile dies",
    key = "ET_DEATH_PROJECTILE",
    name = "Projectiles-Death",
    object = "Projectile",
    params = {
    },
}

---@alias EventParam.Interface-Message EventParam.ET_TRIGGER_COMPONENT_EVENT
M.config["Interface-Message"] = {
    desc = "Trigger the user-defined event marked on the interface",
    from_global = true,
    key = "ET_TRIGGER_COMPONENT_EVENT",
    name = "Interface-Message",
    object = "Player",
    params = {
        [1] = {
            desc = "Custom event name",
            name = "event_name",
            type = "string",
        },
    },
}

---@alias EventParam.Interface-SliderChanges EventParam.ET_TRIGGER_UI_SLIDER_CHANGE_EVENT
M.config["Interface-SliderChanges"] = {
    desc = "Triggered when the slider changes",
    from_global = true,
    key = "ET_TRIGGER_UI_SLIDER_CHANGE_EVENT",
    name = "Interface-SliderChanges",
    object = "Player",
    params = {
        [1] = {
            desc = "Target control",
            name = "ui",
            resolve = function (ui)
                return ui.handle
            end,
            type = "UI",
        },
    },
}

---@alias EventParam.Interface-ChatBoxVisibilityChanges EventParam.ET_TRIGGER_UI_CHATBOX_VISIBLE_CHANGE_EVENT
M.config["Interface-ChatBoxVisibilityChanges"] = {
    desc = "Triggered when chat box visibility changes",
    from_global = true,
    key = "ET_TRIGGER_UI_CHATBOX_VISIBLE_CHANGE_EVENT",
    name = "Interface-ChatBoxVisibilityChanges",
    object = "Player",
    params = {
        [1] = {
            desc = "Target control",
            name = "ui",
            resolve = function (ui)
                return ui.handle
            end,
            type = "UI",
        },
    },
}

---@alias EventParam.Interface-EquipmentDragAndDrop EventParam.ET_TRIGGER_UI_EQUIP_SLOT_DRAG_EVENT
M.config["Interface-EquipmentDragAndDrop"] = {
    desc = "",
    from_global = true,
    key = "ET_TRIGGER_UI_EQUIP_SLOT_DRAG_EVENT",
    name = "Interface-EquipmentDragAndDrop",
    object = "Player",
    params = {
        [1] = {
            desc = "Target control",
            name = "ui",
            resolve = function (ui)
                return ui.handle
            end,
            type = "UI",
        },
    },
}

---@alias EventParam.Screen-CheckBoxChanges EventParam.ET_TRIGGER_UI_CHECKBOX_CHANGE_EVENT
M.config["Screen-CheckBoxChanges"] = {
    desc = "Triggered when the check box changes",
    from_global = true,
    key = "ET_TRIGGER_UI_CHECKBOX_CHANGE_EVENT",
    name = "Screen-CheckBoxChanges",
    object = "Player",
    params = {
        [1] = {
            desc = "Target control",
            name = "ui",
            resolve = function (ui)
                return ui.handle
            end,
            type = "UI",
        },
    },
}

---@alias EventParam.Screen-VideoPlaybackIsComplete EventParam.ET_TRIGGER_UI_VIDEO_END_EVENT
M.config["Screen-VideoPlaybackIsComplete"] = {
    desc = "",
    from_global = true,
    key = "ET_TRIGGER_UI_VIDEO_END_EVENT",
    name = "Screen-VideoPlaybackIsComplete",
    object = "Player",
    params = {
        [1] = {
            desc = "Target control",
            name = "ui",
            resolve = function (ui)
                return ui.handle
            end,
            type = "UI",
        },
    },
}

---@alias EventParam.Local-interface-inputBoxGetsFocus EventParam.ET_TRIGGER_UI_INPUT_FIELD_GET_FOCUS_EVENT
M.config["Local-interface-inputBoxGetsFocus"] = {
    desc = "",
    from_global = true,
    key = "ET_TRIGGER_UI_INPUT_FIELD_GET_FOCUS_EVENT",
    name = "Local-interface-inputBoxGetsFocus",
    object = "Player",
    params = {
        [1] = {
            desc = "Input box control",
            name = "ui",
            resolve = function (ui)
                return ui.handle
            end,
            type = "UI",
        },
    },
}

---@alias EventParam.Local-interface-inputBoxOutOfFocus EventParam.ET_TRIGGER_UI_INPUT_FIELD_LOST_FOCUS_EVENT
M.config["Local-interface-inputBoxOutOfFocus"] = {
    desc = "",
    from_global = true,
    key = "ET_TRIGGER_UI_INPUT_FIELD_LOST_FOCUS_EVENT",
    name = "Local-interface-inputBoxOutOfFocus",
    object = "Player",
    params = {
        [1] = {
            desc = "Input box control",
            name = "ui",
            resolve = function (ui)
                return ui.handle
            end,
            type = "UI",
        },
    },
}

---@alias EventParam.Local-Interface-InputBoxContentChanged EventParam.ET_TRIGGER_UI_INPUT_FIELD_TEXT_CHANGED_EVENT
M.config["Local-Interface-InputBoxContentChanged"] = {
    desc = "",
    from_global = true,
    key = "ET_TRIGGER_UI_INPUT_FIELD_TEXT_CHANGED_EVENT",
    name = "Local-Interface-InputBoxContentChanged",
    object = "Player",
    params = {
        [1] = {
            desc = "Input box control",
            name = "ui",
            resolve = function (ui)
                return ui.handle
            end,
            type = "UI",
        },
    },
}

---@alias EventParam.Keyboard.-PressIt EventParam.ET_KEYBOARD_KEY_DOWN_EVENT
M.config["Keyboard.-PressIt"] = {
    desc = "Triggered when a key on the keyboard is pressed",
    from_global = true,
    key = "ET_KEYBOARD_KEY_DOWN_EVENT",
    name = "Keyboard.-PressIt",
    object = "Player",
    params = {
        [1] = {
            call = false,
            desc = "Press the key",
            name = "key",
            resolve = function (key)
                return clicli.const.KeyboardKey[key] or key
            end,
            type = "clicli.Const.KeyboardKey|integer",
        },
    },
}

---@alias EventParam.Keyboard-Lift EventParam.ET_KEYBOARD_KEY_UP_EVENT
M.config["Keyboard-Lift"] = {
    desc = "Triggered when a key on the keyboard is lifted",
    from_global = true,
    key = "ET_KEYBOARD_KEY_UP_EVENT",
    name = "Keyboard-Lift",
    object = "Player",
    params = {
        [1] = {
            call = false,
            desc = "Raised key",
            name = "key",
            resolve = function (key)
                return clicli.const.KeyboardKey[key] or key
            end,
            type = "clicli.Const.KeyboardKey|integer",
        },
    },
}

---@alias EventParam.Local-Keyboard-Press EventParam.ET_ASYNC_KEYBOARD_KEY_DOWN_EVENT
M.config["Local-Keyboard-Press"] = {
    desc = "Triggered when a key on the keyboard is pressed",
    from_global = true,
    key = "ET_ASYNC_KEYBOARD_KEY_DOWN_EVENT",
    name = "Local-Keyboard-Press",
    object = "Player",
    params = {
        [1] = {
            call = false,
            desc = "Press the key",
            name = "key",
            resolve = function (key)
                return clicli.const.KeyboardKey[key] or key
            end,
            type = "clicli.Const.KeyboardKey|integer",
        },
    },
}

---@alias EventParam.Local-Keyboard-Lift EventParam.ET_ASYNC_KEYBOARD_KEY_UP_EVENT
M.config["Local-Keyboard-Lift"] = {
    desc = "Triggered when a key on the keyboard is lifted",
    from_global = true,
    key = "ET_ASYNC_KEYBOARD_KEY_UP_EVENT",
    name = "Local-Keyboard-Lift",
    object = "Player",
    params = {
        [1] = {
            call = false,
            desc = "Raised key",
            name = "key",
            resolve = function (key)
                return clicli.const.KeyboardKey[key] or key
            end,
            type = "clicli.Const.KeyboardKey|integer",
        },
    },
}

---@alias EventParam.Mouse-PressIt EventParam.ET_MOUSE_KEY_DOWN_EVENT
M.config["Mouse-PressIt"] = {
    desc = "Triggered when a key on the mouse is pressed",
    from_global = true,
    key = "ET_MOUSE_KEY_DOWN_EVENT",
    name = "Mouse-PressIt",
    object = "Player",
    params = {
        [1] = {
            call = false,
            desc = "Press the key",
            name = "key",
            resolve = function (key)
                return clicli.const.MouseKey[key] or key
            end,
            type = "clicli.Const.MouseKey|integer",
        },
    },
}

---@alias EventParam.Mouse-lift EventParam.ET_MOUSE_KEY_UP_EVENT
M.config["Mouse-lift"] = {
    desc = "Triggered when a key on the mouse is lifted",
    from_global = true,
    key = "ET_MOUSE_KEY_UP_EVENT",
    name = "Mouse-lift",
    object = "Player",
    params = {
        [1] = {
            call = false,
            desc = "Raised key",
            name = "key",
            resolve = function (key)
                return clicli.const.MouseKey[key] or key
            end,
            type = "clicli.Const.MouseKey|integer",
        },
    },
}

---@alias EventParam.Mouse-double-click EventParam.MOUSE_KEY_DB_CLICK_EVENT
M.config["Mouse-double-click"] = {
    desc = "Triggered when a key on the mouse is double-clicked",
    from_global = true,
    key = "MOUSE_KEY_DB_CLICK_EVENT",
    name = "Mouse-double-click",
    object = "Player",
    params = {
        [1] = {
            call = false,
            desc = "Double click key",
            name = "key",
            resolve = function (key)
                return clicli.const.MouseKey[key] or key
            end,
            type = "clicli.Const.MouseKey|integer",
        },
    },
}

---@alias EventParam.Local-Mouse-PressDown EventParam.ET_ASYNC_MOUSE_KEY_DOWN_EVENT
M.config["Local-Mouse-PressDown"] = {
    desc = "Triggered when a key on the mouse is pressed",
    from_global = true,
    key = "ET_ASYNC_MOUSE_KEY_DOWN_EVENT",
    name = "Local-Mouse-PressDown",
    object = "Player",
    params = {
        [1] = {
            call = false,
            desc = "Press the key",
            name = "key",
            resolve = function (key)
                return clicli.const.MouseKey[key] or key
            end,
            type = "clicli.Const.MouseKey|integer",
        },
    },
}

---@alias EventParam.Local-Mouse-Lift EventParam.ET_ASYNC_MOUSE_KEY_UP_EVENT
M.config["Local-Mouse-Lift"] = {
    desc = "Triggered when a key on the mouse is lifted",
    from_global = true,
    key = "ET_ASYNC_MOUSE_KEY_UP_EVENT",
    name = "Local-Mouse-Lift",
    object = "Player",
    params = {
        [1] = {
            call = false,
            desc = "Raised key",
            name = "key",
            resolve = function (key)
                return clicli.const.MouseKey[key] or key
            end,
            type = "clicli.Const.MouseKey|integer",
        },
    },
}

---@alias EventParam.Local-Mouse-DoubleClick EventParam.ET_ASYNC_MOUSE_KEY_DB_CLICK_EVENT
M.config["Local-Mouse-DoubleClick"] = {
    desc = "Triggered when a key on the mouse is double-clicked",
    from_global = true,
    key = "ET_ASYNC_MOUSE_KEY_DB_CLICK_EVENT",
    name = "Local-Mouse-DoubleClick",
    object = "Player",
    params = {
        [1] = {
            call = false,
            desc = "Double click key",
            name = "key",
            resolve = function (key)
                return clicli.const.MouseKey[key] or key
            end,
            type = "clicli.Const.MouseKey|integer",
        },
    },
}

---@alias EventParam.Mouse-PressTheUnit EventParam.MOUSE_KEY_DOWN_UNIT_EVENT
M.config["Mouse-PressTheUnit"] = {
    desc = "Triggered when a key on the mouse is pressed against the unit",
    from_global = true,
    key = "MOUSE_KEY_DOWN_UNIT_EVENT",
    name = "Mouse-PressTheUnit",
    object = "Player",
    params = {
        [1] = {
            call = false,
            desc = "Press the key",
            name = "key",
            resolve = function (key)
                return clicli.const.MouseKey[key] or key
            end,
            type = "clicli.Const.MouseKey|integer",
        },
    },
}

---@alias EventParam.Mouse-LiftUnit EventParam.MOUSE_KEY_UP_UNIT_EVENT
M.config["Mouse-LiftUnit"] = {
    desc = "Triggered when a key on the mouse is raised against the unit",
    from_global = true,
    key = "MOUSE_KEY_UP_UNIT_EVENT",
    name = "Mouse-LiftUnit",
    object = "Player",
    params = {
        [1] = {
            call = false,
            desc = "Raised key",
            name = "key",
            resolve = function (key)
                return clicli.const.MouseKey[key] or key
            end,
            type = "clicli.Const.MouseKey|integer",
        },
    },
}

---@alias EventParam.Mouse-DoubleClickTheUnit EventParam.MOUSE_KEY_DB_CLICK_UNIT_EVENT
M.config["Mouse-DoubleClickTheUnit"] = {
    desc = "A key on the mouse is triggered when the unit is double-clicked",
    from_global = true,
    key = "MOUSE_KEY_DB_CLICK_UNIT_EVENT",
    name = "Mouse-DoubleClickTheUnit",
    object = "Player",
    params = {
        [1] = {
            call = false,
            desc = "Double click key",
            name = "key",
            resolve = function (key)
                return clicli.const.MouseKey[key] or key
            end,
            type = "clicli.Const.MouseKey|integer",
        },
    },
}

---@alias EventParam.Local-Mouse-PressTheUnit EventParam.ET_MOUSE_KEY_DOWN_UNIT_EVENT
M.config["Local-Mouse-PressTheUnit"] = {
    desc = "Triggered when a key on the mouse is pressed against the unit",
    from_global = true,
    key = "ET_MOUSE_KEY_DOWN_UNIT_EVENT",
    name = "Local-Mouse-PressTheUnit",
    object = "Player",
    params = {
        [1] = {
            call = false,
            desc = "Press the key",
            name = "key",
            resolve = function (key)
                return clicli.const.MouseKey[key] or key
            end,
            type = "clicli.Const.MouseKey|integer",
        },
    },
}

---@alias EventParam.Local-Mouse-LiftUnit EventParam.ET_MOUSE_KEY_UP_UNIT_EVENT
M.config["Local-Mouse-LiftUnit"] = {
    desc = "Triggered when a key on the mouse is raised against the unit",
    from_global = true,
    key = "ET_MOUSE_KEY_UP_UNIT_EVENT",
    name = "Local-Mouse-LiftUnit",
    object = "Player",
    params = {
        [1] = {
            call = false,
            desc = "Raised key",
            name = "key",
            resolve = function (key)
                return clicli.const.MouseKey[key] or key
            end,
            type = "clicli.Const.MouseKey|integer",
        },
    },
}

---@alias EventParam.Local-Mouse-DoubleClickTheUnit EventParam.ET_MOUSE_KEY_DB_CLICK_UNIT_EVENT
M.config["Local-Mouse-DoubleClickTheUnit"] = {
    desc = "A key on the mouse is triggered when the unit is double-clicked",
    from_global = true,
    key = "ET_MOUSE_KEY_DB_CLICK_UNIT_EVENT",
    name = "Local-Mouse-DoubleClickTheUnit",
    object = "Player",
    params = {
        [1] = {
            call = false,
            desc = "Double click key",
            name = "key",
            resolve = function (key)
                return clicli.const.MouseKey[key] or key
            end,
            type = "clicli.Const.MouseKey|integer",
        },
    },
}

---@alias EventParam.Mouse-move EventParam.MOUSE_MOVE_EVENT
M.config["Mouse-move"] = {
    desc = "Triggered when mouse moves",
    from_global = true,
    key = "MOUSE_MOVE_EVENT",
    name = "Mouse-move",
    object = "Player",
    params = {
    },
}

---@alias EventParam.Local-Mouse-Move EventParam.ET_ASYNC_MOUSE_MOVE_EVENT
M.config["Local-Mouse-Move"] = {
    desc = "Triggered when mouse moves",
    from_global = true,
    key = "ET_ASYNC_MOUSE_MOVE_EVENT",
    name = "Local-Mouse-Move",
    object = "Player",
    params = {
    },
}

---@alias EventParam.Mouse-Wheel EventParam.ET_MOUSE_WHEEL_EVENT
M.config["Mouse-Wheel"] = {
    desc = "Triggered when the mouse wheel is scrolling",
    from_global = true,
    key = "ET_MOUSE_WHEEL_EVENT",
    name = "Mouse-Wheel",
    object = "Player",
    params = {
        [1] = {
            call = false,
            desc = "Rolling direction",
            name = "key",
            resolve = function (key)
                return clicli.const.MouseKey[key] or key
            end,
            type = "clicli.Const.MouseKey|integer",
        },
    },
}

---@alias EventParam.Local-Mouse-Wheel EventParam.ET_ASYNC_MOUSE_WHEEL_EVENT
M.config["Local-Mouse-Wheel"] = {
    desc = "Triggered when the mouse wheel is scrolling",
    from_global = true,
    key = "ET_ASYNC_MOUSE_WHEEL_EVENT",
    name = "Local-Mouse-Wheel",
    object = "Player",
    params = {
        [1] = {
            call = false,
            desc = "Rolling direction",
            name = "key",
            resolve = function (key)
                return clicli.const.MouseKey[key] or key
            end,
            type = "clicli.Const.MouseKey|integer",
        },
    },
}

---@alias EventParam.Select-unit EventParam.ET_SELECT_UNIT
M.config["Select-unit"] = {
    desc = "Triggered when the player selects a unit",
    key = "ET_SELECT_UNIT",
    name = "Select-unit",
    object = "Player",
    params = {
    },
}

---@alias EventParam.Local-Select-Unit EventParam.ET_ASYNC_SELECT_UNIT
M.config["Local-Select-Unit"] = {
    desc = "Triggered when local players select a unit",
    key = "ET_ASYNC_SELECT_UNIT",
    name = "Local-Select-Unit",
    object = "Player",
    params = {
    },
}

---@alias EventParam.Check-Cancel EventParam.CANCEL_SELECT_UNIT
M.config["Check-Cancel"] = {
    desc = "Triggered when the player actively unselects",
    key = "CANCEL_SELECT_UNIT",
    name = "Check-Cancel",
    object = "Player",
    params = {
    },
}

---@alias EventParam.Local-Select-Cancel EventParam.ET_ASYNC_CANCEL_SELECT_UNIT
M.config["Local-Select-Cancel"] = {
    desc = "Triggered when the player's selected status is cancelled",
    key = "ET_ASYNC_CANCEL_SELECT_UNIT",
    name = "Local-Select-Cancel",
    object = "Player",
    params = {
    },
}

---@alias EventParam.Selected-LostUnit EventParam.LOST_SELECT_UNIT
M.config["Selected-LostUnit"] = {
    desc = "Triggered when the player passively loses the selected status of the unit",
    key = "LOST_SELECT_UNIT",
    name = "Selected-LostUnit",
    object = "Player",
    params = {
    },
}

---@alias EventParam.Local-Selected-LostUnit EventParam.ET_ASYNC_LOST_SELECT_UNIT
M.config["Local-Selected-LostUnit"] = {
    desc = "Triggered when a local player passively loses the selected status of a unit",
    key = "ET_ASYNC_LOST_SELECT_UNIT",
    name = "Local-Selected-LostUnit",
    object = "Player",
    params = {
    },
}

---@alias EventParam.Select-item EventParam.ET_SELECT_ITEM
M.config["Select-item"] = {
    desc = "Triggered when item is selected",
    key = "ET_SELECT_ITEM",
    name = "Select-item",
    object = "Player",
    params = {
    },
}

---@alias EventParam.Local-Select-Items EventParam.ET_ASYNC_SELECT_ITEM
M.config["Local-Select-Items"] = {
    desc = "Triggered when local players select an item",
    key = "ET_ASYNC_SELECT_ITEM",
    name = "Local-Select-Items",
    object = "Player",
    params = {
    },
}

---@alias EventParam.Player-CheatingDetected EventParam.ET_ATTR_CHEATING_DETECTED
M.config["Player-CheatingDetected"] = {
    desc = "",
    key = "ET_ATTR_CHEATING_DETECTED",
    name = "Player-CheatingDetected",
    object = "Player",
    params = {
    },
}

---@alias EventParam.Mouse-DoubleClickTheItem EventParam.ET_DOUBLE_CLICK_ITEM
M.config["Mouse-DoubleClickTheItem"] = {
    desc = "Triggered when the left mouse button double clicks on the item",
    from_global = true,
    key = "ET_DOUBLE_CLICK_ITEM",
    name = "Mouse-DoubleClickTheItem",
    object = "Player",
    params = {
    },
}

---@alias EventParam.Mouse-DoubleClickDestructible EventParam.ET_DOUBLE_CLICK_DEST
M.config["Mouse-DoubleClickDestructible"] = {
    desc = "Triggered when the destructible object is double-clicked on the left mouse button",
    from_global = true,
    key = "ET_DOUBLE_CLICK_DEST",
    name = "Mouse-DoubleClickDestructible",
    object = "Player",
    params = {
    },
}

---@alias EventParam.Select-UnitGroup EventParam.ET_SELECT_UNIT_GROUP
M.config["Select-UnitGroup"] = {
    desc = "Triggered when the player selects a unit group",
    key = "ET_SELECT_UNIT_GROUP",
    name = "Select-UnitGroup",
    object = "Player",
    params = {
    },
}

---@alias EventParam.Local-Select-UnitGroup EventParam.ET_ASYNC_SELECT_UNIT_GROUP
M.config["Local-Select-UnitGroup"] = {
    desc = "Triggered when a local player selects a unit group",
    key = "ET_ASYNC_SELECT_UNIT_GROUP",
    name = "Local-Select-UnitGroup",
    object = "Player",
    params = {
    },
}

---@alias EventParam.Skills-TurnOnTheIndicator EventParam.ET_START_SKILL_POINTER
M.config["Skills-TurnOnTheIndicator"] = {
    desc = "Skill's aiming indicator is displayed when triggered",
    extraObjs = {
        [1] = {
            getter = function (self) return self:get_owner() end,
            luaType = "Unit",
        },
    },
    key = "ET_START_SKILL_POINTER",
    name = "Skills-TurnOnTheIndicator",
    object = "Ability",
    params = {
    },
}

---@alias EventParam.Skills-BuildSkillsBeforeReleasing EventParam.ET_BUILD_SKILL_BEFORE_RELEASE
M.config["Skills-BuildSkillsBeforeReleasing"] = {
    desc = "The build skill command is about to be issued",
    extraObjs = {
        [1] = {
            getter = function (self) return self:get_owner() end,
            luaType = "Unit",
        },
    },
    key = "ET_BUILD_SKILL_BEFORE_RELEASE",
    name = "Skills-BuildSkillsBeforeReleasing",
    object = "Ability",
    params = {
    },
}

---@alias EventParam.Skills-TurnOffTheIndicator EventParam.ET_STOP_SKILL_POINTER
M.config["Skills-TurnOffTheIndicator"] = {
    desc = "Triggered when the skill's aiming indicator disappears",
    extraObjs = {
        [1] = {
            getter = function (self) return self:get_owner() end,
            luaType = "Unit",
        },
    },
    key = "ET_STOP_SKILL_POINTER",
    name = "Skills-TurnOffTheIndicator",
    object = "Ability",
    params = {
    },
}

---@alias EventParam.Items-Get EventParam.ET_UNIT_ADD_ITEM
M.config["Items-Get"] = {
    desc = "Triggered when a unit gets an item",
    key = "ET_UNIT_ADD_ITEM",
    name = "Items-Get",
    object = "Item",
    params = {
    },
}

---@alias EventParam.Items-EnterTheInventory EventParam.ET_UNIT_ADD_ITEM_TO_BAR
M.config["Items-EnterTheInventory"] = {
    desc = "Triggers when items enter a unit's inventory",
    key = "ET_UNIT_ADD_ITEM_TO_BAR",
    name = "Items-EnterTheInventory",
    object = "Item",
    params = {
    },
}

---@alias EventParam.Items-EnterBackpack EventParam.ET_UNIT_ADD_ITEM_TO_PKG
M.config["Items-EnterBackpack"] = {
    desc = "Triggers when items enter the unit's backpack",
    key = "ET_UNIT_ADD_ITEM_TO_PKG",
    name = "Items-EnterBackpack",
    object = "Item",
    params = {
    },
}

---@alias EventParam.Item-Lost EventParam.ET_UNIT_REMOVE_ITEM
M.config["Item-Lost"] = {
    desc = "Triggered when units lose items",
    key = "ET_UNIT_REMOVE_ITEM",
    name = "Item-Lost",
    object = "Item",
    params = {
    },
}

---@alias EventParam.Items-LeaveTheInventory EventParam.ET_UNIT_REMOVE_ITEM_FROM_BAR
M.config["Items-LeaveTheInventory"] = {
    desc = "Triggered when an item leaves the unit inventory",
    key = "ET_UNIT_REMOVE_ITEM_FROM_BAR",
    name = "Items-LeaveTheInventory",
    object = "Item",
    params = {
    },
}

---@alias EventParam.Items-LeaveTheBackpack EventParam.ET_UNIT_REMOVE_ITEM_FROM_PKG
M.config["Items-LeaveTheBackpack"] = {
    desc = "Item triggers when leaving the unit's backpack",
    key = "ET_UNIT_REMOVE_ITEM_FROM_PKG",
    name = "Items-LeaveTheBackpack",
    object = "Item",
    params = {
    },
}

---@alias EventParam.Items-Use EventParam.ET_UNIT_USE_ITEM
M.config["Items-Use"] = {
    desc = "Triggered when a unit uses an item",
    key = "ET_UNIT_USE_ITEM",
    name = "Items-Use",
    object = "Item",
    params = {
    },
}

---@alias EventParam.Unit-PathfindingBegins EventParam.ET_UNIT_START_NAV_EVENT
M.config["Unit-PathfindingBegins"] = {
    desc = "Actions such as attacking, moving, and casting spells can cause wayfinding",
    key = "ET_UNIT_START_NAV_EVENT",
    name = "Unit-PathfindingBegins",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unit-PathfindingEnds EventParam.ET_UNIT_END_NAV_EVENT
M.config["Unit-PathfindingEnds"] = {
    desc = "The pathfinding is triggered after reaching the target position or failing for 3 times",
    key = "ET_UNIT_END_NAV_EVENT",
    name = "Unit-PathfindingEnds",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Item-StackChanges EventParam.ET_ITEM_STACK_CHANGED
M.config["Item-StackChanges"] = {
    desc = "Triggered when item stack number changes",
    key = "ET_ITEM_STACK_CHANGED",
    name = "Item-StackChanges",
    object = "Item",
    params = {
    },
}

---@alias EventParam.Item-ChargeChanges EventParam.ET_ITEM_CHARGE_CHANGED
M.config["Item-ChargeChanges"] = {
    desc = "Triggers when item charge levels change",
    key = "ET_ITEM_CHARGE_CHANGED",
    name = "Item-ChargeChanges",
    object = "Item",
    params = {
    },
}

---@alias EventParam.Items-Create EventParam.ET_ITEM_ON_CREATE
M.config["Items-Create"] = {
    desc = "Triggered when item is created",
    key = "ET_ITEM_ON_CREATE",
    name = "Items-Create",
    object = "Item",
    params = {
    },
}

---@alias EventParam.Items-Removal EventParam.ET_ITEM_ON_DESTROY
M.config["Items-Removal"] = {
    desc = "Triggered when item is removed",
    key = "ET_ITEM_ON_DESTROY",
    name = "Items-Removal",
    object = "Item",
    params = {
    },
}

---@alias EventParam.Items-ForSale EventParam.ET_ITEM_SOLD
M.config["Items-ForSale"] = {
    desc = "Triggered when an item is sold to a store",
    key = "ET_ITEM_SOLD",
    name = "Items-ForSale",
    object = "Item",
    params = {
    },
}

---@alias EventParam.Item-Death EventParam.ET_ITEM_BROKEN
M.config["Item-Death"] = {
    desc = "Triggered when item is destroyed",
    key = "ET_ITEM_BROKEN",
    name = "Item-Death",
    object = "Item",
    params = {
    },
}

---@alias EventParam.Item-CollectionCreation EventParam.ET_ITEM_CREATE_ON_DEST_COLLECTED
M.config["Item-CollectionCreation"] = {
    desc = "This event is triggered when an item is created through collection. The collection function comes from destructible objects.",
    key = "ET_ITEM_CREATE_ON_DEST_COLLECTED",
    name = "Item-CollectionCreation",
    object = "Item",
    params = {
    },
}

---@alias EventParam.Command-AttackMove EventParam.ET_ATTACK_MOVE_CMD
M.config["Command-AttackMove"] = {
    desc = "",
    key = "ET_ATTACK_MOVE_CMD",
    name = "Command-AttackMove",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Command-SellItems EventParam.ET_SELL_ITEM_CMD
M.config["Command-SellItems"] = {
    desc = "",
    key = "ET_SELL_ITEM_CMD",
    name = "Command-SellItems",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Command-CastAbilities EventParam.ET_AI_RELEASE_SKILL_CMD
M.config["Command-CastAbilities"] = {
    desc = "",
    key = "ET_AI_RELEASE_SKILL_CMD",
    name = "Command-CastAbilities",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Command-patrol EventParam.ET_PATROL_CMD
M.config["Command-patrol"] = {
    desc = "",
    key = "ET_PATROL_CMD",
    name = "Command-patrol",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Command-move EventParam.ET_MOVE_UNIT_TO_TARGET_CMD
M.config["Command-move"] = {
    desc = "",
    key = "ET_MOVE_UNIT_TO_TARGET_CMD",
    name = "Command-move",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Mouse-Hover EventParam.ET_MOUSE_HOVER_EVENT
M.config["Mouse-Hover"] = {
    desc = "Hovering to enter or leave will trigger",
    from_global = true,
    key = "ET_MOUSE_HOVER_EVENT",
    name = "Mouse-Hover",
    object = "Player",
    params = {
    },
}

---@alias EventParam.Local-Mouse-Hover EventParam.ET_ASYNC_MOUSE_HOVER_EVENT
M.config["Local-Mouse-Hover"] = {
    desc = "Hovering to enter or leave will trigger",
    from_global = true,
    key = "ET_ASYNC_MOUSE_HOVER_EVENT",
    name = "Local-Mouse-Hover",
    object = "Player",
    params = {
    },
}

---@alias EventParam.Player-SendMessage EventParam.ET_CHAT_SEND_GM
M.config["Player-SendMessage"] = {
    desc = "Triggered when the player sends any message",
    from_global = true,
    key = "ET_CHAT_SEND_GM",
    name = "Player-SendMessage",
    object = "Player",
    params = {
    },
}

---@alias EventParam.Games-News EventParam.ET_EVENT_CUSTOM
M.config["Games-News"] = {
    desc = "Events defined in the Event management office are triggered through this method",
    key = "ET_EVENT_CUSTOM",
    name = "Games-News",
    params = {
        [1] = {
            call = false,
            desc = "Event ID",
            name = "event_id",
            resolve = function (event_id)
                return clicli.const.CustomEventName[event_id] or event_id
            end,
            type = "integer",
        },
    },
}

---@alias EventParam.Player-VoiceSpeech EventParam.ET_MICRO_SPEAK
M.config["Player-VoiceSpeech"] = {
    desc = "The player's start voice and end voice will trigger",
    from_global = true,
    key = "ET_MICRO_SPEAK",
    name = "Player-VoiceSpeech",
    object = "Player",
    params = {
    },
}

---@alias EventParam.Unknown-et_unit_3d_active EventParam.ET_UNIT_3D_ACTIVE
M.config["Unknown-et_unit_3d_active"] = {
    _deprecated = true,
    desc = "ET_UNIT_3D_ACTIVE",
    key = "ET_UNIT_3D_ACTIVE",
    name = "Unknown-et_unit_3d_active",
    params = {
    },
}

---@alias EventParam.Player-PlatformItemChanges EventParam.ET_ROLE_STORE_ITEM_CHANGED
M.config["Player-PlatformItemChanges"] = {
    desc = "Triggers when the player's platform item changes",
    key = "ET_ROLE_STORE_ITEM_CHANGED",
    name = "Player-PlatformItemChanges",
    object = "Player",
    params = {
    },
}

---@alias EventParam.Player-PlatformMallWindowChanges EventParam.ET_ROLE_STORE_PAGE_STATE_CHANGED
M.config["Player-PlatformMallWindowChanges"] = {
    desc = "Platform mall window change event",
    from_global = true,
    key = "ET_ROLE_STORE_PAGE_STATE_CHANGED",
    name = "Player-PlatformMallWindowChanges",
    object = "Player",
    params = {
    },
}

---@alias EventParam.Console-Input EventParam.ET_LUA_CONSOLE_COMMAND
M.config["Console-Input"] = {
    desc = "",
    key = "ET_LUA_CONSOLE_COMMAND",
    name = "Console-Input",
    params = {
    },
}

---@alias EventParam.Console-RequestCompletion EventParam.ET_LUA_CONSOLE_TIPS
M.config["Console-RequestCompletion"] = {
    desc = "",
    key = "ET_LUA_CONSOLE_TIPS",
    name = "Console-RequestCompletion",
    params = {
    },
}

---@alias EventParam.Steam-ReceiveAFriendRequest EventParam.ET_MALL_NOTIFY_FRIEND_NEW
M.config["Steam-ReceiveAFriendRequest"] = {
    desc = "",
    key = "ET_MALL_NOTIFY_FRIEND_NEW",
    name = "Steam-ReceiveAFriendRequest",
    params = {
    },
}

---@alias EventParam.Steam-ReceivedDeletedByFriends EventParam.ET_MALL_NOTIFY_FRIEND_DELETE
M.config["Steam-ReceivedDeletedByFriends"] = {
    desc = "",
    key = "ET_MALL_NOTIFY_FRIEND_DELETE",
    name = "Steam-ReceivedDeletedByFriends",
    params = {
    },
}

---@alias EventParam.Steam-FriendsOnlineStatusChanges EventParam.ET_MALL_NOTIFY_FRIEND_UPDATE
M.config["Steam-FriendsOnlineStatusChanges"] = {
    desc = "",
    key = "ET_MALL_NOTIFY_FRIEND_UPDATE",
    name = "Steam-FriendsOnlineStatusChanges",
    params = {
    },
}

---@alias EventParam.Steam-LocalPlayerTeamChanges EventParam.ET_MALL_NOTIFY_TEAM_UPDATE
M.config["Steam-LocalPlayerTeamChanges"] = {
    desc = "",
    key = "ET_MALL_NOTIFY_TEAM_UPDATE",
    name = "Steam-LocalPlayerTeamChanges",
    params = {
    },
}

---@alias EventParam.Steam-ReceiveATeamInvitation EventParam.ET_MALL_NOTIFY_TEAM_INVITE
M.config["Steam-ReceiveATeamInvitation"] = {
    desc = "",
    key = "ET_MALL_NOTIFY_TEAM_INVITE",
    name = "Steam-ReceiveATeamInvitation",
    params = {
    },
}

---@alias EventParam.Steam-EnterTheLobby EventParam.ET_MALL_NOTIFY_ENTER_LOBBY
M.config["Steam-EnterTheLobby"] = {
    desc = "",
    key = "ET_MALL_NOTIFY_ENTER_LOBBY",
    name = "Steam-EnterTheLobby",
    params = {
    },
}

---@alias EventParam.Steam-StartMatching EventParam.ET_MALL_NOTIFY_START_MATCH
M.config["Steam-StartMatching"] = {
    desc = "",
    key = "ET_MALL_NOTIFY_START_MATCH",
    name = "Steam-StartMatching",
    params = {
    },
}

---@alias EventParam.Steam-CancelTheMatch EventParam.ET_MALL_NOTIFY_CANCEL_MATCH
M.config["Steam-CancelTheMatch"] = {
    desc = "",
    key = "ET_MALL_NOTIFY_CANCEL_MATCH",
    name = "Steam-CancelTheMatch",
    params = {
    },
}

---@alias EventParam.Steam-LocalRoomInformationChanges EventParam.ET_MALL_NOTIFY_ROOM_INFO_CHANGE
M.config["Steam-LocalRoomInformationChanges"] = {
    desc = "",
    key = "ET_MALL_NOTIFY_ROOM_INFO_CHANGE",
    name = "Steam-LocalRoomInformationChanges",
    params = {
    },
}

---@alias EventParam.Steam-BeInvitedToJoinTheRoom EventParam.ET_MALL_NOTIFY_ROOM_INVITE
M.config["Steam-BeInvitedToJoinTheRoom"] = {
    desc = "",
    key = "ET_MALL_NOTIFY_ROOM_INVITE",
    name = "Steam-BeInvitedToJoinTheRoom",
    params = {
    },
}

---@alias EventParam.Steam-KickedOutOfTheRoom EventParam.ET_MALL_NOTIFY_ROOM_KICK_OFF
M.config["Steam-KickedOutOfTheRoom"] = {
    desc = "",
    key = "ET_MALL_NOTIFY_ROOM_KICK_OFF",
    name = "Steam-KickedOutOfTheRoom",
    params = {
    },
}

---@alias EventParam.Steam-CreatedRoomSuccessfully EventParam.ET_MALL_NOTIFY_ROOM_BUILD
M.config["Steam-CreatedRoomSuccessfully"] = {
    desc = "",
    key = "ET_MALL_NOTIFY_ROOM_BUILD",
    name = "Steam-CreatedRoomSuccessfully",
    params = {
    },
}

---@class Game
---@field event fun(self: self, event: "Game-Initialization", callback: fun(trg: Trigger, data: EventParam.Game-Initialization)): Trigger
---@field event fun(self: self, event: "Game-FrameChasingComplete", callback: fun(trg: Trigger, data: EventParam.Game-FrameChasingComplete)): Trigger
---@field event fun(self: self, event: "Game-LogicIsOutOfSync", callback: fun(trg: Trigger, data: EventParam.Game-LogicIsOutOfSync)): Trigger
---@field event fun(self: self, event: "Game-TerrainPresetsLoadedComplete", callback: fun(trg: Trigger, data: EventParam.Game-TerrainPresetsLoadedComplete)): Trigger
---@field event fun(self: self, event: "Game-Over", callback: fun(trg: Trigger, data: EventParam.Game-Over)): Trigger
---@field event fun(self: self, event: "Game-Pause", callback: fun(trg: Trigger, data: EventParam.Game-Pause)): Trigger
---@field event fun(self: self, event: "Game-Recovery", callback: fun(trg: Trigger, data: EventParam.Game-Recovery)): Trigger
---@field event fun(self: self, event: "Game-DayAndNightChange", callback: fun(trg: Trigger, data: EventParam.Game-DayAndNightChange)): Trigger
---@field event fun(self: self, event: "Zone-access", area: Area, callback: fun(trg: Trigger, data: EventParam.Zone-access)): Trigger
---@field event fun(self: self, event: "Zone-Leave", area: Area, callback: fun(trg: Trigger, data: EventParam.Zone-Leave)): Trigger
---@field event fun(self: self, event: "Game-httpReturn", callback: fun(trg: Trigger, data: EventParam.Game-httpReturn)): Trigger
---@field event fun(self: self, event: "Games-ReceiveBroadcastInformation", callback: fun(trg: Trigger, data: EventParam.Games-ReceiveBroadcastInformation)): Trigger
---@field event fun(self: self, event: "Player-JoinTheGame", callback: fun(trg: Trigger, data: EventParam.Player-JoinTheGame)): Trigger
---@field event fun(self: self, event: "Player-LeaveTheGame", callback: fun(trg: Trigger, data: EventParam.Player-LeaveTheGame)): Trigger
---@field event fun(self: self, event: "Player-DroppedCall", callback: fun(trg: Trigger, data: EventParam.Player-DroppedCall)): Trigger
---@field event fun(self: self, event: "Player-UsePlatformItems", callback: fun(trg: Trigger, data: EventParam.Player-UsePlatformItems)): Trigger
---@field event fun(self: self, event: "Player-HoldsPlatformItems", callback: fun(trg: Trigger, data: EventParam.Player-HoldsPlatformItems)): Trigger
---@field event fun(self: self, event: "Player-AttributesChange", callback: fun(trg: Trigger, data: EventParam.Player-AttributesChange)): Trigger
---@field event fun(self: self, event: "Player-SendTheSpecifiedMessage", msg: string, callback: fun(trg: Trigger, data: EventParam.Player-SendTheSpecifiedMessage)): Trigger
---@field event fun(self: self, event: "Player-TechnologyEnhancement", callback: fun(trg: Trigger, data: EventParam.Player-TechnologyEnhancement)): Trigger
---@field event fun(self: self, event: "Player-TechDown", callback: fun(trg: Trigger, data: EventParam.Player-TechDown)): Trigger
---@field event fun(self: self, event: "Player-TechnologyChanges", callback: fun(trg: Trigger, data: EventParam.Player-TechnologyChanges)): Trigger
---@field event fun(self: self, event: "Unit-ResearchAndDevelopmentTechnology", callback: fun(trg: Trigger, data: EventParam.Unit-ResearchAndDevelopmentTechnology)): Trigger
---@field event fun(self: self, event: "Unit-AccessToTechnology", callback: fun(trg: Trigger, data: EventParam.Unit-AccessToTechnology)): Trigger
---@field event fun(self: self, event: "Unit-LostTechnology", callback: fun(trg: Trigger, data: EventParam.Unit-LostTechnology)): Trigger
---@field event fun(self: self, event: "Player-RelationshipChanges", callback: fun(trg: Trigger, data: EventParam.Player-RelationshipChanges)): Trigger
---@field event fun(self: self, event: "Player-Reconnect", callback: fun(trg: Trigger, data: EventParam.Player-Reconnect)): Trigger
---@field event fun(self: self, event: "Unit-BuildingUpgradeStarts", callback: fun(trg: Trigger, data: EventParam.Unit-BuildingUpgradeStarts)): Trigger
---@field event fun(self: self, event: "Unit-BuildingUpgradeCancelled", callback: fun(trg: Trigger, data: EventParam.Unit-BuildingUpgradeCancelled)): Trigger
---@field event fun(self: self, event: "Unit-BuildingUpgradeCompleted", callback: fun(trg: Trigger, data: EventParam.Unit-BuildingUpgradeCompleted)): Trigger
---@field event fun(self: self, event: "Unit-ConstructionBegins", callback: fun(trg: Trigger, data: EventParam.Unit-ConstructionBegins)): Trigger
---@field event fun(self: self, event: "Unit-BuildCancelled", callback: fun(trg: Trigger, data: EventParam.Unit-BuildCancelled)): Trigger
---@field event fun(self: self, event: "Unit-ConstructionCompleted", callback: fun(trg: Trigger, data: EventParam.Unit-ConstructionCompleted)): Trigger
---@field event fun(self: self, event: "Skill-BuiltComplete", callback: fun(trg: Trigger, data: EventParam.Skill-BuiltComplete)): Trigger
---@field event fun(self: self, event: "Skills-Learning", callback: fun(trg: Trigger, data: EventParam.Skills-Learning)): Trigger
---@field event fun(self: self, event: "Skills-AvailableStatusChanges", callback: fun(trg: Trigger, data: EventParam.Skills-AvailableStatusChanges)): Trigger
---@field event fun(self: self, event: "Skill-SilentStateChanges", callback: fun(trg: Trigger, data: EventParam.Skill-SilentStateChanges)): Trigger
---@field event fun(self: self, event: "Skills-IconChanges", callback: fun(trg: Trigger, data: EventParam.Skills-IconChanges)): Trigger
---@field event fun(self: self, event: "Unit-NameChange", callback: fun(trg: Trigger, data: EventParam.Unit-NameChange)): Trigger
---@field event fun(self: self, event: "Unit-MinimapIconChanges", callback: fun(trg: Trigger, data: EventParam.Unit-MinimapIconChanges)): Trigger
---@field event fun(self: self, event: "Unit-HeadChange", callback: fun(trg: Trigger, data: EventParam.Unit-HeadChange)): Trigger
---@field event fun(self: self, event: "Unit-Remove", callback: fun(trg: Trigger, data: EventParam.Unit-Remove)): Trigger
---@field event fun(self: self, event: "Unit-AfterRemoval", callback: fun(trg: Trigger, data: EventParam.Unit-AfterRemoval)): Trigger
---@field event fun(self: self, event: "Unit-EndOfTransmission", callback: fun(trg: Trigger, data: EventParam.Unit-EndOfTransmission)): Trigger
---@field event fun(self: self, event: "Unit-AttributeChange", unit: Unit, attr: string, callback: fun(trg: Trigger, data: EventParam.Unit-AttributeChange)): Trigger
---@field event fun(self: self, event: "Unit-AboutToDie", callback: fun(trg: Trigger, data: EventParam.Unit-AboutToDie)): Trigger
---@field event fun(self: self, event: "Unit-Death", callback: fun(trg: Trigger, data: EventParam.Unit-Death)): Trigger
---@field event fun(self: self, event: "Unit-BeforeTakingDamage", callback: fun(trg: Trigger, data: EventParam.Unit-BeforeTakingDamage)): Trigger
---@field event fun(self: self, event: "Unit-BeforeDealingDamage", callback: fun(trg: Trigger, data: EventParam.Unit-BeforeDealingDamage)): Trigger
---@field event fun(self: self, event: "Unit-WhenTakingDamage", callback: fun(trg: Trigger, data: EventParam.Unit-WhenTakingDamage)): Trigger
---@field event fun(self: self, event: "Unit-WhenDealingDamage", callback: fun(trg: Trigger, data: EventParam.Unit-WhenDealingDamage)): Trigger
---@field event fun(self: self, event: "Unit-AfterDealingDamage", callback: fun(trg: Trigger, data: EventParam.Unit-AfterDealingDamage)): Trigger
---@field event fun(self: self, event: "Unit-AfterTakingDamage", callback: fun(trg: Trigger, data: EventParam.Unit-AfterTakingDamage)): Trigger
---@field event fun(self: self, event: "Unit-BeforeBeingTreated", callback: fun(trg: Trigger, data: EventParam.Unit-BeforeBeingTreated)): Trigger
---@field event fun(self: self, event: "Unit-AfterBeingTreated", callback: fun(trg: Trigger, data: EventParam.Unit-AfterBeingTreated)): Trigger
---@field event fun(self: self, event: "Unit-WhenBeingTreated", callback: fun(trg: Trigger, data: EventParam.Unit-WhenBeingTreated)): Trigger
---@field event fun(self: self, event: "Player-PropertiesIconChanges", callback: fun(trg: Trigger, data: EventParam.Player-PropertiesIconChanges)): Trigger
---@field event fun(self: self, event: "Unit-CastSkills", callback: fun(trg: Trigger, data: EventParam.Unit-CastSkills)): Trigger
---@field event fun(self: self, event: "Unit-BeforeGainingExperience", callback: fun(trg: Trigger, data: EventParam.Unit-BeforeGainingExperience)): Trigger
---@field event fun(self: self, event: "Unit-AfterGainingExperience", callback: fun(trg: Trigger, data: EventParam.Unit-AfterGainingExperience)): Trigger
---@field event fun(self: self, event: "Unit-ReceiveCommand", callback: fun(trg: Trigger, data: EventParam.Unit-ReceiveCommand)): Trigger
---@field event fun(self: self, event: "Unit-Kill", callback: fun(trg: Trigger, data: EventParam.Unit-Kill)): Trigger
---@field event fun(self: self, event: "Unit-Create", callback: fun(trg: Trigger, data: EventParam.Unit-Create)): Trigger
---@field event fun(self: self, event: "Unit-EnterTheBattle", callback: fun(trg: Trigger, data: EventParam.Unit-EnterTheBattle)): Trigger
---@field event fun(self: self, event: "Unit-OutOfCombat", callback: fun(trg: Trigger, data: EventParam.Unit-OutOfCombat)): Trigger
---@field event fun(self: self, event: "Unit-AboutToPickUpItems", callback: fun(trg: Trigger, data: EventParam.Unit-AboutToPickUpItems)): Trigger
---@field event fun(self: self, event: "Unit-TogglesDefaultBehavior", callback: fun(trg: Trigger, data: EventParam.Unit-TogglesDefaultBehavior)): Trigger
---@field event fun(self: self, event: "Unit-ApproachingEnemy", callback: fun(trg: Trigger, data: EventParam.Unit-ApproachingEnemy)): Trigger
---@field event fun(self: self, event: "Unit-SpottedTarget", callback: fun(trg: Trigger, data: EventParam.Unit-SpottedTarget)): Trigger
---@field event fun(self: self, event: "Local-BoneCollision", callback: fun(trg: Trigger, data: EventParam.Local-BoneCollision)): Trigger
---@field event fun(self: self, event: "Physical-BoneCollision", callback: fun(trg: Trigger, data: EventParam.Physical-BoneCollision)): Trigger
---@field event fun(self: self, event: "Unit-PurchaseItems", callback: fun(trg: Trigger, data: EventParam.Unit-PurchaseItems)): Trigger
---@field event fun(self: self, event: "Units-PurchaseUnits", callback: fun(trg: Trigger, data: EventParam.Units-PurchaseUnits)): Trigger
---@field event fun(self: self, event: "Unit-ItemsForSale", callback: fun(trg: Trigger, data: EventParam.Unit-ItemsForSale)): Trigger
---@field event fun(self: self, event: "Store-MerchandiseChanges", callback: fun(trg: Trigger, data: EventParam.Store-MerchandiseChanges)): Trigger
---@field event fun(self: self, event: "Store-StockChanges", callback: fun(trg: Trigger, data: EventParam.Store-StockChanges)): Trigger
---@field event fun(self: self, event: "Store-PriceChanges", callback: fun(trg: Trigger, data: EventParam.Store-PriceChanges)): Trigger
---@field event fun(self: self, event: "Unit-ItemComposition", callback: fun(trg: Trigger, data: EventParam.Unit-ItemComposition)): Trigger
---@field event fun(self: self, event: "Unit-PurchaseItemCompositing", callback: fun(trg: Trigger, data: EventParam.Unit-PurchaseItemCompositing)): Trigger
---@field event fun(self: self, event: "Unit-Resurrection", callback: fun(trg: Trigger, data: EventParam.Unit-Resurrection)): Trigger
---@field event fun(self: self, event: "Unit-Upgrade", callback: fun(trg: Trigger, data: EventParam.Unit-Upgrade)): Trigger
---@field event fun(self: self, event: "Unit-IntoTheGrass", callback: fun(trg: Trigger, data: EventParam.Unit-IntoTheGrass)): Trigger
---@field event fun(self: self, event: "Unit-GetOutOfTheGrass", callback: fun(trg: Trigger, data: EventParam.Unit-GetOutOfTheGrass)): Trigger
---@field event fun(self: self, event: "Unit-ChangeOwnership", callback: fun(trg: Trigger, data: EventParam.Unit-ChangeOwnership)): Trigger
---@field event fun(self: self, event: "UnitType-ThePrerequisiteIsTrue", callback: fun(trg: Trigger, data: EventParam.UnitType-ThePrerequisiteIsTrue)): Trigger
---@field event fun(self: self, event: "UnitType-ThePreconditionIsNotValid", callback: fun(trg: Trigger, data: EventParam.UnitType-ThePreconditionIsNotValid)): Trigger
---@field event fun(self: self, event: "ItemType-PreconditionsHold", callback: fun(trg: Trigger, data: EventParam.ItemType-PreconditionsHold)): Trigger
---@field event fun(self: self, event: "ItemType-PreconditionsAreNotValid", callback: fun(trg: Trigger, data: EventParam.ItemType-PreconditionsAreNotValid)): Trigger
---@field event fun(self: self, event: "SkillType-ThePrerequisiteIsTrue", callback: fun(trg: Trigger, data: EventParam.SkillType-ThePrerequisiteIsTrue)): Trigger
---@field event fun(self: self, event: "SkillType-PreconditionsAreNotValid", callback: fun(trg: Trigger, data: EventParam.SkillType-PreconditionsAreNotValid)): Trigger
---@field event fun(self: self, event: "TechnologyType-PreconditionsHold", callback: fun(trg: Trigger, data: EventParam.TechnologyType-PreconditionsHold)): Trigger
---@field event fun(self: self, event: "TechnologyType-PreconditionNotValid", callback: fun(trg: Trigger, data: EventParam.TechnologyType-PreconditionNotValid)): Trigger
---@field event fun(self: self, event: "Skills-Upgrades", callback: fun(trg: Trigger, data: EventParam.Skills-Upgrades)): Trigger
---@field event fun(self: self, event: "Casting.-AboutToBegin", callback: fun(trg: Trigger, data: EventParam.Casting.-AboutToBegin)): Trigger
---@field event fun(self: self, event: "CastTheSpell.-HereWeGo", callback: fun(trg: Trigger, data: EventParam.CastTheSpell.-HereWeGo)): Trigger
---@field event fun(self: self, event: "Cast-Guide", callback: fun(trg: Trigger, data: EventParam.Cast-Guide)): Trigger
---@field event fun(self: self, event: "CastSpells.-Strike", callback: fun(trg: Trigger, data: EventParam.CastSpells.-Strike)): Trigger
---@field event fun(self: self, event: "CastASpell.-Finished", callback: fun(trg: Trigger, data: EventParam.CastASpell.-Finished)): Trigger
---@field event fun(self: self, event: "CastSpells.-Over", callback: fun(trg: Trigger, data: EventParam.CastSpells.-Over)): Trigger
---@field event fun(self: self, event: "CastASpell.-InterruptTheStart", callback: fun(trg: Trigger, data: EventParam.CastASpell.-InterruptTheStart)): Trigger
---@field event fun(self: self, event: "CastSpells.-InterruptTheLead", callback: fun(trg: Trigger, data: EventParam.CastSpells.-InterruptTheLead)): Trigger
---@field event fun(self: self, event: "CastASpell.-BreakTheShot", callback: fun(trg: Trigger, data: EventParam.CastASpell.-BreakTheShot)): Trigger
---@field event fun(self: self, event: "CastSpells.-Stop", callback: fun(trg: Trigger, data: EventParam.CastSpells.-Stop)): Trigger
---@field event fun(self: self, event: "Skills-Acquisition", callback: fun(trg: Trigger, data: EventParam.Skills-Acquisition)): Trigger
---@field event fun(self: self, event: "SkillLoss", callback: fun(trg: Trigger, data: EventParam.SkillLoss)): Trigger
---@field event fun(self: self, event: "Skill-exchange", callback: fun(trg: Trigger, data: EventParam.Skill-exchange)): Trigger
---@field event fun(self: self, event: "Skills-Disabled", callback: fun(trg: Trigger, data: EventParam.Skills-Disabled)): Trigger
---@field event fun(self: self, event: "Skills-Enabled", callback: fun(trg: Trigger, data: EventParam.Skills-Enabled)): Trigger
---@field event fun(self: self, event: "Skill-CooldownEnds", callback: fun(trg: Trigger, data: EventParam.Skill-CooldownEnds)): Trigger
---@field event fun(self: self, event: "Skills-CustomAnimationAxis", string: string, callback: fun(trg: Trigger, data: EventParam.Skills-CustomAnimationAxis)): Trigger
---@field event fun(self: self, event: "Effect-Gain", callback: fun(trg: Trigger, data: EventParam.Effect-Gain)): Trigger
---@field event fun(self: self, event: "Effect-loss", callback: fun(trg: Trigger, data: EventParam.Effect-loss)): Trigger
---@field event fun(self: self, event: "Effect-Heartbeat", callback: fun(trg: Trigger, data: EventParam.Effect-Heartbeat)): Trigger
---@field event fun(self: self, event: "Effects-Overlay", callback: fun(trg: Trigger, data: EventParam.Effects-Overlay)): Trigger
---@field event fun(self: self, event: "Effect-NumberOfLayersChange", callback: fun(trg: Trigger, data: EventParam.Effect-NumberOfLayersChange)): Trigger
---@field event fun(self: self, event: "Effect-ComingSoon", callback: fun(trg: Trigger, data: EventParam.Effect-ComingSoon)): Trigger
---@field event fun(self: self, event: "Effects-Overlay", callback: fun(trg: Trigger, data: EventParam.Effects-Overlay)): Trigger
---@field event fun(self: self, event: "Destructible-Create", callback: fun(trg: Trigger, data: EventParam.Destructible-Create)): Trigger
---@field event fun(self: self, event: "Destructible-Death", callback: fun(trg: Trigger, data: EventParam.Destructible-Death)): Trigger
---@field event fun(self: self, event: "Destructible.-Resurrection", callback: fun(trg: Trigger, data: EventParam.Destructible.-Resurrection)): Trigger
---@field event fun(self: self, event: "Destructible-ResourceChange", callback: fun(trg: Trigger, data: EventParam.Destructible-ResourceChange)): Trigger
---@field event fun(self: self, event: "Destructible-Collection", callback: fun(trg: Trigger, data: EventParam.Destructible-Collection)): Trigger
---@field event fun(self: self, event: "Destructible-Damaged", callback: fun(trg: Trigger, data: EventParam.Destructible-Damaged)): Trigger
---@field event fun(self: self, event: "Check-Destructible", callback: fun(trg: Trigger, data: EventParam.Check-Destructible)): Trigger
---@field event fun(self: self, event: "Local-Select-Destructible", callback: fun(trg: Trigger, data: EventParam.Local-Select-Destructible)): Trigger
---@field event fun(self: self, event: "Destructible-Remove", callback: fun(trg: Trigger, data: EventParam.Destructible-Remove)): Trigger
---@field event fun(self: self, event: "Projectiles-Created", callback: fun(trg: Trigger, data: EventParam.Projectiles-Created)): Trigger
---@field event fun(self: self, event: "Projectiles-Death", callback: fun(trg: Trigger, data: EventParam.Projectiles-Death)): Trigger
---@field event fun(self: self, event: "Interface-Message", event_name: string, callback: fun(trg: Trigger, data: EventParam.Interface-Message)): Trigger
---@field event fun(self: self, event: "Interface-SliderChanges", ui: UI, callback: fun(trg: Trigger, data: EventParam.Interface-SliderChanges)): Trigger
---@field event fun(self: self, event: "Interface-ChatBoxVisibilityChanges", ui: UI, callback: fun(trg: Trigger, data: EventParam.Interface-ChatBoxVisibilityChanges)): Trigger
---@field event fun(self: self, event: "Interface-EquipmentDragAndDrop", ui: UI, callback: fun(trg: Trigger, data: EventParam.Interface-EquipmentDragAndDrop)): Trigger
---@field event fun(self: self, event: "Screen-CheckBoxChanges", ui: UI, callback: fun(trg: Trigger, data: EventParam.Screen-CheckBoxChanges)): Trigger
---@field event fun(self: self, event: "Screen-VideoPlaybackIsComplete", ui: UI, callback: fun(trg: Trigger, data: EventParam.Screen-VideoPlaybackIsComplete)): Trigger
---@field event fun(self: self, event: "Local-interface-inputBoxGetsFocus", ui: UI, callback: fun(trg: Trigger, data: EventParam.Local-interface-inputBoxGetsFocus)): Trigger
---@field event fun(self: self, event: "Local-interface-inputBoxOutOfFocus", ui: UI, callback: fun(trg: Trigger, data: EventParam.Local-interface-inputBoxOutOfFocus)): Trigger
---@field event fun(self: self, event: "Local-Interface-InputBoxContentChanged", ui: UI, callback: fun(trg: Trigger, data: EventParam.Local-Interface-InputBoxContentChanged)): Trigger
---@field event fun(self: self, event: "Keyboard.-PressIt", key: clicli.Const.KeyboardKey|integer, callback: fun(trg: Trigger, data: EventParam.Keyboard.-PressIt)): Trigger
---@field event fun(self: self, event: "Keyboard-Lift", key: clicli.Const.KeyboardKey|integer, callback: fun(trg: Trigger, data: EventParam.Keyboard-Lift)): Trigger
---@field event fun(self: self, event: "Local-Keyboard-Press", key: clicli.Const.KeyboardKey|integer, callback: fun(trg: Trigger, data: EventParam.Local-Keyboard-Press)): Trigger
---@field event fun(self: self, event: "Local-Keyboard-Lift", key: clicli.Const.KeyboardKey|integer, callback: fun(trg: Trigger, data: EventParam.Local-Keyboard-Lift)): Trigger
---@field event fun(self: self, event: "Mouse-PressIt", key: clicli.Const.MouseKey|integer, callback: fun(trg: Trigger, data: EventParam.Mouse-PressIt)): Trigger
---@field event fun(self: self, event: "Mouse-lift", key: clicli.Const.MouseKey|integer, callback: fun(trg: Trigger, data: EventParam.Mouse-lift)): Trigger
---@field event fun(self: self, event: "Mouse-double-click", key: clicli.Const.MouseKey|integer, callback: fun(trg: Trigger, data: EventParam.Mouse-double-click)): Trigger
---@field event fun(self: self, event: "Local-Mouse-PressDown", key: clicli.Const.MouseKey|integer, callback: fun(trg: Trigger, data: EventParam.Local-Mouse-PressDown)): Trigger
---@field event fun(self: self, event: "Local-Mouse-Lift", key: clicli.Const.MouseKey|integer, callback: fun(trg: Trigger, data: EventParam.Local-Mouse-Lift)): Trigger
---@field event fun(self: self, event: "Local-Mouse-DoubleClick", key: clicli.Const.MouseKey|integer, callback: fun(trg: Trigger, data: EventParam.Local-Mouse-DoubleClick)): Trigger
---@field event fun(self: self, event: "Mouse-PressTheUnit", key: clicli.Const.MouseKey|integer, callback: fun(trg: Trigger, data: EventParam.Mouse-PressTheUnit)): Trigger
---@field event fun(self: self, event: "Mouse-LiftUnit", key: clicli.Const.MouseKey|integer, callback: fun(trg: Trigger, data: EventParam.Mouse-LiftUnit)): Trigger
---@field event fun(self: self, event: "Mouse-DoubleClickTheUnit", key: clicli.Const.MouseKey|integer, callback: fun(trg: Trigger, data: EventParam.Mouse-DoubleClickTheUnit)): Trigger
---@field event fun(self: self, event: "Local-Mouse-PressTheUnit", key: clicli.Const.MouseKey|integer, callback: fun(trg: Trigger, data: EventParam.Local-Mouse-PressTheUnit)): Trigger
---@field event fun(self: self, event: "Local-Mouse-LiftUnit", key: clicli.Const.MouseKey|integer, callback: fun(trg: Trigger, data: EventParam.Local-Mouse-LiftUnit)): Trigger
---@field event fun(self: self, event: "Local-Mouse-DoubleClickTheUnit", key: clicli.Const.MouseKey|integer, callback: fun(trg: Trigger, data: EventParam.Local-Mouse-DoubleClickTheUnit)): Trigger
---@field event fun(self: self, event: "Mouse-move", callback: fun(trg: Trigger, data: EventParam.Mouse-move)): Trigger
---@field event fun(self: self, event: "Local-Mouse-Move", callback: fun(trg: Trigger, data: EventParam.Local-Mouse-Move)): Trigger
---@field event fun(self: self, event: "Mouse-Wheel", key: clicli.Const.MouseKey|integer, callback: fun(trg: Trigger, data: EventParam.Mouse-Wheel)): Trigger
---@field event fun(self: self, event: "Local-Mouse-Wheel", key: clicli.Const.MouseKey|integer, callback: fun(trg: Trigger, data: EventParam.Local-Mouse-Wheel)): Trigger
---@field event fun(self: self, event: "Select-unit", callback: fun(trg: Trigger, data: EventParam.Select-unit)): Trigger
---@field event fun(self: self, event: "Local-Select-Unit", callback: fun(trg: Trigger, data: EventParam.Local-Select-Unit)): Trigger
---@field event fun(self: self, event: "Check-Cancel", callback: fun(trg: Trigger, data: EventParam.Check-Cancel)): Trigger
---@field event fun(self: self, event: "Local-Select-Cancel", callback: fun(trg: Trigger, data: EventParam.Local-Select-Cancel)): Trigger
---@field event fun(self: self, event: "Selected-LostUnit", callback: fun(trg: Trigger, data: EventParam.Selected-LostUnit)): Trigger
---@field event fun(self: self, event: "Local-Selected-LostUnit", callback: fun(trg: Trigger, data: EventParam.Local-Selected-LostUnit)): Trigger
---@field event fun(self: self, event: "Select-item", callback: fun(trg: Trigger, data: EventParam.Select-item)): Trigger
---@field event fun(self: self, event: "Local-Select-Items", callback: fun(trg: Trigger, data: EventParam.Local-Select-Items)): Trigger
---@field event fun(self: self, event: "Player-CheatingDetected", callback: fun(trg: Trigger, data: EventParam.Player-CheatingDetected)): Trigger
---@field event fun(self: self, event: "Mouse-DoubleClickTheItem", callback: fun(trg: Trigger, data: EventParam.Mouse-DoubleClickTheItem)): Trigger
---@field event fun(self: self, event: "Mouse-DoubleClickDestructible", callback: fun(trg: Trigger, data: EventParam.Mouse-DoubleClickDestructible)): Trigger
---@field event fun(self: self, event: "Select-UnitGroup", callback: fun(trg: Trigger, data: EventParam.Select-UnitGroup)): Trigger
---@field event fun(self: self, event: "Local-Select-UnitGroup", callback: fun(trg: Trigger, data: EventParam.Local-Select-UnitGroup)): Trigger
---@field event fun(self: self, event: "Skills-TurnOnTheIndicator", callback: fun(trg: Trigger, data: EventParam.Skills-TurnOnTheIndicator)): Trigger
---@field event fun(self: self, event: "Skills-BuildSkillsBeforeReleasing", callback: fun(trg: Trigger, data: EventParam.Skills-BuildSkillsBeforeReleasing)): Trigger
---@field event fun(self: self, event: "Skills-TurnOffTheIndicator", callback: fun(trg: Trigger, data: EventParam.Skills-TurnOffTheIndicator)): Trigger
---@field event fun(self: self, event: "Items-Get", callback: fun(trg: Trigger, data: EventParam.Items-Get)): Trigger
---@field event fun(self: self, event: "Items-EnterTheInventory", callback: fun(trg: Trigger, data: EventParam.Items-EnterTheInventory)): Trigger
---@field event fun(self: self, event: "Items-EnterBackpack", callback: fun(trg: Trigger, data: EventParam.Items-EnterBackpack)): Trigger
---@field event fun(self: self, event: "Item-Lost", callback: fun(trg: Trigger, data: EventParam.Item-Lost)): Trigger
---@field event fun(self: self, event: "Items-LeaveTheInventory", callback: fun(trg: Trigger, data: EventParam.Items-LeaveTheInventory)): Trigger
---@field event fun(self: self, event: "Items-LeaveTheBackpack", callback: fun(trg: Trigger, data: EventParam.Items-LeaveTheBackpack)): Trigger
---@field event fun(self: self, event: "Items-Use", callback: fun(trg: Trigger, data: EventParam.Items-Use)): Trigger
---@field event fun(self: self, event: "Unit-PathfindingBegins", callback: fun(trg: Trigger, data: EventParam.Unit-PathfindingBegins)): Trigger
---@field event fun(self: self, event: "Unit-PathfindingEnds", callback: fun(trg: Trigger, data: EventParam.Unit-PathfindingEnds)): Trigger
---@field event fun(self: self, event: "Item-StackChanges", callback: fun(trg: Trigger, data: EventParam.Item-StackChanges)): Trigger
---@field event fun(self: self, event: "Item-ChargeChanges", callback: fun(trg: Trigger, data: EventParam.Item-ChargeChanges)): Trigger
---@field event fun(self: self, event: "Items-Create", callback: fun(trg: Trigger, data: EventParam.Items-Create)): Trigger
---@field event fun(self: self, event: "Items-Removal", callback: fun(trg: Trigger, data: EventParam.Items-Removal)): Trigger
---@field event fun(self: self, event: "Items-ForSale", callback: fun(trg: Trigger, data: EventParam.Items-ForSale)): Trigger
---@field event fun(self: self, event: "Item-Death", callback: fun(trg: Trigger, data: EventParam.Item-Death)): Trigger
---@field event fun(self: self, event: "Item-CollectionCreation", callback: fun(trg: Trigger, data: EventParam.Item-CollectionCreation)): Trigger
---@field event fun(self: self, event: "Command-AttackMove", callback: fun(trg: Trigger, data: EventParam.Command-AttackMove)): Trigger
---@field event fun(self: self, event: "Command-SellItems", callback: fun(trg: Trigger, data: EventParam.Command-SellItems)): Trigger
---@field event fun(self: self, event: "Command-CastAbilities", callback: fun(trg: Trigger, data: EventParam.Command-CastAbilities)): Trigger
---@field event fun(self: self, event: "Command-patrol", callback: fun(trg: Trigger, data: EventParam.Command-patrol)): Trigger
---@field event fun(self: self, event: "Command-move", callback: fun(trg: Trigger, data: EventParam.Command-move)): Trigger
---@field event fun(self: self, event: "Mouse-Hover", callback: fun(trg: Trigger, data: EventParam.Mouse-Hover)): Trigger
---@field event fun(self: self, event: "Local-Mouse-Hover", callback: fun(trg: Trigger, data: EventParam.Local-Mouse-Hover)): Trigger
---@field event fun(self: self, event: "Player-SendMessage", callback: fun(trg: Trigger, data: EventParam.Player-SendMessage)): Trigger
---@field event fun(self: self, event: "Games-News", event_id: integer, callback: fun(trg: Trigger, data: EventParam.Games-News)): Trigger
---@field event fun(self: self, event: "Player-VoiceSpeech", callback: fun(trg: Trigger, data: EventParam.Player-VoiceSpeech)): Trigger
---@field event fun(self: self, event: "Player-PlatformItemChanges", callback: fun(trg: Trigger, data: EventParam.Player-PlatformItemChanges)): Trigger
---@field event fun(self: self, event: "Player-PlatformMallWindowChanges", callback: fun(trg: Trigger, data: EventParam.Player-PlatformMallWindowChanges)): Trigger
---@field event fun(self: self, event: "Console-Input", callback: fun(trg: Trigger, data: EventParam.Console-Input)): Trigger
---@field event fun(self: self, event: "Console-RequestCompletion", callback: fun(trg: Trigger, data: EventParam.Console-RequestCompletion)): Trigger
---@field event fun(self: self, event: "Steam-ReceiveAFriendRequest", callback: fun(trg: Trigger, data: EventParam.Steam-ReceiveAFriendRequest)): Trigger
---@field event fun(self: self, event: "Steam-ReceivedDeletedByFriends", callback: fun(trg: Trigger, data: EventParam.Steam-ReceivedDeletedByFriends)): Trigger
---@field event fun(self: self, event: "Steam-FriendsOnlineStatusChanges", callback: fun(trg: Trigger, data: EventParam.Steam-FriendsOnlineStatusChanges)): Trigger
---@field event fun(self: self, event: "Steam-LocalPlayerTeamChanges", callback: fun(trg: Trigger, data: EventParam.Steam-LocalPlayerTeamChanges)): Trigger
---@field event fun(self: self, event: "Steam-ReceiveATeamInvitation", callback: fun(trg: Trigger, data: EventParam.Steam-ReceiveATeamInvitation)): Trigger
---@field event fun(self: self, event: "Steam-EnterTheLobby", callback: fun(trg: Trigger, data: EventParam.Steam-EnterTheLobby)): Trigger
---@field event fun(self: self, event: "Steam-StartMatching", callback: fun(trg: Trigger, data: EventParam.Steam-StartMatching)): Trigger
---@field event fun(self: self, event: "Steam-CancelTheMatch", callback: fun(trg: Trigger, data: EventParam.Steam-CancelTheMatch)): Trigger
---@field event fun(self: self, event: "Steam-LocalRoomInformationChanges", callback: fun(trg: Trigger, data: EventParam.Steam-LocalRoomInformationChanges)): Trigger
---@field event fun(self: self, event: "Steam-BeInvitedToJoinTheRoom", callback: fun(trg: Trigger, data: EventParam.Steam-BeInvitedToJoinTheRoom)): Trigger
---@field event fun(self: self, event: "Steam-KickedOutOfTheRoom", callback: fun(trg: Trigger, data: EventParam.Steam-KickedOutOfTheRoom)): Trigger
---@field event fun(self: self, event: "Steam-CreatedRoomSuccessfully", callback: fun(trg: Trigger, data: EventParam.Steam-CreatedRoomSuccessfully)): Trigger

---@class Ability
---@field event fun(self: Ability, event: "Skill-BuiltComplete", callback: fun(trg: Trigger, data: EventParam.Skill-BuiltComplete)): Trigger
---@field event fun(self: Ability, event: "Skills-Learning", callback: fun(trg: Trigger, data: EventParam.Skills-Learning)): Trigger
---@field event fun(self: Ability, event: "Skills-AvailableStatusChanges", callback: fun(trg: Trigger, data: EventParam.Skills-AvailableStatusChanges)): Trigger
---@field event fun(self: Ability, event: "Skill-SilentStateChanges", callback: fun(trg: Trigger, data: EventParam.Skill-SilentStateChanges)): Trigger
---@field event fun(self: Ability, event: "Skills-Upgrades", callback: fun(trg: Trigger, data: EventParam.Skills-Upgrades)): Trigger
---@field event fun(self: Ability, event: "Casting.-AboutToBegin", callback: fun(trg: Trigger, data: EventParam.Casting.-AboutToBegin)): Trigger
---@field event fun(self: Ability, event: "CastTheSpell.-HereWeGo", callback: fun(trg: Trigger, data: EventParam.CastTheSpell.-HereWeGo)): Trigger
---@field event fun(self: Ability, event: "Cast-Guide", callback: fun(trg: Trigger, data: EventParam.Cast-Guide)): Trigger
---@field event fun(self: Ability, event: "CastSpells.-Strike", callback: fun(trg: Trigger, data: EventParam.CastSpells.-Strike)): Trigger
---@field event fun(self: Ability, event: "CastASpell.-Finished", callback: fun(trg: Trigger, data: EventParam.CastASpell.-Finished)): Trigger
---@field event fun(self: Ability, event: "CastSpells.-Over", callback: fun(trg: Trigger, data: EventParam.CastSpells.-Over)): Trigger
---@field event fun(self: Ability, event: "CastASpell.-InterruptTheStart", callback: fun(trg: Trigger, data: EventParam.CastASpell.-InterruptTheStart)): Trigger
---@field event fun(self: Ability, event: "CastSpells.-InterruptTheLead", callback: fun(trg: Trigger, data: EventParam.CastSpells.-InterruptTheLead)): Trigger
---@field event fun(self: Ability, event: "CastASpell.-BreakTheShot", callback: fun(trg: Trigger, data: EventParam.CastASpell.-BreakTheShot)): Trigger
---@field event fun(self: Ability, event: "CastSpells.-Stop", callback: fun(trg: Trigger, data: EventParam.CastSpells.-Stop)): Trigger
---@field event fun(self: Ability, event: "Skills-Acquisition", callback: fun(trg: Trigger, data: EventParam.Skills-Acquisition)): Trigger
---@field event fun(self: Ability, event: "SkillLoss", callback: fun(trg: Trigger, data: EventParam.SkillLoss)): Trigger
---@field event fun(self: Ability, event: "Skill-exchange", callback: fun(trg: Trigger, data: EventParam.Skill-exchange)): Trigger
---@field event fun(self: Ability, event: "Skills-Disabled", callback: fun(trg: Trigger, data: EventParam.Skills-Disabled)): Trigger
---@field event fun(self: Ability, event: "Skills-Enabled", callback: fun(trg: Trigger, data: EventParam.Skills-Enabled)): Trigger
---@field event fun(self: Ability, event: "Skill-CooldownEnds", callback: fun(trg: Trigger, data: EventParam.Skill-CooldownEnds)): Trigger
---@field event fun(self: Ability, event: "Skills-CustomAnimationAxis", string: string, callback: fun(trg: Trigger, data: EventParam.Skills-CustomAnimationAxis)): Trigger
---@field event fun(self: Ability, event: "Skills-TurnOnTheIndicator", callback: fun(trg: Trigger, data: EventParam.Skills-TurnOnTheIndicator)): Trigger
---@field event fun(self: Ability, event: "Skills-BuildSkillsBeforeReleasing", callback: fun(trg: Trigger, data: EventParam.Skills-BuildSkillsBeforeReleasing)): Trigger
---@field event fun(self: Ability, event: "Skills-TurnOffTheIndicator", callback: fun(trg: Trigger, data: EventParam.Skills-TurnOffTheIndicator)): Trigger

---@class Area
---@field event fun(self: Area, event: "Zone-access", callback: fun(trg: Trigger, data: EventParam.Zone-access)): Trigger
---@field event fun(self: Area, event: "Zone-Leave", callback: fun(trg: Trigger, data: EventParam.Zone-Leave)): Trigger

---@class Buff
---@field event fun(self: Buff, event: "Effect-Gain", callback: fun(trg: Trigger, data: EventParam.Effect-Gain)): Trigger
---@field event fun(self: Buff, event: "Effect-loss", callback: fun(trg: Trigger, data: EventParam.Effect-loss)): Trigger
---@field event fun(self: Buff, event: "Effect-Heartbeat", callback: fun(trg: Trigger, data: EventParam.Effect-Heartbeat)): Trigger
---@field event fun(self: Buff, event: "Effects-Overlay", callback: fun(trg: Trigger, data: EventParam.Effects-Overlay)): Trigger
---@field event fun(self: Buff, event: "Effect-NumberOfLayersChange", callback: fun(trg: Trigger, data: EventParam.Effect-NumberOfLayersChange)): Trigger
---@field event fun(self: Buff, event: "Effect-ComingSoon", callback: fun(trg: Trigger, data: EventParam.Effect-ComingSoon)): Trigger
---@field event fun(self: Buff, event: "Effects-Overlay", callback: fun(trg: Trigger, data: EventParam.Effects-Overlay)): Trigger

---@class Destructible
---@field event fun(self: Destructible, event: "Destructible-Create", callback: fun(trg: Trigger, data: EventParam.Destructible-Create)): Trigger
---@field event fun(self: Destructible, event: "Destructible-Death", callback: fun(trg: Trigger, data: EventParam.Destructible-Death)): Trigger
---@field event fun(self: Destructible, event: "Destructible.-Resurrection", callback: fun(trg: Trigger, data: EventParam.Destructible.-Resurrection)): Trigger
---@field event fun(self: Destructible, event: "Destructible-ResourceChange", callback: fun(trg: Trigger, data: EventParam.Destructible-ResourceChange)): Trigger
---@field event fun(self: Destructible, event: "Destructible-Collection", callback: fun(trg: Trigger, data: EventParam.Destructible-Collection)): Trigger
---@field event fun(self: Destructible, event: "Destructible-Damaged", callback: fun(trg: Trigger, data: EventParam.Destructible-Damaged)): Trigger
---@field event fun(self: Destructible, event: "Destructible-Remove", callback: fun(trg: Trigger, data: EventParam.Destructible-Remove)): Trigger

---@class Item
---@field event fun(self: Item, event: "Items-Get", callback: fun(trg: Trigger, data: EventParam.Items-Get)): Trigger
---@field event fun(self: Item, event: "Items-EnterTheInventory", callback: fun(trg: Trigger, data: EventParam.Items-EnterTheInventory)): Trigger
---@field event fun(self: Item, event: "Items-EnterBackpack", callback: fun(trg: Trigger, data: EventParam.Items-EnterBackpack)): Trigger
---@field event fun(self: Item, event: "Item-Lost", callback: fun(trg: Trigger, data: EventParam.Item-Lost)): Trigger
---@field event fun(self: Item, event: "Items-LeaveTheInventory", callback: fun(trg: Trigger, data: EventParam.Items-LeaveTheInventory)): Trigger
---@field event fun(self: Item, event: "Items-LeaveTheBackpack", callback: fun(trg: Trigger, data: EventParam.Items-LeaveTheBackpack)): Trigger
---@field event fun(self: Item, event: "Items-Use", callback: fun(trg: Trigger, data: EventParam.Items-Use)): Trigger
---@field event fun(self: Item, event: "Item-StackChanges", callback: fun(trg: Trigger, data: EventParam.Item-StackChanges)): Trigger
---@field event fun(self: Item, event: "Item-ChargeChanges", callback: fun(trg: Trigger, data: EventParam.Item-ChargeChanges)): Trigger
---@field event fun(self: Item, event: "Items-Create", callback: fun(trg: Trigger, data: EventParam.Items-Create)): Trigger
---@field event fun(self: Item, event: "Items-Removal", callback: fun(trg: Trigger, data: EventParam.Items-Removal)): Trigger
---@field event fun(self: Item, event: "Items-ForSale", callback: fun(trg: Trigger, data: EventParam.Items-ForSale)): Trigger
---@field event fun(self: Item, event: "Item-Death", callback: fun(trg: Trigger, data: EventParam.Item-Death)): Trigger
---@field event fun(self: Item, event: "Item-CollectionCreation", callback: fun(trg: Trigger, data: EventParam.Item-CollectionCreation)): Trigger

---@class Player
---@field event fun(self: Player, event: "Player-JoinTheGame", callback: fun(trg: Trigger, data: EventParam.Player-JoinTheGame)): Trigger
---@field event fun(self: Player, event: "Player-LeaveTheGame", callback: fun(trg: Trigger, data: EventParam.Player-LeaveTheGame)): Trigger
---@field event fun(self: Player, event: "Player-DroppedCall", callback: fun(trg: Trigger, data: EventParam.Player-DroppedCall)): Trigger
---@field event fun(self: Player, event: "Player-UsePlatformItems", callback: fun(trg: Trigger, data: EventParam.Player-UsePlatformItems)): Trigger
---@field event fun(self: Player, event: "Player-HoldsPlatformItems", callback: fun(trg: Trigger, data: EventParam.Player-HoldsPlatformItems)): Trigger
---@field event fun(self: Player, event: "Player-AttributesChange", callback: fun(trg: Trigger, data: EventParam.Player-AttributesChange)): Trigger
---@field event fun(self: Player, event: "Player-SendTheSpecifiedMessage", msg: string, callback: fun(trg: Trigger, data: EventParam.Player-SendTheSpecifiedMessage)): Trigger
---@field event fun(self: Player, event: "Player-TechnologyEnhancement", callback: fun(trg: Trigger, data: EventParam.Player-TechnologyEnhancement)): Trigger
---@field event fun(self: Player, event: "Player-TechDown", callback: fun(trg: Trigger, data: EventParam.Player-TechDown)): Trigger
---@field event fun(self: Player, event: "Player-TechnologyChanges", callback: fun(trg: Trigger, data: EventParam.Player-TechnologyChanges)): Trigger
---@field event fun(self: Player, event: "Player-RelationshipChanges", callback: fun(trg: Trigger, data: EventParam.Player-RelationshipChanges)): Trigger
---@field event fun(self: Player, event: "Player-Reconnect", callback: fun(trg: Trigger, data: EventParam.Player-Reconnect)): Trigger
---@field event fun(self: Player, event: "Check-Destructible", callback: fun(trg: Trigger, data: EventParam.Check-Destructible)): Trigger
---@field event fun(self: Player, event: "Local-Select-Destructible", callback: fun(trg: Trigger, data: EventParam.Local-Select-Destructible)): Trigger
---@field event fun(self: Player, event: "Interface-Message", event_name: string, callback: fun(trg: Trigger, data: EventParam.Interface-Message)): Trigger
---@field event fun(self: Player, event: "Interface-SliderChanges", ui: UI, callback: fun(trg: Trigger, data: EventParam.Interface-SliderChanges)): Trigger
---@field event fun(self: Player, event: "Interface-ChatBoxVisibilityChanges", ui: UI, callback: fun(trg: Trigger, data: EventParam.Interface-ChatBoxVisibilityChanges)): Trigger
---@field event fun(self: Player, event: "Interface-EquipmentDragAndDrop", ui: UI, callback: fun(trg: Trigger, data: EventParam.Interface-EquipmentDragAndDrop)): Trigger
---@field event fun(self: Player, event: "Screen-CheckBoxChanges", ui: UI, callback: fun(trg: Trigger, data: EventParam.Screen-CheckBoxChanges)): Trigger
---@field event fun(self: Player, event: "Screen-VideoPlaybackIsComplete", ui: UI, callback: fun(trg: Trigger, data: EventParam.Screen-VideoPlaybackIsComplete)): Trigger
---@field event fun(self: Player, event: "Local-interface-inputBoxGetsFocus", ui: UI, callback: fun(trg: Trigger, data: EventParam.Local-interface-inputBoxGetsFocus)): Trigger
---@field event fun(self: Player, event: "Local-interface-inputBoxOutOfFocus", ui: UI, callback: fun(trg: Trigger, data: EventParam.Local-interface-inputBoxOutOfFocus)): Trigger
---@field event fun(self: Player, event: "Local-Interface-InputBoxContentChanged", ui: UI, callback: fun(trg: Trigger, data: EventParam.Local-Interface-InputBoxContentChanged)): Trigger
---@field event fun(self: Player, event: "Keyboard.-PressIt", key: clicli.Const.KeyboardKey|integer, callback: fun(trg: Trigger, data: EventParam.Keyboard.-PressIt)): Trigger
---@field event fun(self: Player, event: "Keyboard-Lift", key: clicli.Const.KeyboardKey|integer, callback: fun(trg: Trigger, data: EventParam.Keyboard-Lift)): Trigger
---@field event fun(self: Player, event: "Local-Keyboard-Press", key: clicli.Const.KeyboardKey|integer, callback: fun(trg: Trigger, data: EventParam.Local-Keyboard-Press)): Trigger
---@field event fun(self: Player, event: "Local-Keyboard-Lift", key: clicli.Const.KeyboardKey|integer, callback: fun(trg: Trigger, data: EventParam.Local-Keyboard-Lift)): Trigger
---@field event fun(self: Player, event: "Mouse-PressIt", key: clicli.Const.MouseKey|integer, callback: fun(trg: Trigger, data: EventParam.Mouse-PressIt)): Trigger
---@field event fun(self: Player, event: "Mouse-lift", key: clicli.Const.MouseKey|integer, callback: fun(trg: Trigger, data: EventParam.Mouse-lift)): Trigger
---@field event fun(self: Player, event: "Mouse-double-click", key: clicli.Const.MouseKey|integer, callback: fun(trg: Trigger, data: EventParam.Mouse-double-click)): Trigger
---@field event fun(self: Player, event: "Local-Mouse-PressDown", key: clicli.Const.MouseKey|integer, callback: fun(trg: Trigger, data: EventParam.Local-Mouse-PressDown)): Trigger
---@field event fun(self: Player, event: "Local-Mouse-Lift", key: clicli.Const.MouseKey|integer, callback: fun(trg: Trigger, data: EventParam.Local-Mouse-Lift)): Trigger
---@field event fun(self: Player, event: "Local-Mouse-DoubleClick", key: clicli.Const.MouseKey|integer, callback: fun(trg: Trigger, data: EventParam.Local-Mouse-DoubleClick)): Trigger
---@field event fun(self: Player, event: "Mouse-PressTheUnit", key: clicli.Const.MouseKey|integer, callback: fun(trg: Trigger, data: EventParam.Mouse-PressTheUnit)): Trigger
---@field event fun(self: Player, event: "Mouse-LiftUnit", key: clicli.Const.MouseKey|integer, callback: fun(trg: Trigger, data: EventParam.Mouse-LiftUnit)): Trigger
---@field event fun(self: Player, event: "Mouse-DoubleClickTheUnit", key: clicli.Const.MouseKey|integer, callback: fun(trg: Trigger, data: EventParam.Mouse-DoubleClickTheUnit)): Trigger
---@field event fun(self: Player, event: "Local-Mouse-PressTheUnit", key: clicli.Const.MouseKey|integer, callback: fun(trg: Trigger, data: EventParam.Local-Mouse-PressTheUnit)): Trigger
---@field event fun(self: Player, event: "Local-Mouse-LiftUnit", key: clicli.Const.MouseKey|integer, callback: fun(trg: Trigger, data: EventParam.Local-Mouse-LiftUnit)): Trigger
---@field event fun(self: Player, event: "Local-Mouse-DoubleClickTheUnit", key: clicli.Const.MouseKey|integer, callback: fun(trg: Trigger, data: EventParam.Local-Mouse-DoubleClickTheUnit)): Trigger
---@field event fun(self: Player, event: "Mouse-move", callback: fun(trg: Trigger, data: EventParam.Mouse-move)): Trigger
---@field event fun(self: Player, event: "Local-Mouse-Move", callback: fun(trg: Trigger, data: EventParam.Local-Mouse-Move)): Trigger
---@field event fun(self: Player, event: "Mouse-Wheel", key: clicli.Const.MouseKey|integer, callback: fun(trg: Trigger, data: EventParam.Mouse-Wheel)): Trigger
---@field event fun(self: Player, event: "Local-Mouse-Wheel", key: clicli.Const.MouseKey|integer, callback: fun(trg: Trigger, data: EventParam.Local-Mouse-Wheel)): Trigger
---@field event fun(self: Player, event: "Select-unit", callback: fun(trg: Trigger, data: EventParam.Select-unit)): Trigger
---@field event fun(self: Player, event: "Local-Select-Unit", callback: fun(trg: Trigger, data: EventParam.Local-Select-Unit)): Trigger
---@field event fun(self: Player, event: "Check-Cancel", callback: fun(trg: Trigger, data: EventParam.Check-Cancel)): Trigger
---@field event fun(self: Player, event: "Local-Select-Cancel", callback: fun(trg: Trigger, data: EventParam.Local-Select-Cancel)): Trigger
---@field event fun(self: Player, event: "Selected-LostUnit", callback: fun(trg: Trigger, data: EventParam.Selected-LostUnit)): Trigger
---@field event fun(self: Player, event: "Local-Selected-LostUnit", callback: fun(trg: Trigger, data: EventParam.Local-Selected-LostUnit)): Trigger
---@field event fun(self: Player, event: "Select-item", callback: fun(trg: Trigger, data: EventParam.Select-item)): Trigger
---@field event fun(self: Player, event: "Local-Select-Items", callback: fun(trg: Trigger, data: EventParam.Local-Select-Items)): Trigger
---@field event fun(self: Player, event: "Player-CheatingDetected", callback: fun(trg: Trigger, data: EventParam.Player-CheatingDetected)): Trigger
---@field event fun(self: Player, event: "Mouse-DoubleClickTheItem", callback: fun(trg: Trigger, data: EventParam.Mouse-DoubleClickTheItem)): Trigger
---@field event fun(self: Player, event: "Mouse-DoubleClickDestructible", callback: fun(trg: Trigger, data: EventParam.Mouse-DoubleClickDestructible)): Trigger
---@field event fun(self: Player, event: "Select-UnitGroup", callback: fun(trg: Trigger, data: EventParam.Select-UnitGroup)): Trigger
---@field event fun(self: Player, event: "Local-Select-UnitGroup", callback: fun(trg: Trigger, data: EventParam.Local-Select-UnitGroup)): Trigger
---@field event fun(self: Player, event: "Mouse-Hover", callback: fun(trg: Trigger, data: EventParam.Mouse-Hover)): Trigger
---@field event fun(self: Player, event: "Local-Mouse-Hover", callback: fun(trg: Trigger, data: EventParam.Local-Mouse-Hover)): Trigger
---@field event fun(self: Player, event: "Player-SendMessage", callback: fun(trg: Trigger, data: EventParam.Player-SendMessage)): Trigger
---@field event fun(self: Player, event: "Player-VoiceSpeech", callback: fun(trg: Trigger, data: EventParam.Player-VoiceSpeech)): Trigger
---@field event fun(self: Player, event: "Player-PlatformItemChanges", callback: fun(trg: Trigger, data: EventParam.Player-PlatformItemChanges)): Trigger
---@field event fun(self: Player, event: "Player-PlatformMallWindowChanges", callback: fun(trg: Trigger, data: EventParam.Player-PlatformMallWindowChanges)): Trigger

---@class Projectile
---@field event fun(self: Projectile, event: "Projectiles-Created", callback: fun(trg: Trigger, data: EventParam.Projectiles-Created)): Trigger
---@field event fun(self: Projectile, event: "Projectiles-Death", callback: fun(trg: Trigger, data: EventParam.Projectiles-Death)): Trigger

---@class Unit
---@field event fun(self: Unit, event: "Unit-ResearchAndDevelopmentTechnology", callback: fun(trg: Trigger, data: EventParam.Unit-ResearchAndDevelopmentTechnology)): Trigger
---@field event fun(self: Unit, event: "Unit-AccessToTechnology", callback: fun(trg: Trigger, data: EventParam.Unit-AccessToTechnology)): Trigger
---@field event fun(self: Unit, event: "Unit-LostTechnology", callback: fun(trg: Trigger, data: EventParam.Unit-LostTechnology)): Trigger
---@field event fun(self: Unit, event: "Unit-BuildingUpgradeStarts", callback: fun(trg: Trigger, data: EventParam.Unit-BuildingUpgradeStarts)): Trigger
---@field event fun(self: Unit, event: "Unit-BuildingUpgradeCancelled", callback: fun(trg: Trigger, data: EventParam.Unit-BuildingUpgradeCancelled)): Trigger
---@field event fun(self: Unit, event: "Unit-BuildingUpgradeCompleted", callback: fun(trg: Trigger, data: EventParam.Unit-BuildingUpgradeCompleted)): Trigger
---@field event fun(self: Unit, event: "Unit-ConstructionBegins", callback: fun(trg: Trigger, data: EventParam.Unit-ConstructionBegins)): Trigger
---@field event fun(self: Unit, event: "Unit-BuildCancelled", callback: fun(trg: Trigger, data: EventParam.Unit-BuildCancelled)): Trigger
---@field event fun(self: Unit, event: "Unit-ConstructionCompleted", callback: fun(trg: Trigger, data: EventParam.Unit-ConstructionCompleted)): Trigger
---@field event fun(self: Unit, event: "Skill-BuiltComplete", callback: fun(trg: Trigger, data: EventParam.Skill-BuiltComplete)): Trigger
---@field event fun(self: Unit, event: "Skills-Learning", callback: fun(trg: Trigger, data: EventParam.Skills-Learning)): Trigger
---@field event fun(self: Unit, event: "Skills-AvailableStatusChanges", callback: fun(trg: Trigger, data: EventParam.Skills-AvailableStatusChanges)): Trigger
---@field event fun(self: Unit, event: "Skill-SilentStateChanges", callback: fun(trg: Trigger, data: EventParam.Skill-SilentStateChanges)): Trigger
---@field event fun(self: Unit, event: "Unit-NameChange", callback: fun(trg: Trigger, data: EventParam.Unit-NameChange)): Trigger
---@field event fun(self: Unit, event: "Unit-MinimapIconChanges", callback: fun(trg: Trigger, data: EventParam.Unit-MinimapIconChanges)): Trigger
---@field event fun(self: Unit, event: "Unit-HeadChange", callback: fun(trg: Trigger, data: EventParam.Unit-HeadChange)): Trigger
---@field event fun(self: Unit, event: "Unit-Remove", callback: fun(trg: Trigger, data: EventParam.Unit-Remove)): Trigger
---@field event fun(self: Unit, event: "Unit-AfterRemoval", callback: fun(trg: Trigger, data: EventParam.Unit-AfterRemoval)): Trigger
---@field event fun(self: Unit, event: "Unit-EndOfTransmission", callback: fun(trg: Trigger, data: EventParam.Unit-EndOfTransmission)): Trigger
---@field event fun(self: Unit, event: "Unit-AttributeChange", attr: string, callback: fun(trg: Trigger, data: EventParam.Unit-AttributeChange)): Trigger
---@field event fun(self: Unit, event: "Unit-AboutToDie", callback: fun(trg: Trigger, data: EventParam.Unit-AboutToDie)): Trigger
---@field event fun(self: Unit, event: "Unit-Death", callback: fun(trg: Trigger, data: EventParam.Unit-Death)): Trigger
---@field event fun(self: Unit, event: "Unit-BeforeTakingDamage", callback: fun(trg: Trigger, data: EventParam.Unit-BeforeTakingDamage)): Trigger
---@field event fun(self: Unit, event: "Unit-BeforeDealingDamage", callback: fun(trg: Trigger, data: EventParam.Unit-BeforeDealingDamage)): Trigger
---@field event fun(self: Unit, event: "Unit-WhenTakingDamage", callback: fun(trg: Trigger, data: EventParam.Unit-WhenTakingDamage)): Trigger
---@field event fun(self: Unit, event: "Unit-WhenDealingDamage", callback: fun(trg: Trigger, data: EventParam.Unit-WhenDealingDamage)): Trigger
---@field event fun(self: Unit, event: "Unit-AfterDealingDamage", callback: fun(trg: Trigger, data: EventParam.Unit-AfterDealingDamage)): Trigger
---@field event fun(self: Unit, event: "Unit-AfterTakingDamage", callback: fun(trg: Trigger, data: EventParam.Unit-AfterTakingDamage)): Trigger
---@field event fun(self: Unit, event: "Unit-BeforeBeingTreated", callback: fun(trg: Trigger, data: EventParam.Unit-BeforeBeingTreated)): Trigger
---@field event fun(self: Unit, event: "Unit-AfterBeingTreated", callback: fun(trg: Trigger, data: EventParam.Unit-AfterBeingTreated)): Trigger
---@field event fun(self: Unit, event: "Unit-WhenBeingTreated", callback: fun(trg: Trigger, data: EventParam.Unit-WhenBeingTreated)): Trigger
---@field event fun(self: Unit, event: "Unit-CastSkills", callback: fun(trg: Trigger, data: EventParam.Unit-CastSkills)): Trigger
---@field event fun(self: Unit, event: "Unit-BeforeGainingExperience", callback: fun(trg: Trigger, data: EventParam.Unit-BeforeGainingExperience)): Trigger
---@field event fun(self: Unit, event: "Unit-AfterGainingExperience", callback: fun(trg: Trigger, data: EventParam.Unit-AfterGainingExperience)): Trigger
---@field event fun(self: Unit, event: "Unit-ReceiveCommand", callback: fun(trg: Trigger, data: EventParam.Unit-ReceiveCommand)): Trigger
---@field event fun(self: Unit, event: "Unit-Kill", callback: fun(trg: Trigger, data: EventParam.Unit-Kill)): Trigger
---@field event fun(self: Unit, event: "Unit-Create", callback: fun(trg: Trigger, data: EventParam.Unit-Create)): Trigger
---@field event fun(self: Unit, event: "Unit-EnterTheBattle", callback: fun(trg: Trigger, data: EventParam.Unit-EnterTheBattle)): Trigger
---@field event fun(self: Unit, event: "Unit-OutOfCombat", callback: fun(trg: Trigger, data: EventParam.Unit-OutOfCombat)): Trigger
---@field event fun(self: Unit, event: "Unit-AboutToPickUpItems", callback: fun(trg: Trigger, data: EventParam.Unit-AboutToPickUpItems)): Trigger
---@field event fun(self: Unit, event: "Unit-TogglesDefaultBehavior", callback: fun(trg: Trigger, data: EventParam.Unit-TogglesDefaultBehavior)): Trigger
---@field event fun(self: Unit, event: "Unit-ApproachingEnemy", callback: fun(trg: Trigger, data: EventParam.Unit-ApproachingEnemy)): Trigger
---@field event fun(self: Unit, event: "Unit-SpottedTarget", callback: fun(trg: Trigger, data: EventParam.Unit-SpottedTarget)): Trigger
---@field event fun(self: Unit, event: "Unit-PurchaseItems", callback: fun(trg: Trigger, data: EventParam.Unit-PurchaseItems)): Trigger
---@field event fun(self: Unit, event: "Units-PurchaseUnits", callback: fun(trg: Trigger, data: EventParam.Units-PurchaseUnits)): Trigger
---@field event fun(self: Unit, event: "Unit-ItemsForSale", callback: fun(trg: Trigger, data: EventParam.Unit-ItemsForSale)): Trigger
---@field event fun(self: Unit, event: "Unit-ItemComposition", callback: fun(trg: Trigger, data: EventParam.Unit-ItemComposition)): Trigger
---@field event fun(self: Unit, event: "Unit-PurchaseItemCompositing", callback: fun(trg: Trigger, data: EventParam.Unit-PurchaseItemCompositing)): Trigger
---@field event fun(self: Unit, event: "Unit-Resurrection", callback: fun(trg: Trigger, data: EventParam.Unit-Resurrection)): Trigger
---@field event fun(self: Unit, event: "Unit-Upgrade", callback: fun(trg: Trigger, data: EventParam.Unit-Upgrade)): Trigger
---@field event fun(self: Unit, event: "Unit-IntoTheGrass", callback: fun(trg: Trigger, data: EventParam.Unit-IntoTheGrass)): Trigger
---@field event fun(self: Unit, event: "Unit-GetOutOfTheGrass", callback: fun(trg: Trigger, data: EventParam.Unit-GetOutOfTheGrass)): Trigger
---@field event fun(self: Unit, event: "Unit-ChangeOwnership", callback: fun(trg: Trigger, data: EventParam.Unit-ChangeOwnership)): Trigger
---@field event fun(self: Unit, event: "SkillType-ThePrerequisiteIsTrue", callback: fun(trg: Trigger, data: EventParam.SkillType-ThePrerequisiteIsTrue)): Trigger
---@field event fun(self: Unit, event: "SkillType-PreconditionsAreNotValid", callback: fun(trg: Trigger, data: EventParam.SkillType-PreconditionsAreNotValid)): Trigger
---@field event fun(self: Unit, event: "TechnologyType-PreconditionsHold", callback: fun(trg: Trigger, data: EventParam.TechnologyType-PreconditionsHold)): Trigger
---@field event fun(self: Unit, event: "TechnologyType-PreconditionNotValid", callback: fun(trg: Trigger, data: EventParam.TechnologyType-PreconditionNotValid)): Trigger
---@field event fun(self: Unit, event: "Skills-Upgrades", callback: fun(trg: Trigger, data: EventParam.Skills-Upgrades)): Trigger
---@field event fun(self: Unit, event: "Casting.-AboutToBegin", callback: fun(trg: Trigger, data: EventParam.Casting.-AboutToBegin)): Trigger
---@field event fun(self: Unit, event: "CastTheSpell.-HereWeGo", callback: fun(trg: Trigger, data: EventParam.CastTheSpell.-HereWeGo)): Trigger
---@field event fun(self: Unit, event: "Cast-Guide", callback: fun(trg: Trigger, data: EventParam.Cast-Guide)): Trigger
---@field event fun(self: Unit, event: "CastSpells.-Strike", callback: fun(trg: Trigger, data: EventParam.CastSpells.-Strike)): Trigger
---@field event fun(self: Unit, event: "CastASpell.-Finished", callback: fun(trg: Trigger, data: EventParam.CastASpell.-Finished)): Trigger
---@field event fun(self: Unit, event: "CastSpells.-Over", callback: fun(trg: Trigger, data: EventParam.CastSpells.-Over)): Trigger
---@field event fun(self: Unit, event: "CastASpell.-InterruptTheStart", callback: fun(trg: Trigger, data: EventParam.CastASpell.-InterruptTheStart)): Trigger
---@field event fun(self: Unit, event: "CastSpells.-InterruptTheLead", callback: fun(trg: Trigger, data: EventParam.CastSpells.-InterruptTheLead)): Trigger
---@field event fun(self: Unit, event: "CastASpell.-BreakTheShot", callback: fun(trg: Trigger, data: EventParam.CastASpell.-BreakTheShot)): Trigger
---@field event fun(self: Unit, event: "CastSpells.-Stop", callback: fun(trg: Trigger, data: EventParam.CastSpells.-Stop)): Trigger
---@field event fun(self: Unit, event: "Skills-Acquisition", callback: fun(trg: Trigger, data: EventParam.Skills-Acquisition)): Trigger
---@field event fun(self: Unit, event: "SkillLoss", callback: fun(trg: Trigger, data: EventParam.SkillLoss)): Trigger
---@field event fun(self: Unit, event: "Skill-exchange", callback: fun(trg: Trigger, data: EventParam.Skill-exchange)): Trigger
---@field event fun(self: Unit, event: "Skills-Disabled", callback: fun(trg: Trigger, data: EventParam.Skills-Disabled)): Trigger
---@field event fun(self: Unit, event: "Skills-Enabled", callback: fun(trg: Trigger, data: EventParam.Skills-Enabled)): Trigger
---@field event fun(self: Unit, event: "Skill-CooldownEnds", callback: fun(trg: Trigger, data: EventParam.Skill-CooldownEnds)): Trigger
---@field event fun(self: Unit, event: "Skills-CustomAnimationAxis", string: string, callback: fun(trg: Trigger, data: EventParam.Skills-CustomAnimationAxis)): Trigger
---@field event fun(self: Unit, event: "Effect-Gain", callback: fun(trg: Trigger, data: EventParam.Effect-Gain)): Trigger
---@field event fun(self: Unit, event: "Effect-loss", callback: fun(trg: Trigger, data: EventParam.Effect-loss)): Trigger
---@field event fun(self: Unit, event: "Effect-Heartbeat", callback: fun(trg: Trigger, data: EventParam.Effect-Heartbeat)): Trigger
---@field event fun(self: Unit, event: "Effects-Overlay", callback: fun(trg: Trigger, data: EventParam.Effects-Overlay)): Trigger
---@field event fun(self: Unit, event: "Effect-NumberOfLayersChange", callback: fun(trg: Trigger, data: EventParam.Effect-NumberOfLayersChange)): Trigger
---@field event fun(self: Unit, event: "Effect-ComingSoon", callback: fun(trg: Trigger, data: EventParam.Effect-ComingSoon)): Trigger
---@field event fun(self: Unit, event: "Effects-Overlay", callback: fun(trg: Trigger, data: EventParam.Effects-Overlay)): Trigger
---@field event fun(self: Unit, event: "Skills-TurnOnTheIndicator", callback: fun(trg: Trigger, data: EventParam.Skills-TurnOnTheIndicator)): Trigger
---@field event fun(self: Unit, event: "Skills-BuildSkillsBeforeReleasing", callback: fun(trg: Trigger, data: EventParam.Skills-BuildSkillsBeforeReleasing)): Trigger
---@field event fun(self: Unit, event: "Skills-TurnOffTheIndicator", callback: fun(trg: Trigger, data: EventParam.Skills-TurnOffTheIndicator)): Trigger
---@field event fun(self: Unit, event: "Unit-PathfindingBegins", callback: fun(trg: Trigger, data: EventParam.Unit-PathfindingBegins)): Trigger
---@field event fun(self: Unit, event: "Unit-PathfindingEnds", callback: fun(trg: Trigger, data: EventParam.Unit-PathfindingEnds)): Trigger
---@field event fun(self: Unit, event: "Command-AttackMove", callback: fun(trg: Trigger, data: EventParam.Command-AttackMove)): Trigger
---@field event fun(self: Unit, event: "Command-SellItems", callback: fun(trg: Trigger, data: EventParam.Command-SellItems)): Trigger
---@field event fun(self: Unit, event: "Command-CastAbilities", callback: fun(trg: Trigger, data: EventParam.Command-CastAbilities)): Trigger
---@field event fun(self: Unit, event: "Command-patrol", callback: fun(trg: Trigger, data: EventParam.Command-patrol)): Trigger
---@field event fun(self: Unit, event: "Command-move", callback: fun(trg: Trigger, data: EventParam.Command-move)): Trigger

---@class EditorObject.Ability
---@field event fun(self: EditorObject.Ability, event: "Skill-BuiltComplete", callback: fun(trg: Trigger, data: EventParam.Skill-BuiltComplete)): Trigger
---@field event fun(self: EditorObject.Ability, event: "Skills-Learning", callback: fun(trg: Trigger, data: EventParam.Skills-Learning)): Trigger
---@field event fun(self: EditorObject.Ability, event: "Skills-AvailableStatusChanges", callback: fun(trg: Trigger, data: EventParam.Skills-AvailableStatusChanges)): Trigger
---@field event fun(self: EditorObject.Ability, event: "Skill-SilentStateChanges", callback: fun(trg: Trigger, data: EventParam.Skill-SilentStateChanges)): Trigger
---@field event fun(self: EditorObject.Ability, event: "Skills-Upgrades", callback: fun(trg: Trigger, data: EventParam.Skills-Upgrades)): Trigger
---@field event fun(self: EditorObject.Ability, event: "Casting.-AboutToBegin", callback: fun(trg: Trigger, data: EventParam.Casting.-AboutToBegin)): Trigger
---@field event fun(self: EditorObject.Ability, event: "CastTheSpell.-HereWeGo", callback: fun(trg: Trigger, data: EventParam.CastTheSpell.-HereWeGo)): Trigger
---@field event fun(self: EditorObject.Ability, event: "Cast-Guide", callback: fun(trg: Trigger, data: EventParam.Cast-Guide)): Trigger
---@field event fun(self: EditorObject.Ability, event: "CastSpells.-Strike", callback: fun(trg: Trigger, data: EventParam.CastSpells.-Strike)): Trigger
---@field event fun(self: EditorObject.Ability, event: "CastASpell.-Finished", callback: fun(trg: Trigger, data: EventParam.CastASpell.-Finished)): Trigger
---@field event fun(self: EditorObject.Ability, event: "CastSpells.-Over", callback: fun(trg: Trigger, data: EventParam.CastSpells.-Over)): Trigger
---@field event fun(self: EditorObject.Ability, event: "CastASpell.-InterruptTheStart", callback: fun(trg: Trigger, data: EventParam.CastASpell.-InterruptTheStart)): Trigger
---@field event fun(self: EditorObject.Ability, event: "CastSpells.-InterruptTheLead", callback: fun(trg: Trigger, data: EventParam.CastSpells.-InterruptTheLead)): Trigger
---@field event fun(self: EditorObject.Ability, event: "CastASpell.-BreakTheShot", callback: fun(trg: Trigger, data: EventParam.CastASpell.-BreakTheShot)): Trigger
---@field event fun(self: EditorObject.Ability, event: "CastSpells.-Stop", callback: fun(trg: Trigger, data: EventParam.CastSpells.-Stop)): Trigger
---@field event fun(self: EditorObject.Ability, event: "Skills-Acquisition", callback: fun(trg: Trigger, data: EventParam.Skills-Acquisition)): Trigger
---@field event fun(self: EditorObject.Ability, event: "SkillLoss", callback: fun(trg: Trigger, data: EventParam.SkillLoss)): Trigger
---@field event fun(self: EditorObject.Ability, event: "Skill-exchange", callback: fun(trg: Trigger, data: EventParam.Skill-exchange)): Trigger
---@field event fun(self: EditorObject.Ability, event: "Skills-Disabled", callback: fun(trg: Trigger, data: EventParam.Skills-Disabled)): Trigger
---@field event fun(self: EditorObject.Ability, event: "Skills-Enabled", callback: fun(trg: Trigger, data: EventParam.Skills-Enabled)): Trigger
---@field event fun(self: EditorObject.Ability, event: "Skill-CooldownEnds", callback: fun(trg: Trigger, data: EventParam.Skill-CooldownEnds)): Trigger
---@field event fun(self: EditorObject.Ability, event: "Skills-CustomAnimationAxis", callback: fun(trg: Trigger, data: EventParam.Skills-CustomAnimationAxis)): Trigger
---@field event fun(self: EditorObject.Ability, event: "Skills-TurnOnTheIndicator", callback: fun(trg: Trigger, data: EventParam.Skills-TurnOnTheIndicator)): Trigger
---@field event fun(self: EditorObject.Ability, event: "Skills-BuildSkillsBeforeReleasing", callback: fun(trg: Trigger, data: EventParam.Skills-BuildSkillsBeforeReleasing)): Trigger
---@field event fun(self: EditorObject.Ability, event: "Skills-TurnOffTheIndicator", callback: fun(trg: Trigger, data: EventParam.Skills-TurnOffTheIndicator)): Trigger

---@class EditorObject.Buff
---@field event fun(self: EditorObject.Buff, event: "Effect-Gain", callback: fun(trg: Trigger, data: EventParam.Effect-Gain)): Trigger
---@field event fun(self: EditorObject.Buff, event: "Effect-loss", callback: fun(trg: Trigger, data: EventParam.Effect-loss)): Trigger
---@field event fun(self: EditorObject.Buff, event: "Effect-Heartbeat", callback: fun(trg: Trigger, data: EventParam.Effect-Heartbeat)): Trigger
---@field event fun(self: EditorObject.Buff, event: "Effects-Overlay", callback: fun(trg: Trigger, data: EventParam.Effects-Overlay)): Trigger
---@field event fun(self: EditorObject.Buff, event: "Effect-NumberOfLayersChange", callback: fun(trg: Trigger, data: EventParam.Effect-NumberOfLayersChange)): Trigger
---@field event fun(self: EditorObject.Buff, event: "Effect-ComingSoon", callback: fun(trg: Trigger, data: EventParam.Effect-ComingSoon)): Trigger
---@field event fun(self: EditorObject.Buff, event: "Effects-Overlay", callback: fun(trg: Trigger, data: EventParam.Effects-Overlay)): Trigger

---@class EditorObject.Item
---@field event fun(self: EditorObject.Item, event: "Items-Get", callback: fun(trg: Trigger, data: EventParam.Items-Get)): Trigger
---@field event fun(self: EditorObject.Item, event: "Items-EnterTheInventory", callback: fun(trg: Trigger, data: EventParam.Items-EnterTheInventory)): Trigger
---@field event fun(self: EditorObject.Item, event: "Items-EnterBackpack", callback: fun(trg: Trigger, data: EventParam.Items-EnterBackpack)): Trigger
---@field event fun(self: EditorObject.Item, event: "Item-Lost", callback: fun(trg: Trigger, data: EventParam.Item-Lost)): Trigger
---@field event fun(self: EditorObject.Item, event: "Items-LeaveTheInventory", callback: fun(trg: Trigger, data: EventParam.Items-LeaveTheInventory)): Trigger
---@field event fun(self: EditorObject.Item, event: "Items-LeaveTheBackpack", callback: fun(trg: Trigger, data: EventParam.Items-LeaveTheBackpack)): Trigger
---@field event fun(self: EditorObject.Item, event: "Items-Use", callback: fun(trg: Trigger, data: EventParam.Items-Use)): Trigger
---@field event fun(self: EditorObject.Item, event: "Item-StackChanges", callback: fun(trg: Trigger, data: EventParam.Item-StackChanges)): Trigger
---@field event fun(self: EditorObject.Item, event: "Item-ChargeChanges", callback: fun(trg: Trigger, data: EventParam.Item-ChargeChanges)): Trigger
---@field event fun(self: EditorObject.Item, event: "Items-Create", callback: fun(trg: Trigger, data: EventParam.Items-Create)): Trigger
---@field event fun(self: EditorObject.Item, event: "Items-Removal", callback: fun(trg: Trigger, data: EventParam.Items-Removal)): Trigger
---@field event fun(self: EditorObject.Item, event: "Items-ForSale", callback: fun(trg: Trigger, data: EventParam.Items-ForSale)): Trigger
---@field event fun(self: EditorObject.Item, event: "Item-Death", callback: fun(trg: Trigger, data: EventParam.Item-Death)): Trigger
---@field event fun(self: EditorObject.Item, event: "Item-CollectionCreation", callback: fun(trg: Trigger, data: EventParam.Item-CollectionCreation)): Trigger

---@class EditorObject.Projectile
---@field event fun(self: EditorObject.Projectile, event: "Projectiles-Created", callback: fun(trg: Trigger, data: EventParam.Projectiles-Created)): Trigger
---@field event fun(self: EditorObject.Projectile, event: "Projectiles-Death", callback: fun(trg: Trigger, data: EventParam.Projectiles-Death)): Trigger

---@class EditorObject.Unit
---@field event fun(self: EditorObject.Unit, event: "Unit-ResearchAndDevelopmentTechnology", callback: fun(trg: Trigger, data: EventParam.Unit-ResearchAndDevelopmentTechnology)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Unit-AccessToTechnology", callback: fun(trg: Trigger, data: EventParam.Unit-AccessToTechnology)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Unit-LostTechnology", callback: fun(trg: Trigger, data: EventParam.Unit-LostTechnology)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Unit-BuildingUpgradeStarts", callback: fun(trg: Trigger, data: EventParam.Unit-BuildingUpgradeStarts)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Unit-BuildingUpgradeCancelled", callback: fun(trg: Trigger, data: EventParam.Unit-BuildingUpgradeCancelled)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Unit-BuildingUpgradeCompleted", callback: fun(trg: Trigger, data: EventParam.Unit-BuildingUpgradeCompleted)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Unit-ConstructionBegins", callback: fun(trg: Trigger, data: EventParam.Unit-ConstructionBegins)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Unit-BuildCancelled", callback: fun(trg: Trigger, data: EventParam.Unit-BuildCancelled)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Unit-ConstructionCompleted", callback: fun(trg: Trigger, data: EventParam.Unit-ConstructionCompleted)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Skill-BuiltComplete", callback: fun(trg: Trigger, data: EventParam.Skill-BuiltComplete)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Skills-Learning", callback: fun(trg: Trigger, data: EventParam.Skills-Learning)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Skills-AvailableStatusChanges", callback: fun(trg: Trigger, data: EventParam.Skills-AvailableStatusChanges)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Skill-SilentStateChanges", callback: fun(trg: Trigger, data: EventParam.Skill-SilentStateChanges)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Unit-NameChange", callback: fun(trg: Trigger, data: EventParam.Unit-NameChange)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Unit-MinimapIconChanges", callback: fun(trg: Trigger, data: EventParam.Unit-MinimapIconChanges)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Unit-HeadChange", callback: fun(trg: Trigger, data: EventParam.Unit-HeadChange)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Unit-Remove", callback: fun(trg: Trigger, data: EventParam.Unit-Remove)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Unit-AfterRemoval", callback: fun(trg: Trigger, data: EventParam.Unit-AfterRemoval)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Unit-EndOfTransmission", callback: fun(trg: Trigger, data: EventParam.Unit-EndOfTransmission)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Unit-AttributeChange", callback: fun(trg: Trigger, data: EventParam.Unit-AttributeChange)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Unit-AboutToDie", callback: fun(trg: Trigger, data: EventParam.Unit-AboutToDie)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Unit-Death", callback: fun(trg: Trigger, data: EventParam.Unit-Death)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Unit-BeforeTakingDamage", callback: fun(trg: Trigger, data: EventParam.Unit-BeforeTakingDamage)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Unit-BeforeDealingDamage", callback: fun(trg: Trigger, data: EventParam.Unit-BeforeDealingDamage)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Unit-WhenTakingDamage", callback: fun(trg: Trigger, data: EventParam.Unit-WhenTakingDamage)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Unit-WhenDealingDamage", callback: fun(trg: Trigger, data: EventParam.Unit-WhenDealingDamage)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Unit-AfterDealingDamage", callback: fun(trg: Trigger, data: EventParam.Unit-AfterDealingDamage)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Unit-AfterTakingDamage", callback: fun(trg: Trigger, data: EventParam.Unit-AfterTakingDamage)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Unit-BeforeBeingTreated", callback: fun(trg: Trigger, data: EventParam.Unit-BeforeBeingTreated)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Unit-AfterBeingTreated", callback: fun(trg: Trigger, data: EventParam.Unit-AfterBeingTreated)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Unit-WhenBeingTreated", callback: fun(trg: Trigger, data: EventParam.Unit-WhenBeingTreated)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Unit-CastSkills", callback: fun(trg: Trigger, data: EventParam.Unit-CastSkills)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Unit-BeforeGainingExperience", callback: fun(trg: Trigger, data: EventParam.Unit-BeforeGainingExperience)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Unit-AfterGainingExperience", callback: fun(trg: Trigger, data: EventParam.Unit-AfterGainingExperience)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Unit-ReceiveCommand", callback: fun(trg: Trigger, data: EventParam.Unit-ReceiveCommand)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Unit-Kill", callback: fun(trg: Trigger, data: EventParam.Unit-Kill)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Unit-Create", callback: fun(trg: Trigger, data: EventParam.Unit-Create)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Unit-EnterTheBattle", callback: fun(trg: Trigger, data: EventParam.Unit-EnterTheBattle)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Unit-OutOfCombat", callback: fun(trg: Trigger, data: EventParam.Unit-OutOfCombat)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Unit-AboutToPickUpItems", callback: fun(trg: Trigger, data: EventParam.Unit-AboutToPickUpItems)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Unit-TogglesDefaultBehavior", callback: fun(trg: Trigger, data: EventParam.Unit-TogglesDefaultBehavior)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Unit-ApproachingEnemy", callback: fun(trg: Trigger, data: EventParam.Unit-ApproachingEnemy)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Unit-SpottedTarget", callback: fun(trg: Trigger, data: EventParam.Unit-SpottedTarget)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Unit-PurchaseItems", callback: fun(trg: Trigger, data: EventParam.Unit-PurchaseItems)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Units-PurchaseUnits", callback: fun(trg: Trigger, data: EventParam.Units-PurchaseUnits)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Unit-ItemsForSale", callback: fun(trg: Trigger, data: EventParam.Unit-ItemsForSale)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Unit-ItemComposition", callback: fun(trg: Trigger, data: EventParam.Unit-ItemComposition)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Unit-PurchaseItemCompositing", callback: fun(trg: Trigger, data: EventParam.Unit-PurchaseItemCompositing)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Unit-Resurrection", callback: fun(trg: Trigger, data: EventParam.Unit-Resurrection)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Unit-Upgrade", callback: fun(trg: Trigger, data: EventParam.Unit-Upgrade)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Unit-IntoTheGrass", callback: fun(trg: Trigger, data: EventParam.Unit-IntoTheGrass)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Unit-GetOutOfTheGrass", callback: fun(trg: Trigger, data: EventParam.Unit-GetOutOfTheGrass)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Unit-ChangeOwnership", callback: fun(trg: Trigger, data: EventParam.Unit-ChangeOwnership)): Trigger
---@field event fun(self: EditorObject.Unit, event: "SkillType-ThePrerequisiteIsTrue", callback: fun(trg: Trigger, data: EventParam.SkillType-ThePrerequisiteIsTrue)): Trigger
---@field event fun(self: EditorObject.Unit, event: "SkillType-PreconditionsAreNotValid", callback: fun(trg: Trigger, data: EventParam.SkillType-PreconditionsAreNotValid)): Trigger
---@field event fun(self: EditorObject.Unit, event: "TechnologyType-PreconditionsHold", callback: fun(trg: Trigger, data: EventParam.TechnologyType-PreconditionsHold)): Trigger
---@field event fun(self: EditorObject.Unit, event: "TechnologyType-PreconditionNotValid", callback: fun(trg: Trigger, data: EventParam.TechnologyType-PreconditionNotValid)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Skills-Upgrades", callback: fun(trg: Trigger, data: EventParam.Skills-Upgrades)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Casting.-AboutToBegin", callback: fun(trg: Trigger, data: EventParam.Casting.-AboutToBegin)): Trigger
---@field event fun(self: EditorObject.Unit, event: "CastTheSpell.-HereWeGo", callback: fun(trg: Trigger, data: EventParam.CastTheSpell.-HereWeGo)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Cast-Guide", callback: fun(trg: Trigger, data: EventParam.Cast-Guide)): Trigger
---@field event fun(self: EditorObject.Unit, event: "CastSpells.-Strike", callback: fun(trg: Trigger, data: EventParam.CastSpells.-Strike)): Trigger
---@field event fun(self: EditorObject.Unit, event: "CastASpell.-Finished", callback: fun(trg: Trigger, data: EventParam.CastASpell.-Finished)): Trigger
---@field event fun(self: EditorObject.Unit, event: "CastSpells.-Over", callback: fun(trg: Trigger, data: EventParam.CastSpells.-Over)): Trigger
---@field event fun(self: EditorObject.Unit, event: "CastASpell.-InterruptTheStart", callback: fun(trg: Trigger, data: EventParam.CastASpell.-InterruptTheStart)): Trigger
---@field event fun(self: EditorObject.Unit, event: "CastSpells.-InterruptTheLead", callback: fun(trg: Trigger, data: EventParam.CastSpells.-InterruptTheLead)): Trigger
---@field event fun(self: EditorObject.Unit, event: "CastASpell.-BreakTheShot", callback: fun(trg: Trigger, data: EventParam.CastASpell.-BreakTheShot)): Trigger
---@field event fun(self: EditorObject.Unit, event: "CastSpells.-Stop", callback: fun(trg: Trigger, data: EventParam.CastSpells.-Stop)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Skills-Acquisition", callback: fun(trg: Trigger, data: EventParam.Skills-Acquisition)): Trigger
---@field event fun(self: EditorObject.Unit, event: "SkillLoss", callback: fun(trg: Trigger, data: EventParam.SkillLoss)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Skill-exchange", callback: fun(trg: Trigger, data: EventParam.Skill-exchange)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Skills-Disabled", callback: fun(trg: Trigger, data: EventParam.Skills-Disabled)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Skills-Enabled", callback: fun(trg: Trigger, data: EventParam.Skills-Enabled)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Skill-CooldownEnds", callback: fun(trg: Trigger, data: EventParam.Skill-CooldownEnds)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Skills-CustomAnimationAxis", callback: fun(trg: Trigger, data: EventParam.Skills-CustomAnimationAxis)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Effect-Gain", callback: fun(trg: Trigger, data: EventParam.Effect-Gain)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Effect-loss", callback: fun(trg: Trigger, data: EventParam.Effect-loss)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Effect-Heartbeat", callback: fun(trg: Trigger, data: EventParam.Effect-Heartbeat)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Effects-Overlay", callback: fun(trg: Trigger, data: EventParam.Effects-Overlay)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Effect-NumberOfLayersChange", callback: fun(trg: Trigger, data: EventParam.Effect-NumberOfLayersChange)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Effect-ComingSoon", callback: fun(trg: Trigger, data: EventParam.Effect-ComingSoon)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Effects-Overlay", callback: fun(trg: Trigger, data: EventParam.Effects-Overlay)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Skills-TurnOnTheIndicator", callback: fun(trg: Trigger, data: EventParam.Skills-TurnOnTheIndicator)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Skills-BuildSkillsBeforeReleasing", callback: fun(trg: Trigger, data: EventParam.Skills-BuildSkillsBeforeReleasing)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Skills-TurnOffTheIndicator", callback: fun(trg: Trigger, data: EventParam.Skills-TurnOffTheIndicator)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Unit-PathfindingBegins", callback: fun(trg: Trigger, data: EventParam.Unit-PathfindingBegins)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Unit-PathfindingEnds", callback: fun(trg: Trigger, data: EventParam.Unit-PathfindingEnds)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Command-AttackMove", callback: fun(trg: Trigger, data: EventParam.Command-AttackMove)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Command-SellItems", callback: fun(trg: Trigger, data: EventParam.Command-SellItems)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Command-CastAbilities", callback: fun(trg: Trigger, data: EventParam.Command-CastAbilities)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Command-patrol", callback: fun(trg: Trigger, data: EventParam.Command-patrol)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Command-move", callback: fun(trg: Trigger, data: EventParam.Command-move)): Trigger

return M
