--This file is generated by tools/genGameAPI, do not modify it manually.
---@meta

---@class EventConfig
local M = {}

M.config = {}

---@alias EventParam.Unknown-et_logic_unit_destroy EventParam.ET_LOGIC_UNIT_DESTROY
M.config["Unknown-et_logic_unit_destroy"] = {
    _deprecated = true,
    desc = "ET_LOGIC_UNIT_DESTROY",
    key = "ET_LOGIC_UNIT_DESTROY",
    name = "Unknown-et_logic_unit_destroy",
    params = {
    },
}

---@alias EventParam.Game - initialization EventParam.ET_GAME_INIT
M.config["Game - initialization"] = {
    desc = "Triggered when the game is initialized.",
    key = "ET_GAME_INIT",
    name = "Game - initialization",
    params = {
    },
}

---@alias EventParam.Game-FrameChasingComplete EventParam.ET_RELAUNCH_FRAME_CATCHING_FINISHED
M.config["Game-FrameChasingComplete"] = {
    desc = "",
    key = "ET_RELAUNCH_FRAME_CATCHING_FINISHED",
    name = "Game-FrameChasingComplete",
    params = {
    },
}

---@alias EventParam.Game - Logic is out of sync EventParam.ET_GAME_SNAPSHOT_MISMATCH
M.config["Game - Logic is out of sync"] = {
    desc = "",
    key = "ET_GAME_SNAPSHOT_MISMATCH",
    name = "Game - Logic is out of sync",
    params = {
    },
}

---@alias EventParam.Game - Terrain presets loaded complete EventParam.ET_SCENE_PRESET_LOADING_FINISH
M.config["Game - Terrain presets loaded complete"] = {
    desc = "",
    key = "ET_SCENE_PRESET_LOADING_FINISH",
    name = "Game - Terrain presets loaded complete",
    params = {
    },
}

---@alias EventParam.Unknown-et_recv_trigger EventParam.ET_RECV_TRIGGER
M.config["Unknown-et_recv_trigger"] = {
    _deprecated = true,
    desc = "ET_RECV_TRIGGER",
    key = "ET_RECV_TRIGGER",
    name = "Unknown-et_recv_trigger",
    params = {
    },
}

---@alias EventParam.Game-Over EventParam.ET_GAME_END
M.config["Game-Over"] = {
    desc = "Triggered when the game ends",
    key = "ET_GAME_END",
    name = "Game-Over",
    params = {
    },
}

---@alias EventParam.Game-Pause EventParam.ET_GAME_PAUSE
M.config["Game-Pause"] = {
    desc = "Triggered when the game is paused",
    key = "ET_GAME_PAUSE",
    name = "Game-Pause",
    params = {
    },
}

---@alias EventParam.Game-Recovery EventParam.ET_GAME_RESUME
M.config["Game-Recovery"] = {
    desc = "Triggered when the game resumes",
    key = "ET_GAME_RESUME",
    name = "Game-Recovery",
    params = {
    },
}

---@alias EventParam.Unknown-et_empty EventParam.ET_EMPTY
M.config["Unknown-et_empty"] = {
    _deprecated = true,
    desc = "ET_EMPTY",
    key = "ET_EMPTY",
    name = "Unknown-et_empty",
    params = {
    },
}

---@alias EventParam.Unknown-timer_timeout EventParam.TIMER_TIMEOUT
M.config["Unknown-timer_timeout"] = {
    _deprecated = true,
    desc = "TIMER_TIMEOUT",
    key = "TIMER_TIMEOUT",
    name = "Unknown-timer_timeout",
    params = {
    },
}

---@alias EventParam.Game-DayAndNightChange EventParam.ET_DAY_NIGHT_CHANGE
M.config["Game-DayAndNightChange"] = {
    desc = "Enter the day or enter the night according to the parameters",
    key = "ET_DAY_NIGHT_CHANGE",
    name = "Game-DayAndNightChange",
    params = {
    },
}

---@alias EventParam.Unknown-et_container_added EventParam.ET_CONTAINER_ADDED
M.config["Unknown-et_container_added"] = {
    _deprecated = true,
    desc = "ET_CONTAINER_ADDED",
    key = "ET_CONTAINER_ADDED",
    name = "Unknown-et_container_added",
    params = {
    },
}

---@alias EventParam.Unknown-et_container_actor_added EventParam.ET_CONTAINER_ACTOR_ADDED
M.config["Unknown-et_container_actor_added"] = {
    _deprecated = true,
    desc = "ET_CONTAINER_ACTOR_ADDED",
    key = "ET_CONTAINER_ACTOR_ADDED",
    name = "Unknown-et_container_actor_added",
    params = {
    },
}

---@alias EventParam.Unknown-et_container_actor_removed EventParam.ET_CONTAINER_ACTOR_REMOVED
M.config["Unknown-et_container_actor_removed"] = {
    _deprecated = true,
    desc = "ET_CONTAINER_ACTOR_REMOVED",
    key = "ET_CONTAINER_ACTOR_REMOVED",
    name = "Unknown-et_container_actor_removed",
    params = {
    },
}

---@alias EventParam.Unknown-et_actor_attr_updated EventParam.ET_ACTOR_ATTR_UPDATED
M.config["Unknown-et_actor_attr_updated"] = {
    _deprecated = true,
    desc = "ET_ACTOR_ATTR_UPDATED",
    key = "ET_ACTOR_ATTR_UPDATED",
    name = "Unknown-et_actor_attr_updated",
    params = {
    },
}

---@alias EventParam.zone-access EventParam.ET_AREA_ENTER
M.config["zone-access"] = {
    desc = "Triggered when any unit enters the zone",
    key = "ET_AREA_ENTER",
    name = "zone-access",
    object = "Area",
    params = {
        [1] = {
            call = true,
            desc = "region",
            name = "area",
            type = "Area",
        },
    },
}

---@alias EventParam.Zone - leave EventParam.ET_AREA_LEAVE
M.config["Zone - leave"] = {
    desc = "Triggered when any unit leaves the zone",
    key = "ET_AREA_LEAVE",
    name = "Zone - leave",
    object = "Area",
    params = {
        [1] = {
            call = true,
            desc = "region",
            name = "area",
            type = "Area",
        },
    },
}

---@alias EventParam.Game -http return EventParam.ET_HTTP_RESPONSE
M.config["Game -http return"] = {
    desc = "",
    key = "ET_HTTP_RESPONSE",
    name = "Game -http return",
    params = {
    },
}

---@alias EventParam.Games - Receive broadcast information EventParam.ET_BROADCAST_LUA_MSG
M.config["Games - Receive broadcast information"] = {
    desc = "",
    key = "ET_BROADCAST_LUA_MSG",
    name = "Games - Receive broadcast information",
    params = {
    },
}

---@alias EventParam.Player-JoinTheGame EventParam.ET_ROLE_JOIN_BATTLE
M.config["Player-JoinTheGame"] = {
    desc = "Triggered when the player joins the game",
    key = "ET_ROLE_JOIN_BATTLE",
    name = "Player-JoinTheGame",
    object = "Player",
    params = {
    },
}

---@alias EventParam.Player-LeaveTheGame EventParam.ET_ROLE_ACTIVE_EXIT_GAME_EVENT
M.config["Player-LeaveTheGame"] = {
    desc = "Triggered when the player leaves the game",
    key = "ET_ROLE_ACTIVE_EXIT_GAME_EVENT",
    name = "Player-LeaveTheGame",
    object = "Player",
    params = {
    },
}

---@alias EventParam.Player-DroppedCall EventParam.ET_ROLE_LOSE_CONNECT
M.config["Player-DroppedCall"] = {
    desc = "Triggered when the player drops out",
    key = "ET_ROLE_LOSE_CONNECT",
    name = "Player-DroppedCall",
    object = "Player",
    params = {
    },
}

---@alias EventParam.Unknown-et_ai_take_control EventParam.ET_AI_TAKE_CONTROL
M.config["Unknown-et_ai_take_control"] = {
    _deprecated = true,
    desc = "ET_AI_TAKE_CONTROL",
    key = "ET_AI_TAKE_CONTROL",
    name = "Unknown-et_ai_take_control",
    params = {
    },
}

---@alias EventParam.Unknown-et_download_map_archive_callback EventParam.ET_DOWNLOAD_MAP_ARCHIVE_CALLBACK
M.config["Unknown-et_download_map_archive_callback"] = {
    _deprecated = true,
    desc = "ET_DOWNLOAD_MAP_ARCHIVE_CALLBACK",
    key = "ET_DOWNLOAD_MAP_ARCHIVE_CALLBACK",
    name = "Unknown-et_download_map_archive_callback",
    params = {
    },
}

---@alias EventParam.Player-UsePlatformItems EventParam.ET_ROLE_USE_STORE_ITEM_END
M.config["Player-UsePlatformItems"] = {
    desc = "Triggered when the player uses a platform item",
    key = "ET_ROLE_USE_STORE_ITEM_END",
    name = "Player-UsePlatformItems",
    object = "Player",
    params = {
    },
}

---@alias EventParam.Unknown-et_consume_store_item EventParam.ET_CONSUME_STORE_ITEM
M.config["Unknown-et_consume_store_item"] = {
    _deprecated = true,
    desc = "ET_CONSUME_STORE_ITEM",
    key = "ET_CONSUME_STORE_ITEM",
    name = "Unknown-et_consume_store_item",
    params = {
    },
}

---@alias EventParam.Player-HoldsPlatformItems EventParam.ET_ROLE_HOLD_STORE_ITEM
M.config["Player-HoldsPlatformItems"] = {
    desc = "Triggers when the player enters the game with a specific platform item",
    key = "ET_ROLE_HOLD_STORE_ITEM",
    name = "Player-HoldsPlatformItems",
    object = "Player",
    params = {
    },
}

---@alias EventParam.Player-AttributesChange EventParam.ET_ROLE_RESOURCE_CHANGED
M.config["Player-AttributesChange"] = {
    desc = "Triggered when player stats change",
    key = "ET_ROLE_RESOURCE_CHANGED",
    name = "Player-AttributesChange",
    object = "Player",
    params = {
    },
}

---@alias EventParam.Player-SendTheSpecifiedMessage EventParam.ET_ROLE_INPUT_MSG
M.config["Player-SendTheSpecifiedMessage"] = {
    desc = "Triggered when the player sends the specified message",
    from_global = true,
    key = "ET_ROLE_INPUT_MSG",
    name = "Player-SendTheSpecifiedMessage",
    object = "Player",
    params = {
        [1] = {
            desc = "Message content",
            name = "msg",
            type = "string",
        },
    },
}

---@alias EventParam.Unknown-et_role_input_activation_code EventParam.ET_ROLE_INPUT_ACTIVATION_CODE
M.config["Unknown-et_role_input_activation_code"] = {
    _deprecated = true,
    desc = "ET_ROLE_INPUT_ACTIVATION_CODE",
    key = "ET_ROLE_INPUT_ACTIVATION_CODE",
    name = "Unknown-et_role_input_activation_code",
    params = {
    },
}

---@alias EventParam.Player-TechnologyEnhancement EventParam.ET_ROLE_TECH_UPGRADE
M.config["Player-TechnologyEnhancement"] = {
    desc = "This is triggered for every level of player technology",
    key = "ET_ROLE_TECH_UPGRADE",
    name = "Player-TechnologyEnhancement",
    object = "Player",
    params = {
    },
}

---@alias EventParam.Player-TechDown EventParam.ET_ROLE_TECH_DOWNGRADE
M.config["Player-TechDown"] = {
    desc = "Triggers each level the player is tech drops",
    key = "ET_ROLE_TECH_DOWNGRADE",
    name = "Player-TechDown",
    object = "Player",
    params = {
    },
}

---@alias EventParam.Player-TechnologyChanges EventParam.ET_ROLE_TECH_CHANGED
M.config["Player-TechnologyChanges"] = {
    desc = "Triggered when the player is technology changes, changing multiple levels at a time will only trigger once",
    key = "ET_ROLE_TECH_CHANGED",
    name = "Player-TechnologyChanges",
    object = "Player",
    params = {
    },
}

---@alias EventParam.Unit-ResearchAndDevelopmentTechnology EventParam.ET_UNIT_UPGRADE_TECH
M.config["Unit-ResearchAndDevelopmentTechnology"] = {
    desc = "Triggered when the unit develops technology",
    key = "ET_UNIT_UPGRADE_TECH",
    name = "Unit-ResearchAndDevelopmentTechnology",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unit-AccessToTechnology EventParam.ET_UNIT_ADD_TECH
M.config["Unit-AccessToTechnology"] = {
    desc = "Triggered when a unit acquires technology",
    key = "ET_UNIT_ADD_TECH",
    name = "Unit-AccessToTechnology",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unit-LostTechnology EventParam.ET_UNIT_REMOVE_TECH
M.config["Unit-LostTechnology"] = {
    desc = "Triggered when unit loses tech",
    key = "ET_UNIT_REMOVE_TECH",
    name = "Unit-LostTechnology",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Player-RelationshipChanges EventParam.ET_ROLE_CHANGE_RELATION
M.config["Player-RelationshipChanges"] = {
    desc = "Triggered when the relationship between players changes",
    key = "ET_ROLE_CHANGE_RELATION",
    name = "Player-RelationshipChanges",
    object = "Player",
    params = {
    },
}

---@alias EventParam.Player - Reconnect EventParam.ET_ROLE_RECONNECT
M.config["Player - Reconnect"] = {
    desc = "Triggered when the player reconnects",
    key = "ET_ROLE_RECONNECT",
    name = "Player - Reconnect",
    object = "Player",
    params = {
    },
}

---@alias EventParam.Unit-BuildingUpgradeStarts EventParam.ET_UNIT_BUILD_UPGRADE_START
M.config["Unit-BuildingUpgradeStarts"] = {
    desc = "",
    key = "ET_UNIT_BUILD_UPGRADE_START",
    name = "Unit-BuildingUpgradeStarts",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unit-BuildingUpgradeCancelled EventParam.ET_UNIT_BUILD_UPGRADE_CANCEL
M.config["Unit-BuildingUpgradeCancelled"] = {
    desc = "",
    key = "ET_UNIT_BUILD_UPGRADE_CANCEL",
    name = "Unit-BuildingUpgradeCancelled",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unit-BuildingUpgradeCompleted EventParam.ET_UNIT_BUILD_UPGRADE_FINISH
M.config["Unit-BuildingUpgradeCompleted"] = {
    desc = "",
    key = "ET_UNIT_BUILD_UPGRADE_FINISH",
    name = "Unit-BuildingUpgradeCompleted",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unit-ConstructionBegins EventParam.ET_UNIT_CONSTRUCT_START
M.config["Unit-ConstructionBegins"] = {
    desc = "",
    key = "ET_UNIT_CONSTRUCT_START",
    name = "Unit-ConstructionBegins",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unit-BuildCancelled EventParam.ET_UNIT_CONSTRUCT_CANCEL
M.config["Unit-BuildCancelled"] = {
    desc = "",
    key = "ET_UNIT_CONSTRUCT_CANCEL",
    name = "Unit-BuildCancelled",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unit-ConstructionCompleted EventParam.ET_UNIT_CONSTRUCT_FINISH
M.config["Unit-ConstructionCompleted"] = {
    desc = "",
    key = "ET_UNIT_CONSTRUCT_FINISH",
    name = "Unit-ConstructionCompleted",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Skill-BuiltComplete EventParam.ET_ABILITY_BUILD_FINISH
M.config["Skill-BuiltComplete"] = {
    desc = "By building skills triggered when the construction is complete, you can obtain the units that have been built",
    extraObjs = {
        [1] = {
            getter = function (self) return self:get_owner() end,
            luaType = "Unit",
        },
    },
    key = "ET_ABILITY_BUILD_FINISH",
    name = "Skill-BuiltComplete",
    object = "Ability",
    params = {
    },
}

---@alias EventParam.Unknown-et_active_ability_changed EventParam.ET_ACTIVE_ABILITY_CHANGED
M.config["Unknown-et_active_ability_changed"] = {
    _deprecated = true,
    desc = "ET_ACTIVE_ABILITY_CHANGED",
    key = "ET_ACTIVE_ABILITY_CHANGED",
    name = "Unknown-et_active_ability_changed",
    params = {
    },
}

---@alias EventParam.Skills-Learning EventParam.ET_ABILITY_PLUS_POINT
M.config["Skills-Learning"] = {
    desc = "Triggered after learning skills",
    extraObjs = {
        [1] = {
            getter = function (self) return self:get_owner() end,
            luaType = "Unit",
        },
    },
    key = "ET_ABILITY_PLUS_POINT",
    name = "Skills-Learning",
    object = "Ability",
    params = {
    },
}

---@alias EventParam.Skills-AvailableStatusChanges EventParam.ET_ABILITY_FORBIDDEN_CHANGED
M.config["Skills-AvailableStatusChanges"] = {
    desc = "",
    extraObjs = {
        [1] = {
            getter = function (self) return self:get_owner() end,
            luaType = "Unit",
        },
    },
    key = "ET_ABILITY_FORBIDDEN_CHANGED",
    name = "Skills-AvailableStatusChanges",
    object = "Ability",
    params = {
    },
}

---@alias EventParam.Skill-SilentStateChanges EventParam.ET_ABILITY_SILENT_CHANGED
M.config["Skill-SilentStateChanges"] = {
    desc = "",
    extraObjs = {
        [1] = {
            getter = function (self) return self:get_owner() end,
            luaType = "Unit",
        },
    },
    key = "ET_ABILITY_SILENT_CHANGED",
    name = "Skill-SilentStateChanges",
    object = "Ability",
    params = {
    },
}

---@alias EventParam.Skills-IconChanges EventParam.ET_ABILITY_ICON_CHANGED
M.config["Skills-IconChanges"] = {
    desc = "",
    key = "ET_ABILITY_ICON_CHANGED",
    name = "Skills-IconChanges",
    params = {
    },
}

---@alias EventParam.Unit-NameChange EventParam.ET_UNIT_NAME_CHANGE
M.config["Unit-NameChange"] = {
    desc = "",
    key = "ET_UNIT_NAME_CHANGE",
    name = "Unit-NameChange",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unit-MinimapIconChanges EventParam.ET_UNIT_CHANGE_MINI_MAP_ICON
M.config["Unit-MinimapIconChanges"] = {
    desc = "",
    key = "ET_UNIT_CHANGE_MINI_MAP_ICON",
    name = "Unit-MinimapIconChanges",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unit-HeadChange EventParam.ET_UNIT_ICON_CHANGE
M.config["Unit-HeadChange"] = {
    desc = "",
    key = "ET_UNIT_ICON_CHANGE",
    name = "Unit-HeadChange",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unknown-et_role_unit_change EventParam.ET_ROLE_UNIT_CHANGE
M.config["Unknown-et_role_unit_change"] = {
    _deprecated = true,
    desc = "ET_ROLE_UNIT_CHANGE",
    key = "ET_ROLE_UNIT_CHANGE",
    name = "Unknown-et_role_unit_change",
    params = {
    },
}

---@alias EventParam.Unknown-et_role_unit_tag_change EventParam.ET_ROLE_UNIT_TAG_CHANGE
M.config["Unknown-et_role_unit_tag_change"] = {
    _deprecated = true,
    desc = "ET_ROLE_UNIT_TAG_CHANGE",
    key = "ET_ROLE_UNIT_TAG_CHANGE",
    name = "Unknown-et_role_unit_tag_change",
    params = {
    },
}

---@alias EventParam.Unknown-et_unit_enter_mover_state EventParam.ET_UNIT_ENTER_MOVER_STATE
M.config["Unknown-et_unit_enter_mover_state"] = {
    _deprecated = true,
    desc = "ET_UNIT_ENTER_MOVER_STATE",
    key = "ET_UNIT_ENTER_MOVER_STATE",
    name = "Unknown-et_unit_enter_mover_state",
    params = {
    },
}

---@alias EventParam.Unit - Remove EventParam.ET_UNIT_REMOVE
M.config["Unit - Remove"] = {
    desc = "Triggered when the unit is removed",
    key = "ET_UNIT_REMOVE",
    name = "Unit - Remove",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unit-AfterRemoval EventParam.ET_UNIT_DELETE
M.config["Unit-AfterRemoval"] = {
    desc = "",
    key = "ET_UNIT_DELETE",
    name = "Unit-AfterRemoval",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unit-EndOfTransmission EventParam.ET_UNIT_END_TRANSLATE
M.config["Unit-EndOfTransmission"] = {
    desc = "",
    key = "ET_UNIT_END_TRANSLATE",
    name = "Unit-EndOfTransmission",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unit - Attribute change EventParam.ET_UNIT_ATTR_CHANGE
M.config["Unit - Attribute change"] = {
    desc = "Triggered after the specified property of the specified unit is changed",
    key = "ET_UNIT_ATTR_CHANGE",
    name = "Unit - Attribute change",
    object = "Unit",
    params = {
        [1] = {
            call = true,
            desc = "unit",
            name = "unit",
            type = "Unit",
        },
        [2] = {
            desc = "Attribute name",
            name = "attr",
            type = "string",
        },
    },
}

---@alias EventParam.Unit-AboutToDie EventParam.ET_BEFORE_UNIT_DIE
M.config["Unit-AboutToDie"] = {
    desc = "Triggered before unit death",
    dispatch = true,
    key = "ET_BEFORE_UNIT_DIE",
    master = "target_unit",
    name = "Unit-AboutToDie",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unit - Death EventParam.ET_UNIT_DIE
M.config["Unit - Death"] = {
    desc = "Triggered after unit death",
    key = "ET_UNIT_DIE",
    master = "unit",
    name = "Unit - Death",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unknown-et_unit_on_unbind_role EventParam.ET_UNIT_ON_UNBIND_ROLE
M.config["Unknown-et_unit_on_unbind_role"] = {
    _deprecated = true,
    desc = "ET_UNIT_ON_UNBIND_ROLE",
    key = "ET_UNIT_ON_UNBIND_ROLE",
    name = "Unknown-et_unit_on_unbind_role",
    params = {
    },
}

---@alias EventParam.Unknown-et_unit_on_bind_role EventParam.ET_UNIT_ON_BIND_ROLE
M.config["Unknown-et_unit_on_bind_role"] = {
    _deprecated = true,
    desc = "ET_UNIT_ON_BIND_ROLE",
    key = "ET_UNIT_ON_BIND_ROLE",
    name = "Unknown-et_unit_on_bind_role",
    params = {
    },
}

---@alias EventParam.Unit-BeforeTakingDamage EventParam.ET_UNIT_BE_HURT
M.config["Unit-BeforeTakingDamage"] = {
    desc = "Triggered before other calculations, you can modify the dodge",
    dispatch = true,
    key = "ET_UNIT_BE_HURT",
    master = "target_unit",
    name = "Unit-BeforeTakingDamage",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unit-BeforeDealingDamage EventParam.ET_UNIT_HURT_OTHER
M.config["Unit-BeforeDealingDamage"] = {
    desc = "Triggered before other calculations, you can modify the dodge",
    dispatch = true,
    key = "ET_UNIT_HURT_OTHER",
    name = "Unit-BeforeDealingDamage",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unit-WhenTakingDamage EventParam.ET_UNIT_BE_HURT_BEFORE_APPLY
M.config["Unit-WhenTakingDamage"] = {
    desc = "The damage value can be modified",
    dispatch = true,
    key = "ET_UNIT_BE_HURT_BEFORE_APPLY",
    master = "target_unit",
    name = "Unit-WhenTakingDamage",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unit-WhenDealingDamage EventParam.ET_UNIT_HURT_OTHER_BEFORE_APPLY
M.config["Unit-WhenDealingDamage"] = {
    desc = "The damage value can be modified",
    dispatch = true,
    key = "ET_UNIT_HURT_OTHER_BEFORE_APPLY",
    name = "Unit-WhenDealingDamage",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unit-AfterDealingDamage EventParam.ET_UNIT_HURT_OTHER_FINISH
M.config["Unit-AfterDealingDamage"] = {
    desc = "Damage is settled, only damage value can be obtained",
    key = "ET_UNIT_HURT_OTHER_FINISH",
    name = "Unit-AfterDealingDamage",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unit-AfterTakingDamage EventParam.ET_UNIT_BE_HURT_COMPLETE
M.config["Unit-AfterTakingDamage"] = {
    desc = "Damage is settled, only damage value can be obtained",
    key = "ET_UNIT_BE_HURT_COMPLETE",
    master = "target_unit",
    name = "Unit-AfterTakingDamage",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unit-BeforeBeingTreated EventParam.ET_UNIT_GET_CURE_BEFORE_APPLY
M.config["Unit-BeforeBeingTreated"] = {
    desc = "Can be triggered before other calculations, can modify the validity",
    dispatch = true,
    key = "ET_UNIT_GET_CURE_BEFORE_APPLY",
    name = "Unit-BeforeBeingTreated",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unit-AfterBeingTreated EventParam.ET_UNIT_GET_CURE_FINISH
M.config["Unit-AfterBeingTreated"] = {
    desc = "Treatment has been billed and only treatment values can be obtained",
    key = "ET_UNIT_GET_CURE_FINISH",
    name = "Unit-AfterBeingTreated",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unit-WhenBeingTreated EventParam.ET_UNIT_GET_CURE
M.config["Unit-WhenBeingTreated"] = {
    desc = "Treatment values can be modified",
    dispatch = true,
    key = "ET_UNIT_GET_CURE",
    name = "Unit-WhenBeingTreated",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Player-PropertiesIconChanges EventParam.ET_RES_ICON_CHANGED
M.config["Player-PropertiesIconChanges"] = {
    desc = "",
    key = "ET_RES_ICON_CHANGED",
    name = "Player-PropertiesIconChanges",
    params = {
    },
}

---@alias EventParam.Unit-CastSkills EventParam.ET_UNIT_RELEASE_ABILITY
M.config["Unit-CastSkills"] = {
    desc = "Triggered when a unit casts a skill",
    key = "ET_UNIT_RELEASE_ABILITY",
    name = "Unit-CastSkills",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unknown-et_unit_release_ability_start EventParam.ET_UNIT_RELEASE_ABILITY_START
M.config["Unknown-et_unit_release_ability_start"] = {
    _deprecated = true,
    desc = "ET_UNIT_RELEASE_ABILITY_START",
    key = "ET_UNIT_RELEASE_ABILITY_START",
    name = "Unknown-et_unit_release_ability_start",
    params = {
    },
}

---@alias EventParam.Unknown-et_unit_release_ability_end EventParam.ET_UNIT_RELEASE_ABILITY_END
M.config["Unknown-et_unit_release_ability_end"] = {
    _deprecated = true,
    desc = "ET_UNIT_RELEASE_ABILITY_END",
    key = "ET_UNIT_RELEASE_ABILITY_END",
    name = "Unknown-et_unit_release_ability_end",
    params = {
    },
}

---@alias EventParam.Unknown-et_unit_release_magic_book EventParam.ET_UNIT_RELEASE_MAGIC_BOOK
M.config["Unknown-et_unit_release_magic_book"] = {
    _deprecated = true,
    desc = "ET_UNIT_RELEASE_MAGIC_BOOK",
    key = "ET_UNIT_RELEASE_MAGIC_BOOK",
    name = "Unknown-et_unit_release_magic_book",
    params = {
    },
}

---@alias EventParam.Unknown-et_unit_level_change EventParam.ET_UNIT_LEVEL_CHANGE
M.config["Unknown-et_unit_level_change"] = {
    _deprecated = true,
    desc = "ET_UNIT_LEVEL_CHANGE",
    key = "ET_UNIT_LEVEL_CHANGE",
    name = "Unknown-et_unit_level_change",
    params = {
    },
}

---@alias EventParam.Unknown-et_unit_exp_change EventParam.ET_UNIT_EXP_CHANGE
M.config["Unknown-et_unit_exp_change"] = {
    _deprecated = true,
    desc = "ET_UNIT_EXP_CHANGE",
    key = "ET_UNIT_EXP_CHANGE",
    name = "Unknown-et_unit_exp_change",
    params = {
    },
}

---@alias EventParam.Unit-BeforeGainingExperience EventParam.ET_UNIT_PRE_ADD_EXP
M.config["Unit-BeforeGainingExperience"] = {
    desc = "Units gain experience before triggering",
    dispatch = true,
    key = "ET_UNIT_PRE_ADD_EXP",
    name = "Unit-BeforeGainingExperience",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unit - After gaining experience EventParam.ET_UNIT_ON_ADD_EXP
M.config["Unit - After gaining experience"] = {
    desc = "Unit triggers after gaining experience",
    key = "ET_UNIT_ON_ADD_EXP",
    name = "Unit - After gaining experience",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unit-ReceiveCommand EventParam.ET_UNIT_ON_COMMAND
M.config["Unit-ReceiveCommand"] = {
    desc = "When a command is received, if the command has a target, it will be stored in different fields according to the target type",
    key = "ET_UNIT_ON_COMMAND",
    name = "Unit-ReceiveCommand",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unit-Kill EventParam.ET_KILL_UNIT
M.config["Unit-Kill"] = {
    desc = "Triggered when a unit kills another unit",
    key = "ET_KILL_UNIT",
    name = "Unit-Kill",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unit - Create EventParam.ET_UNIT_BORN
M.config["Unit - Create"] = {
    desc = "Triggered after a unit is created",
    key = "ET_UNIT_BORN",
    name = "Unit - Create",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unit-EnterTheBattle EventParam.ET_UNIT_ENTER_BATTLE
M.config["Unit-EnterTheBattle"] = {
    desc = "Triggered when a unit enters battle",
    key = "ET_UNIT_ENTER_BATTLE",
    name = "Unit-EnterTheBattle",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unit-OutOfCombat EventParam.ET_UNIT_EXIT_BATTLE
M.config["Unit-OutOfCombat"] = {
    desc = "Triggered when unit leaves battle",
    key = "ET_UNIT_EXIT_BATTLE",
    name = "Unit-OutOfCombat",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unknown-et_unit_create_slave EventParam.ET_UNIT_CREATE_SLAVE
M.config["Unknown-et_unit_create_slave"] = {
    _deprecated = true,
    desc = "ET_UNIT_CREATE_SLAVE",
    key = "ET_UNIT_CREATE_SLAVE",
    name = "Unknown-et_unit_create_slave",
    params = {
    },
}

---@alias EventParam.Unit - About to pick up items EventParam.ET_UNIT_TRY_PICK_ITEM_NEW
M.config["Unit - About to pick up items"] = {
    desc = "",
    key = "ET_UNIT_TRY_PICK_ITEM_NEW",
    name = "Unit - About to pick up items",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unit-TogglesDefaultBehavior EventParam.ET_UNIT_LOAD_DEFAULT_AI
M.config["Unit-TogglesDefaultBehavior"] = {
    desc = "",
    key = "ET_UNIT_LOAD_DEFAULT_AI",
    name = "Unit-TogglesDefaultBehavior",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unit - Approaching enemy EventParam.ET_UNIT_TRY_ACQUIRE_TARGET
M.config["Unit - Approaching enemy"] = {
    desc = "",
    key = "ET_UNIT_TRY_ACQUIRE_TARGET",
    name = "Unit - Approaching enemy",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unit - Spotted target EventParam.ET_UNIT_ACQUIRED_TARGET
M.config["Unit - Spotted target"] = {
    desc = "",
    key = "ET_UNIT_ACQUIRED_TARGET",
    name = "Unit - Spotted target",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Local-BoneCollision EventParam.ET_DETECT_BONE_COLLISON
M.config["Local-BoneCollision"] = {
    desc = "Triggered when bones collide",
    key = "ET_DETECT_BONE_COLLISON",
    name = "Local-BoneCollision",
    params = {
    },
}

---@alias EventParam.Physical-BoneCollision EventParam.ET_DETECT_BONE_COLLISON
M.config["Physical-BoneCollision"] = {
    desc = "Triggered when bones collide",
    key = "ET_DETECT_BONE_COLLISON",
    name = "Physical-BoneCollision",
    params = {
    },
}

---@alias EventParam.Unknown-et_item_attached_attr_changed EventParam.ET_ITEM_ATTACHED_ATTR_CHANGED
M.config["Unknown-et_item_attached_attr_changed"] = {
    _deprecated = true,
    desc = "ET_ITEM_ATTACHED_ATTR_CHANGED",
    key = "ET_ITEM_ATTACHED_ATTR_CHANGED",
    name = "Unknown-et_item_attached_attr_changed",
    params = {
    },
}

---@alias EventParam.Unit-PurchaseItems EventParam.ET_UNIT_SHOP_BUY_ITEM
M.config["Unit-PurchaseItems"] = {
    desc = "Triggered when an item is purchased",
    key = "ET_UNIT_SHOP_BUY_ITEM",
    name = "Unit-PurchaseItems",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Units-PurchaseUnits EventParam.ET_UNIT_SHOP_BUY_UNIT
M.config["Units-PurchaseUnits"] = {
    desc = "Triggered when a unit is purchased",
    key = "ET_UNIT_SHOP_BUY_UNIT",
    name = "Units-PurchaseUnits",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unit-ItemsForSale EventParam.ET_UNIT_ITEM_SELL
M.config["Unit-ItemsForSale"] = {
    desc = "Triggered when selling items",
    key = "ET_UNIT_ITEM_SELL",
    name = "Unit-ItemsForSale",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Store-MerchandiseChanges EventParam.ET_SHOP_ITEM_CHANGED
M.config["Store-MerchandiseChanges"] = {
    desc = "",
    key = "ET_SHOP_ITEM_CHANGED",
    name = "Store-MerchandiseChanges",
    params = {
    },
}

---@alias EventParam.Store-StockChanges EventParam.ET_SHOP_STOCK_CHANGED
M.config["Store-StockChanges"] = {
    desc = "",
    key = "ET_SHOP_STOCK_CHANGED",
    name = "Store-StockChanges",
    params = {
    },
}

---@alias EventParam.Store-PriceChanges EventParam.ET_SHOP_RES_COST_CHANGED
M.config["Store-PriceChanges"] = {
    desc = "",
    key = "ET_SHOP_RES_COST_CHANGED",
    name = "Store-PriceChanges",
    params = {
    },
}

---@alias EventParam.Unit-ItemComposition EventParam.ET_UNIT_ITEM_COMPOSE
M.config["Unit-ItemComposition"] = {
    desc = "Triggered when item is synthesized",
    key = "ET_UNIT_ITEM_COMPOSE",
    name = "Unit-ItemComposition",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unit-PurchaseItemCompositing EventParam.ET_UNIT_SHOP_BUY_WITH_COMPOSE
M.config["Unit-PurchaseItemCompositing"] = {
    desc = "Triggered when the purchased item is synthesized",
    key = "ET_UNIT_SHOP_BUY_WITH_COMPOSE",
    name = "Unit-PurchaseItemCompositing",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unit-Resurrection EventParam.ET_REVIVE_UNIT
M.config["Unit-Resurrection"] = {
    desc = "Triggered after unit revives",
    key = "ET_REVIVE_UNIT",
    name = "Unit-Resurrection",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unit - Upgrade EventParam.ET_UPGRADE_UNIT
M.config["Unit - Upgrade"] = {
    desc = "Triggered after the unit is upgraded",
    key = "ET_UPGRADE_UNIT",
    name = "Unit - Upgrade",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unknown-et_reach_move_target_unit EventParam.ET_REACH_MOVE_TARGET_UNIT
M.config["Unknown-et_reach_move_target_unit"] = {
    _deprecated = true,
    desc = "ET_REACH_MOVE_TARGET_UNIT",
    key = "ET_REACH_MOVE_TARGET_UNIT",
    name = "Unknown-et_reach_move_target_unit",
    params = {
    },
}

---@alias EventParam.Unknown-et_collide_obstacle_unit EventParam.ET_COLLIDE_OBSTACLE_UNIT
M.config["Unknown-et_collide_obstacle_unit"] = {
    _deprecated = true,
    desc = "ET_COLLIDE_OBSTACLE_UNIT",
    key = "ET_COLLIDE_OBSTACLE_UNIT",
    name = "Unknown-et_collide_obstacle_unit",
    params = {
    },
}

---@alias EventParam.Unit-IntoTheGrass EventParam.ET_UNIT_ENTER_GRASS
M.config["Unit-IntoTheGrass"] = {
    desc = "Triggered when a unit enters the grass",
    key = "ET_UNIT_ENTER_GRASS",
    name = "Unit-IntoTheGrass",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unit-GetOutOfTheGrass EventParam.ET_UNIT_LEAVE_GRASS
M.config["Unit-GetOutOfTheGrass"] = {
    desc = "Triggered when unit leaves grass",
    key = "ET_UNIT_LEAVE_GRASS",
    name = "Unit-GetOutOfTheGrass",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unknown-et_map_visibility_change EventParam.ET_MAP_VISIBILITY_CHANGE
M.config["Unknown-et_map_visibility_change"] = {
    _deprecated = true,
    desc = "ET_MAP_VISIBILITY_CHANGE",
    key = "ET_MAP_VISIBILITY_CHANGE",
    name = "Unknown-et_map_visibility_change",
    params = {
    },
}

---@alias EventParam.Unit-ChangeOwnership EventParam.ET_UNIT_ROLE_CHANGED
M.config["Unit-ChangeOwnership"] = {
    desc = "Unit owner triggers when the player changes",
    key = "ET_UNIT_ROLE_CHANGED",
    name = "Unit-ChangeOwnership",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unknown-et_unit_kv_change EventParam.ET_UNIT_KV_CHANGE
M.config["Unknown-et_unit_kv_change"] = {
    _deprecated = true,
    desc = "ET_UNIT_KV_CHANGE",
    key = "ET_UNIT_KV_CHANGE",
    name = "Unknown-et_unit_kv_change",
    params = {
    },
}

---@alias EventParam.Unknown-et_unit_mul_kv_change EventParam.ET_UNIT_MUL_KV_CHANGE
M.config["Unknown-et_unit_mul_kv_change"] = {
    _deprecated = true,
    desc = "ET_UNIT_MUL_KV_CHANGE",
    key = "ET_UNIT_MUL_KV_CHANGE",
    name = "Unknown-et_unit_mul_kv_change",
    params = {
    },
}

---@alias EventParam.UnitType-ThePrerequisiteIsTrue EventParam.ET_UNIT_PRECONDITION_SUCCEED
M.config["UnitType-ThePrerequisiteIsTrue"] = {
    desc = "Triggered when the precondition changes from invalid to valid",
    key = "ET_UNIT_PRECONDITION_SUCCEED",
    name = "UnitType-ThePrerequisiteIsTrue",
    params = {
    },
}

---@alias EventParam.UnitType-ThePreconditionIsNotValid EventParam.ET_UNIT_PRECONDITION_FAILED
M.config["UnitType-ThePreconditionIsNotValid"] = {
    desc = "Trigger when the precondition changes from true to not true",
    key = "ET_UNIT_PRECONDITION_FAILED",
    name = "UnitType-ThePreconditionIsNotValid",
    params = {
    },
}

---@alias EventParam.ItemType-PreconditionsHold EventParam.ET_ITEM_PRECONDITION_SUCCEED
M.config["ItemType-PreconditionsHold"] = {
    desc = "Triggered when the precondition changes from invalid to valid",
    key = "ET_ITEM_PRECONDITION_SUCCEED",
    name = "ItemType-PreconditionsHold",
    params = {
    },
}

---@alias EventParam.ItemType-PreconditionsAreNotValid EventParam.ET_ITEM_PRECONDITION_FAILED
M.config["ItemType-PreconditionsAreNotValid"] = {
    desc = "Trigger when the precondition changes from true to not true",
    key = "ET_ITEM_PRECONDITION_FAILED",
    name = "ItemType-PreconditionsAreNotValid",
    params = {
    },
}

---@alias EventParam.SkillType-ThePrerequisiteIsTrue EventParam.ET_ABILITY_PRECONDITION_SUCCEED
M.config["SkillType-ThePrerequisiteIsTrue"] = {
    desc = "Triggered when the precondition changes from invalid to valid",
    extraObjs = {
        [1] = {
            getter = function (self) return self:get_owner() end,
            luaType = "Unit",
        },
    },
    key = "ET_ABILITY_PRECONDITION_SUCCEED",
    name = "SkillType-ThePrerequisiteIsTrue",
    params = {
    },
}

---@alias EventParam.SkillType-PreconditionsAreNotValid EventParam.ET_ABILITY_PRECONDITION_FAILED
M.config["SkillType-PreconditionsAreNotValid"] = {
    desc = "Trigger when the precondition changes from true to not true",
    extraObjs = {
        [1] = {
            getter = function (self) return self:get_owner() end,
            luaType = "Unit",
        },
    },
    key = "ET_ABILITY_PRECONDITION_FAILED",
    name = "SkillType-PreconditionsAreNotValid",
    params = {
    },
}

---@alias EventParam.TechnologyType-PreconditionsHold EventParam.ET_TECH_PRECONDITION_SUCCEED
M.config["TechnologyType-PreconditionsHold"] = {
    desc = "Triggered when the precondition changes from invalid to valid",
    extraObjs = {
        [1] = {
            getter = function (self) return self:get_owner() end,
            luaType = "Unit",
        },
    },
    key = "ET_TECH_PRECONDITION_SUCCEED",
    name = "TechnologyType-PreconditionsHold",
    params = {
    },
}

---@alias EventParam.TechnologyType-PreconditionNotValid EventParam.ET_TECH_PRECONDITION_FAILED
M.config["TechnologyType-PreconditionNotValid"] = {
    desc = "Trigger when the precondition changes from true to not true",
    extraObjs = {
        [1] = {
            getter = function (self) return self:get_owner() end,
            luaType = "Unit",
        },
    },
    key = "ET_TECH_PRECONDITION_FAILED",
    name = "TechnologyType-PreconditionNotValid",
    params = {
    },
}

---@alias EventParam.Skills - Upgrades EventParam.ET_ABILITY_UPGRADE
M.config["Skills - Upgrades"] = {
    desc = "Triggered after skill level",
    extraObjs = {
        [1] = {
            getter = function (self) return self:get_owner() end,
            luaType = "Unit",
        },
    },
    key = "ET_ABILITY_UPGRADE",
    name = "Skills - Upgrades",
    object = "Ability",
    params = {
    },
}

---@alias EventParam.Casting. - About to begin EventParam.ET_ABILITY_CS_START
M.config["Casting. - About to begin"] = {
    desc = "Triggered when a spell is about to be cast",
    dispatch = true,
    extraObjs = {
        [1] = {
            getter = function (self) return self:get_owner() end,
            luaType = "Unit",
        },
    },
    key = "ET_ABILITY_CS_START",
    name = "Casting. - About to begin",
    object = "Ability",
    params = {
    },
}

---@alias EventParam.Unknown-et_ability_cs_end EventParam.ET_ABILITY_CS_END
M.config["Unknown-et_ability_cs_end"] = {
    _deprecated = true,
    desc = "ET_ABILITY_CS_END",
    key = "ET_ABILITY_CS_END",
    name = "Unknown-et_ability_cs_end",
    params = {
    },
}

---@alias EventParam.Cast the spell. - Here we go EventParam.ET_ABILITY_PS_START
M.config["Cast the spell. - Here we go"] = {
    desc = "When the spell begins, it triggers before the front shake begins",
    extraObjs = {
        [1] = {
            getter = function (self) return self:get_owner() end,
            luaType = "Unit",
        },
    },
    key = "ET_ABILITY_PS_START",
    name = "Cast the spell. - Here we go",
    object = "Ability",
    params = {
    },
}

---@alias EventParam.Cast - Guide EventParam.ET_ABILITY_PS_END
M.config["Cast - Guide"] = {
    desc = "After the front shake is complete, continue to guide the front trigger",
    extraObjs = {
        [1] = {
            getter = function (self) return self:get_owner() end,
            luaType = "Unit",
        },
    },
    key = "ET_ABILITY_PS_END",
    name = "Cast - Guide",
    object = "Ability",
    params = {
    },
}

---@alias EventParam.Unknown-et_item_ability_ps_end EventParam.ET_ITEM_ABILITY_PS_END
M.config["Unknown-et_item_ability_ps_end"] = {
    _deprecated = true,
    desc = "ET_ITEM_ABILITY_PS_END",
    key = "ET_ITEM_ABILITY_PS_END",
    name = "Unknown-et_item_ability_ps_end",
    params = {
    },
}

---@alias EventParam.Cast spells. - Strike EventParam.ET_ABILITY_SP_END
M.config["Cast spells. - Strike"] = {
    desc = "After continuing to boot, the backshake is triggered before starting",
    extraObjs = {
        [1] = {
            getter = function (self) return self:get_owner() end,
            luaType = "Unit",
        },
    },
    key = "ET_ABILITY_SP_END",
    name = "Cast spells. - Strike",
    object = "Ability",
    params = {
    },
}

---@alias EventParam.Cast a spell. - Finished EventParam.ET_ABILITY_CST_END
M.config["Cast a spell. - Finished"] = {
    desc = "Trigger when the back shake ends. It only triggers when the spell is properly completed.",
    extraObjs = {
        [1] = {
            getter = function (self) return self:get_owner() end,
            luaType = "Unit",
        },
    },
    key = "ET_ABILITY_CST_END",
    name = "Cast a spell. - Finished",
    object = "Ability",
    params = {
    },
}

---@alias EventParam.Cast spells. - Over EventParam.ET_ABILITY_BS_END
M.config["Cast spells. - Over"] = {
    desc = "The entire spell is triggered after the performance is over",
    extraObjs = {
        [1] = {
            getter = function (self) return self:get_owner() end,
            luaType = "Unit",
        },
    },
    key = "ET_ABILITY_BS_END",
    name = "Cast spells. - Over",
    object = "Ability",
    params = {
    },
}

---@alias EventParam.Unknown-et_ability_cs_interrupt EventParam.ET_ABILITY_CS_INTERRUPT
M.config["Unknown-et_ability_cs_interrupt"] = {
    _deprecated = true,
    desc = "ET_ABILITY_CS_INTERRUPT",
    key = "ET_ABILITY_CS_INTERRUPT",
    name = "Unknown-et_ability_cs_interrupt",
    params = {
    },
}

---@alias EventParam.CastASpell.-InterruptTheStart EventParam.ET_ABILITY_PS_INTERRUPT
M.config["CastASpell.-InterruptTheStart"] = {
    desc = "Interrupted between  istart' and 'lead.",
    extraObjs = {
        [1] = {
            getter = function (self) return self:get_owner() end,
            luaType = "Unit",
        },
    },
    key = "ET_ABILITY_PS_INTERRUPT",
    name = "CastASpell.-InterruptTheStart",
    object = "Ability",
    params = {
    },
}

---@alias EventParam.CastSpells.-InterruptTheLead EventParam.ET_ABILITY_SP_INTERRUPT
M.config["CastSpells.-InterruptTheLead"] = {
    desc = "Interrupted between 'lead' and 'hand.",
    extraObjs = {
        [1] = {
            getter = function (self) return self:get_owner() end,
            luaType = "Unit",
        },
    },
    key = "ET_ABILITY_SP_INTERRUPT",
    name = "CastSpells.-InterruptTheLead",
    object = "Ability",
    params = {
    },
}

---@alias EventParam.CastASpell.-BreakTheShot EventParam.ET_ABILITY_CST_INTERRUPT
M.config["CastASpell.-BreakTheShot"] = {
    desc = "Interrupted between  ishot' and 'done.",
    extraObjs = {
        [1] = {
            getter = function (self) return self:get_owner() end,
            luaType = "Unit",
        },
    },
    key = "ET_ABILITY_CST_INTERRUPT",
    name = "CastASpell.-BreakTheShot",
    object = "Ability",
    params = {
    },
}

---@alias EventParam.Unknown-et_ability_bs_interrupt EventParam.ET_ABILITY_BS_INTERRUPT
M.config["Unknown-et_ability_bs_interrupt"] = {
    _deprecated = true,
    desc = "ET_ABILITY_BS_INTERRUPT",
    key = "ET_ABILITY_BS_INTERRUPT",
    name = "Unknown-et_ability_bs_interrupt",
    params = {
    },
}

---@alias EventParam.Cast spells. - Stop EventParam.ET_ABILITY_END
M.config["Cast spells. - Stop"] = {
    desc = "Triggered after a spell has stopped, is the last event in the casting process.",
    extraObjs = {
        [1] = {
            getter = function (self) return self:get_owner() end,
            luaType = "Unit",
        },
    },
    key = "ET_ABILITY_END",
    name = "Cast spells. - Stop",
    object = "Ability",
    params = {
    },
}

---@alias EventParam.Skills - Acquisition EventParam.ET_ABILITY_OBTAIN
M.config["Skills - Acquisition"] = {
    desc = "Triggered after gaining a skill",
    extraObjs = {
        [1] = {
            getter = function (self) return self:get_owner() end,
            luaType = "Unit",
        },
    },
    key = "ET_ABILITY_OBTAIN",
    name = "Skills - Acquisition",
    object = "Ability",
    params = {
    },
}

---@alias EventParam.Skill loss EventParam.ET_ABILITY_LOSE
M.config["Skill loss"] = {
    desc = "Triggered after loss of skill",
    extraObjs = {
        [1] = {
            getter = function (self) return self:get_owner() end,
            luaType = "Unit",
        },
    },
    key = "ET_ABILITY_LOSE",
    name = "Skill loss",
    object = "Ability",
    params = {
    },
}

---@alias EventParam.Skill-exchange EventParam.ET_ABILITY_SWITCH
M.config["Skill-exchange"] = {
    desc = "Triggered after skill exchange",
    extraObjs = {
        [1] = {
            getter = function (self) return self:get_owner() end,
            luaType = "Unit",
        },
    },
    key = "ET_ABILITY_SWITCH",
    name = "Skill-exchange",
    object = "Ability",
    params = {
    },
}

---@alias EventParam.Skills-Disabled EventParam.ET_ABILITY_DISABLE
M.config["Skills-Disabled"] = {
    desc = "",
    extraObjs = {
        [1] = {
            getter = function (self) return self:get_owner() end,
            luaType = "Unit",
        },
    },
    key = "ET_ABILITY_DISABLE",
    name = "Skills-Disabled",
    object = "Ability",
    params = {
    },
}

---@alias EventParam.Skills-Enabled EventParam.ET_ABILITY_ENABLE
M.config["Skills-Enabled"] = {
    desc = "",
    extraObjs = {
        [1] = {
            getter = function (self) return self:get_owner() end,
            luaType = "Unit",
        },
    },
    key = "ET_ABILITY_ENABLE",
    name = "Skills-Enabled",
    object = "Ability",
    params = {
    },
}

---@alias EventParam.Skill - Cooldown ends EventParam.ET_ABILITY_CD_END
M.config["Skill - Cooldown ends"] = {
    desc = "Trigger when cooldown ends",
    extraObjs = {
        [1] = {
            getter = function (self) return self:get_owner() end,
            luaType = "Unit",
        },
    },
    key = "ET_ABILITY_CD_END",
    name = "Skill - Cooldown ends",
    object = "Ability",
    params = {
    },
}

---@alias EventParam.Skills-CustomAnimationAxis EventParam.ET_ABILITY_SEND_CUE_EVENT
M.config["Skills-CustomAnimationAxis"] = {
    desc = "",
    extraObjs = {
        [1] = {
            getter = function (self) return self:get_owner() end,
            luaType = "Unit",
        },
    },
    key = "ET_ABILITY_SEND_CUE_EVENT",
    name = "Skills-CustomAnimationAxis",
    object = "Ability",
    params = {
        [1] = {
            desc = "CUE event name",
            name = "string",
            type = "string",
        },
    },
}

---@alias EventParam.Effect - gain EventParam.ET_OBTAIN_MODIFIER
M.config["Effect - gain"] = {
    desc = "Triggered after obtaining a magic effect",
    extraObjs = {
        [1] = {
            getter = function (self) return self:get_owner() end,
            luaType = "Unit",
        },
    },
    key = "ET_OBTAIN_MODIFIER",
    name = "Effect - gain",
    object = "Buff",
    params = {
    },
}

---@alias EventParam.effect-loss EventParam.ET_LOSS_MODIFIER
M.config["effect-loss"] = {
    desc = "Triggered after losing magic effects",
    extraObjs = {
        [1] = {
            getter = function (self) return self:get_owner() end,
            luaType = "Unit",
        },
    },
    key = "ET_LOSS_MODIFIER",
    name = "effect-loss",
    object = "Buff",
    params = {
    },
}

---@alias EventParam.Effect - Heartbeat EventParam.ET_MODIFIER_CYCLE_TRIGGER
M.config["Effect - Heartbeat"] = {
    desc = "Periodic triggering of magical effects",
    extraObjs = {
        [1] = {
            getter = function (self) return self:get_owner() end,
            luaType = "Unit",
        },
    },
    key = "ET_MODIFIER_CYCLE_TRIGGER",
    name = "Effect - Heartbeat",
    object = "Buff",
    params = {
    },
}

---@alias EventParam.Effects-Overlay EventParam.ET_MODIFIER_ADDTION
M.config["Effects-Overlay"] = {
    desc = "Triggered when magic effects are overlaid",
    extraObjs = {
        [1] = {
            getter = function (self) return self:get_owner() end,
            luaType = "Unit",
        },
    },
    key = "ET_MODIFIER_ADDTION",
    name = "Effects-Overlay",
    object = "Buff",
    params = {
    },
}

---@alias EventParam.Effect - Number of layers change EventParam.ET_MODIFIER_LAYER_CHANGE
M.config["Effect - Number of layers change"] = {
    desc = "Trigger when the number of magic effect layers changes",
    extraObjs = {
        [1] = {
            getter = function (self) return self:get_owner() end,
            luaType = "Unit",
        },
    },
    key = "ET_MODIFIER_LAYER_CHANGE",
    name = "Effect - Number of layers change",
    object = "Buff",
    params = {
    },
}

---@alias EventParam.Effect - Coming soon EventParam.ET_MODIFIER_GET_BEFORE_CREATE
M.config["Effect - Coming soon"] = {
    desc = "Trigger before magic effect is obtained",
    dispatch = true,
    extraObjs = {
        [1] = {
            getter = function (self) return self:get_owner() end,
            luaType = "Unit",
        },
    },
    key = "ET_MODIFIER_GET_BEFORE_CREATE",
    name = "Effect - Coming soon",
    object = "Buff",
    params = {
    },
}

---@alias EventParam.Effects-Overlay EventParam.ET_MODIFIER_BE_COVERED
M.config["Effects-Overlay"] = {
    desc = "Triggered when the magic effect overlays",
    dispatch = true,
    extraObjs = {
        [1] = {
            getter = function (self) return self:get_owner() end,
            luaType = "Unit",
        },
    },
    key = "ET_MODIFIER_BE_COVERED",
    name = "Effects-Overlay",
    object = "Buff",
    params = {
    },
}

---@alias EventParam.Destructible-Create EventParam.ET_DEST_CREATE_NEW
M.config["Destructible-Create"] = {
    desc = "Triggered after destructible is created",
    key = "ET_DEST_CREATE_NEW",
    name = "Destructible-Create",
    object = "Destructible",
    params = {
    },
}

---@alias EventParam.Destructible-Death EventParam.ET_DEST_DIE_NEW
M.config["Destructible-Death"] = {
    desc = "Triggered when destructible dies",
    key = "ET_DEST_DIE_NEW",
    name = "Destructible-Death",
    object = "Destructible",
    params = {
    },
}

---@alias EventParam.Destructible.-Resurrection EventParam.ET_DEST_REVIVE_NEW
M.config["Destructible.-Resurrection"] = {
    desc = "Triggered when destructible comes back to life",
    key = "ET_DEST_REVIVE_NEW",
    name = "Destructible.-Resurrection",
    object = "Destructible",
    params = {
    },
}

---@alias EventParam.Destructible-ResourceChange EventParam.ET_DEST_RES_CNT_CHG_NEW
M.config["Destructible-ResourceChange"] = {
    desc = "Destructible storage triggers after resource changes",
    key = "ET_DEST_RES_CNT_CHG_NEW",
    name = "Destructible-ResourceChange",
    object = "Destructible",
    params = {
    },
}

---@alias EventParam.Destructible-Collection EventParam.ET_DEST_COLLECTED_NEW
M.config["Destructible-Collection"] = {
    desc = "Triggered after the destructible is collected",
    key = "ET_DEST_COLLECTED_NEW",
    name = "Destructible-Collection",
    object = "Destructible",
    params = {
    },
}

---@alias EventParam.Destructible-Damaged EventParam.ET_GET_HURT_NEW
M.config["Destructible-Damaged"] = {
    desc = "Destructible triggers when it takes damage",
    key = "ET_GET_HURT_NEW",
    name = "Destructible-Damaged",
    object = "Destructible",
    params = {
    },
}

---@alias EventParam.Check-Destructible EventParam.ET_SELECT_DEST
M.config["Check-Destructible"] = {
    desc = "The destructible is triggered when the player selects it",
    key = "ET_SELECT_DEST",
    name = "Check-Destructible",
    object = "Player",
    params = {
    },
}

---@alias EventParam.Local - Select - Destructible EventParam.ET_ASYNC_SELECT_DEST
M.config["Local - Select - Destructible"] = {
    desc = "Local players select destructible when triggered",
    key = "ET_ASYNC_SELECT_DEST",
    name = "Local - Select - Destructible",
    object = "Player",
    params = {
    },
}

---@alias EventParam.Destructible-Remove EventParam.ET_DEST_DELETE
M.config["Destructible-Remove"] = {
    desc = "Triggered after destructible is removed",
    key = "ET_DEST_DELETE",
    name = "Destructible-Remove",
    object = "Destructible",
    params = {
    },
}

---@alias EventParam.Projectiles - Created EventParam.ET_PRODUCE_PROJECTILE
M.config["Projectiles - Created"] = {
    desc = "Triggers after projectile creation",
    key = "ET_PRODUCE_PROJECTILE",
    name = "Projectiles - Created",
    object = "Projectile",
    params = {
    },
}

---@alias EventParam.Projectiles - Death EventParam.ET_DEATH_PROJECTILE
M.config["Projectiles - Death"] = {
    desc = "Triggered when the projectile dies",
    key = "ET_DEATH_PROJECTILE",
    name = "Projectiles - Death",
    object = "Projectile",
    params = {
    },
}

---@alias EventParam.Interface - Message EventParam.ET_TRIGGER_COMPONENT_EVENT
M.config["Interface - Message"] = {
    desc = "Trigger the user-defined event marked on the interface",
    from_global = true,
    key = "ET_TRIGGER_COMPONENT_EVENT",
    name = "Interface - Message",
    object = "Player",
    params = {
        [1] = {
            desc = "Custom event name",
            name = "event_name",
            type = "string",
        },
    },
}

---@alias EventParam.Player-ClickOnTheMini-map EventParam.ET_ON_CLICK_MINI_MAP_PANEL
M.config["Player-ClickOnTheMini-map"] = {
    desc = "Triggered when clicking on the mini-map",
    from_global = true,
    key = "ET_ON_CLICK_MINI_MAP_PANEL",
    name = "Player-ClickOnTheMini-map",
    object = "Player",
    params = {
        [1] = {
            call = false,
            desc = "Press the key",
            name = "key",
            resolve = function (key)
                return clicli.const.ClickMiniMapKey[key] or key
            end,
            type = "clicli.Const.ClickMiniMapKey|integer",
        },
    },
}

---@alias EventParam.Interface - Slider changes EventParam.ET_TRIGGER_UI_SLIDER_CHANGE_EVENT
M.config["Interface - Slider changes"] = {
    desc = "Triggered when the slider changes",
    from_global = true,
    key = "ET_TRIGGER_UI_SLIDER_CHANGE_EVENT",
    name = "Interface - Slider changes",
    object = "Player",
    params = {
        [1] = {
            desc = "Target control",
            name = "ui",
            resolve = function (ui)
                return ui.handle
            end,
            type = "UI",
        },
    },
}

---@alias EventParam.Interface - Chat box visibility changes EventParam.ET_TRIGGER_UI_CHATBOX_VISIBLE_CHANGE_EVENT
M.config["Interface - Chat box visibility changes"] = {
    desc = "Triggered when chat box visibility changes",
    from_global = true,
    key = "ET_TRIGGER_UI_CHATBOX_VISIBLE_CHANGE_EVENT",
    name = "Interface - Chat box visibility changes",
    object = "Player",
    params = {
        [1] = {
            desc = "Target control",
            name = "ui",
            resolve = function (ui)
                return ui.handle
            end,
            type = "UI",
        },
    },
}

---@alias EventParam.Interface - Equipment drag and drop EventParam.ET_TRIGGER_UI_EQUIP_SLOT_DRAG_EVENT
M.config["Interface - Equipment drag and drop"] = {
    desc = "",
    from_global = true,
    key = "ET_TRIGGER_UI_EQUIP_SLOT_DRAG_EVENT",
    name = "Interface - Equipment drag and drop",
    object = "Player",
    params = {
        [1] = {
            desc = "Target control",
            name = "ui",
            resolve = function (ui)
                return ui.handle
            end,
            type = "UI",
        },
    },
}

---@alias EventParam.Screen - Check box changes EventParam.ET_TRIGGER_UI_CHECKBOX_CHANGE_EVENT
M.config["Screen - Check box changes"] = {
    desc = "Triggered when the check box changes",
    from_global = true,
    key = "ET_TRIGGER_UI_CHECKBOX_CHANGE_EVENT",
    name = "Screen - Check box changes",
    object = "Player",
    params = {
        [1] = {
            desc = "Target control",
            name = "ui",
            resolve = function (ui)
                return ui.handle
            end,
            type = "UI",
        },
    },
}

---@alias EventParam.Screen - Video playback is complete EventParam.ET_TRIGGER_UI_VIDEO_END_EVENT
M.config["Screen - Video playback is complete"] = {
    desc = "",
    from_global = true,
    key = "ET_TRIGGER_UI_VIDEO_END_EVENT",
    name = "Screen - Video playback is complete",
    object = "Player",
    params = {
        [1] = {
            desc = "Target control",
            name = "ui",
            resolve = function (ui)
                return ui.handle
            end,
            type = "UI",
        },
    },
}

---@alias EventParam.Local-interface-input box gets focus EventParam.ET_TRIGGER_UI_INPUT_FIELD_GET_FOCUS_EVENT
M.config["Local-interface-input box gets focus"] = {
    desc = "",
    from_global = true,
    key = "ET_TRIGGER_UI_INPUT_FIELD_GET_FOCUS_EVENT",
    name = "Local-interface-input box gets focus",
    object = "Player",
    params = {
        [1] = {
            desc = "Input box control",
            name = "ui",
            resolve = function (ui)
                return ui.handle
            end,
            type = "UI",
        },
    },
}

---@alias EventParam.Local-interface-input box out of focus EventParam.ET_TRIGGER_UI_INPUT_FIELD_LOST_FOCUS_EVENT
M.config["Local-interface-input box out of focus"] = {
    desc = "",
    from_global = true,
    key = "ET_TRIGGER_UI_INPUT_FIELD_LOST_FOCUS_EVENT",
    name = "Local-interface-input box out of focus",
    object = "Player",
    params = {
        [1] = {
            desc = "Input box control",
            name = "ui",
            resolve = function (ui)
                return ui.handle
            end,
            type = "UI",
        },
    },
}

---@alias EventParam.Local - Interface - Input box content changed EventParam.ET_TRIGGER_UI_INPUT_FIELD_TEXT_CHANGED_EVENT
M.config["Local - Interface - Input box content changed"] = {
    desc = "",
    from_global = true,
    key = "ET_TRIGGER_UI_INPUT_FIELD_TEXT_CHANGED_EVENT",
    name = "Local - Interface - Input box content changed",
    object = "Player",
    params = {
        [1] = {
            desc = "Input box control",
            name = "ui",
            resolve = function (ui)
                return ui.handle
            end,
            type = "UI",
        },
    },
}

---@alias EventParam.Keyboard. - Press it EventParam.ET_KEYBOARD_KEY_DOWN_EVENT
M.config["Keyboard. - Press it"] = {
    desc = "Triggered when a key on the keyboard is pressed",
    from_global = true,
    key = "ET_KEYBOARD_KEY_DOWN_EVENT",
    name = "Keyboard. - Press it",
    object = "Player",
    params = {
        [1] = {
            call = false,
            desc = "Press the key",
            name = "key",
            resolve = function (key)
                return clicli.const.KeyboardKey[key] or key
            end,
            type = "clicli.Const.KeyboardKey|integer",
        },
    },
}

---@alias EventParam.Keyboard-Lift EventParam.ET_KEYBOARD_KEY_UP_EVENT
M.config["Keyboard-Lift"] = {
    desc = "Triggered when a key on the keyboard is lifted",
    from_global = true,
    key = "ET_KEYBOARD_KEY_UP_EVENT",
    name = "Keyboard-Lift",
    object = "Player",
    params = {
        [1] = {
            call = false,
            desc = "Raised key",
            name = "key",
            resolve = function (key)
                return clicli.const.KeyboardKey[key] or key
            end,
            type = "clicli.Const.KeyboardKey|integer",
        },
    },
}

---@alias EventParam.Local - Keyboard - Press EventParam.ET_ASYNC_KEYBOARD_KEY_DOWN_EVENT
M.config["Local - Keyboard - Press"] = {
    desc = "Triggered when a key on the keyboard is pressed",
    from_global = true,
    key = "ET_ASYNC_KEYBOARD_KEY_DOWN_EVENT",
    name = "Local - Keyboard - Press",
    object = "Player",
    params = {
        [1] = {
            call = false,
            desc = "Press the key",
            name = "key",
            resolve = function (key)
                return clicli.const.KeyboardKey[key] or key
            end,
            type = "clicli.Const.KeyboardKey|integer",
        },
    },
}

---@alias EventParam.Local - Keyboard - Lift EventParam.ET_ASYNC_KEYBOARD_KEY_UP_EVENT
M.config["Local - Keyboard - Lift"] = {
    desc = "Triggered when a key on the keyboard is lifted",
    from_global = true,
    key = "ET_ASYNC_KEYBOARD_KEY_UP_EVENT",
    name = "Local - Keyboard - Lift",
    object = "Player",
    params = {
        [1] = {
            call = false,
            desc = "Raised key",
            name = "key",
            resolve = function (key)
                return clicli.const.KeyboardKey[key] or key
            end,
            type = "clicli.Const.KeyboardKey|integer",
        },
    },
}

---@alias EventParam.Mouse-PressIt EventParam.ET_MOUSE_KEY_DOWN_EVENT
M.config["Mouse-PressIt"] = {
    desc = "Triggered when a key on the mouse is pressed",
    from_global = true,
    key = "ET_MOUSE_KEY_DOWN_EVENT",
    name = "Mouse-PressIt",
    object = "Player",
    params = {
        [1] = {
            call = false,
            desc = "Press the key",
            name = "key",
            resolve = function (key)
                return clicli.const.MouseKey[key] or key
            end,
            type = "clicli.Const.MouseKey|integer",
        },
    },
}

---@alias EventParam.Mouse-lift EventParam.ET_MOUSE_KEY_UP_EVENT
M.config["Mouse-lift"] = {
    desc = "Triggered when a key on the mouse is lifted",
    from_global = true,
    key = "ET_MOUSE_KEY_UP_EVENT",
    name = "Mouse-lift",
    object = "Player",
    params = {
        [1] = {
            call = false,
            desc = "Raised key",
            name = "key",
            resolve = function (key)
                return clicli.const.MouseKey[key] or key
            end,
            type = "clicli.Const.MouseKey|integer",
        },
    },
}

---@alias EventParam.Mouse-double-click EventParam.MOUSE_KEY_DB_CLICK_EVENT
M.config["Mouse-double-click"] = {
    desc = "Triggered when a key on the mouse is double-clicked",
    from_global = true,
    key = "MOUSE_KEY_DB_CLICK_EVENT",
    name = "Mouse-double-click",
    object = "Player",
    params = {
        [1] = {
            call = false,
            desc = "Double click key",
            name = "key",
            resolve = function (key)
                return clicli.const.MouseKey[key] or key
            end,
            type = "clicli.Const.MouseKey|integer",
        },
    },
}

---@alias EventParam.Local - Mouse - Press down EventParam.ET_ASYNC_MOUSE_KEY_DOWN_EVENT
M.config["Local - Mouse - Press down"] = {
    desc = "Triggered when a key on the mouse is pressed",
    from_global = true,
    key = "ET_ASYNC_MOUSE_KEY_DOWN_EVENT",
    name = "Local - Mouse - Press down",
    object = "Player",
    params = {
        [1] = {
            call = false,
            desc = "Press the key",
            name = "key",
            resolve = function (key)
                return clicli.const.MouseKey[key] or key
            end,
            type = "clicli.Const.MouseKey|integer",
        },
    },
}

---@alias EventParam.Local - Mouse - Lift EventParam.ET_ASYNC_MOUSE_KEY_UP_EVENT
M.config["Local - Mouse - Lift"] = {
    desc = "Triggered when a key on the mouse is lifted",
    from_global = true,
    key = "ET_ASYNC_MOUSE_KEY_UP_EVENT",
    name = "Local - Mouse - Lift",
    object = "Player",
    params = {
        [1] = {
            call = false,
            desc = "Raised key",
            name = "key",
            resolve = function (key)
                return clicli.const.MouseKey[key] or key
            end,
            type = "clicli.Const.MouseKey|integer",
        },
    },
}

---@alias EventParam.Local - Mouse - Double click EventParam.ET_ASYNC_MOUSE_KEY_DB_CLICK_EVENT
M.config["Local - Mouse - Double click"] = {
    desc = "Triggered when a key on the mouse is double-clicked",
    from_global = true,
    key = "ET_ASYNC_MOUSE_KEY_DB_CLICK_EVENT",
    name = "Local - Mouse - Double click",
    object = "Player",
    params = {
        [1] = {
            call = false,
            desc = "Double click key",
            name = "key",
            resolve = function (key)
                return clicli.const.MouseKey[key] or key
            end,
            type = "clicli.Const.MouseKey|integer",
        },
    },
}

---@alias EventParam.Mouse-PressTheUnit EventParam.MOUSE_KEY_DOWN_UNIT_EVENT
M.config["Mouse-PressTheUnit"] = {
    desc = "Triggered when a key on the mouse is pressed against the unit",
    from_global = true,
    key = "MOUSE_KEY_DOWN_UNIT_EVENT",
    name = "Mouse-PressTheUnit",
    object = "Player",
    params = {
        [1] = {
            call = false,
            desc = "Press the key",
            name = "key",
            resolve = function (key)
                return clicli.const.MouseKey[key] or key
            end,
            type = "clicli.Const.MouseKey|integer",
        },
    },
}

---@alias EventParam.Mouse-LiftUnit EventParam.MOUSE_KEY_UP_UNIT_EVENT
M.config["Mouse-LiftUnit"] = {
    desc = "Triggered when a key on the mouse is raised against the unit",
    from_global = true,
    key = "MOUSE_KEY_UP_UNIT_EVENT",
    name = "Mouse-LiftUnit",
    object = "Player",
    params = {
        [1] = {
            call = false,
            desc = "Raised key",
            name = "key",
            resolve = function (key)
                return clicli.const.MouseKey[key] or key
            end,
            type = "clicli.Const.MouseKey|integer",
        },
    },
}

---@alias EventParam.Mouse-DoubleClickTheUnit EventParam.MOUSE_KEY_DB_CLICK_UNIT_EVENT
M.config["Mouse-DoubleClickTheUnit"] = {
    desc = "A key on the mouse is triggered when the unit is double-clicked",
    from_global = true,
    key = "MOUSE_KEY_DB_CLICK_UNIT_EVENT",
    name = "Mouse-DoubleClickTheUnit",
    object = "Player",
    params = {
        [1] = {
            call = false,
            desc = "Double click key",
            name = "key",
            resolve = function (key)
                return clicli.const.MouseKey[key] or key
            end,
            type = "clicli.Const.MouseKey|integer",
        },
    },
}

---@alias EventParam.Local - Mouse - Press the unit EventParam.ET_MOUSE_KEY_DOWN_UNIT_EVENT
M.config["Local - Mouse - Press the unit"] = {
    desc = "Triggered when a key on the mouse is pressed against the unit",
    from_global = true,
    key = "ET_MOUSE_KEY_DOWN_UNIT_EVENT",
    name = "Local - Mouse - Press the unit",
    object = "Player",
    params = {
        [1] = {
            call = false,
            desc = "Press the key",
            name = "key",
            resolve = function (key)
                return clicli.const.MouseKey[key] or key
            end,
            type = "clicli.Const.MouseKey|integer",
        },
    },
}

---@alias EventParam.Local - mouse - lift unit EventParam.ET_MOUSE_KEY_UP_UNIT_EVENT
M.config["Local - mouse - lift unit"] = {
    desc = "Triggered when a key on the mouse is raised against the unit",
    from_global = true,
    key = "ET_MOUSE_KEY_UP_UNIT_EVENT",
    name = "Local - mouse - lift unit",
    object = "Player",
    params = {
        [1] = {
            call = false,
            desc = "Raised key",
            name = "key",
            resolve = function (key)
                return clicli.const.MouseKey[key] or key
            end,
            type = "clicli.Const.MouseKey|integer",
        },
    },
}

---@alias EventParam.Local - Mouse - Double click the unit EventParam.ET_MOUSE_KEY_DB_CLICK_UNIT_EVENT
M.config["Local - Mouse - Double click the unit"] = {
    desc = "A key on the mouse is triggered when the unit is double-clicked",
    from_global = true,
    key = "ET_MOUSE_KEY_DB_CLICK_UNIT_EVENT",
    name = "Local - Mouse - Double click the unit",
    object = "Player",
    params = {
        [1] = {
            call = false,
            desc = "Double click key",
            name = "key",
            resolve = function (key)
                return clicli.const.MouseKey[key] or key
            end,
            type = "clicli.Const.MouseKey|integer",
        },
    },
}

---@alias EventParam.Mouse-move EventParam.MOUSE_MOVE_EVENT
M.config["Mouse-move"] = {
    desc = "Triggered when mouse moves",
    from_global = true,
    key = "MOUSE_MOVE_EVENT",
    name = "Mouse-move",
    object = "Player",
    params = {
    },
}

---@alias EventParam.Local - Mouse - Move EventParam.ET_ASYNC_MOUSE_MOVE_EVENT
M.config["Local - Mouse - Move"] = {
    desc = "Triggered when mouse moves",
    from_global = true,
    key = "ET_ASYNC_MOUSE_MOVE_EVENT",
    name = "Local - Mouse - Move",
    object = "Player",
    params = {
    },
}

---@alias EventParam.Mouse-Wheel EventParam.ET_MOUSE_WHEEL_EVENT
M.config["Mouse-Wheel"] = {
    desc = "Triggered when the mouse wheel is scrolling",
    from_global = true,
    key = "ET_MOUSE_WHEEL_EVENT",
    name = "Mouse-Wheel",
    object = "Player",
    params = {
        [1] = {
            call = false,
            desc = "Rolling direction",
            name = "key",
            resolve = function (key)
                return clicli.const.MouseKey[key] or key
            end,
            type = "clicli.Const.MouseKey|integer",
        },
    },
}

---@alias EventParam.Local - Mouse - Wheel EventParam.ET_ASYNC_MOUSE_WHEEL_EVENT
M.config["Local - Mouse - Wheel"] = {
    desc = "Triggered when the mouse wheel is scrolling",
    from_global = true,
    key = "ET_ASYNC_MOUSE_WHEEL_EVENT",
    name = "Local - Mouse - Wheel",
    object = "Player",
    params = {
        [1] = {
            call = false,
            desc = "Rolling direction",
            name = "key",
            resolve = function (key)
                return clicli.const.MouseKey[key] or key
            end,
            type = "clicli.Const.MouseKey|integer",
        },
    },
}

---@alias EventParam.select-unit EventParam.ET_SELECT_UNIT
M.config["select-unit"] = {
    desc = "Triggered when the player selects a unit",
    key = "ET_SELECT_UNIT",
    name = "select-unit",
    object = "Player",
    params = {
    },
}

---@alias EventParam.Local - Select - Unit EventParam.ET_ASYNC_SELECT_UNIT
M.config["Local - Select - Unit"] = {
    desc = "Triggered when local players select a unit",
    key = "ET_ASYNC_SELECT_UNIT",
    name = "Local - Select - Unit",
    object = "Player",
    params = {
    },
}

---@alias EventParam.Check - cancel EventParam.CANCEL_SELECT_UNIT
M.config["Check - cancel"] = {
    desc = "Triggered when the player actively unselects",
    key = "CANCEL_SELECT_UNIT",
    name = "Check - cancel",
    object = "Player",
    params = {
    },
}

---@alias EventParam.Local - Select - Cancel EventParam.ET_ASYNC_CANCEL_SELECT_UNIT
M.config["Local - Select - Cancel"] = {
    desc = "Triggered when the player is selected status is cancelled",
    key = "ET_ASYNC_CANCEL_SELECT_UNIT",
    name = "Local - Select - Cancel",
    object = "Player",
    params = {
    },
}

---@alias EventParam.Selected - Lost unit EventParam.LOST_SELECT_UNIT
M.config["Selected - Lost unit"] = {
    desc = "Triggered when the player passively loses the selected status of the unit",
    key = "LOST_SELECT_UNIT",
    name = "Selected - Lost unit",
    object = "Player",
    params = {
    },
}

---@alias EventParam.Local - Selected - Lost unit EventParam.ET_ASYNC_LOST_SELECT_UNIT
M.config["Local - Selected - Lost unit"] = {
    desc = "Triggered when a local player passively loses the selected status of a unit",
    key = "ET_ASYNC_LOST_SELECT_UNIT",
    name = "Local - Selected - Lost unit",
    object = "Player",
    params = {
    },
}

---@alias EventParam.Select-item EventParam.ET_SELECT_ITEM
M.config["Select-item"] = {
    desc = "Triggered when item is selected",
    key = "ET_SELECT_ITEM",
    name = "Select-item",
    object = "Player",
    params = {
    },
}

---@alias EventParam.Local - Select - Items EventParam.ET_ASYNC_SELECT_ITEM
M.config["Local - Select - Items"] = {
    desc = "Triggered when local players select an item",
    key = "ET_ASYNC_SELECT_ITEM",
    name = "Local - Select - Items",
    object = "Player",
    params = {
    },
}

---@alias EventParam.Player-CheatingDetected EventParam.ET_ATTR_CHEATING_DETECTED
M.config["Player-CheatingDetected"] = {
    desc = "",
    key = "ET_ATTR_CHEATING_DETECTED",
    name = "Player-CheatingDetected",
    object = "Player",
    params = {
    },
}

---@alias EventParam.Mouse-DoubleClickTheItem EventParam.ET_DOUBLE_CLICK_ITEM
M.config["Mouse-DoubleClickTheItem"] = {
    desc = "Triggered when the left mouse button double clicks on the item",
    from_global = true,
    key = "ET_DOUBLE_CLICK_ITEM",
    name = "Mouse-DoubleClickTheItem",
    object = "Player",
    params = {
    },
}

---@alias EventParam.Mouse-DoubleClickDestructible EventParam.ET_DOUBLE_CLICK_DEST
M.config["Mouse-DoubleClickDestructible"] = {
    desc = "Triggered when the destructible object is double-clicked on the left mouse button",
    from_global = true,
    key = "ET_DOUBLE_CLICK_DEST",
    name = "Mouse-DoubleClickDestructible",
    object = "Player",
    params = {
    },
}

---@alias EventParam.Select - Unit Group EventParam.ET_SELECT_UNIT_GROUP
M.config["Select - Unit Group"] = {
    desc = "Triggered when the player selects a unit group",
    key = "ET_SELECT_UNIT_GROUP",
    name = "Select - Unit Group",
    object = "Player",
    params = {
    },
}

---@alias EventParam.Local - Select - Unit Group EventParam.ET_ASYNC_SELECT_UNIT_GROUP
M.config["Local - Select - Unit Group"] = {
    desc = "Triggered when a local player selects a unit group",
    key = "ET_ASYNC_SELECT_UNIT_GROUP",
    name = "Local - Select - Unit Group",
    object = "Player",
    params = {
    },
}

---@alias EventParam.Skills-TurnOnTheIndicator EventParam.ET_START_SKILL_POINTER
M.config["Skills-TurnOnTheIndicator"] = {
    desc = "Skill is aiming indicator is displayed when triggered",
    extraObjs = {
        [1] = {
            getter = function (self) return self:get_owner() end,
            luaType = "Unit",
        },
    },
    key = "ET_START_SKILL_POINTER",
    name = "Skills-TurnOnTheIndicator",
    object = "Ability",
    params = {
    },
}

---@alias EventParam.Skills-BuildSkillsBeforeReleasing EventParam.ET_BUILD_SKILL_BEFORE_RELEASE
M.config["Skills-BuildSkillsBeforeReleasing"] = {
    desc = "The build skill command is about to be issued",
    extraObjs = {
        [1] = {
            getter = function (self) return self:get_owner() end,
            luaType = "Unit",
        },
    },
    key = "ET_BUILD_SKILL_BEFORE_RELEASE",
    name = "Skills-BuildSkillsBeforeReleasing",
    object = "Ability",
    params = {
    },
}

---@alias EventParam.Skills-TurnOffTheIndicator EventParam.ET_STOP_SKILL_POINTER
M.config["Skills-TurnOffTheIndicator"] = {
    desc = "Triggered when the skill is aiming indicator disappears",
    extraObjs = {
        [1] = {
            getter = function (self) return self:get_owner() end,
            luaType = "Unit",
        },
    },
    key = "ET_STOP_SKILL_POINTER",
    name = "Skills-TurnOffTheIndicator",
    object = "Ability",
    params = {
    },
}

---@alias EventParam.Items - Get EventParam.ET_UNIT_ADD_ITEM
M.config["Items - Get"] = {
    desc = "Triggered when a unit gets an item",
    key = "ET_UNIT_ADD_ITEM",
    name = "Items - Get",
    object = "Item",
    params = {
    },
}

---@alias EventParam.Items - Enter the inventory EventParam.ET_UNIT_ADD_ITEM_TO_BAR
M.config["Items - Enter the inventory"] = {
    desc = "Triggers when items enter a unit is inventory",
    key = "ET_UNIT_ADD_ITEM_TO_BAR",
    name = "Items - Enter the inventory",
    object = "Item",
    params = {
    },
}

---@alias EventParam.Items - Enter backpack EventParam.ET_UNIT_ADD_ITEM_TO_PKG
M.config["Items - Enter backpack"] = {
    desc = "Triggers when items enter the unit is backpack",
    key = "ET_UNIT_ADD_ITEM_TO_PKG",
    name = "Items - Enter backpack",
    object = "Item",
    params = {
    },
}

---@alias EventParam.Item - lost EventParam.ET_UNIT_REMOVE_ITEM
M.config["Item - lost"] = {
    desc = "Triggered when units lose items",
    key = "ET_UNIT_REMOVE_ITEM",
    name = "Item - lost",
    object = "Item",
    params = {
    },
}

---@alias EventParam.Items-LeaveTheInventory EventParam.ET_UNIT_REMOVE_ITEM_FROM_BAR
M.config["Items-LeaveTheInventory"] = {
    desc = "Triggered when an item leaves the unit inventory",
    key = "ET_UNIT_REMOVE_ITEM_FROM_BAR",
    name = "Items-LeaveTheInventory",
    object = "Item",
    params = {
    },
}

---@alias EventParam.Items-LeaveTheBackpack EventParam.ET_UNIT_REMOVE_ITEM_FROM_PKG
M.config["Items-LeaveTheBackpack"] = {
    desc = "Item triggers when leaving the unit is backpack",
    key = "ET_UNIT_REMOVE_ITEM_FROM_PKG",
    name = "Items-LeaveTheBackpack",
    object = "Item",
    params = {
    },
}

---@alias EventParam.Items - Use EventParam.ET_UNIT_USE_ITEM
M.config["Items - Use"] = {
    desc = "Triggered when a unit uses an item",
    key = "ET_UNIT_USE_ITEM",
    name = "Items - Use",
    object = "Item",
    params = {
    },
}

---@alias EventParam.Unit-PathfindingBegins EventParam.ET_UNIT_START_NAV_EVENT
M.config["Unit-PathfindingBegins"] = {
    desc = "Actions such as attacking, moving, and casting spells can cause wayfinding",
    key = "ET_UNIT_START_NAV_EVENT",
    name = "Unit-PathfindingBegins",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Unit-PathfindingEnds EventParam.ET_UNIT_END_NAV_EVENT
M.config["Unit-PathfindingEnds"] = {
    desc = "The pathfinding is triggered after reaching the target position or failing for 3 times",
    key = "ET_UNIT_END_NAV_EVENT",
    name = "Unit-PathfindingEnds",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Item-StackChanges EventParam.ET_ITEM_STACK_CHANGED
M.config["Item-StackChanges"] = {
    desc = "Triggered when item stack number changes",
    key = "ET_ITEM_STACK_CHANGED",
    name = "Item-StackChanges",
    object = "Item",
    params = {
    },
}

---@alias EventParam.Item-ChargeChanges EventParam.ET_ITEM_CHARGE_CHANGED
M.config["Item-ChargeChanges"] = {
    desc = "Triggers when item charge levels change",
    key = "ET_ITEM_CHARGE_CHANGED",
    name = "Item-ChargeChanges",
    object = "Item",
    params = {
    },
}

---@alias EventParam.Items - Create EventParam.ET_ITEM_ON_CREATE
M.config["Items - Create"] = {
    desc = "Triggered when item is created",
    key = "ET_ITEM_ON_CREATE",
    name = "Items - Create",
    object = "Item",
    params = {
    },
}

---@alias EventParam.Items - Removal EventParam.ET_ITEM_ON_DESTROY
M.config["Items - Removal"] = {
    desc = "Triggered when item is removed",
    key = "ET_ITEM_ON_DESTROY",
    name = "Items - Removal",
    object = "Item",
    params = {
    },
}

---@alias EventParam.Items-ForSale EventParam.ET_ITEM_SOLD
M.config["Items-ForSale"] = {
    desc = "Triggered when an item is sold to a store",
    key = "ET_ITEM_SOLD",
    name = "Items-ForSale",
    object = "Item",
    params = {
    },
}

---@alias EventParam.Item-Death EventParam.ET_ITEM_BROKEN
M.config["Item-Death"] = {
    desc = "Triggered when item is destroyed",
    key = "ET_ITEM_BROKEN",
    name = "Item-Death",
    object = "Item",
    params = {
    },
}

---@alias EventParam.Item-CollectionCreation EventParam.ET_ITEM_CREATE_ON_DEST_COLLECTED
M.config["Item-CollectionCreation"] = {
    desc = "This event is triggered when an item is created through collection. The collection function comes from destructible objects.",
    key = "ET_ITEM_CREATE_ON_DEST_COLLECTED",
    name = "Item-CollectionCreation",
    object = "Item",
    params = {
    },
}

---@alias EventParam.Command - Attack move EventParam.ET_ATTACK_MOVE_CMD
M.config["Command - Attack move"] = {
    desc = "",
    key = "ET_ATTACK_MOVE_CMD",
    name = "Command - Attack move",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Command - Sell items EventParam.ET_SELL_ITEM_CMD
M.config["Command - Sell items"] = {
    desc = "",
    key = "ET_SELL_ITEM_CMD",
    name = "Command - Sell items",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Command - Cast abilities EventParam.ET_AI_RELEASE_SKILL_CMD
M.config["Command - Cast abilities"] = {
    desc = "",
    key = "ET_AI_RELEASE_SKILL_CMD",
    name = "Command - Cast abilities",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.command-patrol EventParam.ET_PATROL_CMD
M.config["command-patrol"] = {
    desc = "",
    key = "ET_PATROL_CMD",
    name = "command-patrol",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.command-move EventParam.ET_MOVE_UNIT_TO_TARGET_CMD
M.config["command-move"] = {
    desc = "",
    key = "ET_MOVE_UNIT_TO_TARGET_CMD",
    name = "command-move",
    object = "Unit",
    params = {
    },
}

---@alias EventParam.Mouse - Hover EventParam.ET_MOUSE_HOVER_EVENT
M.config["Mouse - Hover"] = {
    desc = "Hovering to enter or leave will trigger",
    from_global = true,
    key = "ET_MOUSE_HOVER_EVENT",
    name = "Mouse - Hover",
    object = "Player",
    params = {
    },
}

---@alias EventParam.Local - Mouse - Hover EventParam.ET_ASYNC_MOUSE_HOVER_EVENT
M.config["Local - Mouse - Hover"] = {
    desc = "Hovering to enter or leave will trigger",
    from_global = true,
    key = "ET_ASYNC_MOUSE_HOVER_EVENT",
    name = "Local - Mouse - Hover",
    object = "Player",
    params = {
    },
}

---@alias EventParam.Player - Send message EventParam.ET_CHAT_SEND_GM
M.config["Player - Send message"] = {
    desc = "Triggered when the player sends any message",
    from_global = true,
    key = "ET_CHAT_SEND_GM",
    name = "Player - Send message",
    object = "Player",
    params = {
    },
}

---@alias EventParam.Games-News EventParam.ET_EVENT_CUSTOM
M.config["Games-News"] = {
    desc = "Events defined in the Event management office are triggered through this method",
    key = "ET_EVENT_CUSTOM",
    name = "Games-News",
    params = {
        [1] = {
            call = false,
            desc = "Event ID",
            name = "event_id",
            resolve = function (event_id)
                return clicli.const.CustomEventName[event_id] or event_id
            end,
            type = "integer",
        },
    },
}

---@alias EventParam.Player-VoiceSpeech EventParam.ET_MICRO_SPEAK
M.config["Player-VoiceSpeech"] = {
    desc = "The player is start voice and end voice will trigger",
    from_global = true,
    key = "ET_MICRO_SPEAK",
    name = "Player-VoiceSpeech",
    object = "Player",
    params = {
    },
}

---@alias EventParam.Unknown-et_unit_3d_active EventParam.ET_UNIT_3D_ACTIVE
M.config["Unknown-et_unit_3d_active"] = {
    _deprecated = true,
    desc = "ET_UNIT_3D_ACTIVE",
    key = "ET_UNIT_3D_ACTIVE",
    name = "Unknown-et_unit_3d_active",
    params = {
    },
}

---@alias EventParam.Player - platform item changes EventParam.ET_ROLE_STORE_ITEM_CHANGED
M.config["Player - platform item changes"] = {
    desc = "Triggers when the player is platform item changes",
    key = "ET_ROLE_STORE_ITEM_CHANGED",
    name = "Player - platform item changes",
    object = "Player",
    params = {
    },
}

---@alias EventParam.Player - Platform mall window changes EventParam.ET_ROLE_STORE_PAGE_STATE_CHANGED
M.config["Player - Platform mall window changes"] = {
    desc = "Platform mall window change event",
    from_global = true,
    key = "ET_ROLE_STORE_PAGE_STATE_CHANGED",
    name = "Player - Platform mall window changes",
    object = "Player",
    params = {
    },
}

---@alias EventParam.Console - Input EventParam.ET_LUA_CONSOLE_COMMAND
M.config["Console - Input"] = {
    desc = "",
    key = "ET_LUA_CONSOLE_COMMAND",
    name = "Console - Input",
    params = {
    },
}

---@alias EventParam.Console - Request completion EventParam.ET_LUA_CONSOLE_TIPS
M.config["Console - Request completion"] = {
    desc = "",
    key = "ET_LUA_CONSOLE_TIPS",
    name = "Console - Request completion",
    params = {
    },
}

---@alias EventParam.Steam-ReceiveAFriendRequest EventParam.ET_MALL_NOTIFY_FRIEND_NEW
M.config["Steam-ReceiveAFriendRequest"] = {
    desc = "",
    key = "ET_MALL_NOTIFY_FRIEND_NEW",
    name = "Steam-ReceiveAFriendRequest",
    params = {
    },
}

---@alias EventParam.Steam-ReceivedDeletedByFriends EventParam.ET_MALL_NOTIFY_FRIEND_DELETE
M.config["Steam-ReceivedDeletedByFriends"] = {
    desc = "",
    key = "ET_MALL_NOTIFY_FRIEND_DELETE",
    name = "Steam-ReceivedDeletedByFriends",
    params = {
    },
}

---@alias EventParam.Steam-FriendsOnlineStatusChanges EventParam.ET_MALL_NOTIFY_FRIEND_UPDATE
M.config["Steam-FriendsOnlineStatusChanges"] = {
    desc = "",
    key = "ET_MALL_NOTIFY_FRIEND_UPDATE",
    name = "Steam-FriendsOnlineStatusChanges",
    params = {
    },
}

---@alias EventParam.Steam-LocalPlayerTeamChanges EventParam.ET_MALL_NOTIFY_TEAM_UPDATE
M.config["Steam-LocalPlayerTeamChanges"] = {
    desc = "",
    key = "ET_MALL_NOTIFY_TEAM_UPDATE",
    name = "Steam-LocalPlayerTeamChanges",
    params = {
    },
}

---@alias EventParam.Steam-ReceiveATeamInvitation EventParam.ET_MALL_NOTIFY_TEAM_INVITE
M.config["Steam-ReceiveATeamInvitation"] = {
    desc = "",
    key = "ET_MALL_NOTIFY_TEAM_INVITE",
    name = "Steam-ReceiveATeamInvitation",
    params = {
    },
}

---@alias EventParam.Steam-EnterTheLobby EventParam.ET_MALL_NOTIFY_ENTER_LOBBY
M.config["Steam-EnterTheLobby"] = {
    desc = "",
    key = "ET_MALL_NOTIFY_ENTER_LOBBY",
    name = "Steam-EnterTheLobby",
    params = {
    },
}

---@alias EventParam.Steam-StartMatching EventParam.ET_MALL_NOTIFY_START_MATCH
M.config["Steam-StartMatching"] = {
    desc = "",
    key = "ET_MALL_NOTIFY_START_MATCH",
    name = "Steam-StartMatching",
    params = {
    },
}

---@alias EventParam.Steam-CancelTheMatch EventParam.ET_MALL_NOTIFY_CANCEL_MATCH
M.config["Steam-CancelTheMatch"] = {
    desc = "",
    key = "ET_MALL_NOTIFY_CANCEL_MATCH",
    name = "Steam-CancelTheMatch",
    params = {
    },
}

---@alias EventParam.Steam-LocalRoomInformationChanges EventParam.ET_MALL_NOTIFY_ROOM_INFO_CHANGE
M.config["Steam-LocalRoomInformationChanges"] = {
    desc = "",
    key = "ET_MALL_NOTIFY_ROOM_INFO_CHANGE",
    name = "Steam-LocalRoomInformationChanges",
    params = {
    },
}

---@alias EventParam.Steam-BeInvitedToJoinTheRoom EventParam.ET_MALL_NOTIFY_ROOM_INVITE
M.config["Steam-BeInvitedToJoinTheRoom"] = {
    desc = "",
    key = "ET_MALL_NOTIFY_ROOM_INVITE",
    name = "Steam-BeInvitedToJoinTheRoom",
    params = {
    },
}

---@alias EventParam.Steam-KickedOutOfTheRoom EventParam.ET_MALL_NOTIFY_ROOM_KICK_OFF
M.config["Steam-KickedOutOfTheRoom"] = {
    desc = "",
    key = "ET_MALL_NOTIFY_ROOM_KICK_OFF",
    name = "Steam-KickedOutOfTheRoom",
    params = {
    },
}

---@alias EventParam.Steam-CreatedRoomSuccessfully EventParam.ET_MALL_NOTIFY_ROOM_BUILD
M.config["Steam-CreatedRoomSuccessfully"] = {
    desc = "",
    key = "ET_MALL_NOTIFY_ROOM_BUILD",
    name = "Steam-CreatedRoomSuccessfully",
    params = {
    },
}

---@class Game
---@field event fun(self: self, event: "game-initialization ", callback: fun(trg: Trigger, data: EventParam). Game - initialization)): Trigger
---@field event fun(self: self, event: "Game - frame completion ", callback: fun(trg: Trigger, data: EventParam). Game - Frame completion)): Trigger
---@field event fun(self: self, event: "game-logic asynchronous ", callback: fun(trg: Trigger, data: EventParam). Game - logic out of sync)): Trigger
---@field event fun(self: self, event: "Game - terrain presets loaded complete ", callback: fun(trg: Trigger, data: EventParam). Game - Terrain presets load complete)): Trigger
---@field event fun(self: self, event: "Game - end ", callback: fun(trg: Trigger, data: EventParam). Game - over)): Trigger
---@field event fun(self: self, event: "game-pause ", callback: fun(trg: Trigger, data: EventParam). Game - Pause)): Trigger
---@field event fun(self: self, event: "game-recovery ", callback: fun(trg: Trigger, data: EventParam). Game - Recovery)): Trigger
---@field event fun(self: self, event: "Game - day and night change ", callback: fun(trg: Trigger, data: EventParam). Game - Day and Night change)): Trigger
---@field event fun(self: self, event: "area-enter ", area: Area, callback: fun(trg: Trigger, data: EventParam). Zone - Enter)): Trigger
---@field event fun(self: self, event: "area-leave ", area: Area, callback: fun(trg: Trigger, data: EventParam). Zone - Leave)): Trigger
---@field event fun(self: self, event: "Game -http return ", callback: fun(trg: Trigger, data: EventParam). Game -http return)): Trigger
---@field event fun(self: self, event: "Game - Receive broadcast information ", callback: fun(trg: Trigger, data: EventParam). Game - Receive broadcast information)): Trigger
---@field event fun(self: self, event: "Player - join game ", callback: fun(trg: Trigger, data: EventParam). Player - Join the game)): Trigger
---@field event fun(self: self, event: "Player - leaving the game ", callback: fun(trg: Trigger, data: EventParam). Player - Leave the game)): Trigger
---@field event fun(self: self, event: "player-dropped ", callback: fun(trg: Trigger, data: EventParam). Player - dropped)): Trigger
---@field event fun(self: self, event: "Player - use platform item ", callback: fun(trg: Trigger, data: EventParam). Player - using platform items)): Trigger
---@field event fun(self: self, event: "Player - holding platform item ", callback: fun(trg: Trigger, data: EventParam). Player - holding a platform item)): Trigger
---@field event fun(self: self, event: "Player - attribute change ", callback: fun(trg: Trigger, data: EventParam). Player - Attribute change)): Trigger
---@field event fun(self: self, event: "Player - send specified message ", msg: string, callback: fun(trg: Trigger, data: EventParam). Player - send specified message)): Trigger
---@field event fun(self: self, event: "Player - tech boost ", callback: fun(trg: Trigger, data: EventParam). Player - Tech boost)): Trigger
---@field event fun(self: self, event: "Player-tech drop ", callback: fun(trg: Trigger, data: EventParam). Player - Tech reduced)): Trigger
---@field event fun(self: self, event: "Player-tech change ", callback: fun(trg: Trigger, data: EventParam). Player - Technology change)): Trigger
---@field event fun(self: self, event: "Unit - R&D technology ", callback: fun(trg: Trigger, data: EventParam). Unit - Research and development technology)): Trigger
---@field event fun(self: self, event: "unit - get tech ", callback: fun(trg: Trigger, data: EventParam). Unit - Get Tech)): Trigger
---@field event fun(self: self, event: "Unit - lost tech ", callback: fun(trg: Trigger, data: EventParam). Unit - Lost tech)): Trigger
---@field event fun(self: self, event: "Player-relationship change ", callback: fun(trg: Trigger, data: EventParam). Player - Relationship change)): Trigger
---@field event fun(self: self, event: "player-reconnection ", callback: fun(trg: Trigger, data: EventParam). Player - reconnect)): Trigger
---@field event fun(self: self, event: "Units-building upgrade starts ", callback: fun(trg: Trigger, data: EventParam). Unit - Building upgrade starts)): Trigger
---@field event fun(self: self, event: "Unit-building upgrade cancelled ", callback: fun(trg: Trigger, data: EventParam). Unit - Building upgrade cancelled)): Trigger
---@field event fun(self: self, event: "Unit - building upgrade completed ", callback: fun(trg: Trigger, data: EventParam). Unit - Building upgrade completed)): Trigger
---@field event fun(self: self, event: "Units-build starts ", callback: fun(trg: Trigger, data: EventParam). Unit - Build starts)): Trigger
---@field event fun(self: self, event: "unit-build cancel ", callback: fun(trg: Trigger, data: EventParam). Unit - Build cancelled)): Trigger
---@field event fun(self: self, event: "Unit - build completed ", callback: fun(trg: Trigger, data: EventParam). Unit - Built)): Trigger
---@field event fun(self: self, event: "Skill - build completed ", callback: fun(trg: Trigger, data: EventParam). Skill - Build completed)): Trigger
---@field event fun(self: self, event: "Skill - learning ", callback: fun(trg: Trigger, data: EventParam). Skills - Learning)): Trigger
---@field event fun(self: self, event: "Skill - availability status change ", callback: fun(trg: Trigger, data: EventParam). Skills - Available status changes)): Trigger
---@field event fun(self: self, event: "Skills-silence status change ", callback: fun(trg: Trigger, data: EventParam). Skill - Silent state change)): Trigger
---@field event fun(self: self, event: "Skill - icon change ", callback: fun(trg: Trigger, data: EventParam). Skill - Icon change)): Trigger
---@field event fun(self: self, event: "unit-name change ", callback: fun(trg: Trigger, data: EventParam). Unit - Name change)): Trigger
---@field event fun(self: self, event: "units-minimap icon change ", callback: fun(trg: Trigger, data: EventParam). Unit - minimap icon change)): Trigger
---@field event fun(self: self, event: "units-avatar change ", callback: fun(trg: Trigger, data: EventParam). Unit - Avatar change)): Trigger
---@field event fun(self: self, event: "unit-remove ", callback: fun(trg: Trigger, data: EventParam). Unit - remove)): Trigger
---@field event fun(self: self, event: "unit - after removal ", callback: fun(trg: Trigger, data: EventParam). Unit - after removal)): Trigger
---@field event fun(self: self, event: "units-end of transmission ", callback: fun(trg: Trigger, data: EventParam). Unit - End of transfer)): Trigger
---@field event fun(self: self, event: "unit-attribute change ", unit: Unit, attr: string, callback: fun(trg: Trigger, data: EventParam). Unit - Attribute change)): Trigger
---@field event fun(self: self, event: "Unit - dying ", callback: fun(trg: Trigger, data: EventParam). Unit - About to die)): Trigger
---@field event fun(self: self, event: "unit-death ", callback: fun(trg: Trigger, data: EventParam). Unit - death)): Trigger
---@field event fun(self: self, event: "Unit - before taking damage ", callback: fun(trg: Trigger, data: EventParam). Unit - Before taking damage)): Trigger
---@field event fun(self: self, event: "unit - before dealing damage ", callback: fun(trg: Trigger, data: EventParam). Unit - Before dealing damage)): Trigger
---@field event fun(self: self, event: "Unit - when damaged ", callback: fun(trg: Trigger, data: EventParam). Unit - When taking damage)): Trigger
---@field event fun(self: self, event: "unit - when dealing damage ", callback: fun(trg: Trigger, data: EventParam). Unit - When dealing damage)): Trigger
---@field event fun(self: self, event: "Unit - after dealing damage ", callback: fun(trg: Trigger, data: EventParam). Unit - After dealing damage)): Trigger
---@field event fun(self: self, event: "Unit - after taking damage ", callback: fun(trg: Trigger, data: EventParam). Unit - After taking damage)): Trigger
---@field event fun(self: self, event: "unit - before treatment ", callback: fun(trg: Trigger, data: EventParam). Unit - Before receiving treatment)): Trigger
---@field event fun(self: self, event: "Unit - after healing ", callback: fun(trg: Trigger, data: EventParam). Unit - after being healed)): Trigger
---@field event fun(self: self, event: "Unit - when healed ", callback: fun(trg: Trigger, data: EventParam). Unit - when treated)): Trigger
---@field event fun(self: self, event: "Player-attribute icon change ", callback: fun(trg: Trigger, data: EventParam). Player - Attribute icon changes)): Trigger
---@field event fun(self: self, event: "unit-cast skill ", callback: fun(trg: Trigger, data: EventParam). Unit - Cast skill)): Trigger
---@field event fun(self: self, event: "Unit - before experience ", callback: fun(trg: Trigger, data: EventParam). Unit - Before gaining experience)): Trigger
---@field event fun(self: self, event: "Unit - after experience ", callback: fun(trg: Trigger, data: EventParam). Unit - After gaining experience)): Trigger
---@field event fun(self: self, event: "unit - receive command ", callback: fun(trg: Trigger, data: EventParam). Unit - Receive command)): Trigger
---@field event fun(self: self, event: "unit - kill ", callback: fun(trg: Trigger, data: EventParam). Unit - Kill)): Trigger
---@field event fun(self: self, event: "unit-create ", callback: fun(trg: Trigger, data: EventParam). Unit - create)): Trigger
---@field event fun(self: self, event: "Unit - enter battle ", callback: fun(trg: Trigger, data: EventParam). Unit - Enter battle)): Trigger
---@field event fun(self: self, event: "Unit - out of battle ", callback: fun(trg: Trigger, data: EventParam). Unit - Out of combat)): Trigger
---@field event fun(self: self, event: "Unit - item to be picked up ", callback: fun(trg: Trigger, data: EventParam). Unit - About to pick up item)): Trigger
---@field event fun(self: self, event: "unit - switch default behavior ", callback: fun(trg: Trigger, data: EventParam). Unit - Switch default behavior)): Trigger
---@field event fun(self: self, event: "Unit - about to call the enemy ", callback: fun(trg: Trigger, data: EventParam). Unit - Imminent enemy)): Trigger
---@field event fun(self: self, event: "unit - discover target ", callback: fun(trg: Trigger, data: EventParam). Unit - Discover target)): Trigger
---@field event fun(self: self, event: "local-bone collision ", callback: fun(trg: Trigger, data: EventParam). Local - Bone collision)): Trigger
---@field event fun(self: self, event: "physical-bone collision ", callback: fun(trg: Trigger, data: EventParam). Physical - Bone collision)): Trigger
---@field event fun(self: self, event: "Unit - purchase item ", callback: fun(trg: Trigger, data: EventParam). Unit - Purchase item)): Trigger
---@field event fun(self: self, event: "unit - purchase unit ", callback: fun(trg: Trigger, data: EventParam). Unit - Purchase unit)): Trigger
---@field event fun(self: self, event: "Unit - item for sale ", callback: fun(trg: Trigger, data: EventParam). Unit - Item for sale)): Trigger
---@field event fun(self: self, event: "store-item change ", callback: fun(trg: Trigger, data: EventParam). Store - Item change)): Trigger
---@field event fun(self: self, event: "Store-inventory change ", callback: fun(trg: Trigger, data: EventParam). Store - Inventory change)): Trigger
---@field event fun(self: self, event: "Store-price change ", callback: fun(trg: Trigger, data: EventParam). Store - Price change)): Trigger
---@field event fun(self: self, event: "units-item composition ", callback: fun(trg: Trigger, data: EventParam). Unit - item composition)): Trigger
---@field event fun(self: self, event: "Units-purchase item composition ", callback: fun(trg: Trigger, data: EventParam). Unit - Purchase item synthesis)): Trigger
---@field event fun(self: self, event: "unit-resurrection ", callback: fun(trg: Trigger, data: EventParam). Unit - Resurrection)): Trigger
---@field event fun(self: self, event: "unit - upgrade ", callback: fun(trg: Trigger, data: EventParam). Unit - upgrade)): Trigger
---@field event fun(self: self, event: "Unit - into the grass ", callback: fun(trg: Trigger, data: EventParam). Unit - Into the grass)): Trigger
---@field event fun(self: self, event: "Unit - leave the grass ", callback: fun(trg: Trigger, data: EventParam. Unit - Leave the grass)): Trigger
---@field event fun(self: self, event: "unit - change ownership ", callback: fun(trg: Trigger, data: EventParam). Unit - Change ownership)): Trigger
---@field event fun(self: self, event: "Unit type - conditional ", callback: fun(trg: Trigger, data: EventParam). Unit type - Conditional)): Trigger
---@field event fun(self: self, event: "Unit type - precondition not true ", callback: fun(trg: Trigger, data: EventParam). Unit type - Precondition not true)): Trigger
---@field event fun(self: self, event: "Item type - prerequisite held ", callback: fun(trg: Trigger, data: EventParam). Item Type - precondition held)): Trigger
---@field event fun(self: self, event: "Item type - precondition not true ", callback: fun(trg: Trigger, data: EventParam). Item type - precondition not true)): Trigger
---@field event fun(self: self, event: "Skill type - prerequisite is true ", callback: fun(trg: Trigger, data: EventParam). Skill Type - preconditions held)): Trigger
---@field event fun(self: self, event: "Skill type - prerequisite not true ", callback: fun(trg: Trigger, data: EventParam). Skill type - precondition not true)): Trigger
---@field event fun(self: self, event: "Technology type - prerequisite is true ", callback: fun(trg: Trigger, data: EventParam). Tech type - Precondition held)): Trigger
---@field event fun(self: self, event: "Tech type - precondition not true ", callback: fun(trg: Trigger, data: EventParam). Tech type - Precondition not true)): Trigger
---@field event fun(self: self, event: "Skill - upgrade ", callback: fun(trg: Trigger, data: EventParam). Skills - Level up)): Trigger
---@field event fun(self: self, event: "Casting - about to begin ", callback: fun(trg: Trigger, data: EventParam). Casting - About to begin)): Trigger
---@field event fun(self: self, event: "Cast - start ", callback: fun(trg: Trigger, data: EventParam). Cast - Start)): Trigger
---@field event fun(self: self, event: "cast - boot ", callback: fun(trg: Trigger, data: EventParam). Cast - Guide)): Trigger
---@field event fun(self: self, event: "Cast - shot ", callback: fun(trg: Trigger, data: EventParam). Cast - Strike)): Trigger
---@field event fun(self: self, event: "spell-finished ", callback: fun(trg: Trigger, data: EventParam). Cast - Finished)): Trigger
---@field event fun(self: self, event: "spell-end ", callback: fun(trg: Trigger, data: EventParam). Spell - End)): Trigger
---@field event fun(self: self, event: "Cast - interrupt start ", callback: fun(trg: Trigger, data: EventParam). Cast - Interrupt start)): Trigger
---@field event fun(self: self, event: "Cast - interrupt lead ", callback: fun(trg: Trigger, data: EventParam). Cast - Interrupt lead)): Trigger
---@field event fun(self: self, event: "Cast - interrupt shot ", callback: fun(trg: Trigger, data: EventParam). Cast - Break shot)): Trigger
---@field event fun(self: self, event: "spell-stop ", callback: fun(trg: Trigger, data: EventParam). Cast - Stop)): Trigger
---@field event fun(self: self, event: "Skill - get ", callback: fun(trg: Trigger, data: EventParam). Skill - Get)): Trigger
---@field event fun(self: self, event: "Skill - loss ", callback: fun(trg: Trigger, data: EventParam). Skill - lost)): Trigger
---@field event fun(self: self, event: "Skill - exchange ", callback: fun(trg: Trigger, data: EventParam). Skill - Exchange)): Trigger
---@field event fun(self: self, event: "Skill - disabled ", callback: fun(trg: Trigger, data: EventParam). Skill - Disabled)): Trigger
---@field event fun(self: self, event: "Skill - enabled ", callback: fun(trg: Trigger, data: EventParam). Skill - Enabled)): Trigger
---@field event fun(self: self, event: "Skill - cooldown end ", callback: fun(trg: Trigger, data: EventParam). Skill - Cooldown end)): Trigger
---@field event fun(self: self, event: "Skill - Custom action axis ", string: string, callback: fun(trg: Trigger, data: EventParam). Skill - Customize animation axis)): Trigger
---@field event fun(self: self, event: "effect - get ", callback: fun(trg: Trigger, data: EventParam). Effect - Obtained)): Trigger
---@field event fun(self: self, event: "Effect - loss ", callback: fun(trg: Trigger, data: EventParam). Effect - lost)): Trigger
---@field event fun(self: self, event: "Effect - heartbeat ", callback: fun(trg: Trigger, data: EventParam). Effect - heartbeat)): Trigger
---@field event fun(self: self, event: "Effect - overlay ", callback: fun(trg: Trigger, data: EventParam). Effect - Overlay)): Trigger
---@field event fun(self: self, event: "Effect - layer change ", callback: fun(trg: Trigger, data: EventParam). Effect - layer change)): Trigger
---@field event fun(self: self, event: "Effect - about to get ", callback: fun(trg: Trigger, data: EventParam). Effect - Coming soon)): Trigger
---@field event fun(self: self, event: "effect-overlay ", callback: fun(trg: Trigger, data: EventParam). Effect - Overlay)): Trigger
---@field event fun(self: self, event: "destruction-create ", callback: fun(trg: Trigger, data: EventParam). Destructible - create)): Trigger
---@field event fun(self: self, event: "Destruction-death ", callback: fun(trg: Trigger, data: EventParam). Destructible - death)): Trigger
---@field event fun(self: self, event: "Destruction-resurrection ", callback: fun(trg: Trigger, data: EventParam). Destructible - Resurrection)): Trigger
---@field event fun(self: self, event: "Destructible - resource change ", callback: fun(trg: Trigger, data: EventParam). Destructible - Resource change)): Trigger
---@field event fun(self: self, event: "Destruction-collection ", callback: fun(trg: Trigger, data: EventParam). Destructible - collection)): Trigger
---@field event fun(self: self, event: "Destructible - damaged ", callback: fun(trg: Trigger, data: EventParam). Destructible - Takes damage)): Trigger
---@field event fun(self: self, event: "Select-Destructible ", callback: fun(trg: Trigger, data: EventParam). Check - Destructible)): Trigger
---@field event fun(self: self, event: "local-select-destructible ", callback: fun(trg: Trigger, data: EventParam). Local - checked - Destructible)): Trigger
---@field event fun(self: self, event: "Destruction-remove ", callback: fun(trg: Trigger, data: EventParam). Destructible - remove)): Trigger
---@field event fun(self: self, event: "project-create ", callback: fun(trg: Trigger, data: EventParam). Projectiles - Create)): Trigger
---@field event fun(self: self, event: "project-death ", callback: fun(trg: Trigger, data: EventParam). Projectiles - death)): Trigger
---@field event fun(self: self, event: "interface-message ", event_name: string, callback: fun(trg: Trigger, data: EventParam). Interface - Message)): Trigger
---@ field event fun (self, self, event: "players - click on the small map", the key: clicli. Const. ClickMiniMapKey | integer, the callback: fun (TRG: Trigger, data: EventParam. Player - Click on the mini-map)): Trigger
---@field event fun(self: self, event: "interface-slider change ", ui: UI, callback: fun(trg: Trigger, data: EventParam). Interface - Slider change)): Trigger
---@field event fun(self: self, event: "ui - chat box visibility change ", ui: UI, callback: fun(trg: Trigger, data: EventParam). Interface - Chat box visibility changes)): Trigger
---@field event fun(self: self, event: "interface - device drag ", ui: UI, callback: fun(trg: Trigger, data: EventParam). Interface - Equipment Drag)): Trigger
---@field event fun(self: self, event: "interface - check box change ", ui: UI, callback: fun(trg: Trigger, data: EventParam). Interface - Check box changes)): Trigger
---@field event fun(self: self, event: "ui - video play completed ", ui: UI, callback: fun(trg: Trigger, data: EventParam). Screen - Video playback completed)): Trigger
---@field event fun(self: self, event: "local-interface-input field gets focus ", ui: UI, callback: fun(trg: Trigger, data: EventParam). Local-interface-input box gets focus)): Trigger
---@field event fun(self: self, event: "local-interface-input field out of focus ", ui: UI, callback: fun(trg: Trigger, data: EventParam). Local-interface-input box out of focus)): Trigger
---@field event fun(self: self, event: "Local - interface - input field content change ", ui: UI, callback: fun(trg: Trigger, data: EventParam). Local - Interface - Input box content change)): Trigger
---@field event fun(self: self, event: "keyboard-press ", key: clicli.Const.KeyboardKey|integer, callback: fun(trg: Trigger, data: EventParam. Keyboard - press)): Trigger
---@field event fun(self: self, event: "keyboard-lift ", key: clicli.Const.KeyboardKey|integer, callback: fun(trg: Trigger, data: EventParam. Keyboard - lift)): Trigger
---@field event fun(self: self, event: "local-keyboard-press ", key: clicli.Const.KeyboardKey|integer, callback: fun(trg: Trigger, data: EventParam. Local - Keyboard - Press)): Trigger
---@field event fun(self: self, event: "local-keyboard-lift ", key: clicli.Const.KeyboardKey|integer, callback: fun(trg: Trigger, data: EventParam. Local - Keyboard - Lift)): Trigger
---@field event fun(self: self, event: "mouse-press ", key: clicli.Const.MouseKey|integer, callback: fun(trg: Trigger, data: EventParam. Mouse - press)): Trigger
---@field event fun(self: self, event: "mouse-lift ", key: clicli.Const.MouseKey|integer, callback: fun(trg: Trigger, data: EventParam. Mouse - lift)): Trigger
---@field event fun(self: self, event: "mouse-double-click ", key: clicli.Const.MouseKey|integer, callback: fun(trg: Trigger, data: EventParam. Mouse - double click)): Trigger
---@field event fun(self: self, event: "locale-mouse-press ", key: clicli.Const.MouseKey|integer, callback: fun(trg: Trigger, data: EventParam. Local - Mouse - press)): Trigger
---@field event fun(self: self, event: "local-mouse-lift ", key: clicli.Const.MouseKey|integer, callback: fun(trg: Trigger, data: EventParam. Local - Mouse - lift)): Trigger
---@field event fun(self: self, event: "local-mouse-double-click ", key: clicli.Const.MouseKey|integer, callback: fun(trg: Trigger, data: EventParam. Local - mouse - double-click)): Trigger
---@field event fun(self: self, event: "mouse-press the unit ", key: clicli.Const.MouseKey|integer, callback: fun(trg: Trigger, data: EventParam. Mouse - press the unit)): Trigger
---@field event fun(self: self, event: "mouse-lift unit ", key: clicli.Const.MouseKey|integer, callback: fun(trg: Trigger, data: EventParam. Mouse - lift unit)): Trigger
---@field event fun(self: self, event: "mouse-double-click unit ", key: clicli.Const.MouseKey|integer, callback: fun(trg: Trigger, data: EventParam. Mouse - double click unit)): Trigger
---@field event fun(self: self, event: "local - mouse - press unit ", key: clicli.Const.MouseKey|integer, callback: fun(trg: Trigger, data: EventParam. Local - Mouse - press unit)): Trigger
---@field event fun(self: self, event: "local-mouse-lift unit ", key: clicli.Const.MouseKey|integer, callback: fun(trg: Trigger, data: EventParam. Local - mouse - lift unit)): Trigger
---@field event fun(self: self, event: "local-mouse-double-click unit ", key: clicli.Const.MouseKey|integer, callback: fun(trg: Trigger, data: EventParam. Local - Mouse - Double click unit)): Trigger
---@field event fun(self: self, event: "mouse-move ", callback: fun(trg: Trigger, data: EventParam). Mouse - move)): Trigger
---@field event fun(self: self, event: "local-mouse-move ", callback: fun(trg: Trigger, data: EventParam). Local - Mouse - Move)): Trigger
---@field event fun(self: self, event: "mouse-wheel ", key: clicli.Const.MouseKey|integer, callback: fun(trg: Trigger, data: EventParam. Mouse - wheel)): Trigger
---@field event fun(self: self, event: "local-mouse-wheel ", key: clicli.Const.MouseKey|integer, callback: fun(trg: Trigger, data: EventParam. Local - mouse - wheel)): Trigger
---@field event fun(self: self, event: "select-unit ", callback: fun(trg: Trigger, data: EventParam). Select - unit)): Trigger
---@field event fun(self: self, event: "local-select-unit ", callback: fun(trg: Trigger, data: EventParam). Local - Checked - unit)): Trigger
---@field event fun(self: self, event: "Select-cancel ", callback: fun(trg: Trigger, data: EventParam). Check - cancel)): Trigger
---@field event fun(self: self, event: "local-select-cancel ", callback: fun(trg: Trigger, data: EventParam). Local - Check - cancel)): Trigger
---@field event fun(self: self, event: "Select-lose unit ", callback: fun(trg: Trigger, data: EventParam). Check - lose units)): Trigger
---@field event fun(self: self, event: "local-select-lose unit ", callback: fun(trg: Trigger, data: EventParam). Local - Selected - lost unit)): Trigger
---@field event fun(self: self, event: "Select-item ", callback: fun(trg: Trigger, data: EventParam). Check - item)): Trigger
---@field event fun(self: self, event: "local-select-item ", callback: fun(trg: Trigger, data: EventParam). Local - Select - Item)): Trigger
---@field event fun(self: self, event: "Player - Cheating detected ", callback: fun(trg: Trigger, data: EventParam). Player - Cheating detected)): Trigger
---@field event fun(self: self, event: "Mouse - double click item ", callback: fun(trg: Trigger, data: EventParam). Mouse - double click the item)): Trigger
---@field event fun(self: self, event: "mouse-double-click destructible ", callback: fun(trg: Trigger, data: EventParam). Mouse - Double click Destructible)): Trigger
---@field event fun(self: self, event: "Select -unit group ", callback: fun(trg: Trigger, data: EventParam). Select -Unit group)): Trigger
---@field event fun(self: self, event: "local-select-unit group ", callback: fun(trg: Trigger, data: EventParam). Local - Selected - Unit group)): Trigger
---@field event fun(self: self, event: "Skill - open indicator ", callback: fun(trg: Trigger, data: EventParam). Skill - Turn on indicator)): Trigger
---@field event fun(self: self, event: "Skill - Build skill before release ", callback: fun(trg: Trigger, data: EventParam). Skills - Build skills before releasing)): Trigger
---@field event fun(self: self, event: "Skill - close indicator ", callback: fun(trg: Trigger, data: EventParam). Skill - Off indicator)): Trigger
---@field event fun(self: self, event: "item-get ", callback: fun(trg: Trigger, data: EventParam). Item - Get)): Trigger
---@field event fun(self: self, event: "Item - Enter inventory ", callback: fun(trg: Trigger, data: EventParam). Item - Enter Item bar)): Trigger
---@field event fun(self: self, event: "Item - Enter backpack ", callback: fun(trg: Trigger, data: EventParam). Item - Enter backpack)): Trigger
---@field event fun(self: self, event: "item-lose ", callback: fun(trg: Trigger, data: EventParam). Item - lost)): Trigger
---@field event fun(self: self, event: "Item - leaving inventory ", callback: fun(trg: Trigger, data: EventParam). Item - Leave inventory)): Trigger
---@field event fun(self: self, event: "Item - leave backpack ", callback: fun(trg: Trigger, data: EventParam). Item - Leave backpack)): Trigger
---@field event fun(self: self, event: "item-use ", callback: fun(trg: Trigger, data: EventParam). Item - Use)): Trigger
---@field event fun(self: self, event: "unit - Pathfinding starts ", callback: fun(trg: Trigger, data: EventParam). Unit - Pathfinding starts)): Trigger
---@field event fun(self: self, event: "unit - end of pathfinding ", callback: fun(trg: Trigger, data: EventParam). Unit - End of pathfinding)): Trigger
---@field event fun(self: self, event: "item-stack change ", callback: fun(trg: Trigger, data: EventParam). Item - Stack change)): Trigger
---@field event fun(self: self, event: "Item-charge change ", callback: fun(trg: Trigger, data: EventParam). Item - Charge change)): Trigger
---@field event fun(self: self, event: "item-create ", callback: fun(trg: Trigger, data: EventParam). Item - Created)): Trigger
---@field event fun(self: self, event: "item-remove ", callback: fun(trg: Trigger, data: EventParam). Item - Removed)): Trigger
---@field event fun(self: self, event: "Items-for-sale ", callback: fun(trg: Trigger, data: EventParam). Item - for sale)): Trigger
---@field event fun(self: self, event: "item-death ", callback: fun(trg: Trigger, data: EventParam). Item - Death)): Trigger
---@field event fun(self: self, event: "Item-collection creation ", callback: fun(trg: Trigger, data: EventParam). Item - Collection Creation)): Trigger
---@field event fun(self: self, event: "command-attack move ", callback: fun(trg: Trigger, data: EventParam). Command - Attack Move)): Trigger
---@field event fun(self: self, event: "Command - sell item ", callback: fun(trg: Trigger, data: EventParam). Command - Sell items)): Trigger
---@field event fun(self: self, event: "command - cast skill ", callback: fun(trg: Trigger, data: EventParam). Command - Cast skill)): Trigger
---@field event fun(self: self, event: "command-patrol ", callback: fun(trg: Trigger, data: EventParam). Command - Patrol)): Trigger
---@field event fun(self: self, event: "command-move ", callback: fun(trg: Trigger, data: EventParam). Command - Move)): Trigger
---@field event fun(self: self, event: "mouse-hover ", callback: fun(trg: Trigger, data: EventParam). Mouse - hover)): Trigger
---@field event fun(self: self, event: "local-mouse-hover ", callback: fun(trg: Trigger, data: EventParam). Local - Mouse - hover)): Trigger
---@field event fun(self: self, event: "Player - send message ", callback: fun(trg: Trigger, data: EventParam). Player - Send message)): Trigger
---@field event fun(self: self, event: "game-message ", event_id: integer, callback: fun(trg: Trigger, data: EventParam. Game - message)): Trigger
---@field event fun(self: self, event: "Player - voice speak ", callback: fun(trg: Trigger, data: EventParam). Player - Voice speak)): Trigger
---@field event fun(self: self, event: "Player-platform item change ", callback: fun(trg: Trigger, data: EventParam). Player - platform item change)): Trigger
---@field event fun(self: self, event: "Player-platform mall window changes ", callback: fun(trg: Trigger, data: EventParam). Player - Platform mall window changes)): Trigger
---@field event fun(self: self, event: "console-input ", callback: fun(trg: Trigger, data: EventParam). Console - input)): Trigger
---@field event fun(self: self, event: "console-request completion ", callback: fun(trg: Trigger, data: EventParam). Console - Request completion)): Trigger
---@field event fun(self: self, event: "steam- Received friend request ", callback: fun(trg: Trigger, data: EventParam.steam- Received friend request)): Trigger
---@field event fun(self: self, event: "steam- received deleted by friends ", callback: fun(trg: Trigger, data: EventParam.steam- Received deleted by friends)): Trigger
---@field event fun(self: self, event: "steam- Friend online status change ", callback: fun(trg: Trigger, data: EventParam.steam- Friend online status change)): Trigger
---@field event fun(self: self, event: "steam- Local player team changes ", callback: fun(trg: Trigger, data: EventParam.steam- Local player team changes)): Trigger
---@field event fun(self: self, event: "steam- Received team invitation ", callback: fun(trg: Trigger, data: EventParam.steam- Received team invitation)): Trigger
---@field event fun(self: self, event: "steam- into the hall ", callback: fun(trg: Trigger, data: EventParam.steam- into the hall)): Trigger
---@field event fun(self: self, event: "steam- start matching ", callback: fun(trg: Trigger, data: EventParam.steam- Start matching)): Trigger
---@field event fun(self: self, event: "steam- cancel match ", callback: fun(trg: Trigger, data: EventParam.steam- cancel match)): Trigger
---@field event fun(self: self, event: "steam- local room information changes ", callback: fun(trg: Trigger, data: EventParam.steam- local room information changes)): Trigger
---@field event fun(self: self, event: "steam- invited to the room ", callback: fun(trg: Trigger, data: EventParam.steam- invited to the room)): Trigger
---@field event fun(self: self, event: "steam- kicked out of room ", callback: fun(trg: Trigger, data: EventParam.steam- kicked out of room)): Trigger
---@field event fun(self: self, event: "steam- room created successfully ", callback: fun(trg: Trigger, data: EventParam.steam- Room created successfully)): Trigger

---@class Ability
---@field event fun(self: Ability, event: "Skill - build completed ", callback: fun(trg: Trigger, data: EventParam). Skill - Build completed)): Trigger
---@field event fun(self: Ability, event: "Skill - learning ", callback: fun(trg: Trigger, data: EventParam). Skills - Learning)): Trigger
---@field event fun(self: Ability, event: "Skills-availability status change ", callback: fun(trg: Trigger, data: EventParam). Skills - Available status changes)): Trigger
---@field event fun(self: Ability, event: "Skills-silence status change ", callback: fun(trg: Trigger, data: EventParam). Skill - Silent state change)): Trigger
---@field event fun(self: Ability, event: "Skill - upgrade ", callback: fun(trg: Trigger, data: EventParam). Skills - Level up)): Trigger
---@field event fun(self: Ability, event: "Casting - about to begin ", callback: fun(trg: Trigger, data: EventParam). Casting - About to begin)): Trigger
---@field event fun(self: Ability, event: "Cast - start ", callback: fun(trg: Trigger, data: EventParam). Cast - Start)): Trigger
---@field event fun(self: Ability, event: "cast - lead ", callback: fun(trg: Trigger, data: EventParam). Cast - Guide)): Trigger
---@field event fun(self: Ability, event: "Cast - shot ", callback: fun(trg: Trigger, data: EventParam). Cast - Strike)): Trigger
---@field event fun(self: Ability, event: "spell-finish ", callback: fun(trg: Trigger, data: EventParam). Cast - Finished)): Trigger
---@field event fun(self: Ability, event: "spell-end ", callback: fun(trg: Trigger, data: EventParam). Spell - End)): Trigger
---@field event fun(self: Ability, event: "Cast - interrupt start ", callback: fun(trg: Trigger, data: EventParam). Cast - Interrupt start)): Trigger
---@field event fun(self: Ability, event: "Cast - interrupt lead ", callback: fun(trg: Trigger, data: EventParam). Cast - Interrupt lead)): Trigger
---@field event fun(self: Ability, event: "Cast - interrupt shot ", callback: fun(trg: Trigger, data: EventParam). Cast - Break shot)): Trigger
---@field event fun(self: Ability, event: "spell-stop ", callback: fun(trg: Trigger, data: EventParam). Cast - Stop)): Trigger
---@field event fun(self: Ability, event: "Skill - acquire ", callback: fun(trg: Trigger, data: EventParam). Skill - Get)): Trigger
---@field event fun(self: Ability, event: "Skill - loss ", callback: fun(trg: Trigger, data: EventParam). Skill - lost)): Trigger
---@field event fun(self: Ability, event: "Skills-exchange ", callback: fun(trg: Trigger, data: EventParam). Skill - Exchange)): Trigger
---@field event fun(self: Ability, event: "Skills-disabled ", callback: fun(trg: Trigger, data: EventParam). Skill - Disabled)): Trigger
---@field event fun(self: Ability, event: "Skills-enabled ", callback: fun(trg: Trigger, data: EventParam). Skill - Enabled)): Trigger
---@field event fun(self: Ability, event: "Skill - cooldown end ", callback: fun(trg: Trigger, data: EventParam). Skill - Cooldown end)): Trigger
---@field event fun(self: Ability, event: "Skill - Custom animation axis ", string: string, callback: fun(trg: Trigger, data: EventParam). Skill - Customize animation axis)): Trigger
---@field event fun(self: Ability, event: "Skill - open indicator ", callback: fun(trg: Trigger, data: EventParam). Skill - Turn on indicator)): Trigger
---@field event fun(self: Ability, event: "Skill - Build skill before release ", callback: fun(trg: Trigger, data: EventParam). Skills - Build skills before releasing)): Trigger
---@field event fun(self: Ability, event: "Skill - close indicator ", callback: fun(trg: Trigger, data: EventParam). Skill - Off indicator)): Trigger

---@class Area
---@field event fun(self: Area, event: "area-enter ", callback: fun(trg: Trigger, data: EventParam). Zone - Enter)): Trigger
---@field event fun(self: Area, event: "area-leave ", callback: fun(trg: Trigger, data: EventParam). Zone - Leave)): Trigger

---@class Buff
---@field event fun(self: Buff, event: "effect - get ", callback: fun(trg: Trigger, data: EventParam). Effect - Obtained)): Trigger
---@field event fun(self: Buff, event: "Effect - loss ", callback: fun(trg: Trigger, data: EventParam). Effect - lost)): Trigger
---@field event fun(self: Buff, event: "Effect - heartbeat ", callback: fun(trg: Trigger, data: EventParam). Effect - heartbeat)): Trigger
---@field event fun(self: Buff, event: "Effect - overlay ", callback: fun(trg: Trigger, data: EventParam). Effect - Overlay)): Trigger
---@field event fun(self: Buff, event: "Effect - layer change ", callback: fun(trg: Trigger, data: EventParam). Effect - layer change)): Trigger
---@field event fun(self: Buff, event: "Effect - coming soon ", callback: fun(trg: Trigger, data: EventParam). Effect - Coming soon)): Trigger
---@field event fun(self: Buff, event: "effect - override ", callback: fun(trg: Trigger, data: EventParam). Effect - Overlay)): Trigger

---@class Destructible
---@field event fun(self: Destructible, event: "destructible - create ", callback: fun(trg: Trigger, data: EventParam). Destructible - create)): Trigger
---@field event fun(self: Destructible, event: "destructible, death ", callback: fun(trg: Trigger, data: EventParam. Destructible - death)): Trigger
---@field event fun(self: Destructible, event: "Destructible," callback: fun(trg: Trigger, data: EventParam). Destructible - Resurrection)): Trigger
---@field event fun(self: Destructible, event: "destructible, resource change ", callback: fun(trg: Trigger, data: EventParam). Destructible - Resource change)): Trigger
---@field event fun(self: Destructible, event: "destructible, collection ", callback: fun(trg: Trigger, data: EventParam). Destructible - collection)): Trigger
---@field event fun(self: Destructible, event: "Destructible ", callback: fun(trg: Trigger, data: EventParam). Destructible - Takes damage)): Trigger
---@field event fun(self: Destructible, event: "Destructible - remove ", callback: fun(trg: Trigger, data: EventParam). Destructible - remove)): Trigger

---@class Item
---@field event fun(self: Item, event: "item-get ", callback: fun(trg: Trigger, data: EventParam). Item - Get)): Trigger
---@field event fun(self: Item, event: "Item - Enter item ", callback: fun(trg: Trigger, data: EventParam). Item - Enter Item bar)): Trigger
---@field event fun(self: Item, event: "Item - Enter backpack ", callback: fun(trg: Trigger, data: EventParam). Item - Enter backpack)): Trigger
---@field event fun(self: Item, event: "item-lose ", callback: fun(trg: Trigger, data: EventParam). Item - lost)): Trigger
---@field event fun(self: Item, event: "Item - leaving the inventory ", callback: fun(trg: Trigger, data: EventParam). Item - Leave inventory)): Trigger
---@field event fun(self: Item, event: "Item - leave backpack ", callback: fun(trg: Trigger, data: EventParam). Item - Leave backpack)): Trigger
---@field event fun(self: Item, event: "item-use ", callback: fun(trg: Trigger, data: EventParam). Item - Use)): Trigger
---@field event fun(self: Item, event: "item-stack change ", callback: fun(trg: Trigger, data: EventParam). Item - Stack change)): Trigger
---@field event fun(self: Item, event: "item-charge change ", callback: fun(trg: Trigger, data: EventParam). Item - Charge change)): Trigger
---@field event fun(self: Item, event: "item-create ", callback: fun(trg: Trigger, data: EventParam). Item - Created)): Trigger
---@field event fun(self: Item, event: "item-remove ", callback: fun(trg: Trigger, data: EventParam). Item - Removed)): Trigger
---@field event fun(self: Item, event: "item-sale ", callback: fun(trg: Trigger, data: EventParam). Item - for sale)): Trigger
---@field event fun(self: Item, event: "item-death ", callback: fun(trg: Trigger, data: EventParam). Item - Death)): Trigger
---@field event fun(self: Item, event: "Item - collection creation ", callback: fun(trg: Trigger, data: EventParam). Item - Collection Creation)): Trigger

---@class Player
---@field event fun(self: Player, event: "Player - join game ", callback: fun(trg: Trigger, data: EventParam). Player - Join the game)): Trigger
---@field event fun(self: Player, event: "Player - leaving game ", callback: fun(trg: Trigger, data: EventParam). Player - Leave the game)): Trigger
---@field event fun(self: Player, event: "player-dropped ", callback: fun(trg: Trigger, data: EventParam). Player - dropped)): Trigger
---@field event fun(self: Player, event: "Player - use platform item ", callback: fun(trg: Trigger, data: EventParam). Player - using platform items)): Trigger
---@field event fun(self: Player, event: "Player - holding platform item ", callback: fun(trg: Trigger, data: EventParam). Player - holding a platform item)): Trigger
---@field event fun(self: Player, event: "player-attribute change ", callback: fun(trg: Trigger, data: EventParam). Player - Attribute change)): Trigger
---@field event fun(self: Player, event: "Player - send specified message ", msg: string, callback: fun(trg: Trigger, data: EventParam). Player - send specified message)): Trigger
---@field event fun(self: Player, event: "Player - tech boost ", callback: fun(trg: Trigger, data: EventParam). Player - Tech boost)): Trigger
---@field event fun(self: Player, event: "Player - tech down ", callback: fun(trg: Trigger, data: EventParam). Player - Tech reduced)): Trigger
---@field event fun(self: Player, event: "Player-tech change ", callback: fun(trg: Trigger, data: EventParam). Player - Technology change)): Trigger
---@field event fun(self: Player, event: "Player-relationship change ", callback: fun(trg: Trigger, data: EventParam). Player - Relationship change)): Trigger
---@field event fun(self: Player, event: "player-reconnection ", callback: fun(trg: Trigger, data: EventParam). Player - reconnect)): Trigger
---@field event fun(self: Player, event: "Select-Destructible ", callback: fun(trg: Trigger, data: EventParam). Check - Destructible)): Trigger
---@field event fun(self: Player, event: "local-select-destructible ", callback: fun(trg: Trigger, data: EventParam). Local - checked - Destructible)): Trigger
---@field event fun(self: Player, event: "interface-message ", event_name: string, callback: fun(trg: Trigger, data: EventParam). Interface - Message)): Trigger
---@ field event fun (self: Player, event: "players - click on the small map", the key: clicli. Const. ClickMiniMapKey | integer, the callback: fun (TRG: Trigger, data: EventParam. Player - Click on the mini-map)): Trigger
---@field event fun(self: Player, event: "interface-slider change ", ui: UI, callback: fun(trg: Trigger, data: EventParam). Interface - Slider change)): Trigger
---@field event fun(self: Player, event: "ui - chat box visibility change ", ui: UI, callback: fun(trg: Trigger, data: EventParam). Interface - Chat box visibility changes)): Trigger
---@field event fun(self: Player, event: "interface-device drag ", ui: UI, callback: fun(trg: Trigger, data: EventParam). Interface - Equipment Drag)): Trigger
---@field event fun(self: Player, event: "interface - check box change ", ui: UI, callback: fun(trg: Trigger, data: EventParam). Interface - Check box changes)): Trigger
---@field event fun(self: Player, event: "ui - video play completed ", ui: UI, callback: fun(trg: Trigger, data: EventParam). Screen - Video playback completed)): Trigger
---@field event fun(self: Player, event: "Local-interface-input field gets focus ", ui: UI, callback: fun(trg: Trigger, data: EventParam). Local-interface-input box gets focus)): Trigger
---@field event fun(self: Player, event: "local-interface-input field out of focus ", ui: UI, callback: fun(trg: Trigger, data: EventParam). Local-interface-input box out of focus)): Trigger
---@field event fun(self: Player, event: "local-interface-input field content change ", ui: UI, callback: fun(trg: Trigger, data: EventParam). Local - Interface - Input box content change)): Trigger
---@field event fun(self: Player, event: "keyboard-press ", key: clicli.Const.KeyboardKey|integer, callback: fun(trg: Trigger, data: EventParam. Keyboard - press)): Trigger
---@field event fun(self: Player, event: "keyboard-lift ", key: clicli.Const.KeyboardKey|integer, callback: fun(trg: Trigger, data: EventParam. Keyboard - lift)): Trigger
---@field event fun(self: Player, event: "local-keyboard-press ", key: clicli.Const.KeyboardKey|integer, callback: fun(trg: Trigger, data: EventParam. Local - Keyboard - Press)): Trigger
---@field event fun(self: Player, event: "local-keyboard-lift ", key: clicli.Const.KeyboardKey|integer, callback: fun(trg: Trigger, data: EventParam. Local - Keyboard - Lift)): Trigger
---@field event fun(self: Player, event: "mouse-press ", key: clicli.Const.MouseKey|integer, callback: fun(trg: Trigger, data: EventParam. Mouse - press)): Trigger
---@field event fun(self: Player, event: "mouse-lift ", key: clicli.Const.MouseKey|integer, callback: fun(trg: Trigger, data: EventParam. Mouse - lift)): Trigger
---@field event fun(self: Player, event: "mouse-double-click ", key: clicli.Const.MouseKey|integer, callback: fun(trg: Trigger, data: EventParam. Mouse - double click)): Trigger
---@field event fun(self: Player, event: "local-mouse-press ", key: clicli.Const.MouseKey|integer, callback: fun(trg: Trigger, data: EventParam. Local - Mouse - press)): Trigger
---@field event fun(self: Player, event: "local-mouse-lift ", key: clicli.Const.MouseKey|integer, callback: fun(trg: Trigger, data: EventParam. Local - Mouse - lift)): Trigger
---@field event fun(self: Player, event: "local-mouse-double-click ", key: clicli.Const.MouseKey|integer, callback: fun(trg: Trigger, data: EventParam. Local - mouse - double-click)): Trigger
---@field event fun(self: Player, event: "mouse-press the unit ", key: clicli.Const.MouseKey|integer, callback: fun(trg: Trigger, data: EventParam. Mouse - press the unit)): Trigger
---@field event fun(self: Player, event: "mouse-lift unit ", key: clicli.Const.MouseKey|integer, callback: fun(trg: Trigger, data: EventParam. Mouse - lift unit)): Trigger
---@field event fun(self: Player, event: "mouse-double-click unit ", key: clicli.Const.MouseKey|integer, callback: fun(trg: Trigger, data: EventParam. Mouse - double click unit)): Trigger
---@field event fun(self: Player, event: "local - mouse - press unit ", key: clicli.Const.MouseKey|integer, callback: fun(trg: Trigger, data: EventParam. Local - Mouse - press unit)): Trigger
---@field event fun(self: Player, event: "local-mouse-lift unit ", key: clicli.Const.MouseKey|integer, callback: fun(trg: Trigger, data: EventParam. Local - mouse - lift unit)): Trigger
---@field event fun(self: Player, event: "Local - mouse - double click unit ", key: clicli.Const.MouseKey|integer, callback: fun(trg: Trigger, data: EventParam. Local - Mouse - Double click unit)): Trigger
---@field event fun(self: Player, event: "mouse-move ", callback: fun(trg: Trigger, data: EventParam). Mouse - move)): Trigger
---@field event fun(self: Player, event: "local-mouse-move ", callback: fun(trg: Trigger, data: EventParam). Local - Mouse - Move)): Trigger
---@field event fun(self: Player, event: "mouse-wheel ", key: clicli.Const.MouseKey|integer, callback: fun(trg: Trigger, data: EventParam. Mouse - wheel)): Trigger
---@field event fun(self: Player, event: "local-mouse-wheel ", key: clicli.Const.MouseKey|integer, callback: fun(trg: Trigger, data: EventParam. Local - mouse - wheel)): Trigger
---@field event fun(self: Player, event: "Select-unit ", callback: fun(trg: Trigger, data: EventParam). Select - unit)): Trigger
---@field event fun(self: Player, event: "local-select-unit ", callback: fun(trg: Trigger, data: EventParam). Local - Checked - unit)): Trigger
---@field event fun(self: Player, event: "Select-cancel ", callback: fun(trg: Trigger, data: EventParam). Check - cancel)): Trigger
---@field event fun(self: Player, event: "local-select-cancel ", callback: fun(trg: Trigger, data: EventParam). Local - Check - cancel)): Trigger
---@field event fun(self: Player, event: "Select-lose unit ", callback: fun(trg: Trigger, data: EventParam). Check - lose units)): Trigger
---@field event fun(self: Player, event: "local-select-lose unit ", callback: fun(trg: Trigger, data: EventParam). Local - Selected - lost unit)): Trigger
---@field event fun(self: Player, event: "Select-item ", callback: fun(trg: Trigger, data: EventParam). Check - item)): Trigger
---@field event fun(self: Player, event: "local-select-item ", callback: fun(trg: Trigger, data: EventParam). Local - Select - Item)): Trigger
---@field event fun(self: Player, event: "Player - Cheating detected ", callback: fun(trg: Trigger, data: EventParam). Player - Cheating detected)): Trigger
---@field event fun(self: Player, event: "mouse-double-click item ", callback: fun(trg: Trigger, data: EventParam). Mouse - double click the item)): Trigger
---@field event fun(self: Player, event: "mouse-double-click destructible ", callback: fun(trg: Trigger, data: EventParam). Mouse - Double click Destructible)): Trigger
---@field event fun(self: Player, event: "Select -unit group ", callback: fun(trg: Trigger, data: EventParam). Select -Unit group)): Trigger
---@field event fun(self: Player, event: "local-select-unit group ", callback: fun(trg: Trigger, data: EventParam). Local - Selected - Unit group)): Trigger
---@field event fun(self: Player, event: "mouse-hover ", callback: fun(trg: Trigger, data: EventParam). Mouse - hover)): Trigger
---@field event fun(self: Player, event: "local-mouse-hover ", callback: fun(trg: Trigger, data: EventParam). Local - Mouse - hover)): Trigger
---@field event fun(self: Player, event: "Player - send message ", callback: fun(trg: Trigger, data: EventParam). Player - Send message)): Trigger
---@field event fun(self: Player, event: "player-voice speech ", callback: fun(trg: Trigger, data: EventParam). Player - Voice speak)): Trigger
---@field event fun(self: Player, event: "Player-platform item change ", callback: fun(trg: Trigger, data: EventParam). Player - platform item change)): Trigger
---@field event fun(self: Player, event: "Player-platform mall window changes ", callback: fun(trg: Trigger, data: EventParam). Player - Platform mall window changes)): Trigger

---@class Projectile
---@field event fun(self: Projectile, event: "projectile-create ", callback: fun(trg: Trigger, data: EventParam). Projectiles - Create)): Trigger
---@field event fun(self: Projectile, event: "projectile-death ", callback: fun(trg: Trigger, data: EventParam). Projectiles - death)): Trigger

---@class Unit
---@field event fun(self: Unit, event: "Unit - R&D technology ", callback: fun(trg: Trigger, data: EventParam). Unit - Research and development technology)): Trigger
---@field event fun(self: Unit, event: "unit - get tech ", callback: fun(trg: Trigger, data: EventParam). Unit - Get Tech)): Trigger
---@field event fun(self: Unit, event: "unit-lost tech ", callback: fun(trg: Trigger, data: EventParam). Unit - Lost tech)): Trigger
---@field event fun(self: Unit, event: "Unit-building upgrade starts ", callback: fun(trg: Trigger, data: EventParam). Unit - Building upgrade starts)): Trigger
---@field event fun(self: Unit, event: "Unit-building upgrade cancelled ", callback: fun(trg: Trigger, data: EventParam). Unit - Building upgrade cancelled)): Trigger
---@field event fun(self: Unit, event: "Unit-building upgrade completed ", callback: fun(trg: Trigger, data: EventParam). Unit - Building upgrade completed)): Trigger
---@field event fun(self: Unit, event: "Units-build starts ", callback: fun(trg: Trigger, data: EventParam). Unit - Build starts)): Trigger
---@field event fun(self: Unit, event: "unit-build cancel ", callback: fun(trg: Trigger, data: EventParam). Unit - Build cancelled)): Trigger
---@field event fun(self: Unit, event: "Units-build completed ", callback: fun(trg: Trigger, data: EventParam). Unit - Built)): Trigger
---@field event fun(self: Unit, event: "Skill - build completed ", callback: fun(trg: Trigger, data: EventParam). Skill - Build completed)): Trigger
---@field event fun(self: Unit, event: "Skill - learning ", callback: fun(trg: Trigger, data: EventParam). Skills - Learning)): Trigger
---@field event fun(self: Unit, event: "Skills-availability status change ", callback: fun(trg: Trigger, data: EventParam). Skills - Available status changes)): Trigger
---@field event fun(self: Unit, event: "Skills-silence status change ", callback: fun(trg: Trigger, data: EventParam). Skill - Silent state change)): Trigger
---@field event fun(self: Unit, event: "unit-name change ", callback: fun(trg: Trigger, data: EventParam). Unit - Name change)): Trigger
---@field event fun(self: Unit, event: "unit-minimap icon change ", callback: fun(trg: Trigger, data: EventParam). Unit - minimap icon change)): Trigger
---@field event fun(self: Unit, event: "unit-avatar change ", callback: fun(trg: Trigger, data: EventParam). Unit - Avatar change)): Trigger
---@field event fun(self: Unit, event: "unit-remove ", callback: fun(trg: Trigger, data: EventParam). Unit - remove)): Trigger
---@field event fun(self: Unit, event: "Unit - after removal ", callback: fun(trg: Trigger, data: EventParam). Unit - after removal)): Trigger
---@field event fun(self: Unit, event: "unit-end of transfer ", callback: fun(trg: Trigger, data: EventParam). Unit - End of transfer)): Trigger
---@field event fun(self: Unit, event: "unit-attribute change ", attr: string, callback: fun(trg: Trigger, data: EventParam). Unit - Attribute change)): Trigger
---@field event fun(self: Unit, event: "Unit - dying ", callback: fun(trg: Trigger, data: EventParam). Unit - About to die)): Trigger
---@field event fun(self: Unit, event: "unit-death ", callback: fun(trg: Trigger, data: EventParam). Unit - death)): Trigger
---@field event fun(self: Unit, event: "unit - before taking damage ", callback: fun(trg: Trigger, data: EventParam). Unit - Before taking damage)): Trigger
---@field event fun(self: Unit, event: "unit - before doing damage ", callback: fun(trg: Trigger, data: EventParam). Unit - Before dealing damage)): Trigger
---@field event fun(self: Unit, event: "unit - when damaged ", callback: fun(trg: Trigger, data: EventParam). Unit - When taking damage)): Trigger
---@field event fun(self: Unit, event: "when the unit deals damage ", callback: fun(trg: Trigger, data: EventParam). Unit - When dealing damage)): Trigger
---@field event fun(self: Unit, event: "after dealing damage ", callback: fun(trg: Trigger, data: EventParam). Unit - After dealing damage)): Trigger
---@field event fun(self: Unit, event: "Unit - after taking damage ", callback: fun(trg: Trigger, data: EventParam). Unit - After taking damage)): Trigger
---@field event fun(self: Unit, event: "Unit - before treatment ", callback: fun(trg: Trigger, data: EventParam). Unit - Before receiving treatment)): Trigger
---@field event fun(self: Unit, event: "Unit - after healing ", callback: fun(trg: Trigger, data: EventParam). Unit - after being healed)): Trigger
---@field event fun(self: Unit, event: "Unit - when healed ", callback: fun(trg: Trigger, data: EventParam). Unit - when treated)): Trigger
---@field event fun(self: Unit, event: "unit-cast skill ", callback: fun(trg: Trigger, data: EventParam). Unit - Cast skill)): Trigger
---@field event fun(self: Unit, event: "Unit - before experience ", callback: fun(trg: Trigger, data: EventParam. Unit - Before gaining experience)): Trigger
---@field event fun(self: Unit, event: "Unit - after experience ", callback: fun(trg: Trigger, data: EventParam. Unit - After gaining experience)): Trigger
---@field event fun(self: Unit, event: "unit-receive command ", callback: fun(trg: Trigger, data: EventParam). Unit - Receive command)): Trigger
---@field event fun(self: Unit, event: "unit-kill ", callback: fun(trg: Trigger, data: EventParam). Unit - Kill)): Trigger
---@field event fun(self: Unit, event: "unit-create ", callback: fun(trg: Trigger, data: EventParam). Unit - create)): Trigger
---@field event fun(self: Unit, event: "Unit - into battle ", callback: fun(trg: Trigger, data: EventParam). Unit - Enter battle)): Trigger
---@field event fun(self: Unit, event: "Unit - out of battle ", callback: fun(trg: Trigger, data: EventParam). Unit - Out of combat)): Trigger
---@field event fun(self: Unit, event: "Unit - about to pick up item ", callback: fun(trg: Trigger, data: EventParam). Unit - About to pick up item)): Trigger
---@field event fun(self: Unit, event: "unit-switch default behavior ", callback: fun(trg: Trigger, data: EventParam). Unit - Switch default behavior)): Trigger
---@field event fun(self: Unit, event: "Unit - about to call the enemy ", callback: fun(trg: Trigger, data: EventParam. Unit - Imminent enemy)): Trigger
---@field event fun(self: Unit, event: "unit-discover target ", callback: fun(trg: Trigger, data: EventParam). Unit - Discover target)): Trigger
---@field event fun(self: Unit, event: "unit - purchase item ", callback: fun(trg: Trigger, data: EventParam). Unit - Purchase item)): Trigger
---@field event fun(self: Unit, event: "unit - buy unit ", callback: fun(trg: Trigger, data: EventParam). Unit - Purchase unit)): Trigger
---@field event fun(self: Unit, event: "Unit - item for sale ", callback: fun(trg: Trigger, data: EventParam). Unit - Item for sale)): Trigger
---@field event fun(self: Unit, event: "unit-item composition ", callback: fun(trg: Trigger, data: EventParam). Unit - item composition)): Trigger
---@field event fun(self: Unit, event: "units-purchase item composition ", callback: fun(trg: Trigger, data: EventParam). Unit - Purchase item synthesis)): Trigger
---@field event fun(self: Unit, event: "unit-resurrection ", callback: fun(trg: Trigger, data: EventParam). Unit - Resurrection)): Trigger
---@field event fun(self: Unit, event: "unit-upgrade ", callback: fun(trg: Trigger, data: EventParam). Unit - upgrade)): Trigger
---@field event fun(self: Unit, event: "Unit - into the grass ", callback: fun(trg: Trigger, data: EventParam). Unit - Into the grass)): Trigger
---@field event fun(self: Unit, event: "Unit - leave the grass ", callback: fun(trg: Trigger, data: EventParam). Unit - Leave the grass)): Trigger
---@field event fun(self: Unit, event: "unit - change ownership ", callback: fun(trg: Trigger, data: EventParam). Unit - Change ownership)): Trigger
---@field event fun(self: Unit, event: "Skill type - prerequisite is true ", callback: fun(trg: Trigger, data: EventParam). Skill Type - preconditions held)): Trigger
---@field event fun(self: Unit, event: "Skill type - prerequisite not true ", callback: fun(trg: Trigger, data: EventParam). Skill type - precondition not true)): Trigger
---@field event fun(self: Unit, event: "Tech type - prerequisite is true ", callback: fun(trg: Trigger, data: EventParam). Tech type - Precondition held)): Trigger
---@field event fun(self: Unit, event: "Tech type - precondition not true ", callback: fun(trg: Trigger, data: EventParam). Tech type - Precondition not true)): Trigger
---@field event fun(self: Unit, event: "Skill - upgrade ", callback: fun(trg: Trigger, data: EventParam). Skills - Level up)): Trigger
---@field event fun(self: Unit, event: "Casting - about to begin ", callback: fun(trg: Trigger, data: EventParam). Casting - About to begin)): Trigger
---@field event fun(self: Unit, event: "Cast - start ", callback: fun(trg: Trigger, data: EventParam). Cast - Start)): Trigger
---@field event fun(self: Unit, event: "cast - boot ", callback: fun(trg: Trigger, data: EventParam). Cast - Guide)): Trigger
---@field event fun(self: Unit, event: "Cast - shot ", callback: fun(trg: Trigger, data: EventParam). Cast - Strike)): Trigger
---@field event fun(self: Unit, event: "spell-finished ", callback: fun(trg: Trigger, data: EventParam). Cast - Finished)): Trigger
---@field event fun(self: Unit, event: "spell-end ", callback: fun(trg: Trigger, data: EventParam). Spell - End)): Trigger
---@field event fun(self: Unit, event: "Cast - interrupt start ", callback: fun(trg: Trigger, data: EventParam). Cast - Interrupt start)): Trigger
---@field event fun(self: Unit, event: "Cast - interrupt lead ", callback: fun(trg: Trigger, data: EventParam). Cast - Interrupt lead)): Trigger
---@field event fun(self: Unit, event: "Cast - interrupt shot ", callback: fun(trg: Trigger, data: EventParam). Cast - Break shot)): Trigger
---@field event fun(self: Unit, event: "spell-stop ", callback: fun(trg: Trigger, data: EventParam). Cast - Stop)): Trigger
---@field event fun(self: Unit, event: "Skill - get ", callback: fun(trg: Trigger, data: EventParam). Skill - Get)): Trigger
---@field event fun(self: Unit, event: "Skill - loss ", callback: fun(trg: Trigger, data: EventParam). Skill - lost)): Trigger
---@field event fun(self: Unit, event: "Skills-exchange ", callback: fun(trg: Trigger, data: EventParam). Skill - Exchange)): Trigger
---@field event fun(self: Unit, event: "Skill - disabled ", callback: fun(trg: Trigger, data: EventParam). Skill - Disabled)): Trigger
---@field event fun(self: Unit, event: "Skill - enable ", callback: fun(trg: Trigger, data: EventParam). Skill - Enabled)): Trigger
---@field event fun(self: Unit, event: "Skill - cooldown end ", callback: fun(trg: Trigger, data: EventParam). Skill - Cooldown end)): Trigger
---@field event fun(self: Unit, event: "Skill - Custom action axis ", string: string, callback: fun(trg: Trigger, data: EventParam). Skill - Customize animation axis)): Trigger
---@field event fun(self: Unit, event: "effect - get ", callback: fun(trg: Trigger, data: EventParam). Effect - Obtained)): Trigger
---@field event fun(self: Unit, event: "Effect - loss ", callback: fun(trg: Trigger, data: EventParam). Effect - lost)): Trigger
---@field event fun(self: Unit, event: "Effect - heartbeat ", callback: fun(trg: Trigger, data: EventParam). Effect - heartbeat)): Trigger
---@field event fun(self: Unit, event: "Effect - overlay ", callback: fun(trg: Trigger, data: EventParam). Effect - Overlay)): Trigger
---@field event fun(self: Unit, event: "Effect - layer change ", callback: fun(trg: Trigger, data: EventParam). Effect - layer change)): Trigger
---@field event fun(self: Unit, event: "Effect - coming soon ", callback: fun(trg: Trigger, data: EventParam). Effect - Coming soon)): Trigger
---@field event fun(self: Unit, event: "effect - overlay ", callback: fun(trg: Trigger, data: EventParam). Effect - Overlay)): Trigger
---@field event fun(self: Unit, event: "Skill - open indicator ", callback: fun(trg: Trigger, data: EventParam). Skill - Turn on indicator)): Trigger
---@field event fun(self: Unit, event: "Skill - Build skill before release ", callback: fun(trg: Trigger, data: EventParam). Skills - Build skills before releasing)): Trigger
---@field event fun(self: Unit, event: "Skill - close indicator ", callback: fun(trg: Trigger, data: EventParam). Skill - Off indicator)): Trigger
---@field event fun(self: Unit, event: "unit-pathfinding starts ", callback: fun(trg: Trigger, data: EventParam). Unit - Pathfinding starts)): Trigger
---@field event fun(self: Unit, event: "unit-pathfinding end ", callback: fun(trg: Trigger, data: EventParam). Unit - End of pathfinding)): Trigger
---@field event fun(self: Unit, event: "command-attack move ", callback: fun(trg: Trigger, data: EventParam). Command - Attack Move)): Trigger
---@field event fun(self: Unit, event: "Command - sell item ", callback: fun(trg: Trigger, data: EventParam). Command - Sell items)): Trigger
---@field event fun(self: Unit, event: "command - cast skill ", callback: fun(trg: Trigger, data: EventParam). Command - Cast skill)): Trigger
---@field event fun(self: Unit, event: "command-patrol ", callback: fun(trg: Trigger, data: EventParam). Command - Patrol)): Trigger
---@field event fun(self: Unit, event: "command-move ", callback: fun(trg: Trigger, data: EventParam). Command - Move)): Trigger

---@class EditorObject.Ability
---@field event fun(self: EditorObject.Ability, event: "Skill - build completed ", callback: fun(trg: Trigger, data: EventParam). Skill - Build completed)): Trigger
---@field event fun(self: EditorObject.Ability, event: "Skills-learning ", callback: fun(trg: Trigger, data: EventParam). Skills - Learning)): Trigger
---@field event fun(self: EditorObject.Ability, event: "Skills-availability status change ", callback: fun(trg: Trigger, data: EventParam). Skills - Available status changes)): Trigger
---@field event fun(self: EditorObject.Ability, event: "Skills-silence state change ", callback: fun(trg: Trigger, data: EventParam). Skill - Silent state change)): Trigger
---@field event fun(self: EditorObject.Ability, event: "skill - upgrade ", callback: fun(trg: Trigger, data: EventParam). Skills - Level up)): Trigger
---@field event fun(self: EditorObject.Ability, event: "Casting - about to begin ", callback: fun(trg: Trigger, data: EventParam). Casting - About to begin)): Trigger
---@field event fun(self: EditorObject.Ability, event: "Cast - start ", callback: fun(trg: Trigger, data: EventParam). Cast - Start)): Trigger
---@field event fun(self: EditorObject.Ability, event: "spell-bootstrap ", callback: fun(trg: Trigger, data: EventParam). Cast - Guide)): Trigger
---@field event fun(self: EditorObject.Ability, event: "Cast - shot ", callback: fun(trg: Trigger, data: EventParam). Cast - Strike)): Trigger
---@field event fun(self: EditorObject.Ability, event: "spell-finish ", callback: fun(trg: Trigger, data: EventParam). Cast - Finished)): Trigger
---@field event fun(self: EditorObject.Ability, event: "spell-end ", callback: fun(trg: Trigger, data: EventParam). Spell - End)): Trigger
---@field event fun(self: EditorObject.Ability, event: "Spell-interrupt start ", callback: fun(trg: Trigger, data: EventParam). Cast - Interrupt start)): Trigger
---@field event fun(self: EditorObject.Ability, event: "Cast - interrupt lead ", callback: fun(trg: Trigger, data: EventParam). Cast - Interrupt lead)): Trigger
---@field event fun(self: EditorObject.Ability, event: "Cast - interrupt shot ", callback: fun(trg: Trigger, data: EventParam). Cast - Break shot)): Trigger
---@field event fun(self: EditorObject.Ability, event: "spell-stop ", callback: fun(trg: Trigger, data: EventParam). Cast - Stop)): Trigger
---@field event fun(self: EditorObject.Ability, event: "skills-acquired ", callback: fun(trg: Trigger, data: EventParam). Skill - Get)): Trigger
---@field event fun(self: EditorObject.Ability, event: "Skill - loss ", callback: fun(trg: Trigger, data: EventParam). Skill - lost)): Trigger
---@field event fun(self: EditorObject.Ability, event: "skills-exchange ", callback: fun(trg: Trigger, data: EventParam). Skill - Exchange)): Trigger
---@field event fun(self: EditorObject.Ability, event: "Skills-disabled ", callback: fun(trg: Trigger, data: EventParam). Skill - Disabled)): Trigger
---@field event fun(self: EditorObject.Ability, event: "Skills-enable ", callback: fun(trg: Trigger, data: EventParam). Skill - Enabled)): Trigger
---@field event fun(self: EditorObject.Ability, event: "Skill - cooldown end ", callback: fun(trg: Trigger, data: EventParam). Skill - Cooldown end)): Trigger
---@field event fun(self: EditorObject.Ability, event: "Skill - custom action axis ", callback: fun(trg: Trigger, data: EventParam). Skill - Customize animation axis)): Trigger
---@field event fun(self: EditorObject.Ability, event: "Skill - open indicator ", callback: fun(trg: Trigger, data: EventParam). Skill - Turn on indicator)): Trigger
---@field event fun(self: EditorObject.Ability, event: "Skill - Build skill before release ", callback: fun(trg: Trigger, data: EventParam). Skills - Build skills before releasing)): Trigger
---@field event fun(self: EditorObject.Ability, event: "Skill - close indicator ", callback: fun(trg: Trigger, data: EventParam). Skill - Off indicator)): Trigger

---@class EditorObject.Buff
---@field event fun(self: EditorObject.Buff, event: "effect - get ", callback: fun(trg: Trigger, data: EventParam). Effect - Obtained)): Trigger
---@field event fun(self: EditorObject.Buff, event: "Effect - loss ", callback: fun(trg: Trigger, data: EventParam). Effect - lost)): Trigger
---@field event fun(self: EditorObject.Buff, event: "Effect - heartbeat ", callback: fun(trg: Trigger, data: EventParam). Effect - heartbeat)): Trigger
---@field event fun(self: EditorObject.Buff, event: "Effect - overlay ", callback: fun(trg: Trigger, data: EventParam). Effect - Overlay)): Trigger
---@field event fun(self: EditorObject.Buff, event: "Effect - layer change ", callback: fun(trg: Trigger, data: EventParam). Effect - layer change)): Trigger
---@field event fun(self: EditorObject.Buff, event: "Effect - coming soon ", callback: fun(trg: Trigger, data: EventParam). Effect - Coming soon)): Trigger
---@field event fun(self: EditorObject.Buff, event: "effect - override ", callback: fun(trg: Trigger, data: EventParam). Effect - Overlay)): Trigger

---@class EditorObject.Item
---@field event fun(self: EditorObject.Item, event: "item-get ", callback: fun(trg: Trigger, data: EventParam). Item - Get)): Trigger
---@field event fun(self: EditorObject.Item, event: "Item - Enter item ", callback: fun(trg: Trigger, data: EventParam). Item - Enter Item bar)): Trigger
---@field event fun(self: EditorObject.Item, event: "Item - Enter backpack ", callback: fun(trg: Trigger, data: EventParam). Item - Enter backpack)): Trigger
---@field event fun(self: EditorObject.Item, event: "item-lose ", callback: fun(trg: Trigger, data: EventParam). Item - lost)): Trigger
---@field event fun(self: EditorObject.Item, event: "Item - leaves inventory ", callback: fun(trg: Trigger, data: EventParam). Item - Leave inventory)): Trigger
---@field event fun(self: EditorObject.Item, event: "Item - leave backpack ", callback: fun(trg: Trigger, data: EventParam). Item - Leave backpack)): Trigger
---@field event fun(self: EditorObject.Item, event: "item-use ", callback: fun(trg: Trigger, data: EventParam). Item - Use)): Trigger
---@field event fun(self: EditorObject.Item, event: "item-stack change ", callback: fun(trg: Trigger, data: EventParam). Item - Stack change)): Trigger
---@field event fun(self: EditorObject.Item, event: "Item-charge change ", callback: fun(trg: Trigger, data: EventParam). Item - Charge change)): Trigger
---@field event fun(self: EditorObject.Item, event: "item-create ", callback: fun(trg: Trigger, data: EventParam). Item - Created)): Trigger
---@field event fun(self: EditorObject.Item, event: "item-remove ", callback: fun(trg: Trigger, data: EventParam). Item - Removed)): Trigger
---@field event fun(self: EditorObject.Item, event: "Item-sale ", callback: fun(trg: Trigger, data: EventParam). Item - for sale)): Trigger
---@field event fun(self: EditorObject.Item, event: "item-death ", callback: fun(trg: Trigger, data: EventParam). Item - Death)): Trigger
---@field event fun(self: EditorObject.Item, event: "Item - collection creation ", callback: fun(trg: Trigger, data: EventParam). Item - Collection Creation)): Trigger

---@class EditorObject.Projectile
---@field event fun(self: EditorObject.Projectile, event: "projectile-create ", callback: fun(trg: Trigger, data: EventParam). Projectiles - Create)): Trigger
---@field event fun(self: EditorObject.Projectile, event: "projectile-death ", callback: fun(trg: Trigger, data: EventParam). Projectiles - death)): Trigger

---@class EditorObject.Unit
---@field event fun(self: EditorObject.Unit, event: "unit-R&D technology ", callback: fun(trg: Trigger, data: EventParam). Unit - Research and development technology)): Trigger
---@field event fun(self: EditorObject.Unit, event: "unit-get tech ", callback: fun(trg: Trigger, data: EventParam. Unit - Get Tech)): Trigger
---@field event fun(self: EditorObject.Unit, event: "unit-lost tech ", callback: fun(trg: Trigger, data: EventParam. Unit - Lost tech)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Unit-building upgrade starts ", callback: fun(trg: Trigger, data: EventParam). Unit - Building upgrade starts)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Unit-building upgrade cancelled ", callback: fun(trg: Trigger, data: EventParam. Unit - Building upgrade cancelled)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Unit-building upgrade complete ", callback: fun(trg: Trigger, data: EventParam). Unit - Building upgrade completed)): Trigger
---@field event fun(self: EditorObject.Unit, event: "units-build starts ", callback: fun(trg: Trigger, data: EventParam). Unit - Build starts)): Trigger
---@field event fun(self: EditorObject.Unit, event: "unit-build cancel ", callback: fun(trg: Trigger, data: EventParam). Unit - Build cancelled)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Units-build completed ", callback: fun(trg: Trigger, data: EventParam). Unit - Built)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Skill - build completed ", callback: fun(trg: Trigger, data: EventParam). Skill - Build completed)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Skill - learning ", callback: fun(trg: Trigger, data: EventParam). Skills - Learning)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Skills-available status change ", callback: fun(trg: Trigger, data: EventParam). Skills - Available status changes)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Skills-silence status change ", callback: fun(trg: Trigger, data: EventParam). Skill - Silent state change)): Trigger
---@field event fun(self: EditorObject.Unit, event: "unit-name change ", callback: fun(trg: Trigger, data: EventParam). Unit - Name change)): Trigger
---@field event fun(self: EditorObject.Unit, event: "unit-minimap icon change ", callback: fun(trg: Trigger, data: EventParam. Unit - minimap icon change)): Trigger
---@field event fun(self: EditorObject.Unit, event: "unit-avatar change ", callback: fun(trg: Trigger, data: EventParam). Unit - Avatar change)): Trigger
---@field event fun(self: EditorObject.Unit, event: "unit-remove ", callback: fun(trg: Trigger, data: EventParam). Unit - remove)): Trigger
---@field event fun(self: EditorObject.Unit, event: "unit-after removal ", callback: fun(trg: Trigger, data: EventParam. Unit - after removal)): Trigger
---@field event fun(self: EditorObject.Unit, event: "unit-end of transfer ", callback: fun(trg: Trigger, data: EventParam). Unit - End of transfer)): Trigger
---@field event fun(self: EditorObject.Unit, event: "unit-attribute change ", callback: fun(trg: Trigger, data: EventParam). Unit - Attribute change)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Unit - dying ", callback: fun(trg: Trigger, data: EventParam. Unit - About to die)): Trigger
---@field event fun(self: EditorObject.Unit, event: "unit-death ", callback: fun(trg: Trigger, data: EventParam). Unit - death)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Unit - before damage ", callback: fun(trg: Trigger, data: EventParam). Unit - Before taking damage)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Unit - before damage ", callback: fun(trg: Trigger, data: EventParam). Unit - Before dealing damage)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Unit - when damaged ", callback: fun(trg: Trigger, data: EventParam). Unit - When taking damage)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Unit - when dealing damage ", callback: fun(trg: Trigger, data: EventParam). Unit - When dealing damage)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Unit - after dealing damage ", callback: fun(trg: Trigger, data: EventParam). Unit - After dealing damage)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Unit - after taking damage ", callback: fun(trg: Trigger, data: EventParam). Unit - After taking damage)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Unit - before treatment ", callback: fun(trg: Trigger, data: EventParam. Unit - Before receiving treatment)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Unit - after healing ", callback: fun(trg: Trigger, data: EventParam. Unit - after being healed)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Unit - when healed ", callback: fun(trg: Trigger, data: EventParam. Unit - when treated)): Trigger
---@field event fun(self: EditorObject.Unit, event: "unit-cast skill ", callback: fun(trg: Trigger, data: EventParam). Unit - Cast skill)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Unit - before experience ", callback: fun(trg: Trigger, data: EventParam). Unit - Before gaining experience)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Unit - after experience ", callback: fun(trg: Trigger, data: EventParam. Unit - After gaining experience)): Trigger
---@field event fun(self: EditorObject.Unit, event: "unit-receive command ", callback: fun(trg: Trigger, data: EventParam). Unit - Receive command)): Trigger
---@field event fun(self: EditorObject.Unit, event: "unit-kill ", callback: fun(trg: Trigger, data: EventParam). Unit - Kill)): Trigger
---@field event fun(self: EditorObject.Unit, event: "unit-create ", callback: fun(trg: Trigger, data: EventParam). Unit - create)): Trigger
---@field event fun(self: EditorObject.Unit, event: "units-enter battle ", callback: fun(trg: Trigger, data: EventParam). Unit - Enter battle)): Trigger
---@field event fun(self: EditorObject.Unit, event: "units-out of battle ", callback: fun(trg: Trigger, data: EventParam). Unit - Out of combat)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Unit - about to pick up item ", callback: fun(trg: Trigger, data: EventParam. Unit - About to pick up item)): Trigger
---@field event fun(self: EditorObject.Unit, event: "unit-toggle default behavior ", callback: fun(trg: Trigger, data: EventParam). Unit - Switch default behavior)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Unit - about to call the enemy ", callback: fun(trg: Trigger, data: EventParam. Unit - Imminent enemy)): Trigger
---@field event fun(self: EditorObject.Unit, event: "unit-discover target ", callback: fun(trg: Trigger, data: EventParam). Unit - Discover target)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Unit - purchase item ", callback: fun(trg: Trigger, data: EventParam). Unit - Purchase item)): Trigger
---@field event fun(self: EditorObject.Unit, event: "unit - buy unit ", callback: fun(trg: Trigger, data: EventParam). Unit - Purchase unit)): Trigger
---@field event fun(self: EditorObject.Unit, event: "units-items for sale ", callback: fun(trg: Trigger, data: EventParam. Unit - Item for sale)): Trigger
---@field event fun(self: EditorObject.Unit, event: "unit-object composition ", callback: fun(trg: Trigger, data: EventParam). Unit - item composition)): Trigger
---@field event fun(self: EditorObject.Unit, event: "units-purchase item composition ", callback: fun(trg: Trigger, data: EventParam). Unit - Purchase item synthesis)): Trigger
---@field event fun(self: EditorObject.Unit, event: "unit-resurrect ", callback: fun(trg: Trigger, data: EventParam). Unit - Resurrection)): Trigger
---@field event fun(self: EditorObject.Unit, event: "unit-upgrade ", callback: fun(trg: Trigger, data: EventParam). Unit - upgrade)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Unit - into the grass ", callback: fun(trg: Trigger, data: EventParam. Unit - Into the grass)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Unit - leave the grass ", callback: fun(trg: Trigger, data: EventParam. Unit - Leave the grass)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Unit - change ownership ", callback: fun(trg: Trigger, data: EventParam). Unit - Change ownership)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Skill type - preconditions are true ", callback: fun(trg: Trigger, data: EventParam). Skill Type - preconditions held)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Skill type - precondition not true ", callback: fun(trg: Trigger, data: EventParam). Skill type - precondition not true)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Tech type - prerequisite is true ", callback: fun(trg: Trigger, data: EventParam). Tech type - Precondition held)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Tech type - precondition not true ", callback: fun(trg: Trigger, data: EventParam). Tech type - Precondition not true)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Skill - upgrade ", callback: fun(trg: Trigger, data: EventParam). Skills - Level up)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Cast - about to begin ", callback: fun(trg: Trigger, data: EventParam). Casting - About to begin)): Trigger
---@field event fun(self: EditorObject.Unit, event: "spell-start ", callback: fun(trg: Trigger, data: EventParam). Cast - Start)): Trigger
---@field event fun(self: EditorObject.Unit, event: "spell-boot ", callback: fun(trg: Trigger, data: EventParam). Cast - Guide)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Cast - shot ", callback: fun(trg: Trigger, data: EventParam). Cast - Strike)): Trigger
---@field event fun(self: EditorObject.Unit, event: "spell-finished ", callback: fun(trg: Trigger, data: EventParam). Cast - Finished)): Trigger
---@field event fun(self: EditorObject.Unit, event: "spell-end ", callback: fun(trg: Trigger, data: EventParam). Spell - End)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Spell-interrupt start ", callback: fun(trg: Trigger, data: EventParam). Cast - Interrupt start)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Cast - interrupt boot ", callback: fun(trg: Trigger, data: EventParam). Cast - Interrupt lead)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Cast - interrupt shot ", callback: fun(trg: Trigger, data: EventParam). Cast - Break shot)): Trigger
---@field event fun(self: EditorObject.Unit, event: "spell-stop ", callback: fun(trg: Trigger, data: EventParam). Cast - Stop)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Skill - get ", callback: fun(trg: Trigger, data: EventParam). Skill - Get)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Skill - loss ", callback: fun(trg: Trigger, data: EventParam). Skill - lost)): Trigger
---@field event fun(self: EditorObject.Unit, event: "skills-exchange ", callback: fun(trg: Trigger, data: EventParam). Skill - Exchange)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Skills-disabled ", callback: fun(trg: Trigger, data: EventParam). Skill - Disabled)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Skill - enable ", callback: fun(trg: Trigger, data: EventParam). Skill - Enabled)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Skill - cooldown end ", callback: fun(trg: Trigger, data: EventParam). Skill - Cooldown end)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Skill - Custom action axis ", callback: fun(trg: Trigger, data: EventParam). Skill - Customize animation axis)): Trigger
---@field event fun(self: EditorObject.Unit, event: "effect - get ", callback: fun(trg: Trigger, data: EventParam). Effect - Obtained)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Effect - loss ", callback: fun(trg: Trigger, data: EventParam). Effect - lost)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Effect - heartbeat ", callback: fun(trg: Trigger, data: EventParam). Effect - heartbeat)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Effect - overlay ", callback: fun(trg: Trigger, data: EventParam). Effect - Overlay)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Effect - layer change ", callback: fun(trg: Trigger, data: EventParam). Effect - layer change)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Effect - coming soon ", callback: fun(trg: Trigger, data: EventParam). Effect - Coming soon)): Trigger
---@field event fun(self: EditorObject.Unit, event: "effect - overlay ", callback: fun(trg: Trigger, data: EventParam). Effect - Overlay)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Skill - open indicator ", callback: fun(trg: Trigger, data: EventParam). Skill - Turn on indicator)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Skill - Build before release ", callback: fun(trg: Trigger, data: EventParam). Skills - Build skills before releasing)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Skill - close indicator ", callback: fun(trg: Trigger, data: EventParam). Skill - Off indicator)): Trigger
---@field event fun(self: EditorObject.Unit, event: "Units-pathfinding starts ", callback: fun(trg: Trigger, data: EventParam). Unit - Pathfinding starts)): Trigger
---@field event fun(self: EditorObject.Unit, event: "unit-pathfinding end ", callback: fun(trg: Trigger, data: EventParam). Unit - End of pathfinding)): Trigger
---@field event fun(self: EditorObject.Unit, event: "command - attack move ", callback: fun(trg: Trigger, data: EventParam). Command - Attack Move)): Trigger
---@field event fun(self: EditorObject.Unit, event: "command - sell item ", callback: fun(trg: Trigger, data: EventParam). Command - Sell items)): Trigger
---@field event fun(self: EditorObject.Unit, event: "command - cast skill ", callback: fun(trg: Trigger, data: EventParam). Command - Cast skill)): Trigger
---@field event fun(self: EditorObject.Unit, event: "command - patrol ", callback: fun(trg: Trigger, data: EventParam). Command - Patrol)): Trigger
---@field event fun(self: EditorObject.Unit, event: "command - move ", callback: fun(trg: Trigger, data: EventParam). Command - Move)): Trigger

return M
