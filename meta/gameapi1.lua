--This file is generated by tools/genGameAPI, do not modify it manually.
---@meta

---@class py.GameAPI
GameAPI = {}

--Default library unit deletes key-value pairs
---@param unit_key py.UnitKey # Unit number
---@param key string # Key-value name
function GameAPI.del_unit_key_kv(unit_key, key) end

--Default library skill deletes key-value pairs
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key-value name
function GameAPI.del_ability_key_kv(ability_key, key) end

--Default library items delete key-value pairs
---@param item_key py.ItemKey # Item number
---@param key string # Key-value name
function GameAPI.del_item_key_kv(item_key, key) end

--Default library items delete key-value pairs
---@param item_key integer # Item number
---@param key string # Key-value name
---@param prefab_conf_key integer # prefab Library ID
function GameAPI.del_prefab_key_kv(item_key, key, prefab_conf_key) end

--Adds a BOOLEAN key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? boolean # value
function GameAPI.add_boolean_kv(kvbase, key, item) end

--Add an INTEGER key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? integer # value
function GameAPI.add_integer_kv(kvbase, key, item) end

--Add FLOAT key-value pairs
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.Fixed # value
function GameAPI.add_float_kv(kvbase, key, item) end

--Add a STRING key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? string # value
function GameAPI.add_string_kv(kvbase, key, item) end

--Add UI_COMP key-value pairs
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? string # value
function GameAPI.add_ui_comp_kv(kvbase, key, item) end

--Add UI_COMP_TYPE key-value pairs
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? integer # value
function GameAPI.add_ui_comp_type_kv(kvbase, key, item) end

--Add UI_COMP_EVENT_TYPE key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? integer # value
function GameAPI.add_ui_comp_event_type_kv(kvbase, key, item) end

--Add UI_COMP_ATTR key-value pairs
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? string # value
function GameAPI.add_ui_comp_attr_kv(kvbase, key, item) end

--Add UI_COMP_ALIGN_TYPE key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? integer # value
function GameAPI.add_ui_comp_align_type_kv(kvbase, key, item) end

--Add UI_PREFAB key-value pairs
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? string # value
function GameAPI.add_ui_prefab_kv(kvbase, key, item) end

--Add UI_PREFAB_INSTANCE key-value pairs
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.UIPrefabIns # value
function GameAPI.add_ui_prefab_instance_kv(kvbase, key, item) end

--Add a UI_PREFAB_INS_UID key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? string # value
function GameAPI.add_ui_prefab_ins_uid_kv(kvbase, key, item) end

--Add UI_DIRECTION key-value pairs
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? integer # value
function GameAPI.add_ui_direction_kv(kvbase, key, item) end

--Add a UI_MODEL_CAMERA_MOD key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? integer # value
function GameAPI.add_ui_model_camera_mod_kv(kvbase, key, item) end

--Add a UI_BTN_STATUS key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? integer # value
function GameAPI.add_ui_btn_status_kv(kvbase, key, item) end

--Add UI_SCROLLVIEW_TYPE key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? integer # value
function GameAPI.add_ui_scrollview_type_kv(kvbase, key, item) end

--Add UI_GRIDVIEW_TYPE key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? integer # value
function GameAPI.add_ui_gridview_type_kv(kvbase, key, item) end

--Add UI_GRIDVIEW_BAR_TYPE key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? integer # value
function GameAPI.add_ui_gridview_bar_type_kv(kvbase, key, item) end

--Add a UI_EQUIP_SLOT_USE_TYPE key and value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? integer # value
function GameAPI.add_ui_equip_slot_use_type_kv(kvbase, key, item) end

--Add a UI_EQUIP_SLOT_DRAG_TYPE key value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? integer # value
function GameAPI.add_ui_equip_slot_drag_type_kv(kvbase, key, item) end

--Add UI_LAYOUT_CLIPPING_TYPE key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? integer # value
function GameAPI.add_ui_layout_clipping_type_kv(kvbase, key, item) end

--Add UI_TEXT_OVER_LENGTH_HANDLING_TYPE key and value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? integer # value
function GameAPI.add_ui_text_over_length_handling_type_kv(kvbase, key, item) end

--Add UI_ANIM key-value pairs
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.UIAnimKey # value
function GameAPI.add_ui_anim_kv(kvbase, key, item) end

--Add a UI_ANIM_CURVE key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? integer # value
function GameAPI.add_ui_anim_curve_kv(kvbase, key, item) end

--Add UI_ANIM_PLAY_MODE key-value pairs
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? integer # value
function GameAPI.add_ui_anim_play_mode_kv(kvbase, key, item) end

--Add an AUDIO_CHANNEL key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? integer # value
function GameAPI.add_audio_channel_kv(kvbase, key, item) end

--The UNIT_ENTITY key pair was added
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.Unit # value
function GameAPI.add_unit_entity_kv(kvbase, key, item) end

--Add a UNIT_GROUP key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.UnitGroup # value
function GameAPI.add_unit_group_kv(kvbase, key, item) end

--Add a UNIT_NAME key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.UnitKey # value
function GameAPI.add_unit_name_kv(kvbase, key, item) end

--Add a UNIT_NAME_POOL key and value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.UnitKeyPool # value
function GameAPI.add_unit_name_pool_kv(kvbase, key, item) end

--Add a UNIT_WRITE_ATTRIBUTE key pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? string # value
function GameAPI.add_unit_write_attribute_kv(kvbase, key, item) end

--Add ATTR_ELEMENT key-value pairs
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? string # value
function GameAPI.add_attr_element_kv(kvbase, key, item) end

--Add ATTR_ELEMENT_READ key pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? string # value
function GameAPI.add_attr_element_read_kv(kvbase, key, item) end

--The MOVER_ENTITY key pair was added
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.Mover # value
function GameAPI.add_mover_entity_kv(kvbase, key, item) end

--Add an IMAGE_QUALITY key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? string # value
function GameAPI.add_image_quality_kv(kvbase, key, item) end

--Add a WINDOW_TYPE_SETTING key value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? string # value
function GameAPI.add_window_type_setting_kv(kvbase, key, item) end

--Add DAMAGE_ATTACK_TYPE key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? integer # value
function GameAPI.add_damage_attack_type_kv(kvbase, key, item) end

--Add an ITEM_ENTITY key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.Item # value
function GameAPI.add_item_entity_kv(kvbase, key, item) end

--Add ITEM_GROUP key-value pairs
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.ItemGroup # value
function GameAPI.add_item_group_kv(kvbase, key, item) end

--Add an ITEM_NAME key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.ItemKey # value
function GameAPI.add_item_name_kv(kvbase, key, item) end

--Add the ITEM_STACK_TYPE key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.ItemStackType # value
function GameAPI.add_item_stack_type_kv(kvbase, key, item) end

--Add ABILITY key-value pairs
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.Ability # value
function GameAPI.add_ability_kv(kvbase, key, item) end

--Add ABILITY_TYPE key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? integer # value
function GameAPI.add_ability_type_kv(kvbase, key, item) end

--Add ABILITY_CAST_TYPE key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? integer # value
function GameAPI.add_ability_cast_type_kv(kvbase, key, item) end

--Add the ABILITY_NAME key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.AbilityKey # value
function GameAPI.add_ability_name_kv(kvbase, key, item) end

--Add SKILL_POINTER_TYPE key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? integer # value
function GameAPI.add_skill_pointer_type_kv(kvbase, key, item) end

--Add MODIFIER_ENTITY key and value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.ModifierEntity # value
function GameAPI.add_modifier_entity_kv(kvbase, key, item) end

--Add MODIFIER_TYPE key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.ModifierType # value
function GameAPI.add_modifier_type_kv(kvbase, key, item) end

--Add MODIFIER_EFFECT_TYPE key pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.ModifierEffectType # value
function GameAPI.add_modifier_effect_type_kv(kvbase, key, item) end

--Added MODIFIER Key pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.ModifierKey # value
function GameAPI.add_modifier_kv(kvbase, key, item) end

--Add a PROJECTILE key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.ProjectileKey # value
function GameAPI.add_projectile_kv(kvbase, key, item) end

--Add PROJECTILE_ENTITY key value pairs
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.ProjectileEntity # value
function GameAPI.add_projectile_entity_kv(kvbase, key, item) end

--Add PROJECTILE_GROUP key value pairs
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.ProjectileGroup # value
function GameAPI.add_projectile_group_kv(kvbase, key, item) end

--Add the DESTRUCTIBLE_ENTITY key pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.Destructible # value
function GameAPI.add_destructible_entity_kv(kvbase, key, item) end

--Add the DESTRUCTIBLE_NAME key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.DestructibleKey # value
function GameAPI.add_destructible_name_kv(kvbase, key, item) end

--Add SOUND_ENTITY key pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.SoundEntity # value
function GameAPI.add_sound_entity_kv(kvbase, key, item) end

--Add an AUDIO_KEY key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.AudioKey # value
function GameAPI.add_audio_key_kv(kvbase, key, item) end

--Add a GAME_MODE key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.GameMode # value
function GameAPI.add_game_mode_kv(kvbase, key, item) end

--Add a PLAYER key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.Role # value
function GameAPI.add_player_kv(kvbase, key, item) end

--Add a PLAYER_GROUP key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.RoleGroup # value
function GameAPI.add_player_group_kv(kvbase, key, item) end

--Add the ROLE_RES_KEY key pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.RoleResKey # value
function GameAPI.add_role_res_key_kv(kvbase, key, item) end

--Add the ROLE_STATUS key pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.RoleStatus # value
function GameAPI.add_role_status_kv(kvbase, key, item) end

--Add ROLE_TYPE key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.RoleType # value
function GameAPI.add_role_type_kv(kvbase, key, item) end

--Add a ROLE_RELATION key and value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.RoleRelation # value
function GameAPI.add_role_relation_kv(kvbase, key, item) end

--Add a TEAM key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.Camp # value
function GameAPI.add_team_kv(kvbase, key, item) end

--Add a POINT key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.FPoint # value
function GameAPI.add_point_kv(kvbase, key, item) end

--Add VECTOR3 key-value pairs
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.FVector3 # value
function GameAPI.add_vector3_kv(kvbase, key, item) end

--Add the ROTATION key pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.FRotation # value
function GameAPI.add_rotation_kv(kvbase, key, item) end

--Add POINT_LIST key pairs
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.Road # value
function GameAPI.add_point_list_kv(kvbase, key, item) end

--Add a RECTANGLE key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.RecArea # value
function GameAPI.add_rectangle_kv(kvbase, key, item) end

--The ROUND_AREA key pair is added
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.CirArea # value
function GameAPI.add_round_area_kv(kvbase, key, item) end

--Add POLYGON key-value pairs
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.PolyArea # value
function GameAPI.add_polygon_kv(kvbase, key, item) end

--Add a CAMERA key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.Camera # value
function GameAPI.add_camera_kv(kvbase, key, item) end

--Add a CAMLINE key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.CamlineID # value
function GameAPI.add_camline_kv(kvbase, key, item) end

--Add a POINT_LIGHT key pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.PointLight # value
function GameAPI.add_point_light_kv(kvbase, key, item) end

--Add a SPOT_LIGHT key pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.SpotLight # value
function GameAPI.add_spot_light_kv(kvbase, key, item) end

--Add FOG key-value pairs
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.Fog # value
function GameAPI.add_fog_kv(kvbase, key, item) end

--Add a SCENE_SOUND key pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.SceneSound # value
function GameAPI.add_scene_sound_kv(kvbase, key, item) end

--Add a MODEL key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.ModelKey # value
function GameAPI.add_model_kv(kvbase, key, item) end

--Add LIVE2D key-value pairs
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.Live2dKey # value
function GameAPI.add_live2d_kv(kvbase, key, item) end

--The SFX_ENTITY key pair was added
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.Sfx # value
function GameAPI.add_sfx_entity_kv(kvbase, key, item) end

--Add SFX_KEY key pairs
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.SfxKey # value
function GameAPI.add_sfx_key_kv(kvbase, key, item) end

--The LINK_SFX_ENTITY key pair was added
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.LinkSfx # value
function GameAPI.add_link_sfx_entity_kv(kvbase, key, item) end

--Add a LINK_SFX_KEY key pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.LinkSfxKey # value
function GameAPI.add_link_sfx_key_kv(kvbase, key, item) end

--Add a CURSOR_KEY key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.CursorKey # value
function GameAPI.add_cursor_key_kv(kvbase, key, item) end

--Add an ANGLE key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.Fixed # value
function GameAPI.add_angle_kv(kvbase, key, item) end

--Add a TEXTURE key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.Texture # value
function GameAPI.add_texture_kv(kvbase, key, item) end

--Add a SEQUENCE key pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.Sequence # value
function GameAPI.add_sequence_kv(kvbase, key, item) end

--Add a SPINE key pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.Spine # value
function GameAPI.add_spine_kv(kvbase, key, item) end

--Add PHYSICS_OBJECT as a key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.PhysicsObject # value
function GameAPI.add_physics_object_kv(kvbase, key, item) end

--Add PHYSICS_ENTITY key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.PhysicsEntity # value
function GameAPI.add_physics_entity_kv(kvbase, key, item) end

--Add PHYSICS_OBJECT_KEY as a key pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.PhysicsObjectKey # value
function GameAPI.add_physics_object_key_kv(kvbase, key, item) end

--Add PHYSICS_ENTITY_KEY to the key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.PhysicsEntityKey # value
function GameAPI.add_physics_entity_key_kv(kvbase, key, item) end

--Add the RIGID_BODY key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.RigidBody # value
function GameAPI.add_rigid_body_kv(kvbase, key, item) end

--Add the RIGID_BODY_GROUP key pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.RigidBodyGroup # value
function GameAPI.add_rigid_body_group_kv(kvbase, key, item) end

--Add a COLLIDER key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.Collider # value
function GameAPI.add_collider_kv(kvbase, key, item) end

--Add a JOINT key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.Joint # value
function GameAPI.add_joint_kv(kvbase, key, item) end

--Add a REACTION key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.Reaction # value
function GameAPI.add_reaction_kv(kvbase, key, item) end

--Add REACTION_GROUP key value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.ReactionGroup # value
function GameAPI.add_reaction_group_kv(kvbase, key, item) end

--Add a DYNAMIC_TRIGGER_INSTANCE key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.DynamicTriggerInstance # value
function GameAPI.add_dynamic_trigger_instance_kv(kvbase, key, item) end

--Add a TABLE key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.Table # value
function GameAPI.add_table_kv(kvbase, key, item) end

--Add a RANDOM_POOL key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.RandomPool # value
function GameAPI.add_random_pool_kv(kvbase, key, item) end

--Add a SCENE_UI key pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.SceneNode # value
function GameAPI.add_scene_ui_kv(kvbase, key, item) end

--Add the DAMAGE_TYPE key and value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? integer # value
function GameAPI.add_damage_type_kv(kvbase, key, item) end

--Add a HARM_TEXT_TYPE_NEW key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? string # value
function GameAPI.add_harm_text_type_new_kv(kvbase, key, item) end

--Add a FONT_TYPE key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? string # value
function GameAPI.add_font_type_kv(kvbase, key, item) end

--The JUMP_WORD_TRACK key pair was added
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? integer # value
function GameAPI.add_jump_word_track_kv(kvbase, key, item) end

--The NEW_TIMER key-value pair was added
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.Timer # value
function GameAPI.add_new_timer_kv(kvbase, key, item) end

--Add a TECH_KEY key pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.TechKey # value
function GameAPI.add_tech_key_kv(kvbase, key, item) end

--Add STORE_KEY key-value pairs
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.StoreKey # value
function GameAPI.add_store_key_kv(kvbase, key, item) end

--Add a KEYBOARD_KEY pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.KeyboardKey # value
function GameAPI.add_keyboard_key_kv(kvbase, key, item) end

--Add the FUNC_KEYBOARD_KEY key pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.FuncKeyboardKey # value
function GameAPI.add_func_keyboard_key_kv(kvbase, key, item) end

--Add a MOUSE_KEY key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.MouseKey # value
function GameAPI.add_mouse_key_kv(kvbase, key, item) end

--Add a MOUSE_WHEEL key pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.MouseWheel # value
function GameAPI.add_mouse_wheel_kv(kvbase, key, item) end

--Add a MAP key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.Map # value
function GameAPI.add_map_kv(kvbase, key, item) end

--Add a POST_EFFECT key pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.PostEffect # value
function GameAPI.add_post_effect_kv(kvbase, key, item) end

--Add a UNIT_TYPE key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.UnitType # value
function GameAPI.add_unit_type_kv(kvbase, key, item) end

--Add a UNIT_COMMAND_TYPE key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.UnitCommandType # value
function GameAPI.add_unit_command_type_kv(kvbase, key, item) end

--Add a UNIT_GROUP_COMMAND_TYPE key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.UnitGroupCommandType # value
function GameAPI.add_unit_group_command_type_kv(kvbase, key, item) end

--Add MINI_MAP_COLOR_TYPE key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.MiniMapColorType # value
function GameAPI.add_mini_map_color_type_kv(kvbase, key, item) end

--Add a UNIT_BEHAVIOR key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.UnitBehavior # value
function GameAPI.add_unit_behavior_kv(kvbase, key, item) end

--Add a CURVED_PATH key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.CurvedPath # value
function GameAPI.add_curved_path_kv(kvbase, key, item) end

--Add a CURVED_PATH_3D key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.CurvedPath3D # value
function GameAPI.add_curved_path_3d_kv(kvbase, key, item) end

--Add RESCUE_SEEKER_TYPE key and value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.ERescueSeekerType # value
function GameAPI.add_rescue_seeker_type_kv(kvbase, key, item) end

--Add RESCUER_TYPE key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.ERescuerType # value
function GameAPI.add_rescuer_type_kv(kvbase, key, item) end

--Add STORE_ITEM_TYPE key-value pairs
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.StoreItemType # value
function GameAPI.add_store_item_type_kv(kvbase, key, item) end

--Determine whether key-value pairs exist (type ignored)
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Boolean value
function GameAPI.has_kv_pair(kvbase, key) end

--Determine if the default type has a key-value pair (ignore the type)
---@param prefab_type string # Default category list
---@param prefab_key integer # Default number
---@param key string # Key name
---@return boolean # Boolean value
function GameAPI.has_prefab_kv_any(prefab_type, prefab_key, key) end

--Checks whether a BOOLEAN key pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_boolean(kvbase, key) end

--Check whether the unit number contains a BOOLEAN key pair
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_boolean_kv(prefab_key, key) end

--Determines whether the item number has a BOOLEAN key pair
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_boolean_kv(prefab_key, key) end

--Determines whether the skill number has a BOOLEAN key-value pair
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_boolean_kv(prefab_key, key) end

--Check whether an INTEGER key pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_integer(kvbase, key) end

--Determines whether an INTEGER key pair exists in the unit number
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_integer_kv(prefab_key, key) end

--Determines whether an INTEGER key pair exists in the item number
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_integer_kv(prefab_key, key) end

--Check whether an INTEGER key pair exists in the skill number
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_integer_kv(prefab_key, key) end

--Determines whether FLOAT key-value pairs exist
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_float(kvbase, key) end

--Determines whether the unit number has a FLOAT key-value pair
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_float_kv(prefab_key, key) end

--Determines whether the item number has a FLOAT key-value pair
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_float_kv(prefab_key, key) end

--Determines whether the skill number has FLOAT key-value pairs
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_float_kv(prefab_key, key) end

--Check whether a STRING key-value pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_string(kvbase, key) end

--Check whether the unit number contains a STRING key-value pair
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_string_kv(prefab_key, key) end

--Determines whether the item number has a STRING key-value pair
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_string_kv(prefab_key, key) end

--Check whether the skill number has a STRING key-value pair
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_string_kv(prefab_key, key) end

--Determines whether UI_COMP key-value pairs exist
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_ui_comp(kvbase, key) end

--Determines whether there is a UI_COMP key-value pair for the unit number
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_ui_comp_kv(prefab_key, key) end

--Determine if the item number has a UI_COMP key-value pair
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_ui_comp_kv(prefab_key, key) end

--Determines whether the skill number has a UI_COMP key-value pair
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_ui_comp_kv(prefab_key, key) end

--Determines whether UI_COMP_TYPE key-value pairs exist
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_ui_comp_type(kvbase, key) end

--Determine whether there is a UI_COMP_TYPE key-value pair in the unit number
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_ui_comp_type_kv(prefab_key, key) end

--Determine whether there is a UI_COMP_TYPE key-value pair in the item number
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_ui_comp_type_kv(prefab_key, key) end

--Determines whether the skill number has a UI_COMP_TYPE key-value pair
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_ui_comp_type_kv(prefab_key, key) end

--Determines whether UI_COMP_EVENT_TYPE key-value pairs exist
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_ui_comp_event_type(kvbase, key) end

--Determines whether there is a UI_COMP_EVENT_TYPE key-value pair in the unit number
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_ui_comp_event_type_kv(prefab_key, key) end

--Determine whether there is a UI_COMP_EVENT_TYPE key-value pair in the item number
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_ui_comp_event_type_kv(prefab_key, key) end

--Determines whether a UI_COMP_EVENT_TYPE key-value pair exists in the skill number
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_ui_comp_event_type_kv(prefab_key, key) end

--Determines whether UI_COMP_ATTR key-value pairs exist
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_ui_comp_attr(kvbase, key) end

--Determines whether there is a UI_COMP_ATTR key-value pair in the unit number
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_ui_comp_attr_kv(prefab_key, key) end

--Determines whether the item number has a UI_COMP_ATTR key-value pair
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_ui_comp_attr_kv(prefab_key, key) end

--Determines whether the skill number has a UI_COMP_ATTR key-value pair
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_ui_comp_attr_kv(prefab_key, key) end

--Determines whether a UI_COMP_ALIGN_TYPE key value pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_ui_comp_align_type(kvbase, key) end

--Determines whether there is a UI_COMP_ALIGN_TYPE key-value pair for the unit number
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_ui_comp_align_type_kv(prefab_key, key) end

--Determine if there is a UI_COMP_ALIGN_TYPE key value pair for the item number
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_ui_comp_align_type_kv(prefab_key, key) end

--Determines whether there is a UI_COMP_ALIGN_TYPE key-value pair for the skill number
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_ui_comp_align_type_kv(prefab_key, key) end

--Determines whether UI_PREFAB key-value pairs exist
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_ui_prefab(kvbase, key) end

--Determines whether the unit number has UI_PREFAB key-value pairs
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_ui_prefab_kv(prefab_key, key) end

--Determines whether the item number has a UI_PREFAB key value pair
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_ui_prefab_kv(prefab_key, key) end

--Determines whether the skill number has a UI_PREFAB key-value pair
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_ui_prefab_kv(prefab_key, key) end

--Determines whether a UI_PREFAB_INSTANCE key-value pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_ui_prefab_instance(kvbase, key) end

--Determines whether the unit number has a UI_PREFAB_INSTANCE key-value pair
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_ui_prefab_instance_kv(prefab_key, key) end

--Determines whether the item number has a UI_PREFAB_INSTANCE key-value pair
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_ui_prefab_instance_kv(prefab_key, key) end

--Determines whether the skill number has a UI_PREFAB_INSTANCE key-value pair
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_ui_prefab_instance_kv(prefab_key, key) end

--Determine whether a UI_PREFAB_INS_UID key-value pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_ui_prefab_ins_uid(kvbase, key) end

--Determine whether the unit number has a UI_PREFAB_INS_UID key-value pair
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_ui_prefab_ins_uid_kv(prefab_key, key) end

--Determine if the item number has a UI_PREFAB_INS_UID key-value pair
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_ui_prefab_ins_uid_kv(prefab_key, key) end

--Determine whether the skill number has a UI_PREFAB_INS_UID key-value pair
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_ui_prefab_ins_uid_kv(prefab_key, key) end

--Determines whether a UI_DIRECTION key-value pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_ui_direction(kvbase, key) end

--Determines whether there is a UI_DIRECTION key-value pair for the unit number
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_ui_direction_kv(prefab_key, key) end

--Determines if the item number has a UI_DIRECTION key-value pair
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_ui_direction_kv(prefab_key, key) end

--Determines whether the skill number has a UI_DIRECTION key-value pair
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_ui_direction_kv(prefab_key, key) end

--Determines whether a UI_MODEL_CAMERA_MOD key value pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_ui_model_camera_mod(kvbase, key) end

--Check whether the unit number has a UI_MODEL_CAMERA_MOD key pair
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_ui_model_camera_mod_kv(prefab_key, key) end

--Determine whether the item number has a UI_MODEL_CAMERA_MOD key value pair
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_ui_model_camera_mod_kv(prefab_key, key) end

--Determine whether the skill number has a UI_MODEL_CAMERA_MOD key pair
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_ui_model_camera_mod_kv(prefab_key, key) end

--Determines whether a UI_BTN_STATUS key-value pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_ui_btn_status(kvbase, key) end

--Check whether there is a UI_BTN_STATUS key-value pair in the unit number
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_ui_btn_status_kv(prefab_key, key) end

--Determine whether the item number has a UI_BTN_STATUS key-value pair
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_ui_btn_status_kv(prefab_key, key) end

--Determines whether the skill number has a UI_BTN_STATUS key-value pair
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_ui_btn_status_kv(prefab_key, key) end

--Determines whether UI_SCROLLVIEW_TYPE key-value pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_ui_scrollview_type(kvbase, key) end

--Determines whether UI_SCROLLVIEW_TYPE key-value pair exists in the unit number
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_ui_scrollview_type_kv(prefab_key, key) end

--Determines whether the item number has a UI_SCROLLVIEW_TYPE key-value pair
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_ui_scrollview_type_kv(prefab_key, key) end

--Determines whether the skill number has a UI_SCROLLVIEW_TYPE key-value pair
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_ui_scrollview_type_kv(prefab_key, key) end

--Determines whether UI_GRIDVIEW_TYPE key-value pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_ui_gridview_type(kvbase, key) end

--Determines whether there is a UI_GRIDVIEW_TYPE key-value pair for the unit number
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_ui_gridview_type_kv(prefab_key, key) end

--Determines whether there is a UI_GRIDVIEW_TYPE key-value pair in the item number
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_ui_gridview_type_kv(prefab_key, key) end

--Determines whether the skill number has a UI_GRIDVIEW_TYPE key-value pair
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_ui_gridview_type_kv(prefab_key, key) end

--Determines whether UI_GRIDVIEW_BAR_TYPE key-value pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_ui_gridview_bar_type(kvbase, key) end

--Determines whether there is a UI_GRIDVIEW_BAR_TYPE key-value pair in the unit number
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_ui_gridview_bar_type_kv(prefab_key, key) end

--Determines whether there is a UI_GRIDVIEW_BAR_TYPE key-value pair in the item number
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_ui_gridview_bar_type_kv(prefab_key, key) end

--Determines whether the skill number has a UI_GRIDVIEW_BAR_TYPE key-value pair
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_ui_gridview_bar_type_kv(prefab_key, key) end

--Check whether a UI_EQUIP_SLOT_USE_TYPE key and value pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_ui_equip_slot_use_type(kvbase, key) end

--Check whether the unit number exists a UI_EQUIP_SLOT_USE_TYPE key and value pair
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_ui_equip_slot_use_type_kv(prefab_key, key) end

--Determine whether the item number has a UI_EQUIP_SLOT_USE_TYPE key and value pair
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_ui_equip_slot_use_type_kv(prefab_key, key) end

--Check whether the skill number has a UI_EQUIP_SLOT_USE_TYPE key and value pair
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_ui_equip_slot_use_type_kv(prefab_key, key) end

--Determine whether a UI_EQUIP_SLOT_DRAG_TYPE key value pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_ui_equip_slot_drag_type(kvbase, key) end

--Check whether the unit number has a UI_EQUIP_SLOT_DRAG_TYPE key value pair
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_ui_equip_slot_drag_type_kv(prefab_key, key) end

--Determine whether the item number has a UI_EQUIP_SLOT_DRAG_TYPE key value pair
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_ui_equip_slot_drag_type_kv(prefab_key, key) end

--Check whether the skill number has a UI_EQUIP_SLOT_DRAG_TYPE key value pair
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_ui_equip_slot_drag_type_kv(prefab_key, key) end

--Determines whether UI_LAYOUT_CLIPPING_TYPE key-value pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_ui_layout_clipping_type(kvbase, key) end

--Determine whether UI_LAYOUT_CLIPPING_TYPE key-value pair exists in the unit number
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_ui_layout_clipping_type_kv(prefab_key, key) end

--Determine whether there is a UI_LAYOUT_CLIPPING_TYPE key-value pair in the item number
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_ui_layout_clipping_type_kv(prefab_key, key) end

--Determines whether the skill number has a UI_LAYOUT_CLIPPING_TYPE key-value pair
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_ui_layout_clipping_type_kv(prefab_key, key) end

--Check whether a UI_TEXT_OVER_LENGTH_HANDLING_TYPE key pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_ui_text_over_length_handling_type(kvbase, key) end

--Check whether there is a UI_TEXT_OVER_LENGTH_HANDLING_TYPE key pair in the unit number
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_ui_text_over_length_handling_type_kv(prefab_key, key) end

--Check whether there is a UI_TEXT_OVER_LENGTH_HANDLING_TYPE key pair in the item number
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_ui_text_over_length_handling_type_kv(prefab_key, key) end

--Check whether a UI_TEXT_OVER_LENGTH_HANDLING_TYPE key pair exists in the skill number
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_ui_text_over_length_handling_type_kv(prefab_key, key) end

--Determines whether UI_ANIM key-value pairs exist
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_ui_anim(kvbase, key) end

--Determines whether there is a UI_ANIM key-value pair in the unit number
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_ui_anim_kv(prefab_key, key) end

--Determines whether the item number has a UI_ANIM key-value pair
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_ui_anim_kv(prefab_key, key) end

--Determines whether the skill number has a UI_ANIM key-value pair
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_ui_anim_kv(prefab_key, key) end

--Determines whether a UI_ANIM_CURVE key-value pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_ui_anim_curve(kvbase, key) end

--Determine whether the unit number has a UI_ANIM_CURVE key-value pair
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_ui_anim_curve_kv(prefab_key, key) end

--Determine if the item number has a UI_ANIM_CURVE key pair
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_ui_anim_curve_kv(prefab_key, key) end

--Determine if the skill number has a UI_ANIM_CURVE key-value pair
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_ui_anim_curve_kv(prefab_key, key) end

--Determines whether a UI_ANIM_PLAY_MODE key-value pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_ui_anim_play_mode(kvbase, key) end

--Determine whether the unit number has a UI_ANIM_PLAY_MODE key-value pair
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_ui_anim_play_mode_kv(prefab_key, key) end

--Determine if the item number has a UI_ANIM_PLAY_MODE key-value pair
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_ui_anim_play_mode_kv(prefab_key, key) end

--Determine if the skill number has a UI_ANIM_PLAY_MODE key-value pair
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_ui_anim_play_mode_kv(prefab_key, key) end

--Check whether the AUDIO_CHANNEL key pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_audio_channel(kvbase, key) end

--Check whether the unit number contains an AUDIO_CHANNEL key pair
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_audio_channel_kv(prefab_key, key) end

--Determines whether an AUDIO_CHANNEL key value pair exists for the item number
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_audio_channel_kv(prefab_key, key) end

--Check whether the skill number has an AUDIO_CHANNEL key pair
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_audio_channel_kv(prefab_key, key) end

--Check whether a UNIT_ENTITY key pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_unit_entity(kvbase, key) end

--Check whether a UNIT_ENTITY key pair exists
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_unit_entity_kv(prefab_key, key) end

--Check whether a UNIT_ENTITY key pair exists in the item number
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_unit_entity_kv(prefab_key, key) end

--Check whether a UNIT_ENTITY key pair exists in the skill number
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_unit_entity_kv(prefab_key, key) end

--Check whether a UNIT_GROUP key pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_unit_group(kvbase, key) end

--Check whether the unit number contains a UNIT_GROUP key pair
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_unit_group_kv(prefab_key, key) end

--Determine whether the item number has a UNIT_GROUP key-value pair
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_unit_group_kv(prefab_key, key) end

--Check whether the skill number has a UNIT_GROUP key pair
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_unit_group_kv(prefab_key, key) end

--Check whether a UNIT_NAME key pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_unit_name(kvbase, key) end

--Check whether the unit number has a UNIT_NAME key-value pair
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_unit_name_kv(prefab_key, key) end

--Determine whether the item number has a UNIT_NAME key value pair
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_unit_name_kv(prefab_key, key) end

--Check whether the skill number has a UNIT_NAME key pair
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_unit_name_kv(prefab_key, key) end

--Check whether a UNIT_NAME_POOL key and value pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_unit_name_pool(kvbase, key) end

--Check whether the unit number contains a UNIT_NAME_POOL key pair
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_unit_name_pool_kv(prefab_key, key) end

--Check whether the item number has a UNIT_NAME_POOL key and value pair
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_unit_name_pool_kv(prefab_key, key) end

--Check whether the skill number has a UNIT_NAME_POOL key and value pair
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_unit_name_pool_kv(prefab_key, key) end

--Check whether a UNIT_WRITE_ATTRIBUTE key pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_unit_write_attribute(kvbase, key) end

--Check whether the UNIT_WRITE_ATTRIBUTE key pair exists
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_unit_write_attribute_kv(prefab_key, key) end

--Check whether the UNIT_WRITE_ATTRIBUTE key pair exists in the item number
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_unit_write_attribute_kv(prefab_key, key) end

--Check whether the skill number has a UNIT_WRITE_ATTRIBUTE key pair
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_unit_write_attribute_kv(prefab_key, key) end

--Checks whether ATTR_ELEMENT key pairs exist
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_attr_element(kvbase, key) end

--Check whether the unit number contains ATTR_ELEMENT key pairs
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_attr_element_kv(prefab_key, key) end

--Determines whether the item number has ATTR_ELEMENT key pairs
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_attr_element_kv(prefab_key, key) end

--Check whether the skill number has ATTR_ELEMENT key pairs
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_attr_element_kv(prefab_key, key) end

--Check whether ATTR_ELEMENT_READ key pairs exist
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_attr_element_read(kvbase, key) end

--Check whether the unit number contains ATTR_ELEMENT_READ key pairs
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_attr_element_read_kv(prefab_key, key) end

--Determines whether the item number contains ATTR_ELEMENT_READ key pairs
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_attr_element_read_kv(prefab_key, key) end

--Check whether the skill number contains ATTR_ELEMENT_READ key pairs
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_attr_element_read_kv(prefab_key, key) end

--Check whether the MOVER_ENTITY key pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_mover_entity(kvbase, key) end

--Check whether a MOVER_ENTITY key pair exists in the unit number
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_mover_entity_kv(prefab_key, key) end

--Check whether the MOVER_ENTITY key pair exists in the item number
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_mover_entity_kv(prefab_key, key) end

--Check whether a MOVER_ENTITY key pair exists in the skill number
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_mover_entity_kv(prefab_key, key) end

--Check whether an IMAGE_QUALITY key pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_image_quality(kvbase, key) end

--Check whether the unit number has an IMAGE_QUALITY key pair
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_image_quality_kv(prefab_key, key) end

--Determines if the item number has an IMAGE_QUALITY key value pair
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_image_quality_kv(prefab_key, key) end

--Check whether the skill number has an IMAGE_QUALITY key pair
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_image_quality_kv(prefab_key, key) end

--Determines whether a WINDOW_TYPE_SETTING key value pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_window_type_setting(kvbase, key) end

--Determines whether the unit number has a WINDOW_TYPE_SETTING key value pair
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_window_type_setting_kv(prefab_key, key) end

--Determines whether the item number has a WINDOW_TYPE_SETTING key value pair
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_window_type_setting_kv(prefab_key, key) end

--Determines whether the skill number has a WINDOW_TYPE_SETTING key value pair
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_window_type_setting_kv(prefab_key, key) end

--Check whether the DAMAGE_ATTACK_TYPE key-value pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_damage_attack_type(kvbase, key) end

--Check whether the DAMAGE_ATTACK_TYPE key-value pair exists in the unit number
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_damage_attack_type_kv(prefab_key, key) end

--Check whether the DAMAGE_ATTACK_TYPE key-value pair exists in the item number
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_damage_attack_type_kv(prefab_key, key) end

--Check whether the DAMAGE_ATTACK_TYPE key-value pair exists in the skill number
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_damage_attack_type_kv(prefab_key, key) end

--Check whether an ITEM_ENTITY key-value pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_item_entity(kvbase, key) end

--Check whether an ITEM_ENTITY key pair exists in the unit number
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_item_entity_kv(prefab_key, key) end

--Determines whether an ITEM_ENTITY key pair exists in the item number
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_item_entity_kv(prefab_key, key) end

--Check whether an ITEM_ENTITY key pair exists in the skill number
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_item_entity_kv(prefab_key, key) end

--Determines whether an ITEM_GROUP key-value pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_item_group(kvbase, key) end

--Determines whether the unit number has an ITEM_GROUP key-value pair
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_item_group_kv(prefab_key, key) end

--Determines whether the item number has an ITEM_GROUP key-value pair
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_item_group_kv(prefab_key, key) end

--Determines whether the skill number has an ITEM_GROUP key-value pair
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_item_group_kv(prefab_key, key) end

--Determines whether an ITEM_NAME key-value pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_item_name(kvbase, key) end

--Check whether the unit number has an ITEM_NAME key-value pair
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_item_name_kv(prefab_key, key) end

--Determine if the item number has an ITEM_NAME key-value pair
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_item_name_kv(prefab_key, key) end

--Determine whether the skill number has an ITEM_NAME key-value pair
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_item_name_kv(prefab_key, key) end

--Determines whether an ITEM_STACK_TYPE key-value pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_item_stack_type(kvbase, key) end

--Determines whether the ITEM_STACK_TYPE key-value pair exists in the unit number
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_item_stack_type_kv(prefab_key, key) end

--Determines whether an ITEM_STACK_TYPE key-value pair exists in the item number
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_item_stack_type_kv(prefab_key, key) end

--Determines whether the skill number has an ITEM_STACK_TYPE key-value pair
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_item_stack_type_kv(prefab_key, key) end

--Check whether the ABILITY key pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_ability(kvbase, key) end

--Check whether the ABILITY key pair exists in the unit number
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_ability_kv(prefab_key, key) end

--Determine whether an ABILITY key pair exists in the item number
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_ability_kv(prefab_key, key) end

--Check whether the ABILITY key pair exists in the skill number
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_ability_kv(prefab_key, key) end

--Checks whether ABILITY_TYPE key-value pairs exist
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_ability_type(kvbase, key) end

--Check whether the unit number contains ABILITY_TYPE key-value pairs
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_ability_type_kv(prefab_key, key) end

--Determines whether the item number has an ABILITY_TYPE key-value pair
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_ability_type_kv(prefab_key, key) end

--Check whether the skill number has an ABILITY_TYPE key-value pair
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_ability_type_kv(prefab_key, key) end

--Check whether the ABILITY_CAST_TYPE key-value pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_ability_cast_type(kvbase, key) end

--Check whether the unit number contains ABILITY_CAST_TYPE key-value pairs
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_ability_cast_type_kv(prefab_key, key) end

--Determines whether the item number has an ABILITY_CAST_TYPE key-value pair
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_ability_cast_type_kv(prefab_key, key) end

--Check whether the skill number has a ABILITY_CAST_TYPE key-value pair
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_ability_cast_type_kv(prefab_key, key) end

--Check whether the ABILITY_NAME key pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_ability_name(kvbase, key) end

--Check whether the ABILITY_NAME key pair exists
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_ability_name_kv(prefab_key, key) end

--Determines whether the item number has an ABILITY_NAME key-value pair
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_ability_name_kv(prefab_key, key) end

--Check whether an ABILITY_NAME key pair exists in the skill number
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_ability_name_kv(prefab_key, key) end

--Check whether SKILL_POINTER_TYPE key-value pairs exist
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_skill_pointer_type(kvbase, key) end

--Check whether the SKILL_POINTER_TYPE key-value pair exists in the unit number
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_skill_pointer_type_kv(prefab_key, key) end

--Check whether the item number has SKILL_POINTER_TYPE key-value pairs
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_skill_pointer_type_kv(prefab_key, key) end

--Check whether the SKILL_POINTER_TYPE key and value pair exists in the skill number
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_skill_pointer_type_kv(prefab_key, key) end

--Check whether MODIFIER_ENTITY key/value pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_modifier_entity(kvbase, key) end

--Check whether MODIFIER_ENTITY key pair exists in the unit number
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_modifier_entity_kv(prefab_key, key) end

--Check whether MODIFIER_ENTITY key pair exists in the item number
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_modifier_entity_kv(prefab_key, key) end

--Check whether MODIFIER_ENTITY key pair exists in the skill number
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_modifier_entity_kv(prefab_key, key) end

--Check whether MODIFIER_TYPE key value pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_modifier_type(kvbase, key) end

--Check whether the MODIFIER_TYPE key pair exists in the unit number
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_modifier_type_kv(prefab_key, key) end

--Check whether the item number contains MODIFIER_TYPE key-value pair
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_modifier_type_kv(prefab_key, key) end

--Check whether MODIFIER_TYPE key value pair exists in the skill number
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_modifier_type_kv(prefab_key, key) end

--Check whether the MODIFIER_EFFECT_TYPE key pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_modifier_effect_type(kvbase, key) end

--Check whether the MODIFIER_EFFECT_TYPE key pair exists in the unit ID
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_modifier_effect_type_kv(prefab_key, key) end

--Check whether the MODIFIER_EFFECT_TYPE key pair exists in the item number
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_modifier_effect_type_kv(prefab_key, key) end

--Check whether the MODIFIER_EFFECT_TYPE key pair exists for the skill number
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_modifier_effect_type_kv(prefab_key, key) end

--Determine if MODIFIER key pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_modifier(kvbase, key) end

--Determine whether there is a MODIFIER key pair for the unit number
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_modifier_kv(prefab_key, key) end

--Determine if the item number has a MODIFIER key pair
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_modifier_kv(prefab_key, key) end

--Determine if MODIFIER key pair exists for the skill number
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_modifier_kv(prefab_key, key) end

--Determines whether a PROJECTILE key-value pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_projectile(kvbase, key) end

--Determines whether the unit number has a PROJECTILE key pair
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_projectile_kv(prefab_key, key) end

--Determines if the item number has a PROJECTILE key pair
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_projectile_kv(prefab_key, key) end

--Determines whether the skill number has a PROJECTILE key pair
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_projectile_kv(prefab_key, key) end

--Determine whether PROJECTILE_ENTITY key value pairs exist
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_projectile_entity(kvbase, key) end

--Determine whether the PROJECTILE_ENTITY key value pair exists in the unit ID
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_projectile_entity_kv(prefab_key, key) end

--Determine whether the PROJECTILE_ENTITY key value pair exists in the object ID
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_projectile_entity_kv(prefab_key, key) end

--Determine whether the PROJECTILE_ENTITY key value pair exists in skill ID
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_projectile_entity_kv(prefab_key, key) end

--Determine whether the PROJECTILE_GROUP key value pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_projectile_group(kvbase, key) end

--Determine whether the PROJECTILE_GROUP key value pair exists in the unit ID
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_projectile_group_kv(prefab_key, key) end

--Determine whether the PROJECTILE_GROUP key value pair exists in the item ID
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_projectile_group_kv(prefab_key, key) end

--Check whether the PROJECTILE_GROUP key value pair exists in skill ID
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_projectile_group_kv(prefab_key, key) end

--Check whether the DESTRUCTIBLE_ENTITY key pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_destructible_entity(kvbase, key) end

--Check whether a key pair of DESTRUCTIBLE_ENTITY exists in the unit ID
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_destructible_entity_kv(prefab_key, key) end

--Determine whether the item number has a DESTRUCTIBLE_ENTITY key pair
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_destructible_entity_kv(prefab_key, key) end

--Check whether a key pair of DESTRUCTIBLE_ENTITY exists for the skill number
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_destructible_entity_kv(prefab_key, key) end

--Check whether the DESTRUCTIBLE_NAME key pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_destructible_name(kvbase, key) end

--Check whether the unit number has a key pair of DESTRUCTIBLE_NAME
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_destructible_name_kv(prefab_key, key) end

--Determine if the item number has a DESTRUCTIBLE_NAME key value pair
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_destructible_name_kv(prefab_key, key) end

--Check whether the skill number has a key pair of DESTRUCTIBLE_NAME
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_destructible_name_kv(prefab_key, key) end

--Check whether a SOUND_ENTITY key pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_sound_entity(kvbase, key) end

--Check whether the unit number has a SOUND_ENTITY key pair
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_sound_entity_kv(prefab_key, key) end

--Check whether the item number has a SOUND_ENTITY key pair
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_sound_entity_kv(prefab_key, key) end

--Check whether a SOUND_ENTITY key pair exists for the skill number
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_sound_entity_kv(prefab_key, key) end

--Check whether AUDIO_KEY key pairs exist
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_audio_key(kvbase, key) end

--Check whether the unit number contains AUDIO_KEY key pairs
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_audio_key_kv(prefab_key, key) end

--Determines whether the item number has an AUDIO_KEY key pair
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_audio_key_kv(prefab_key, key) end

--Check whether the skill number has an AUDIO_KEY key pair
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_audio_key_kv(prefab_key, key) end

--Determines if a GAME_MODE key-value pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_game_mode(kvbase, key) end

--Determines whether a GAME_MODE key-value pair exists in the unit number
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_game_mode_kv(prefab_key, key) end

--Determine if the item number has a GAME_MODE key-value pair
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_game_mode_kv(prefab_key, key) end

--Determine if the skill number has a GAME_MODE key-value pair
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_game_mode_kv(prefab_key, key) end

--Check whether a PLAYER key-value pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_player(kvbase, key) end

--Check whether PLAYER key pairs exist in the unit number
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_player_kv(prefab_key, key) end

--Determines if the item number has a PLAYER key-value pair
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_player_kv(prefab_key, key) end

--Check whether the skill number has a PLAYER key-value pair
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_player_kv(prefab_key, key) end

--Check whether a PLAYER_GROUP key pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_player_group(kvbase, key) end

--Check whether the PLAYER_GROUP key pair exists in the unit number
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_player_group_kv(prefab_key, key) end

--Determine if the item number has a PLAYER_GROUP key pair
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_player_group_kv(prefab_key, key) end

--Check whether the skill number has a PLAYER_GROUP key pair
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_player_group_kv(prefab_key, key) end

--Check whether the ROLE_RES_KEY key pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_role_res_key(kvbase, key) end

--Check whether the unit number contains a ROLE_RES_KEY key pair
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_role_res_key_kv(prefab_key, key) end

--Check whether the item number has a ROLE_RES_KEY key pair
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_role_res_key_kv(prefab_key, key) end

--Check whether the ROLE_RES_KEY key pair exists in the skill number
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_role_res_key_kv(prefab_key, key) end

--Check whether a ROLE_STATUS key pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_role_status(kvbase, key) end

--Check whether the unit number contains a ROLE_STATUS key pair
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_role_status_kv(prefab_key, key) end

--Check whether the item number has a ROLE_STATUS key pair
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_role_status_kv(prefab_key, key) end

--Check whether the ROLE_STATUS key pair exists in the skill number
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_role_status_kv(prefab_key, key) end

--Check whether ROLE_TYPE key-value pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_role_type(kvbase, key) end

--Check whether the ROLE_TYPE key-value pair exists in the unit number
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_role_type_kv(prefab_key, key) end

--Check whether there is a ROLE_TYPE key-value pair in the item number
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_role_type_kv(prefab_key, key) end

--Check whether the ROLE_TYPE key-value pair exists in the skill number
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_role_type_kv(prefab_key, key) end

--Check whether ROLE_RELATION key pairs exist
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_role_relation(kvbase, key) end

--Check whether the unit ID has a ROLE_RELATION key pair
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_role_relation_kv(prefab_key, key) end

--Check whether the item number has a ROLE_RELATION key and value pair
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_role_relation_kv(prefab_key, key) end

--Check whether the skill number has a ROLE_RELATION key pair
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_role_relation_kv(prefab_key, key) end

--Check whether a TEAM key-value pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_team(kvbase, key) end

--Check whether the TEAM key pair exists in the unit number
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_team_kv(prefab_key, key) end

--Determines if there is a TEAM key-value pair in the item number
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_team_kv(prefab_key, key) end

--Check whether the skill number has a TEAM key-value pair
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_team_kv(prefab_key, key) end

--Check whether a POINT key-value pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_point(kvbase, key) end

--Check whether a POINT key pair exists in the unit number
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_point_kv(prefab_key, key) end

--Check whether the item number has a POINT key-value pair
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_point_kv(prefab_key, key) end

--Check whether the skill number has a POINT key-value pair
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_point_kv(prefab_key, key) end

--Check whether VECTOR3 key pairs exist
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_vector3(kvbase, key) end

--Check whether the unit number contains VECTOR3 key pairs
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_vector3_kv(prefab_key, key) end

--Determines whether the item number has a VECTOR3 key-value pair
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_vector3_kv(prefab_key, key) end

--Check whether the skill number has VECTOR3 key-value pairs
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_vector3_kv(prefab_key, key) end

--Check whether a ROTATION key pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_rotation(kvbase, key) end

--Check whether a ROTATION key pair exists in the unit ID
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_rotation_kv(prefab_key, key) end

--Check whether the ROTATION key pair exists
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_rotation_kv(prefab_key, key) end

--Check whether a ROTATION key pair exists in the skill number
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_rotation_kv(prefab_key, key) end

--Check whether POINT_LIST key pairs exist
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_point_list(kvbase, key) end

--Check whether POINT_LIST key pairs exist in the unit number
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_point_list_kv(prefab_key, key) end

--Check whether a POINT_LIST key pair exists in the item number
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_point_list_kv(prefab_key, key) end

--Check whether POINT_LIST key pairs exist in the skill number
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_point_list_kv(prefab_key, key) end

--Check whether a RECTANGLE key pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_rectangle(kvbase, key) end

--Check whether a RECTANGLE key pair exists for the unit number
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_rectangle_kv(prefab_key, key) end

--Determines if there is a RECTANGLE key pair for the item number
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_rectangle_kv(prefab_key, key) end

--Determine whether the skill number has a RECTANGLE key pair
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_rectangle_kv(prefab_key, key) end

--Check whether the ROUND_AREA key pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_round_area(kvbase, key) end

--Check whether the unit number contains ROUND_AREA key pairs
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_round_area_kv(prefab_key, key) end

--Determines whether the item number has a ROUND_AREA key pair
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_round_area_kv(prefab_key, key) end

--Check whether the ROUND_AREA key pair exists in the skill number
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_round_area_kv(prefab_key, key) end

--Check whether POLYGON key pairs exist
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_polygon(kvbase, key) end

--Check whether POLYGON key pairs exist in the unit number
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_polygon_kv(prefab_key, key) end

--Determine if there are POLYGON key pairs in the item number
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_polygon_kv(prefab_key, key) end

--Check whether POLYGON key pairs exist in the skill number
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_polygon_kv(prefab_key, key) end

--Check whether a CAMERA key pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_camera(kvbase, key) end

--Check whether a CAMERA key pair exists in the unit number
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_camera_kv(prefab_key, key) end

--Determine if there is a CAMERA key pair in the item number
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_camera_kv(prefab_key, key) end

--Check whether a CAMERA key pair exists in the skill number
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_camera_kv(prefab_key, key) end

--Check whether CAMLINE key pairs exist
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_camline(kvbase, key) end

--Check whether a CAMLINE key pair exists in the unit number
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_camline_kv(prefab_key, key) end

--Determines whether the item number has a CAMLINE key-value pair
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_camline_kv(prefab_key, key) end

--Check whether the skill number has a CAMLINE key pair
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_camline_kv(prefab_key, key) end

--Check whether POINT_LIGHT key pairs exist
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_point_light(kvbase, key) end

--Check whether a POINT_LIGHT key pair exists in the unit number
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_point_light_kv(prefab_key, key) end

--Check whether a POINT_LIGHT key pair exists in the item number
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_point_light_kv(prefab_key, key) end

--Check whether the skill number has a POINT_LIGHT key pair
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_point_light_kv(prefab_key, key) end

--Check whether SPOT_LIGHT key pairs exist
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_spot_light(kvbase, key) end

--Check whether the unit number has a SPOT_LIGHT key pair
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_spot_light_kv(prefab_key, key) end

--Determine whether the item number has SPOT_LIGHT key pairs
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_spot_light_kv(prefab_key, key) end

--Check whether the skill number has a SPOT_LIGHT key pair
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_spot_light_kv(prefab_key, key) end

--Check whether FOG key pairs exist
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_fog(kvbase, key) end

--Check whether the unit number has FOG key-value pairs
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_fog_kv(prefab_key, key) end

--Determines if FOG key pairs exist in the item number
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_fog_kv(prefab_key, key) end

--Check whether the skill number has FOG key-value pairs
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_fog_kv(prefab_key, key) end

--Check whether a SCENE_SOUND key pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_scene_sound(kvbase, key) end

--Check whether the unit number contains a SCENE_SOUND key pair
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_scene_sound_kv(prefab_key, key) end

--Check whether the item number has a SCENE_SOUND key pair
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_scene_sound_kv(prefab_key, key) end

--Check whether a SCENE_SOUND key pair exists in the skill number
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_scene_sound_kv(prefab_key, key) end

--Check whether MODEL key-value pairs exist
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_model(kvbase, key) end

--Check whether MODEL key pairs exist in the unit number
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_model_kv(prefab_key, key) end

--Determine if the item number has a MODEL key-value pair
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_model_kv(prefab_key, key) end

--Check whether the skill number has a MODEL key-value pair
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_model_kv(prefab_key, key) end

--Check whether LIVE2D key pairs exist
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_live2d(kvbase, key) end

--Check whether the unit number has LIVE2D key pairs
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_live2d_kv(prefab_key, key) end

--Determine whether the item number has LIVE2D key-value pairs
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_live2d_kv(prefab_key, key) end

--Check whether the skill number has LIVE2D key-value pairs
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_live2d_kv(prefab_key, key) end

--Check whether an SFX_ENTITY key pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_sfx_entity(kvbase, key) end

--Check whether an SFX_ENTITY key pair exists in the unit number
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_sfx_entity_kv(prefab_key, key) end

--Check whether an SFX_ENTITY key pair exists in the item number
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_sfx_entity_kv(prefab_key, key) end

--Check whether an SFX_ENTITY key pair exists in the skill number
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_sfx_entity_kv(prefab_key, key) end

--Check whether SFX_KEY key pairs exist
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_sfx_key(kvbase, key) end

--Check whether the unit number contains SFX_KEY key pairs
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_sfx_key_kv(prefab_key, key) end

--Check whether SFX_KEY pairs exist in the item number
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_sfx_key_kv(prefab_key, key) end

--Check whether the skill number has an SFX_KEY key pair
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_sfx_key_kv(prefab_key, key) end

--Check whether a LINK_SFX_ENTITY key pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_link_sfx_entity(kvbase, key) end

--Check whether a LINK_SFX_ENTITY key pair exists in the unit number
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_link_sfx_entity_kv(prefab_key, key) end

--Check whether a LINK_SFX_ENTITY key pair exists in the item number
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_link_sfx_entity_kv(prefab_key, key) end

--Check whether a LINK_SFX_ENTITY key pair exists in the skill number
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_link_sfx_entity_kv(prefab_key, key) end

--Check whether the LINK_SFX_KEY key pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_link_sfx_key(kvbase, key) end

--Check whether the unit number has a LINK_SFX_KEY key pair
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_link_sfx_key_kv(prefab_key, key) end

--Check whether the item number has a LINK_SFX_KEY key pair
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_link_sfx_key_kv(prefab_key, key) end

--Check whether the skill number has a LINK_SFX_KEY key pair
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_link_sfx_key_kv(prefab_key, key) end

--Check whether a CURSOR_KEY key pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_cursor_key(kvbase, key) end

--Check whether the CURSOR_KEY key pair exists in the unit number
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_cursor_key_kv(prefab_key, key) end

--Determines whether a CURSOR_KEY key pair exists in the item number
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_cursor_key_kv(prefab_key, key) end

--Check whether a CURSOR_KEY key pair exists in the skill number
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_cursor_key_kv(prefab_key, key) end

--Check whether an ANGLE key-value pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_angle(kvbase, key) end

--Check whether the ANGLE key pair exists in the unit number
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_angle_kv(prefab_key, key) end

--Determines if the item number has an ANGLE key-value pair
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_angle_kv(prefab_key, key) end

--Check whether the skill number has an ANGLE key-value pair
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_angle_kv(prefab_key, key) end

--Check whether the TEXTURE key-value pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_texture(kvbase, key) end

--Check whether the unit number has a TEXTURE key-value pair
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_texture_kv(prefab_key, key) end

--Determine if the item number has a TEXTURE key pair
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_texture_kv(prefab_key, key) end

--Check whether the skill number has a TEXTURE key-value pair
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_texture_kv(prefab_key, key) end

--Check whether SEQUENCE key pairs exist
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_sequence(kvbase, key) end

--Check whether a SEQUENCE key pair exists in the unit number
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_sequence_kv(prefab_key, key) end

--Determines whether a SEQUENCE key pair exists for item numbers
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_sequence_kv(prefab_key, key) end

--Check whether a SEQUENCE key pair exists for the skill number
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_sequence_kv(prefab_key, key) end

--Check whether the SPINE key pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_spine(kvbase, key) end

--Check whether the unit number has a SPINE key pair
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_spine_kv(prefab_key, key) end

--Determine whether the item number has a SPINE key pair
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_spine_kv(prefab_key, key) end

--Check whether the skill number has a SPINE key pair
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_spine_kv(prefab_key, key) end

--Check whether a PHYSICS_OBJECT key pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_physics_object(kvbase, key) end

--Check whether the PHYSICS_OBJECT key pair exists in the unit number
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_physics_object_kv(prefab_key, key) end

--Check whether the PHYSICS_OBJECT key pair exists in the object number
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_physics_object_kv(prefab_key, key) end

--Check whether the key pair of PHYSICS_OBJECT exists in the skill number
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_physics_object_kv(prefab_key, key) end

--Check whether a PHYSICS_ENTITY key-value pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_physics_entity(kvbase, key) end

--Check whether a PHYSICS_ENTITY key pair exists in the unit number
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_physics_entity_kv(prefab_key, key) end

--Check whether a PHYSICS_ENTITY key pair exists in the object number
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_physics_entity_kv(prefab_key, key) end

--Check whether a PHYSICS_ENTITY key pair exists in the skill number
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_physics_entity_kv(prefab_key, key) end

--Check whether a PHYSICS_OBJECT_KEY key pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_physics_object_key(kvbase, key) end

--Check whether a PHYSICS_OBJECT_KEY key pair exists in the unit ID
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_physics_object_key_kv(prefab_key, key) end

--Check whether the PHYSICS_OBJECT_KEY key pair exists
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_physics_object_key_kv(prefab_key, key) end

--Check whether a PHYSICS_OBJECT_KEY key pair exists in the skill number
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_physics_object_key_kv(prefab_key, key) end

--Check whether the key pair of PHYSICS_ENTITY_KEY exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_physics_entity_key(kvbase, key) end

--Check whether the key pair of PHYSICS_ENTITY_KEY exists in the unit number
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_physics_entity_key_kv(prefab_key, key) end

--Check whether the PHYSICS_ENTITY_KEY key pair exists in the object number
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_physics_entity_key_kv(prefab_key, key) end

--Check whether the key pair of PHYSICS_ENTITY_KEY exists in the skill number
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_physics_entity_key_kv(prefab_key, key) end

--Check whether the RIGID_BODY key pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_rigid_body(kvbase, key) end

--Check whether the RIGID_BODY key pair exists in the unit number
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_rigid_body_kv(prefab_key, key) end

--Check whether the RIGID_BODY key pair exists in the item number
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_rigid_body_kv(prefab_key, key) end

--Check whether the RIGID_BODY key pair exists in the skill number
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_rigid_body_kv(prefab_key, key) end

--Check whether the RIGID_BODY_GROUP key pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_rigid_body_group(kvbase, key) end

--Check whether the RIGID_BODY_GROUP key pair exists in the unit number
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_rigid_body_group_kv(prefab_key, key) end

--Check whether the item number has a RIGID_BODY_GROUP key-value pair
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_rigid_body_group_kv(prefab_key, key) end

--Check whether a RIGID_BODY_GROUP key pair exists in the skill number
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_rigid_body_group_kv(prefab_key, key) end

--Determines whether a COLLIDER key-value pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_collider(kvbase, key) end

--Determines whether there are COLLIDER key-value pairs in the unit number
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_collider_kv(prefab_key, key) end

--Determine if the item number has a COLLIDER key-value pair
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_collider_kv(prefab_key, key) end

--Determine if the skill number has a COLLIDER key-value pair
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_collider_kv(prefab_key, key) end

--Check whether a JOINT key-value pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_joint(kvbase, key) end

--Check whether the unit number has a JOINT key-value pair
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_joint_kv(prefab_key, key) end

--Determine whether the item number has a JOINT key-value pair
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_joint_kv(prefab_key, key) end

--Check whether the skill number has a JOINT key-value pair
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_joint_kv(prefab_key, key) end

--Check whether REACTION key pairs exist
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_reaction(kvbase, key) end

--Check whether the REACTION key pair exists in the unit number
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_reaction_kv(prefab_key, key) end

--Determine if the item number has a REACTION key pair
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_reaction_kv(prefab_key, key) end

--Check whether the REACTION key pair exists in the skill number
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_reaction_kv(prefab_key, key) end

--Determine whether the key value pair is REACTION_GROUP
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_reaction_group(kvbase, key) end

--Determine whether the unit number is REACTION_GROUP key value pair
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_reaction_group_kv(prefab_key, key) end

--Determine whether the item number is REACTION_GROUP key-value pair
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_reaction_group_kv(prefab_key, key) end

--Determine whether the skill number is REACTION_GROUP key value pair
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_reaction_group_kv(prefab_key, key) end

--Check whether a DYNAMIC_TRIGGER_INSTANCE key pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_dynamic_trigger_instance(kvbase, key) end

--Check whether a DYNAMIC_TRIGGER_INSTANCE key pair exists in the unit number
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_dynamic_trigger_instance_kv(prefab_key, key) end

--Determines whether a DYNAMIC_TRIGGER_INSTANCE key pair exists in the item number
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_dynamic_trigger_instance_kv(prefab_key, key) end

--Check whether a DYNAMIC_TRIGGER_INSTANCE key pair exists in the skill number
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_dynamic_trigger_instance_kv(prefab_key, key) end

--Check whether a TABLE key-value pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_table(kvbase, key) end

--Check whether the unit number has a TABLE key-value pair
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_table_kv(prefab_key, key) end

--Check whether the item number has a TABLE key-value pair
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_table_kv(prefab_key, key) end

--Check whether the skill number has a TABLE key-value pair
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_table_kv(prefab_key, key) end

--Determine whether RANDOM_POOL key-value pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_random_pool(kvbase, key) end

--Determine whether RANDOM_POOL key pair exists in the unit number
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_random_pool_kv(prefab_key, key) end

--Determine if there is a RANDOM_POOL key pair in the item number
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_random_pool_kv(prefab_key, key) end

--Determine if there is a RANDOM_POOL key-value pair in the skill number
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_random_pool_kv(prefab_key, key) end

--Check whether a SCENE_UI key pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_scene_ui(kvbase, key) end

--Check whether the unit number contains a SCENE_UI key pair
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_scene_ui_kv(prefab_key, key) end

--Determine whether the item number has a SCENE_UI key pair
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_scene_ui_kv(prefab_key, key) end

--Check whether a SCENE_UI key pair exists in the skill number
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_scene_ui_kv(prefab_key, key) end

--Check whether the DAMAGE_TYPE key pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_damage_type(kvbase, key) end

--Check whether the DAMAGE_TYPE key pair exists in the unit number
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_damage_type_kv(prefab_key, key) end

--Check whether the item number has a DAMAGE_TYPE key pair
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_damage_type_kv(prefab_key, key) end

--Check whether the DAMAGE_TYPE key pair exists in the skill number
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_damage_type_kv(prefab_key, key) end

--Check whether the HARM_TEXT_TYPE_NEW key pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_harm_text_type_new(kvbase, key) end

--Check whether the unit number has a HARM_TEXT_TYPE_NEW key pair
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_harm_text_type_new_kv(prefab_key, key) end

--Determines whether the item number has a HARM_TEXT_TYPE_NEW key pair
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_harm_text_type_new_kv(prefab_key, key) end

--Check whether the skill number has a HARM_TEXT_TYPE_NEW key pair
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_harm_text_type_new_kv(prefab_key, key) end

--Check whether a FONT_TYPE key pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_font_type(kvbase, key) end

--Check whether the unit number has a FONT_TYPE key pair
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_font_type_kv(prefab_key, key) end

--Determines if the item number has a FONT_TYPE key pair
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_font_type_kv(prefab_key, key) end

--Check whether the skill number has a FONT_TYPE key pair
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_font_type_kv(prefab_key, key) end

--Check whether JUMP_WORD_TRACK key pairs exist
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_jump_word_track(kvbase, key) end

--Check whether the unit number contains JUMP_WORD_TRACK key pairs
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_jump_word_track_kv(prefab_key, key) end

--Determine whether the item number has JUMP_WORD_TRACK key pairs
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_jump_word_track_kv(prefab_key, key) end

--Check whether JUMP_WORD_TRACK key pairs exist in the skill number
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_jump_word_track_kv(prefab_key, key) end

--Check whether the NEW_TIMER key pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_new_timer(kvbase, key) end

--Check whether the NEW_TIMER key pair exists in the unit number
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_new_timer_kv(prefab_key, key) end

--Check whether the NEW_TIMER key pair exists in the item number
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_new_timer_kv(prefab_key, key) end

--Check whether the NEW_TIMER key pair exists in the skill number
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_new_timer_kv(prefab_key, key) end

--Check whether a TECH_KEY key pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_tech_key(kvbase, key) end

--Check whether a TECH_KEY key pair exists in the unit number
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_tech_key_kv(prefab_key, key) end

--Check whether the item number has a TECH_KEY key pair
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_tech_key_kv(prefab_key, key) end

--Check whether a TECH_KEY key pair exists in the skill number
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_tech_key_kv(prefab_key, key) end

--Check whether STORE_KEY key pairs exist
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_store_key(kvbase, key) end

--Check whether the unit number has STORE_KEY key pairs
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_store_key_kv(prefab_key, key) end

--Check whether the item number has STORE_KEY key pairs
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_store_key_kv(prefab_key, key) end

--Check whether the skill number has STORE_KEY key pairs
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_store_key_kv(prefab_key, key) end

--Check whether KEYBOARD_KEY pairs exist
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_keyboard_key(kvbase, key) end

--Check whether the unit number contains a KEYBOARD_KEY pair
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_keyboard_key_kv(prefab_key, key) end

--Check whether the item number has a KEYBOARD_KEY pair
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_keyboard_key_kv(prefab_key, key) end

--Check whether a KEYBOARD_KEY pair exists in the skill number
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_keyboard_key_kv(prefab_key, key) end

--FUNC_KEYBOARD_KEY A key pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_func_keyboard_key(kvbase, key) end

--Check whether the unit number exists. FUNC_KEYBOARD_KEY A key pair exists
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_func_keyboard_key_kv(prefab_key, key) end

--FUNC_KEYBOARD_KEY A key pair exists
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_func_keyboard_key_kv(prefab_key, key) end

--FUNC_KEYBOARD_KEY A key pair exists
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_func_keyboard_key_kv(prefab_key, key) end

--Check whether a MOUSE_KEY key-value pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_mouse_key(kvbase, key) end

--Check whether the MOUSE_KEY key pair exists in the unit number
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_mouse_key_kv(prefab_key, key) end

--Determines whether the item number has a MOUSE_KEY key-value pair
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_mouse_key_kv(prefab_key, key) end

--Check whether the MOUSE_KEY key pair exists in the skill number
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_mouse_key_kv(prefab_key, key) end

--Check whether a MOUSE_WHEEL key pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_mouse_wheel(kvbase, key) end

--Check whether a MOUSE_WHEEL key pair exists in the unit number
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_mouse_wheel_kv(prefab_key, key) end

--Determines whether a MOUSE_WHEEL key pair exists in the item number
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_mouse_wheel_kv(prefab_key, key) end

--Check whether a MOUSE_WHEEL key pair exists in the skill number
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_mouse_wheel_kv(prefab_key, key) end

--Check whether MAP key pairs exist
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_map(kvbase, key) end

--Check whether MAP key pairs exist in the unit number
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_map_kv(prefab_key, key) end

--Determine whether the item number has MAP key-value pairs
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_map_kv(prefab_key, key) end

--Check whether the skill number has MAP key pairs
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_map_kv(prefab_key, key) end

--Check whether the POST_EFFECT key pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_post_effect(kvbase, key) end

--Check whether the POST_EFFECT key pair exists in the unit number
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_post_effect_kv(prefab_key, key) end

--Check whether the POST_EFFECT key pair exists in the item number
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_post_effect_kv(prefab_key, key) end

--Check whether the POST_EFFECT key pair exists in the skill number
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_post_effect_kv(prefab_key, key) end

--Check whether a UNIT_TYPE key-value pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_unit_type(kvbase, key) end

--Check whether the unit number contains a UNIT_TYPE key-value pair
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_unit_type_kv(prefab_key, key) end

--Determine whether there is a UNIT_TYPE key-value pair in the item number
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_unit_type_kv(prefab_key, key) end

--Check whether the skill number has a UNIT_TYPE key-value pair
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_unit_type_kv(prefab_key, key) end

--Check whether the UNIT_COMMAND_TYPE key pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_unit_command_type(kvbase, key) end

--Check whether the UNIT_COMMAND_TYPE key pair exists in the unit number
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_unit_command_type_kv(prefab_key, key) end

--Determines whether a UNIT_COMMAND_TYPE key pair exists in the item number
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_unit_command_type_kv(prefab_key, key) end

--Check whether the UNIT_COMMAND_TYPE key pair exists in the skill number
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_unit_command_type_kv(prefab_key, key) end

--Check whether the UNIT_GROUP_COMMAND_TYPE key pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_unit_group_command_type(kvbase, key) end

--Check whether the UNIT_GROUP_COMMAND_TYPE key pair exists
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_unit_group_command_type_kv(prefab_key, key) end

--Check whether the item number has a UNIT_GROUP_COMMAND_TYPE key pair
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_unit_group_command_type_kv(prefab_key, key) end

--Check whether the UNIT_GROUP_COMMAND_TYPE key pair exists in the skill number
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_unit_group_command_type_kv(prefab_key, key) end

--Check whether a MINI_MAP_COLOR_TYPE key-value pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_mini_map_color_type(kvbase, key) end

--Check whether the unit number has a MINI_MAP_COLOR_TYPE key-value pair
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_mini_map_color_type_kv(prefab_key, key) end

--Determine whether the item number has a MINI_MAP_COLOR_TYPE key-value pair
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_mini_map_color_type_kv(prefab_key, key) end

--Check whether the skill number has a MINI_MAP_COLOR_TYPE key-value pair
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_mini_map_color_type_kv(prefab_key, key) end

--Check whether a UNIT_BEHAVIOR key pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_unit_behavior(kvbase, key) end

--Check whether the unit number has a UNIT_BEHAVIOR key pair
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_unit_behavior_kv(prefab_key, key) end

--Determines whether the item number has a UNIT_BEHAVIOR key pair
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_unit_behavior_kv(prefab_key, key) end

--Check whether the skill number has a UNIT_BEHAVIOR key pair
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_unit_behavior_kv(prefab_key, key) end

--Check whether a CURVED_PATH key pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_curved_path(kvbase, key) end

--Check whether a CURVED_PATH key pair exists in the unit number
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_curved_path_kv(prefab_key, key) end

--Determines whether a CURVED_PATH key pair exists in the item number
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_curved_path_kv(prefab_key, key) end

--Check whether a CURVED_PATH key pair exists in the skill number
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_curved_path_kv(prefab_key, key) end

--Check whether a CURVED_PATH_3D key pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_curved_path_3d(kvbase, key) end

--Check whether a CURVED_PATH_3D key pair exists in the unit number
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_curved_path_3d_kv(prefab_key, key) end

--Determine whether the item number has a CURVED_PATH_3D key pair
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_curved_path_3d_kv(prefab_key, key) end

--Check whether a CURVED_PATH_3D key pair exists in the skill number
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_curved_path_3d_kv(prefab_key, key) end

--Check whether the RESCUE_SEEKER_TYPE key pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_rescue_seeker_type(kvbase, key) end

--Check whether the RESCUE_SEEKER_TYPE key pair exists in the unit number
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_rescue_seeker_type_kv(prefab_key, key) end

--Check whether the item number exists in RESCUE_SEEKER_TYPE key-value pair
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_rescue_seeker_type_kv(prefab_key, key) end

--Check whether the skill number has a RESCUE_SEEKER_TYPE key pair
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_rescue_seeker_type_kv(prefab_key, key) end

--Check whether RESCUER_TYPE key-value pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_rescuer_type(kvbase, key) end

--Check whether the unit number has a RESCUER_TYPE key-value pair
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_rescuer_type_kv(prefab_key, key) end

--Check whether the item number has a RESCUER_TYPE key-value pair
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_rescuer_type_kv(prefab_key, key) end

--Check whether a RESCUER_TYPE key pair exists in the skill number
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_rescuer_type_kv(prefab_key, key) end

--Check whether STORE_ITEM_TYPE key-value pairs exist
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_store_item_type(kvbase, key) end

--Check whether the unit number has STORE_ITEM_TYPE key-value pairs
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_store_item_type_kv(prefab_key, key) end

--Determines whether the item number has a STORE_ITEM_TYPE key-value pair
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_store_item_type_kv(prefab_key, key) end

--Check whether the skill number has STORE_ITEM_TYPE key-value pairs
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_store_item_type_kv(prefab_key, key) end

--Gets a BOOLEAN key pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return boolean # Key value
function GameAPI.get_kv_pair_value_boolean(kvbase, key) end

--Get INTEGER key-value pairs
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_kv_pair_value_integer(kvbase, key) end

--Gets FLOAT key-value pairs
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.Fixed # Key value
function GameAPI.get_kv_pair_value_float(kvbase, key) end

--Gets a STRING key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return string # Key value
function GameAPI.get_kv_pair_value_string(kvbase, key) end

--Gets a UI_COMP key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return string # Key value
function GameAPI.get_kv_pair_value_ui_comp(kvbase, key) end

--Gets a UI_COMP_TYPE key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_kv_pair_value_ui_comp_type(kvbase, key) end

--Gets a UI_COMP_EVENT_TYPE key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_kv_pair_value_ui_comp_event_type(kvbase, key) end

--Gets a UI_COMP_ATTR key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return string # Key value
function GameAPI.get_kv_pair_value_ui_comp_attr(kvbase, key) end

--Gets the UI_COMP_ALIGN_TYPE key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_kv_pair_value_ui_comp_align_type(kvbase, key) end

--Gets a UI_PREFAB key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return string # Key value
function GameAPI.get_kv_pair_value_ui_prefab(kvbase, key) end

--Gets a UI_PREFAB_INSTANCE key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.UIPrefabIns # Key value
function GameAPI.get_kv_pair_value_ui_prefab_instance(kvbase, key) end

--Gets the UI_PREFAB_INS_UID key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return string # Key value
function GameAPI.get_kv_pair_value_ui_prefab_ins_uid(kvbase, key) end

--Gets a UI_DIRECTION key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_kv_pair_value_ui_direction(kvbase, key) end

--Gets a UI_MODEL_CAMERA_MOD key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_kv_pair_value_ui_model_camera_mod(kvbase, key) end

--Gets the UI_BTN_STATUS key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_kv_pair_value_ui_btn_status(kvbase, key) end

--Gets UI_SCROLLVIEW_TYPE key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_kv_pair_value_ui_scrollview_type(kvbase, key) end

--Gets a UI_GRIDVIEW_TYPE key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_kv_pair_value_ui_gridview_type(kvbase, key) end

--Gets a UI_GRIDVIEW_BAR_TYPE key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_kv_pair_value_ui_gridview_bar_type(kvbase, key) end

--Get a UI_EQUIP_SLOT_USE_TYPE key and value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_kv_pair_value_ui_equip_slot_use_type(kvbase, key) end

--Get a UI_EQUIP_SLOT_DRAG_TYPE key value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_kv_pair_value_ui_equip_slot_drag_type(kvbase, key) end

--Gets a UI_LAYOUT_CLIPPING_TYPE key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_kv_pair_value_ui_layout_clipping_type(kvbase, key) end

--Get a UI_TEXT_OVER_LENGTH_HANDLING_TYPE key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_kv_pair_value_ui_text_over_length_handling_type(kvbase, key) end

--Gets a UI_ANIM key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.UIAnimKey # Key value
function GameAPI.get_kv_pair_value_ui_anim(kvbase, key) end

--Gets the UI_ANIM_CURVE key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_kv_pair_value_ui_anim_curve(kvbase, key) end

--Gets a UI_ANIM_PLAY_MODE key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_kv_pair_value_ui_anim_play_mode(kvbase, key) end

--Get the AUDIO_CHANNEL key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_kv_pair_value_audio_channel(kvbase, key) end

--Obtain the UNIT_ENTITY key pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.Unit # Key value
function GameAPI.get_kv_pair_value_unit_entity(kvbase, key) end

--Gets the UNIT_GROUP key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.UnitGroup # Key value
function GameAPI.get_kv_pair_value_unit_group(kvbase, key) end

--Gets the UNIT_NAME key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.UnitKey # Key value
function GameAPI.get_kv_pair_value_unit_name(kvbase, key) end

--Get the UNIT_NAME_POOL key and value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.UnitKeyPool # Key value
function GameAPI.get_kv_pair_value_unit_name_pool(kvbase, key) end

--Gets the UNIT_WRITE_ATTRIBUTE key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return string # Key value
function GameAPI.get_kv_pair_value_unit_write_attribute(kvbase, key) end

--Gets the ATTR_ELEMENT key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return string # Key value
function GameAPI.get_kv_pair_value_attr_element(kvbase, key) end

--Gets ATTR_ELEMENT_READ key pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return string # Key value
function GameAPI.get_kv_pair_value_attr_element_read(kvbase, key) end

--Obtain the MOVER_ENTITY key pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.Mover # Key value
function GameAPI.get_kv_pair_value_mover_entity(kvbase, key) end

--Gets the IMAGE_QUALITY key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return string # Key value
function GameAPI.get_kv_pair_value_image_quality(kvbase, key) end

--Gets the WINDOW_TYPE_SETTING key value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return string # Key value
function GameAPI.get_kv_pair_value_window_type_setting(kvbase, key) end

--Gets the DAMAGE_ATTACK_TYPE key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_kv_pair_value_damage_attack_type(kvbase, key) end

--Gets an ITEM_ENTITY key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.Item # Key value
function GameAPI.get_kv_pair_value_item_entity(kvbase, key) end

--Gets the ITEM_GROUP key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.ItemGroup # Key value
function GameAPI.get_kv_pair_value_item_group(kvbase, key) end

--Gets the ITEM_NAME key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.ItemKey # Key value
function GameAPI.get_kv_pair_value_item_name(kvbase, key) end

--Gets the ITEM_STACK_TYPE key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.ItemStackType # Key value
function GameAPI.get_kv_pair_value_item_stack_type(kvbase, key) end

--Gets the ABILITY key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.Ability # Key value
function GameAPI.get_kv_pair_value_ability(kvbase, key) end

--Gets ABILITY_TYPE key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_kv_pair_value_ability_type(kvbase, key) end

--Obtain the ABILITY_CAST_TYPE key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_kv_pair_value_ability_cast_type(kvbase, key) end

--Get the ABILITY_NAME key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.AbilityKey # Key value
function GameAPI.get_kv_pair_value_ability_name(kvbase, key) end

--Gets SKILL_POINTER_TYPE key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_kv_pair_value_skill_pointer_type(kvbase, key) end

--Get MODIFIER_ENTITY key pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.ModifierEntity # Key value
function GameAPI.get_kv_pair_value_modifier_entity(kvbase, key) end

--Get MODIFIER_TYPE key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.ModifierType # Key value
function GameAPI.get_kv_pair_value_modifier_type(kvbase, key) end

--Get the MODIFIER_EFFECT_TYPE key pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.ModifierEffectType # Key value
function GameAPI.get_kv_pair_value_modifier_effect_type(kvbase, key) end

--Gets MODIFIER key pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.ModifierKey # Key value
function GameAPI.get_kv_pair_value_modifier(kvbase, key) end

--Gets the PROJECTILE key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.ProjectileKey # Key value
function GameAPI.get_kv_pair_value_projectile(kvbase, key) end

--Obtain the PROJECTILE_ENTITY key value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.ProjectileEntity # Key value
function GameAPI.get_kv_pair_value_projectile_entity(kvbase, key) end

--Obtain the PROJECTILE_GROUP key value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.ProjectileGroup # Key value
function GameAPI.get_kv_pair_value_projectile_group(kvbase, key) end

--Get the DESTRUCTIBLE_ENTITY key pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.Destructible # Key value
function GameAPI.get_kv_pair_value_destructible_entity(kvbase, key) end

--Get the DESTRUCTIBLE_NAME key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.DestructibleKey # Key value
function GameAPI.get_kv_pair_value_destructible_name(kvbase, key) end

--Get SOUND_ENTITY key pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.SoundEntity # Key value
function GameAPI.get_kv_pair_value_sound_entity(kvbase, key) end

--Get the AUDIO_KEY key pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.AudioKey # Key value
function GameAPI.get_kv_pair_value_audio_key(kvbase, key) end

--Gets the GAME_MODE key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.GameMode # Key value
function GameAPI.get_kv_pair_value_game_mode(kvbase, key) end

--Gets the PLAYER key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.Role # Key value
function GameAPI.get_kv_pair_value_player(kvbase, key) end

--Gets the PLAYER_GROUP key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.RoleGroup # Key value
function GameAPI.get_kv_pair_value_player_group(kvbase, key) end

--Obtain the ROLE_RES_KEY key pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.RoleResKey # Key value
function GameAPI.get_kv_pair_value_role_res_key(kvbase, key) end

--Obtain the ROLE_STATUS key pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.RoleStatus # Key value
function GameAPI.get_kv_pair_value_role_status(kvbase, key) end

--Gets the ROLE_TYPE key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.RoleType # Key value
function GameAPI.get_kv_pair_value_role_type(kvbase, key) end

--Get the ROLE_RELATION key and value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.RoleRelation # Key value
function GameAPI.get_kv_pair_value_role_relation(kvbase, key) end

--Gets the TEAM key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.Camp # Key value
function GameAPI.get_kv_pair_value_team(kvbase, key) end

--Gets the POINT key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.FPoint # Key value
function GameAPI.get_kv_pair_value_point(kvbase, key) end

--Gets VECTOR3 key-value pairs
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.FVector3 # Key value
function GameAPI.get_kv_pair_value_vector3(kvbase, key) end

--Gets the ROTATION key pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.FRotation # Key value
function GameAPI.get_kv_pair_value_rotation(kvbase, key) end

--Gets the POINT_LIST key pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.Road # Key value
function GameAPI.get_kv_pair_value_point_list(kvbase, key) end

--Gets the RECTANGLE key pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.RecArea # Key value
function GameAPI.get_kv_pair_value_rectangle(kvbase, key) end

--Gets the ROUND_AREA key pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.CirArea # Key value
function GameAPI.get_kv_pair_value_round_area(kvbase, key) end

--Gets POLYGON key-value pairs
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.PolyArea # Key value
function GameAPI.get_kv_pair_value_polygon(kvbase, key) end

--Gets the CAMERA key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.Camera # Key value
function GameAPI.get_kv_pair_value_camera(kvbase, key) end

--Gets a CAMLINE key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.CamlineID # Key value
function GameAPI.get_kv_pair_value_camline(kvbase, key) end

--Obtain POINT_LIGHT key pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.PointLight # Key value
function GameAPI.get_kv_pair_value_point_light(kvbase, key) end

--Gets the SPOT_LIGHT key pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.SpotLight # Key value
function GameAPI.get_kv_pair_value_spot_light(kvbase, key) end

--Get FOG key-value pairs
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.Fog # Key value
function GameAPI.get_kv_pair_value_fog(kvbase, key) end

--Get the SCENE_SOUND key pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.SceneSound # Key value
function GameAPI.get_kv_pair_value_scene_sound(kvbase, key) end

--Gets the MODEL key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.ModelKey # Key value
function GameAPI.get_kv_pair_value_model(kvbase, key) end

--Get LIVE2D key-value pairs
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.Live2dKey # Key value
function GameAPI.get_kv_pair_value_live2d(kvbase, key) end

--Obtain the SFX_ENTITY key pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.Sfx # Key value
function GameAPI.get_kv_pair_value_sfx_entity(kvbase, key) end

--Gets the SFX_KEY key pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.SfxKey # Key value
function GameAPI.get_kv_pair_value_sfx_key(kvbase, key) end

--Obtain the LINK_SFX_ENTITY key pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.LinkSfx # Key value
function GameAPI.get_kv_pair_value_link_sfx_entity(kvbase, key) end

--Gets the LINK_SFX_KEY key pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.LinkSfxKey # Key value
function GameAPI.get_kv_pair_value_link_sfx_key(kvbase, key) end

--Gets the CURSOR_KEY key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.CursorKey # Key value
function GameAPI.get_kv_pair_value_cursor_key(kvbase, key) end

--Gets the ANGLE key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.Fixed # Key value
function GameAPI.get_kv_pair_value_angle(kvbase, key) end

--Get the TEXTURE key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.Texture # Key value
function GameAPI.get_kv_pair_value_texture(kvbase, key) end

--Get SEQUENCE key pairs
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.Sequence # Key value
function GameAPI.get_kv_pair_value_sequence(kvbase, key) end

--Gets the SPINE key pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.Spine # Key value
function GameAPI.get_kv_pair_value_spine(kvbase, key) end

--Obtain the key pair of PHYSICS_OBJECT
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.PhysicsObject # Key value
function GameAPI.get_kv_pair_value_physics_object(kvbase, key) end

--Obtain PHYSICS_ENTITY key pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.PhysicsEntity # Key value
function GameAPI.get_kv_pair_value_physics_entity(kvbase, key) end

--Obtain the PHYSICS_OBJECT_KEY key pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.PhysicsObjectKey # Key value
function GameAPI.get_kv_pair_value_physics_object_key(kvbase, key) end

--Obtain the key pair of PHYSICS_ENTITY_KEY
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.PhysicsEntityKey # Key value
function GameAPI.get_kv_pair_value_physics_entity_key(kvbase, key) end

--Gets the RIGID_BODY key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.RigidBody # Key value
function GameAPI.get_kv_pair_value_rigid_body(kvbase, key) end

--Get the RIGID_BODY_GROUP key pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.RigidBodyGroup # Key value
function GameAPI.get_kv_pair_value_rigid_body_group(kvbase, key) end

--Gets the COLLIDER key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.Collider # Key value
function GameAPI.get_kv_pair_value_collider(kvbase, key) end

--Gets JOINT key-value pairs
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.Joint # Key value
function GameAPI.get_kv_pair_value_joint(kvbase, key) end

--Gets the REACTION key pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.Reaction # Key value
function GameAPI.get_kv_pair_value_reaction(kvbase, key) end

--Obtain either _group key value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.ReactionGroup # Key value
function GameAPI.get_kv_pair_value_reaction_group(kvbase, key) end

--Gets the DYNAMIC_TRIGGER_INSTANCE key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.DynamicTriggerInstance # Key value
function GameAPI.get_kv_pair_value_dynamic_trigger_instance(kvbase, key) end

--Gets the TABLE key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.Table # Key value
function GameAPI.get_kv_pair_value_table(kvbase, key) end

--Get the RANDOM_POOL key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.RandomPool # Key value
function GameAPI.get_kv_pair_value_random_pool(kvbase, key) end

--Obtain the SCENE_UI key pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.SceneNode # Key value
function GameAPI.get_kv_pair_value_scene_ui(kvbase, key) end

--Gets the DAMAGE_TYPE key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_kv_pair_value_damage_type(kvbase, key) end

--Gets the HARM_TEXT_TYPE_NEW key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return string # Key value
function GameAPI.get_kv_pair_value_harm_text_type_new(kvbase, key) end

--Gets the FONT_TYPE key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return string # Key value
function GameAPI.get_kv_pair_value_font_type(kvbase, key) end

--Gets the JUMP_WORD_TRACK key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_kv_pair_value_jump_word_track(kvbase, key) end

--Get the NEW_TIMER key pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.Timer # Key value
function GameAPI.get_kv_pair_value_new_timer(kvbase, key) end

--Gets the TECH_KEY key pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.TechKey # Key value
function GameAPI.get_kv_pair_value_tech_key(kvbase, key) end

--Get STORE_KEY key-value pairs
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.StoreKey # Key value
function GameAPI.get_kv_pair_value_store_key(kvbase, key) end

--Obtain the KEYBOARD_KEY key pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.KeyboardKey # Key value
function GameAPI.get_kv_pair_value_keyboard_key(kvbase, key) end

--Gets the FUNC_KEYBOARD_KEY key pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.FuncKeyboardKey # Key value
function GameAPI.get_kv_pair_value_func_keyboard_key(kvbase, key) end

--Gets the MOUSE_KEY key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.MouseKey # Key value
function GameAPI.get_kv_pair_value_mouse_key(kvbase, key) end

--Gets a MOUSE_WHEEL key pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.MouseWheel # Key value
function GameAPI.get_kv_pair_value_mouse_wheel(kvbase, key) end

--Get MAP key-value pairs
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.Map # Key value
function GameAPI.get_kv_pair_value_map(kvbase, key) end

--Gets the POST_EFFECT key pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.PostEffect # Key value
function GameAPI.get_kv_pair_value_post_effect(kvbase, key) end

--Gets the UNIT_TYPE key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.UnitType # Key value
function GameAPI.get_kv_pair_value_unit_type(kvbase, key) end

--Gets the UNIT_COMMAND_TYPE key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.UnitCommandType # Key value
function GameAPI.get_kv_pair_value_unit_command_type(kvbase, key) end

--Gets the UNIT_GROUP_COMMAND_TYPE key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.UnitGroupCommandType # Key value
function GameAPI.get_kv_pair_value_unit_group_command_type(kvbase, key) end

--Gets the MINI_MAP_COLOR_TYPE key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.MiniMapColorType # Key value
function GameAPI.get_kv_pair_value_mini_map_color_type(kvbase, key) end

--Gets the UNIT_BEHAVIOR key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.UnitBehavior # Key value
function GameAPI.get_kv_pair_value_unit_behavior(kvbase, key) end

--Gets the CURVED_PATH key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.CurvedPath # Key value
function GameAPI.get_kv_pair_value_curved_path(kvbase, key) end

--Gets a CURVED_PATH_3D key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.CurvedPath3D # Key value
function GameAPI.get_kv_pair_value_curved_path_3d(kvbase, key) end

--Obtain the RESCUE_SEEKER_TYPE key and value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.ERescueSeekerType # Key value
function GameAPI.get_kv_pair_value_rescue_seeker_type(kvbase, key) end

--Obtain RESCUER_TYPE key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.ERescuerType # Key value
function GameAPI.get_kv_pair_value_rescuer_type(kvbase, key) end

--Gets STORE_ITEM_TYPE key-value pairs
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return py.StoreItemType # Key value
function GameAPI.get_kv_pair_value_store_item_type(kvbase, key) end

--Gets a global trigger non-array variable (specified type)
---@param var_type string # Variable type
---@param key string # Variable name
---@return py.Actor # value
function GameAPI.get_trigger_variable_by_type(var_type, key) end

--Gets a global trigger array variable subentry (specified type)
---@param var_type string # Variable type
---@param key string # Variable name
---@param index integer # subscript
---@return py.Actor # value
function GameAPI.get_trigger_list_variable_by_type(var_type, key, index) end

--Gets global trigger BOOLEAN non-array variable
---@param key string # Variable name
---@return boolean # value
function GameAPI.get_trigger_variable_boolean(key) end

--Gets trigger BOOLEAN non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return boolean # value
function GameAPI.get_trigger_actor_variable_boolean(actor, key) end

--Gets a global trigger BOOLEAN array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@return boolean # value
function GameAPI.get_trigger_list_variable_boolean(key, index) end

--Gets trigger BOOLEAN array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@return boolean # value
function GameAPI.get_trigger_list_actor_variable_boolean(actor, key, index) end

--Gets a global trigger BOOLEAN array variable
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_variable_all_boolean(key) end

--Gets trigger BOOLEAN array of group variables
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_actor_variable_all_boolean(actor, key) end

--Gets the global trigger INTEGER non-array variable
---@param key string # Variable name
---@return integer # value
function GameAPI.get_trigger_variable_integer(key) end

--Gets the trigger INTEGER non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return integer # value
function GameAPI.get_trigger_actor_variable_integer(actor, key) end

--Gets the INTEGER array variable subentry of the global trigger
---@param key string # Variable name
---@param index integer # subscript
---@return integer # value
function GameAPI.get_trigger_list_variable_integer(key, index) end

--Gets the trigger INTEGER array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@return integer # value
function GameAPI.get_trigger_list_actor_variable_integer(actor, key, index) end

--Gets the global trigger INTEGER array variable
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_variable_all_integer(key) end

--Gets an array of trigger INTEGER group variables
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_actor_variable_all_integer(actor, key) end

--Gets the global trigger FLOAT non-array variable
---@param key string # Variable name
---@return py.Fixed # value
function GameAPI.get_trigger_variable_float(key) end

--Gets trigger FLOAT non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.Fixed # value
function GameAPI.get_trigger_actor_variable_float(actor, key) end

--Gets the global trigger FLOAT array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@return py.Fixed # value
function GameAPI.get_trigger_list_variable_float(key, index) end

--Gets trigger FLOAT array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@return py.Fixed # value
function GameAPI.get_trigger_list_actor_variable_float(actor, key, index) end

--Gets the global trigger FLOAT array variable
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_variable_all_float(key) end

--Gets an array of trigger FLOAT group variables
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_actor_variable_all_float(actor, key) end

--Gets a global trigger STRING non-array variable
---@param key string # Variable name
---@return string # value
function GameAPI.get_trigger_variable_string(key) end

--Gets trigger STRING non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return string # value
function GameAPI.get_trigger_actor_variable_string(actor, key) end

--Gets the global trigger STRING array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@return string # value
function GameAPI.get_trigger_list_variable_string(key, index) end

--Gets trigger STRING array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@return string # value
function GameAPI.get_trigger_list_actor_variable_string(actor, key, index) end

--Gets the global trigger STRING array variable
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_variable_all_string(key) end

--Gets an array of trigger STRING group variables
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_actor_variable_all_string(actor, key) end

--Gets the global trigger UI_COMP non-array variable
---@param key string # Variable name
---@return string # value
function GameAPI.get_trigger_variable_ui_comp(key) end

--Gets the trigger UI_COMP non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return string # value
function GameAPI.get_trigger_actor_variable_ui_comp(actor, key) end

--Gets the global trigger UI_COMP array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@return string # value
function GameAPI.get_trigger_list_variable_ui_comp(key, index) end

--Gets trigger UI_COMP array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@return string # value
function GameAPI.get_trigger_list_actor_variable_ui_comp(actor, key, index) end

--Gets the global trigger UI_COMP array variable
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_variable_all_ui_comp(key) end

--Gets the trigger UI_COMP group variable array
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_actor_variable_all_ui_comp(actor, key) end

--Gets the global trigger UI_COMP_TYPE non-array variable
---@param key string # Variable name
---@return integer # value
function GameAPI.get_trigger_variable_ui_comp_type(key) end

--Gets trigger UI_COMP_TYPE non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return integer # value
function GameAPI.get_trigger_actor_variable_ui_comp_type(actor, key) end

--Gets global trigger UI_COMP_TYPE array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@return integer # value
function GameAPI.get_trigger_list_variable_ui_comp_type(key, index) end

--Gets trigger UI_COMP_TYPE array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@return integer # value
function GameAPI.get_trigger_list_actor_variable_ui_comp_type(actor, key, index) end

--Gets the global trigger UI_COMP_TYPE array variable
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_variable_all_ui_comp_type(key) end

--Gets the trigger UI_COMP_TYPE group variable array
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_actor_variable_all_ui_comp_type(actor, key) end

--Gets the global trigger UI_COMP_EVENT_TYPE non-array variable
---@param key string # Variable name
---@return integer # value
function GameAPI.get_trigger_variable_ui_comp_event_type(key) end

--Gets trigger UI_COMP_EVENT_TYPE non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return integer # value
function GameAPI.get_trigger_actor_variable_ui_comp_event_type(actor, key) end

--Gets the global trigger UI_COMP_EVENT_TYPE array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@return integer # value
function GameAPI.get_trigger_list_variable_ui_comp_event_type(key, index) end

--Gets trigger UI_COMP_EVENT_TYPE array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@return integer # value
function GameAPI.get_trigger_list_actor_variable_ui_comp_event_type(actor, key, index) end

--Gets the global trigger UI_COMP_EVENT_TYPE array variable
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_variable_all_ui_comp_event_type(key) end

--Gets the trigger UI_COMP_EVENT_TYPE group variable array
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_actor_variable_all_ui_comp_event_type(actor, key) end

--Gets the global trigger UI_COMP_ALIGN_TYPE non-array variable
---@param key string # Variable name
---@return integer # value
function GameAPI.get_trigger_variable_ui_comp_align_type(key) end

--Gets the trigger UI_COMP_ALIGN_TYPE non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return integer # value
function GameAPI.get_trigger_actor_variable_ui_comp_align_type(actor, key) end

--Gets the UI_COMP_ALIGN_TYPE array variable subentry of the global trigger
---@param key string # Variable name
---@param index integer # subscript
---@return integer # value
function GameAPI.get_trigger_list_variable_ui_comp_align_type(key, index) end

--Gets the trigger UI_COMP_ALIGN_TYPE array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@return integer # value
function GameAPI.get_trigger_list_actor_variable_ui_comp_align_type(actor, key, index) end

--Gets the global trigger UI_COMP_ALIGN_TYPE array variable
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_variable_all_ui_comp_align_type(key) end

--Gets an array of UI_COMP_ALIGN_TYPE group variables for the trigger
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_actor_variable_all_ui_comp_align_type(actor, key) end

--Gets the global trigger UI_PREFAB non-array variable
---@param key string # Variable name
---@return string # value
function GameAPI.get_trigger_variable_ui_prefab(key) end

--Gets the trigger UI_PREFAB non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return string # value
function GameAPI.get_trigger_actor_variable_ui_prefab(actor, key) end

--Gets the global trigger UI_PREFAB array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@return string # value
function GameAPI.get_trigger_list_variable_ui_prefab(key, index) end

--Gets the trigger UI_PREFAB array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@return string # value
function GameAPI.get_trigger_list_actor_variable_ui_prefab(actor, key, index) end

--Gets the global trigger UI_PREFAB array variable
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_variable_all_ui_prefab(key) end

--Gets the trigger UI_PREFAB group variable array
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_actor_variable_all_ui_prefab(actor, key) end

--Gets the global trigger UI_PREFAB_INSTANCE non-array variable
---@param key string # Variable name
---@return py.UIPrefabIns # value
function GameAPI.get_trigger_variable_ui_prefab_instance(key) end

--Gets the trigger UI_PREFAB_INSTANCE non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.UIPrefabIns # value
function GameAPI.get_trigger_actor_variable_ui_prefab_instance(actor, key) end

--Gets the global trigger UI_PREFAB_INSTANCE array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@return py.UIPrefabIns # value
function GameAPI.get_trigger_list_variable_ui_prefab_instance(key, index) end

--Gets the trigger UI_PREFAB_INSTANCE array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@return py.UIPrefabIns # value
function GameAPI.get_trigger_list_actor_variable_ui_prefab_instance(actor, key, index) end

--Gets the global trigger UI_PREFAB_INSTANCE array variable
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_variable_all_ui_prefab_instance(key) end

--Gets the trigger UI_PREFAB_INSTANCE group variable array
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_actor_variable_all_ui_prefab_instance(actor, key) end

--Gets the global trigger UI_PREFAB_INS_UID non-array variable
---@param key string # Variable name
---@return string # value
function GameAPI.get_trigger_variable_ui_prefab_ins_uid(key) end

--Gets the trigger UI_PREFAB_INS_UID non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return string # value
function GameAPI.get_trigger_actor_variable_ui_prefab_ins_uid(actor, key) end

--Gets the global trigger UI_PREFAB_INS_UID array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@return string # value
function GameAPI.get_trigger_list_variable_ui_prefab_ins_uid(key, index) end

--Gets the trigger UI_PREFAB_INS_UID array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@return string # value
function GameAPI.get_trigger_list_actor_variable_ui_prefab_ins_uid(actor, key, index) end

--Gets the global trigger UI_PREFAB_INS_UID array variable
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_variable_all_ui_prefab_ins_uid(key) end

--Gets the trigger UI_PREFAB_INS_UID group variable array
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_actor_variable_all_ui_prefab_ins_uid(actor, key) end

--Gets the global trigger UI_DIRECTION non-array variable
---@param key string # Variable name
---@return integer # value
function GameAPI.get_trigger_variable_ui_direction(key) end

--Gets trigger UI_DIRECTION non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return integer # value
function GameAPI.get_trigger_actor_variable_ui_direction(actor, key) end

--Gets the global trigger UI_DIRECTION array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@return integer # value
function GameAPI.get_trigger_list_variable_ui_direction(key, index) end

--Gets trigger UI_DIRECTION array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@return integer # value
function GameAPI.get_trigger_list_actor_variable_ui_direction(actor, key, index) end

--Gets the global trigger UI_DIRECTION array variable
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_variable_all_ui_direction(key) end

--Gets an array of trigger UI_DIRECTION group variables
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_actor_variable_all_ui_direction(actor, key) end

--Gets the global trigger UI_MODEL_CAMERA_MOD non-array variable
---@param key string # Variable name
---@return integer # value
function GameAPI.get_trigger_variable_ui_model_camera_mod(key) end

--Gets the trigger UI_MODEL_CAMERA_MOD non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return integer # value
function GameAPI.get_trigger_actor_variable_ui_model_camera_mod(actor, key) end

--Gets the global trigger UI_MODEL_CAMERA_MOD array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@return integer # value
function GameAPI.get_trigger_list_variable_ui_model_camera_mod(key, index) end

--Gets the trigger UI_MODEL_CAMERA_MOD array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@return integer # value
function GameAPI.get_trigger_list_actor_variable_ui_model_camera_mod(actor, key, index) end

--Gets the global trigger UI_MODEL_CAMERA_MOD array variable
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_variable_all_ui_model_camera_mod(key) end

--Gets the trigger UI_MODEL_CAMERA_MOD group variable array
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_actor_variable_all_ui_model_camera_mod(actor, key) end

--Gets the global trigger UI_BTN_STATUS non-array variable
---@param key string # Variable name
---@return integer # value
function GameAPI.get_trigger_variable_ui_btn_status(key) end

--Gets trigger UI_BTN_STATUS non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return integer # value
function GameAPI.get_trigger_actor_variable_ui_btn_status(actor, key) end

--Gets the global trigger UI_BTN_STATUS array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@return integer # value
function GameAPI.get_trigger_list_variable_ui_btn_status(key, index) end

--Gets the trigger UI_BTN_STATUS array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@return integer # value
function GameAPI.get_trigger_list_actor_variable_ui_btn_status(actor, key, index) end

--Gets the global trigger UI_BTN_STATUS array variable
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_variable_all_ui_btn_status(key) end

--Gets the trigger UI_BTN_STATUS group variable array
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_actor_variable_all_ui_btn_status(actor, key) end

--Gets the global trigger UI_SCROLLVIEW_TYPE non-array variable
---@param key string # Variable name
---@return integer # value
function GameAPI.get_trigger_variable_ui_scrollview_type(key) end

--Gets trigger UI_SCROLLVIEW_TYPE non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return integer # value
function GameAPI.get_trigger_actor_variable_ui_scrollview_type(actor, key) end

--Gets global trigger UI_SCROLLVIEW_TYPE array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@return integer # value
function GameAPI.get_trigger_list_variable_ui_scrollview_type(key, index) end

--Gets trigger UI_SCROLLVIEW_TYPE array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@return integer # value
function GameAPI.get_trigger_list_actor_variable_ui_scrollview_type(actor, key, index) end

--Gets the global trigger UI_SCROLLVIEW_TYPE array variable
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_variable_all_ui_scrollview_type(key) end

--Gets the trigger UI_SCROLLVIEW_TYPE group variable array
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_actor_variable_all_ui_scrollview_type(actor, key) end

--Gets the global trigger UI_GRIDVIEW_TYPE non-array variable
---@param key string # Variable name
---@return integer # value
function GameAPI.get_trigger_variable_ui_gridview_type(key) end

--Gets trigger UI_GRIDVIEW_TYPE non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return integer # value
function GameAPI.get_trigger_actor_variable_ui_gridview_type(actor, key) end

--Gets the global trigger UI_GRIDVIEW_TYPE array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@return integer # value
function GameAPI.get_trigger_list_variable_ui_gridview_type(key, index) end

--Gets trigger UI_GRIDVIEW_TYPE array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@return integer # value
function GameAPI.get_trigger_list_actor_variable_ui_gridview_type(actor, key, index) end

--Gets the global trigger UI_GRIDVIEW_TYPE array variable
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_variable_all_ui_gridview_type(key) end

--Gets the trigger UI_GRIDVIEW_TYPE group variable array
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_actor_variable_all_ui_gridview_type(actor, key) end

--Gets the global trigger UI_GRIDVIEW_BAR_TYPE non-array variable
---@param key string # Variable name
---@return integer # value
function GameAPI.get_trigger_variable_ui_gridview_bar_type(key) end

--Gets trigger UI_GRIDVIEW_BAR_TYPE non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return integer # value
function GameAPI.get_trigger_actor_variable_ui_gridview_bar_type(actor, key) end

--Gets a global trigger UI_GRIDVIEW_BAR_TYPE array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@return integer # value
function GameAPI.get_trigger_list_variable_ui_gridview_bar_type(key, index) end

--Gets the trigger UI_GRIDVIEW_BAR_TYPE array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@return integer # value
function GameAPI.get_trigger_list_actor_variable_ui_gridview_bar_type(actor, key, index) end

--Gets the global trigger UI_GRIDVIEW_BAR_TYPE array variable
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_variable_all_ui_gridview_bar_type(key) end

--Gets the trigger UI_GRIDVIEW_BAR_TYPE group variable array
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_actor_variable_all_ui_gridview_bar_type(actor, key) end

--Gets the global trigger UI_EQUIP_SLOT_USE_TYPE non-array variable
---@param key string # Variable name
---@return integer # value
function GameAPI.get_trigger_variable_ui_equip_slot_use_type(key) end

--Gets the trigger UI_EQUIP_SLOT_USE_TYPE non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return integer # value
function GameAPI.get_trigger_actor_variable_ui_equip_slot_use_type(actor, key) end

--Gets the global trigger UI_EQUIP_SLOT_USE_TYPE array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@return integer # value
function GameAPI.get_trigger_list_variable_ui_equip_slot_use_type(key, index) end

--Gets the trigger UI_EQUIP_SLOT_USE_TYPE array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@return integer # value
function GameAPI.get_trigger_list_actor_variable_ui_equip_slot_use_type(actor, key, index) end

--Gets the global trigger UI_EQUIP_SLOT_USE_TYPE array variable
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_variable_all_ui_equip_slot_use_type(key) end

--Gets the trigger UI_EQUIP_SLOT_USE_TYPE group variable array
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_actor_variable_all_ui_equip_slot_use_type(actor, key) end

--Gets the global trigger UI_EQUIP_SLOT_DRAG_TYPE non-array variable
---@param key string # Variable name
---@return integer # value
function GameAPI.get_trigger_variable_ui_equip_slot_drag_type(key) end

--Gets the trigger UI_EQUIP_SLOT_DRAG_TYPE non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return integer # value
function GameAPI.get_trigger_actor_variable_ui_equip_slot_drag_type(actor, key) end

--Gets the global trigger UI_EQUIP_SLOT_DRAG_TYPE array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@return integer # value
function GameAPI.get_trigger_list_variable_ui_equip_slot_drag_type(key, index) end

--Gets the trigger UI_EQUIP_SLOT_DRAG_TYPE array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@return integer # value
function GameAPI.get_trigger_list_actor_variable_ui_equip_slot_drag_type(actor, key, index) end

--Gets the global trigger UI_EQUIP_SLOT_DRAG_TYPE array variable
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_variable_all_ui_equip_slot_drag_type(key) end

--Gets the trigger UI_EQUIP_SLOT_DRAG_TYPE group variable array
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_actor_variable_all_ui_equip_slot_drag_type(actor, key) end

--Gets the global trigger UI_LAYOUT_CLIPPING_TYPE non-array variable
---@param key string # Variable name
---@return integer # value
function GameAPI.get_trigger_variable_ui_layout_clipping_type(key) end

--Gets trigger UI_LAYOUT_CLIPPING_TYPE non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return integer # value
function GameAPI.get_trigger_actor_variable_ui_layout_clipping_type(actor, key) end

--Gets the UI_LAYOUT_CLIPPING_TYPE array variable subentry of the global trigger
---@param key string # Variable name
---@param index integer # subscript
---@return integer # value
function GameAPI.get_trigger_list_variable_ui_layout_clipping_type(key, index) end

--Gets trigger UI_LAYOUT_CLIPPING_TYPE array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@return integer # value
function GameAPI.get_trigger_list_actor_variable_ui_layout_clipping_type(actor, key, index) end

--Gets the global trigger UI_LAYOUT_CLIPPING_TYPE array variable
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_variable_all_ui_layout_clipping_type(key) end

--Gets the trigger UI_LAYOUT_CLIPPING_TYPE group variable array
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_actor_variable_all_ui_layout_clipping_type(actor, key) end

--Gets the global trigger UI_TEXT_OVER_LENGTH_HANDLING_TYPE non-array variable
---@param key string # Variable name
---@return integer # value
function GameAPI.get_trigger_variable_ui_text_over_length_handling_type(key) end

--Gets the trigger UI_TEXT_OVER_LENGTH_HANDLING_TYPE non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return integer # value
function GameAPI.get_trigger_actor_variable_ui_text_over_length_handling_type(actor, key) end

--Gets the UI_TEXT_OVER_LENGTH_HANDLING_TYPE array variable subentry of the global trigger
---@param key string # Variable name
---@param index integer # subscript
---@return integer # value
function GameAPI.get_trigger_list_variable_ui_text_over_length_handling_type(key, index) end

--Gets the trigger UI_TEXT_OVER_LENGTH_HANDLING_TYPE array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@return integer # value
function GameAPI.get_trigger_list_actor_variable_ui_text_over_length_handling_type(actor, key, index) end

--Gets the UI_TEXT_OVER_LENGTH_HANDLING_TYPE array variable of the global trigger
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_variable_all_ui_text_over_length_handling_type(key) end

--Gets the trigger UI_TEXT_OVER_LENGTH_HANDLING_TYPE group variable array
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_actor_variable_all_ui_text_over_length_handling_type(actor, key) end

--Gets the global trigger UI_ANIM non-array variable
---@param key string # Variable name
---@return py.UIAnimKey # value
function GameAPI.get_trigger_variable_ui_anim(key) end

--Gets trigger UI_ANIM non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.UIAnimKey # value
function GameAPI.get_trigger_actor_variable_ui_anim(actor, key) end

--Gets the global trigger UI_ANIM array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@return py.UIAnimKey # value
function GameAPI.get_trigger_list_variable_ui_anim(key, index) end

--Gets trigger UI_ANIM array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@return py.UIAnimKey # value
function GameAPI.get_trigger_list_actor_variable_ui_anim(actor, key, index) end

--Gets the global trigger UI_ANIM array variable
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_variable_all_ui_anim(key) end

--Gets an array of trigger UI_ANIM group variables
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_actor_variable_all_ui_anim(actor, key) end

--Gets the global trigger UI_ANIM_CURVE non-array variable
---@param key string # Variable name
---@return integer # value
function GameAPI.get_trigger_variable_ui_anim_curve(key) end

--Gets the trigger UI_ANIM_CURVE non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return integer # value
function GameAPI.get_trigger_actor_variable_ui_anim_curve(actor, key) end

--Gets the global trigger UI_ANIM_CURVE array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@return integer # value
function GameAPI.get_trigger_list_variable_ui_anim_curve(key, index) end

--Gets the trigger UI_ANIM_CURVE array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@return integer # value
function GameAPI.get_trigger_list_actor_variable_ui_anim_curve(actor, key, index) end

--Gets the global trigger UI_ANIM_CURVE array variable
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_variable_all_ui_anim_curve(key) end

--Gets the trigger UI_ANIM_CURVE group variable array
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_actor_variable_all_ui_anim_curve(actor, key) end

--Gets the global trigger UI_ANIM_PLAY_MODE non-array variable
---@param key string # Variable name
---@return integer # value
function GameAPI.get_trigger_variable_ui_anim_play_mode(key) end

--Gets the trigger UI_ANIM_PLAY_MODE non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return integer # value
function GameAPI.get_trigger_actor_variable_ui_anim_play_mode(actor, key) end

--Gets the global trigger UI_ANIM_PLAY_MODE array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@return integer # value
function GameAPI.get_trigger_list_variable_ui_anim_play_mode(key, index) end

--Gets the trigger UI_ANIM_PLAY_MODE array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@return integer # value
function GameAPI.get_trigger_list_actor_variable_ui_anim_play_mode(actor, key, index) end

--Gets the global trigger UI_ANIM_PLAY_MODE array variable
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_variable_all_ui_anim_play_mode(key) end

--Gets the trigger UI_ANIM_PLAY_MODE group variable array
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_actor_variable_all_ui_anim_play_mode(actor, key) end

--Gets the global trigger AUDIO_CHANNEL non-array variable
---@param key string # Variable name
---@return integer # value
function GameAPI.get_trigger_variable_audio_channel(key) end

--Gets the trigger AUDIO_CHANNEL non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return integer # value
function GameAPI.get_trigger_actor_variable_audio_channel(actor, key) end

--Gets the global trigger AUDIO_CHANNEL array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@return integer # value
function GameAPI.get_trigger_list_variable_audio_channel(key, index) end

--Gets the trigger AUDIO_CHANNEL array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@return integer # value
function GameAPI.get_trigger_list_actor_variable_audio_channel(actor, key, index) end

--Gets the global trigger AUDIO_CHANNEL array variable
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_variable_all_audio_channel(key) end

--Gets the trigger AUDIO_CHANNEL group variable array
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_actor_variable_all_audio_channel(actor, key) end

--Gets a global trigger UNIT_ENTITY non-array variable
---@param key string # Variable name
---@return py.Unit # value
function GameAPI.get_trigger_variable_unit_entity(key) end

--Add quick tags
---@param tag_idx integer # Tag ID
function GameAPI.api_add_quick_tag(tag_idx) end

--Remove quick tags
---@param tag_idx integer # Tag ID
function GameAPI.api_remove_quick_tag(tag_idx) end

--Check for quick tags
---@param tag_idx integer # Tag ID
---@return boolean # Whether the label exists
function GameAPI.api_has_quick_tag(tag_idx) end

--Default library adds kv key-value pairs
---@param prefab_conf_key string # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value string # value
function GameAPI.set_prefab_key_xxx_kv(prefab_conf_key, item_key, key, value) end

--unit Adds a kv key pair
---@param kvbase py.KVBase # unit
---@param key string # Key-value name
---@param value string # value
---@param etype integer # kv_type
---@param prefab_conf_key string # Attribute name
function GameAPI.add_unit_xxx_kv(kvbase, key, value, etype, prefab_conf_key) end

--item Adds a kv key-value pair
---@param kvbase py.KVBase # item
---@param key string # Key-value name
---@param value string # value
---@param etype integer # kv_type
---@param prefab_conf_key string # Attribute name
function GameAPI.add_item_xxx_kv(kvbase, key, value, etype, prefab_conf_key) end

--destructible Adds kv key pairs
---@param kvbase py.KVBase # destructible
---@param key string # Key-value name
---@param value string # value
---@param etype integer # kv_type
---@param prefab_conf_key string # Attribute name
function GameAPI.add_destructible_xxx_kv(kvbase, key, value, etype, prefab_conf_key) end

--ability Adds kv key-value pairs
---@param kvbase py.KVBase # skill
---@param key string # Key-value name
---@param value string # value
---@param etype integer # kv_type
---@param prefab_conf_key string # Attribute name
function GameAPI.add_ability_xxx_kv(kvbase, key, value, etype, prefab_conf_key) end

--modifier Adds kv key pair
---@param kvbase py.KVBase # Magic effect
---@param key string # Key-value name
---@param value string # value
---@param etype integer # kv_type
---@param prefab_conf_key string # Attribute name
function GameAPI.add_modifier_xxx_kv(kvbase, key, value, etype, prefab_conf_key) end

--The default library adds a UI_EFFECT_CAMERA_MODE key pair
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value integer # value
function GameAPI.set_prefab_key_ui_effect_camera_mode_kv(prefab_conf_key, item_key, key, value) end

--The default library adds UI_POS_ADAPT_MODE key-value pairs
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value integer # value
function GameAPI.set_prefab_key_ui_pos_adapt_mode_kv(prefab_conf_key, item_key, key, value) end

--The default library adds UI_CHAT_SEND_CHANNEL key-value pairs
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value integer # value
function GameAPI.set_prefab_key_ui_chat_send_channel_kv(prefab_conf_key, item_key, key, value) end

--The default library adds UI_CHAT_RECV_CHANNEL key-value pairs
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value integer # value
function GameAPI.set_prefab_key_ui_chat_recv_channel_kv(prefab_conf_key, item_key, key, value) end

--The default library adds a UI_TEXT_FONT_NAME key-value pair
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value string # value
function GameAPI.set_prefab_key_ui_text_font_name_kv(prefab_conf_key, item_key, key, value) end

--The default library adds UI_ECA_ANIM_TYPE key-value pairs
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value integer # value
function GameAPI.set_prefab_key_ui_eca_anim_type_kv(prefab_conf_key, item_key, key, value) end

--Add LOCAL_UNIT_GROUP key-value pairs to the default library
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.LocalUnitGroup # value
function GameAPI.set_prefab_key_local_unit_group_kv(prefab_conf_key, item_key, key, value) end

--Add DAMAGE_ARMOR_TYPE key-value pairs to the default library
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value integer # value
function GameAPI.set_prefab_key_damage_armor_type_kv(prefab_conf_key, item_key, key, value) end

--The default library adds the ABILITY_RELEASE_ID key-value pair
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.AbilityReleaseId # value
function GameAPI.set_prefab_key_ability_release_id_kv(prefab_conf_key, item_key, key, value) end

--The SLOT_TYPE key pair is added to the default library
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.SlotType # value
function GameAPI.set_prefab_key_slot_type_kv(prefab_conf_key, item_key, key, value) end

--The default library adds UI_POINT key-value pairs
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.FUIPoint # value
function GameAPI.set_prefab_key_ui_point_kv(prefab_conf_key, item_key, key, value) end

--The default library adds ATTACH_MODEL_ENTITY key-value pairs
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.AttachModelEntity # value
function GameAPI.set_prefab_key_attach_model_entity_kv(prefab_conf_key, item_key, key, value) end

--The default library adds a FORCE_ENTITY key-value pair
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.Force # value
function GameAPI.set_prefab_key_force_entity_kv(prefab_conf_key, item_key, key, value) end

--The default library adds GOODS_KEY key-value pairs
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.GoodsKey # value
function GameAPI.set_prefab_key_goods_key_kv(prefab_conf_key, item_key, key, value) end

--The default library adds a MOUSE_KEY_WITHOUT_MIDDLE key-value pair
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.MouseKeyWithoutMiddle # value
function GameAPI.set_prefab_key_mouse_key_without_middle_kv(prefab_conf_key, item_key, key, value) end

--Default libraries add SITE_STATE key-value pairs
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.SITE_STATE # value
function GameAPI.set_prefab_key_site_state_kv(prefab_conf_key, item_key, key, value) end

--The default library adds a COIN_CURRENCY key-value pair
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.COIN_CURRENCY # value
function GameAPI.set_prefab_key_coin_currency_kv(prefab_conf_key, item_key, key, value) end

--Add a UI_EFFECT_CAMERA_MODE key pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? integer # value
function GameAPI.add_ui_effect_camera_mode_kv(kvbase, key, item) end

--Add UI_POS_ADAPT_MODE key-value pairs
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? integer # value
function GameAPI.add_ui_pos_adapt_mode_kv(kvbase, key, item) end

--Add UI_CHAT_SEND_CHANNEL key-value pairs
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? integer # value
function GameAPI.add_ui_chat_send_channel_kv(kvbase, key, item) end

--Add UI_CHAT_RECV_CHANNEL key-value pairs
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? integer # value
function GameAPI.add_ui_chat_recv_channel_kv(kvbase, key, item) end

--Add a UI_TEXT_FONT_NAME key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? string # value
function GameAPI.add_ui_text_font_name_kv(kvbase, key, item) end

--Add UI_ECA_ANIM_TYPE key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? integer # value
function GameAPI.add_ui_eca_anim_type_kv(kvbase, key, item) end

--Add the LOCAL_UNIT_GROUP key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.LocalUnitGroup # value
function GameAPI.add_local_unit_group_kv(kvbase, key, item) end

--Add DAMAGE_ARMOR_TYPE key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? integer # value
function GameAPI.add_damage_armor_type_kv(kvbase, key, item) end

--The ABILITY_RELEASE_ID key pair was added
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.AbilityReleaseId # value
function GameAPI.add_ability_release_id_kv(kvbase, key, item) end

--The SLOT_TYPE key pair was added
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.SlotType # value
function GameAPI.add_slot_type_kv(kvbase, key, item) end

--Add UI_POINT key-value pairs
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.FUIPoint # value
function GameAPI.add_ui_point_kv(kvbase, key, item) end

--Add ATTACH_MODEL_ENTITY key and value pairs
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.AttachModelEntity # value
function GameAPI.add_attach_model_entity_kv(kvbase, key, item) end

--The FORCE_ENTITY key-value pair was added
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.Force # value
function GameAPI.add_force_entity_kv(kvbase, key, item) end

--Add the GOODS_KEY key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.GoodsKey # value
function GameAPI.add_goods_key_kv(kvbase, key, item) end

--Add a MOUSE_KEY_WITHOUT_MIDDLE key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.MouseKeyWithoutMiddle # value
function GameAPI.add_mouse_key_without_middle_kv(kvbase, key, item) end

--Add a SITE_STATE key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.SITE_STATE # value
function GameAPI.add_site_state_kv(kvbase, key, item) end

--Add a COIN_CURRENCY key-value pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key-value name
---@param item? py.COIN_CURRENCY # value
function GameAPI.add_coin_currency_kv(kvbase, key, item) end

--Determines whether the default has a %s key-value pair
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@param kv_type integer # kv_type
---@return boolean # Existence or not
function GameAPI.has_prefab_xxx_kv(prefab_type, prefab_key, key, kv_type) end

--Fetch pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_entity_ckv_pair_value_xxx(kvbase, key) end

--Fetch pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_ckv_pair_value_xxx(kvbase, key) end

--Fetch pair
---@param kvbase py.KVBase # Custom key value carrier
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_modifier_ckv_pair_value_xxx(kvbase, key) end

--Check whether a UI_EFFECT_CAMERA_MODE key pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_ui_effect_camera_mode(kvbase, key) end

--Determine whether a UI_EFFECT_CAMERA_MODE key pair exists in the default
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_ui_effect_camera_mode_kv(prefab_type, prefab_key, key) end

--Determine whether a UI_EFFECT_CAMERA_MODE key pair exists in the unit ID
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_ui_effect_camera_mode_kv(prefab_key, key) end

--Determine if there is a UI_EFFECT_CAMERA_MODE key pair in the item number
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_ui_effect_camera_mode_kv(prefab_key, key) end

--Determine whether a UI_EFFECT_CAMERA_MODE key pair exists for the skill number
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_ui_effect_camera_mode_kv(prefab_key, key) end

--Determines whether UI_POS_ADAPT_MODE key-value pairs exist
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_ui_pos_adapt_mode(kvbase, key) end

--Determines if UI_POS_ADAPT_MODE key-value pairs exist in the default
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_ui_pos_adapt_mode_kv(prefab_type, prefab_key, key) end

--Determine whether there is a UI_POS_ADAPT_MODE key-value pair for the unit number
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_ui_pos_adapt_mode_kv(prefab_key, key) end

--Determines whether the item number has a UI_POS_ADAPT_MODE key pair
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_ui_pos_adapt_mode_kv(prefab_key, key) end

--Determines whether the skill number has a UI_POS_ADAPT_MODE key-value pair
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_ui_pos_adapt_mode_kv(prefab_key, key) end

--Check whether UI_CHAT_SEND_CHANNEL key-value pairs exist
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_ui_chat_send_channel(kvbase, key) end

--Determines whether the default has a UI_CHAT_SEND_CHANNEL key-value pair
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_ui_chat_send_channel_kv(prefab_type, prefab_key, key) end

--Check whether there is a UI_CHAT_SEND_CHANNEL key-value pair in the unit number
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_ui_chat_send_channel_kv(prefab_key, key) end

--Determine whether the item number has a UI_CHAT_SEND_CHANNEL key-value pair
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_ui_chat_send_channel_kv(prefab_key, key) end

--Check whether the skill number has a UI_CHAT_SEND_CHANNEL key-value pair
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_ui_chat_send_channel_kv(prefab_key, key) end

--Determines whether a UI_CHAT_RECV_CHANNEL key-value pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_ui_chat_recv_channel(kvbase, key) end

--Determines whether the default has a UI_CHAT_RECV_CHANNEL key-value pair
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_ui_chat_recv_channel_kv(prefab_type, prefab_key, key) end

--Determines whether there is a UI_CHAT_RECV_CHANNEL key-value pair in the unit number
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_ui_chat_recv_channel_kv(prefab_key, key) end

--Determines whether the item number has a UI_CHAT_RECV_CHANNEL key-value pair
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_ui_chat_recv_channel_kv(prefab_key, key) end

--Determines whether the skill number has a UI_CHAT_RECV_CHANNEL key-value pair
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_ui_chat_recv_channel_kv(prefab_key, key) end

--Determines whether a UI_TEXT_FONT_NAME key-value pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_ui_text_font_name(kvbase, key) end

--Determines if the default has a UI_TEXT_FONT_NAME key-value pair
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_ui_text_font_name_kv(prefab_type, prefab_key, key) end

--Determines whether there is a UI_TEXT_FONT_NAME key-value pair for the unit number
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_ui_text_font_name_kv(prefab_key, key) end

--Determines whether the item number has a UI_TEXT_FONT_NAME key-value pair
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_ui_text_font_name_kv(prefab_key, key) end

--Determines whether the skill number has a UI_TEXT_FONT_NAME key-value pair
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_ui_text_font_name_kv(prefab_key, key) end

--Determines whether a UI_ECA_ANIM_TYPE key-value pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_ui_eca_anim_type(kvbase, key) end

--Determines whether a UI_ECA_ANIM_TYPE key-value pair exists in the default
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_ui_eca_anim_type_kv(prefab_type, prefab_key, key) end

--Check whether there is a UI_ECA_ANIM_TYPE key-value pair in the unit number
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_ui_eca_anim_type_kv(prefab_key, key) end

--Determine whether the item number has a UI_ECA_ANIM_TYPE key-value pair
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_ui_eca_anim_type_kv(prefab_key, key) end

--Determine whether the skill number has a UI_ECA_ANIM_TYPE key-value pair
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_ui_eca_anim_type_kv(prefab_key, key) end

--Check whether the LOCAL_UNIT_GROUP key pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_local_unit_group(kvbase, key) end

--Determines whether a LOCAL_UNIT_GROUP key-value pair exists in the default
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_local_unit_group_kv(prefab_type, prefab_key, key) end

--Check whether the LOCAL_UNIT_GROUP key pair exists in the unit number
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_local_unit_group_kv(prefab_key, key) end

--Determines whether a LOCAL_UNIT_GROUP key-value pair exists in the item number
---@param prefab_key py.ItemKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_item_key_local_unit_group_kv(prefab_key, key) end

--Check whether the LOCAL_UNIT_GROUP key pair exists in the skill number
---@param prefab_key py.AbilityKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_ability_key_local_unit_group_kv(prefab_key, key) end

--Check whether DAMAGE_ARMOR_TYPE key-value pair exists
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_kv_pair_damage_armor_type(kvbase, key) end

--Determines whether the default DAMAGE_ARMOR_TYPE key-value pair exists
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_damage_armor_type_kv(prefab_type, prefab_key, key) end

--Check whether the DAMAGE_ARMOR_TYPE key-value pair exists in the unit number
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_unit_key_damage_armor_type_kv(prefab_key, key) end
