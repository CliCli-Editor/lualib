--This file is generated by tools/genGameAPI, do not modify it manually.
---@meta

---@class py.GameAPI
GameAPI = {}

--Set whether to dodge currently
---@param is_miss boolean # Dodge or not
function GameAPI.set_cur_damage_is_miss(is_miss) end

--Sets the value of the current treatment
---@param value py.Fixed # Healing value
function GameAPI.set_cur_cure_value(value) end

--Gets whether the attack is critical
---@param damage_result_state integer # damage_result_state
---@return boolean # Critical strike or not
function GameAPI.get_cur_damage_is_critical(damage_result_state) end

--Sets whether critical strike is currently available
---@param is_critical boolean # Critical strike or not
function GameAPI.set_cur_damage_is_critical(is_critical) end

--Initiation behavior tree
---@param unit py.Unit # unit
---@param tree_name string # Behavior tree name
---@param tree_args py.Dict # Behavior tree parameter
function GameAPI.assign_behavior_tree(unit, tree_name, tree_args) end

--Stop a behavior tree
---@param unit py.Unit # unit
---@param tree_name string # Behavior tree name
function GameAPI.stop_behavior_tree(unit, tree_name) end

--Stop all behavior trees
---@param unit py.Unit # unit
function GameAPI.stop_all_behavior_tree(unit) end

--Run the behavior tree once
---@param unit py.Unit # unit
---@param tree_name string # Behavior tree name
---@param tree_args py.Dict # Behavior tree parameter
function GameAPI.run_behavior_tree_once(unit, tree_name, tree_args) end

--Default library unit deletes key-value pairs
---@param unit_key py.UnitKey # Unit number
---@param key string # Key-value name
function GameAPI.unit_key_del_kv(unit_key, key) end

--Default library skill deletes key-value pairs
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key-value name
function GameAPI.ability_key_del_kv(ability_key, key) end

--Default library items delete key-value pairs
---@param item_key py.ItemKey # Item number
---@param key string # Key-value name
function GameAPI.item_key_del_kv(item_key, key) end

--Set item prices
---@param item_no py.ItemKey # Item number
---@param res_type py.RoleResKey # Resource type
---@param price number # Price:
function GameAPI.set_item_buy_price(item_no, res_type, price) end

--Set items items to sell resources to get
---@param item_no py.ItemKey # Item number
---@param res_type py.RoleResKey # Resource type
---@param price number # Sale of resources
function GameAPI.set_item_sell_price(item_no, res_type, price) end

--Set the price per unit item
---@param entity_no py.UnitKey # Unit number
---@param res_type py.RoleResKey # Resource type
---@param price number # Price:
function GameAPI.set_unit_buy_price(entity_no, res_type, price) end

--Set a unit item to sell resources to get
---@param entity_no py.UnitKey # Unit number
---@param res_type py.RoleResKey # Resource type
---@param price number # Sale of resources
function GameAPI.set_unit_sell_price(entity_no, res_type, price) end

--Get item item selling price
---@param item_no py.ItemKey # Item number
---@param res_type py.RoleResKey # Resource type
---@return py.Fixed # Price:
function GameAPI.get_item_buy_price(item_no, res_type) end

--Get items Commodities for sale resources to get
---@param item_no py.ItemKey # Item number
---@param res_type py.RoleResKey # Resource type
---@return py.Fixed # Sale of resources
function GameAPI.get_item_sell_price(item_no, res_type) end

--Get the price per unit item
---@param entity_no py.UnitKey # Unit number
---@param res_type py.RoleResKey # Resource type
---@return py.Fixed # Price:
function GameAPI.get_unit_buy_price(entity_no, res_type) end

--Get a unit of goods to sell resources to get
---@param entity_no py.UnitKey # Unit number
---@param res_type py.RoleResKey # Resource type
---@return py.Fixed # Sale of resources
function GameAPI.get_unit_sell_price(entity_no, res_type) end

--Returns the center point of the rectangular area
---@param rec py.RecArea # Rectangular region
---@return py.FVector3 # Central point
function GameAPI.get_rec_center_point(rec) end

--Returns the center point of the circle area
---@param cir py.CirArea # Circular region
---@return py.FVector3 # Central point
function GameAPI.get_circle_center_point(cir) end

--Returns random points in a rectangular area
---@param area py.RecArea # Rectangular region
---@return py.FVector3 # Random point
function GameAPI.get_random_point_in_rec_area(area) end

--Returns a random point in a circle
---@param area py.CirArea # Circular region
---@return py.FVector3 # Random point
function GameAPI.get_random_point_in_circular_area(area) end

--Returns a random point in the polygon
---@param area py.PolyArea # Irregular region
---@return py.FVector3 # Random point
function GameAPI.get_random_point_in_poly_area(area) end

--Recently created circular area
---@return py.CirArea # Circular region
function GameAPI.get_cir_area_last_created() end

--Return path by resource id
---@param res_id integer # Resource ID
---@return py.Road # path
function GameAPI.get_road_point_list_by_res_id(res_id) end

--Create a path at some point
---@param point py.Point # point
---@return py.Road # path
function GameAPI.create_road_point_list(point) end

--Removal path
---@param road py.Road # path
function GameAPI.remove_road_point_list(road) end

--Add points to the path
---@param road py.Road # path
---@param num integer # Serial number
---@param point py.Point # point
function GameAPI.add_road_point(road, num, point) end

--Remove waypoints
---@param road py.Road # path
---@param num integer # Serial number
function GameAPI.remove_road_point(road, num) end

--Origin of the acquisition path
---@param road_point_list py.Road # path
---@return py.FVector3 # Starting point
function GameAPI.get_road_point_start_point(road_point_list) end

--End of acquisition path
---@param road_point_list py.Road # path
---@return py.FVector3 # End point
function GameAPI.get_road_point_end_point(road_point_list) end

--Random point of the acquisition path
---@param road_point_list py.Road # path
---@return py.FVector3 # Random point
function GameAPI.get_road_point_random_point(road_point_list) end

--Gets the nearest path to a point
---@param point py.Point # position
---@return py.Road # path
function GameAPI.get_nearest_road_point_list_by_pos(point) end

--Gets the offset path of a path
---@param origin_roads py.Road # Original path
---@param offset py.Fixed # Offset distance
---@return py.Road # path
function GameAPI.get_road_point_list_by_offset(origin_roads, offset) end

--Obtain the path of a path that has been cycled n times
---@param point_list py.Road # Original path
---@param n integer # Cycle number
---@return py.Road # path
function GameAPI.get_road_point_list_loop(point_list, n) end

--Obtain the path after the two paths are combined
---@param pl1 py.Road # Original path
---@param pl2 py.Road # Original path
---@return py.Road # path
function GameAPI.get_road_point_list_join(pl1, pl2) end

--Gets the path after a path is reversed
---@param point_list py.Road # Original path
---@return py.Road # path
function GameAPI.get_road_point_list_inversion(point_list) end

--Gets the number of points in the path
---@param road_point_list py.Road # path
---@return integer # quantity
function GameAPI.get_road_point_num(road_point_list) end

--Recently created a unit entity
---@return py.Unit # Unit entity
function GameAPI.get_last_created_unit() end

--Recently created a child trigger
---@return py.DynamicTriggerInstance # Subtrigger ID
function GameAPI.get_last_created_trigger() end

--Recently created projectiles
---@return py.Unit # projectile
function GameAPI.get_last_created_projectile() end

--Gets a list of unit ids in the area
---@param area py.Area # Area object
---@return py.List # Unit ID list
function GameAPI.get_unit_group_in_area(area) end

--Gets a list of all player unit ids in the area
---@param area py.Area # Area object
---@param role py.Role # Player
---@return py.UnitGroup # Unit id list
function GameAPI.get_unit_group_belong_to_player_in_area(area, role) end

--Gets a list of object ids for items in the area
---@param area py.Area # Area object
---@return py.ItemGroup # Item group
function GameAPI.get_item_group_in_area(area) end

--Gets all items within the specified shape
---@param point py.Point # Area object
---@param shape py.Shape # shape
---@param sort_type? py.SortType # Sort type
---@param filter_ability? py.Ability # Screening skill
---@return py.ItemGroup # Item group
function GameAPI.get_all_items_in_shapes(point, shape, sort_type, filter_ability) end

--Sends an event with dict attached to the ui
---@param s string # Event name
---@param args py.Dict # argument
function GameAPI.send_ui_global_event_with_info_dict(s, args) end

--Add a unit to a unit group
---@param unit py.Unit # unit
---@param unit_group py.UnitGroup # Unit group
function GameAPI.add_unit_to_group(unit, unit_group) end

--Set global trigger array variables in batches
---@param table py.List # Portfolio list format for [[array variable name, type (' INTEGER ', 'BOOLEAN', 'FLOAT', 'STRING'), the list of values ([value, value,...]]], [...]]
function GameAPI.set_trigger_table_list_variable(table) end

--Sets the string array by splitting the string
---@param key py.List # String array
---@param actor py.Actor # Type prompt
---@param content string # Split content
---@param split string # decollator
function GameAPI.set_trigger_str_list_by_split(key, actor, content, split) end

--Create a global trigger array variable
---@param key string # Array variable name
---@param var_type string # Value type
---@param arr_val py.List # Column phenotype value
function GameAPI.create_trigger_list_variable(key, var_type, arr_val) end

--Whether the unit number has a tag
---@param key py.UnitKey # Unit number
---@param tag string # tag
---@return boolean # Boolean value
function GameAPI.unit_key_has_tag(key, tag) end

--Item number has tag
---@param key py.ItemKey # Item number
---@param tag string # tag
---@return boolean # Boolean value
function GameAPI.item_key_has_tag(key, tag) end

--Whether the skill number has a tag
---@param key py.AbilityKey # Skill number
---@param tag string # tag
---@return boolean # Boolean value
function GameAPI.ability_key_has_tag(key, tag) end

--Whether the effect number has a tag
---@param key py.AbilityKey # Skill number
---@param tag string # tag
---@return boolean # Boolean value
function GameAPI.modifier_key_has_tag(key, tag) end

--Whether the projectile number has a tag
---@param key py.AbilityKey # Projectile number
---@param tag string # tag
---@return boolean # Boolean value
function GameAPI.projectile_key_has_tag(key, tag) end

--Whether the destructible number has a tag
---@param key py.DestructibleKey # Destructible number
---@param tag string # tag
---@return boolean # Boolean value
function GameAPI.dest_key_has_tag(key, tag) end

--Whether the unit entity exists
---@param unit? py.Unit # Unit entity
---@return boolean # Boolean value
function GameAPI.unit_is_exist(unit) end

--Whether the effect entity exists
---@param modifier? py.ModifierEntity # Effect entity
---@return boolean # Boolean value
function GameAPI.modifier_is_exist(modifier) end

--Whether the projectile entity exists
---@param projectile? py.ProjectileEntity # projectile
---@return boolean # Boolean value
function GameAPI.projectile_is_exist(projectile) end

--Whether the skill entity exists
---@param ability? py.Ability # skill
---@return boolean # Boolean value
function GameAPI.ability_is_exist(ability) end

--The presence of destructible objects
---@param destructible? py.Destructible # destructible
---@return boolean # Boolean value
function GameAPI.destructible_is_exist(destructible) end

--Whether the picture exists
---@param item? py.Item # Picture key
---@return boolean # Boolean value
function GameAPI.item_is_exist(item) end

--Whether the unit group exists
---@param unit_group py.UnitGroup # Unit group
---@return boolean # Existence or not
function GameAPI.unit_group_is_exist(unit_group) end

--Whether a group of players exists
---@param role_group py.RoleGroup # Player group
---@return boolean # Existence or not
function GameAPI.role_group_is_exist(role_group) end

--Whether special effects exist
---@param sfx py.Sfx # VFX
---@return boolean # Existence or not
function GameAPI.sfx_is_exist(sfx) end

--Whether a point exists
---@param point py.Point # point
---@return boolean # Existence or not
function GameAPI.point_is_exist(point) end

--Whether the path exists
---@param point_list py.Road # path
---@return boolean # Existence or not
function GameAPI.point_list_is_exist(point_list) end

--Whether the circular area exists
---@param circle_area py.CirArea # Circular region
---@return boolean # Existence or not
function GameAPI.circle_area_is_exist(circle_area) end

--Whether the rectangular area exists
---@param rect_area py.RecArea # Rectangular region
---@return boolean # Existence or not
function GameAPI.rect_area_is_exist(rect_area) end

--Lens presence or not
---@param camera py.Camera # Lens
---@return boolean # Existence or not
function GameAPI.camera_is_exist(camera) end

--Gain maximum skill level
---@param ability py.Ability # skill
---@return integer # Maximum grade
function GameAPI.get_ability_max_level(ability) end

--List Returns a list of random integer elements
---@param list1 py.List # list
---@param n integer # integer
---@return py.List # A randomly generated list
function GameAPI.random_list_from_list(list1, n) end

--Vibration equipment
---@param role py.Role # Player
---@param time py.Fixed # Vibration time
function GameAPI.shake_phone(role, time) end

--Enter leaderboards for < players >
---@param role py.Role # Player
---@param score integer # In-game leaderboard scores
function GameAPI.set_role_rank_score(role, score) end

--The unit trigger sends an event to the global trigger with information
---@param event_name string # Event name
---@param i integer # Integer value
---@param f py.Fixed # Fixed point type value
---@param b boolean # Boolean type value
---@param s string # String value
---@param p py.Point # Floating point type value
---@param u? py.Unit # Unit object
function GameAPI.unit_send_global_event_with_info(event_name, i, f, b, s, p, u) end

--The skill trigger sends an event to the global trigger, with information attached
---@param event_name string # Event name
---@param i integer # Integer value
---@param f py.Fixed # Fixed point type value
---@param b boolean # Boolean type value
---@param s string # String value
---@param p py.Point # Floating point type value
---@param u? py.Unit # Unit object
function GameAPI.ability_send_global_event_with_info(event_name, i, f, b, s, p, u) end

--The effect trigger sends an event to the global trigger, with information attached
---@param event_name string # Event name
---@param i integer # Integer value
---@param f py.Fixed # Fixed point type value
---@param b boolean # Boolean type value
---@param s string # String value
---@param p py.Point # Floating point type value
---@param u? py.Unit # Unit object
function GameAPI.modifier_send_global_event_with_info(event_name, i, f, b, s, p, u) end

--The projectile trigger sends an event to the global trigger, along with information
---@param event_name string # Event name
---@param i integer # Integer value
---@param f py.Fixed # Fixed point type value
---@param b boolean # Boolean type value
---@param s string # String value
---@param p py.Point # Floating point type value
---@param u? py.Unit # Unit object
function GameAPI.projectile_send_global_event_with_info(event_name, i, f, b, s, p, u) end

--An item trigger sends an event to a global trigger, with information attached
---@param event_name string # Event name
---@param i integer # Integer value
---@param f py.Fixed # Fixed point type value
---@param b boolean # Boolean type value
---@param s string # String value
---@param p py.Point # Floating point type value
---@param u? py.Unit # Unit object
function GameAPI.item_send_global_event_with_info(event_name, i, f, b, s, p, u) end

--Gets [player's] player nickname
---@param role py.Role # Player
---@return string # Player nickname
function GameAPI.get_player_nick_name(role) end

--Gets [player's] full player nickname
---@param role py.Role # Player
---@return string # Player full nickname
function GameAPI.get_player_full_nick_name(role) end

--Gets [player's] player aid
---@param role py.Role # Player
---@return string # Player aid
function GameAPI.get_player_plat_aid(role) end

--Gets the player image of [player]
---@param role py.Role # Player
---@return string # Player graphics
function GameAPI.get_player_icon(role) end

--Filter the deletion status of the unit
---@param unit? py.Unit # unit
---@return py.Unit # Effective unit object
function GameAPI.filter_unit_status(unit) end

--Open a premium item store for players
---@param role py.Role # Player
function GameAPI.open_charge_item_store_for_role(role) end

--Current game running time
---@return py.Fixed # time
function GameAPI.get_cur_game_time() end

--Check whether the point-to-point connection
---@param unit py.Unit # Wayfinding unit
---@param pointa py.Point # Starting point
---@param pointb py.Point # End point
---@return boolean # Whether to connect
function GameAPI.can_point_reach_point(unit, pointa, pointb) end

--Whether the detection point collides with the unit
---@param unit py.Unit # unit
---@param point py.Point # point
---@param radius number # Radius
---@return boolean # Collision or not
function GameAPI.unit_can_collide_with_point(unit, point, radius) end

--Obtain skills by skill serial number
---@param unit py.Unit # unit
---@param ability_seq py.AbilitySeq # Skill serial number
---@return py.Ability # Skill object
function GameAPI.api_get_ability_by_seq(unit, ability_seq) end

--Obtain skills by unit number + skill serial number
---@param unit_id py.UnitID # Unit ID
---@param ability_seq py.AbilitySeq # Skill serial number
---@return py.Ability # Skill object
function GameAPI.api_get_ability_by_unit_and_seq(unit_id, ability_seq) end

--Gets the unit entity with the damage ranking [integer] in the Unit Group
---@param unit_group py.UnitGroup # Unit group
---@param rank integer # Ranking
---@return py.Unit # unit
function GameAPI.get_damage_statistic_rank_unit(unit_group, rank) end

--Gets selection circle scaling
---@param unit py.Unit # unit
---@return py.Fixed # Zoom
function GameAPI.get_select_circle_scale(unit) end

--Deletion model
---@param model py.Model # model
function GameAPI.delete_model_entity(model) end

--Create a presentation model, oriented toward points and oriented toward real numbers
---@param model_res_id py.ModelKey # Model name
---@param position py.Point # point
---@param rotation number # orientation
---@return py.Model # model
function GameAPI.create_model_on_point(model_res_id, position, rotation) end

--Create a model
---@param model_key py.ModelKey # Model number
---@param pos py.FPoint # point
---@param face py.Fixed # orientation
---@return py.Model # model
function GameAPI.create_model_in_scene(model_key, pos, face) end

--Destruction model
---@param model? py.Model # model
function GameAPI.destroy_model_in_scene(model) end

--Returns the string property value for the specified item name
---@param key py.ItemKey # Item number
---@param name string # Attribute name
---@return string # character
function GameAPI.get_item_key_str_attr(key, name) end

--Force the player to kick out
---@param role py.Role # Player
---@param reason string # Kick out
function GameAPI.role_force_quit(role, reason) end

--Set the field of view in the rectangular area
---@param rect_area py.RecArea # Rectangular region
---@param player py.Role # Player
---@param is_vision boolean # Boolean variable
---@param is_vision_true boolean # Boolean variable
---@return py.RecArea # Rectangular region
function GameAPI.set_rect_vision_visibility(rect_area, player, is_vision, is_vision_true) end

--Set the field of view in the area
---@param area py.Area # region
---@param player py.Role # Player
---@param fog_state integer # Fog state
---@param is_vision_true boolean # Boolean variable
function GameAPI.set_fog_state(area, player, fog_state, is_vision_true) end

--Set the field of view in the circle area
---@param circle_area py.CirArea # Circular region
---@param player py.Role # Player
---@param is_vision boolean # Boolean variable
---@param is_vision_true boolean # Boolean variable
---@return py.CirArea # Circular region
function GameAPI.set_circle_vision_visibility(circle_area, player, is_vision, is_vision_true) end

--Set the view of the polygon area
---@param poly_area py.PolyArea # Polygon region
---@param player py.Role # Player
---@param is_vision boolean # Boolean variable
---@param is_vision_true boolean # Boolean variable
---@return py.PolyArea # Polygon region
function GameAPI.set_poly_vision_visibility(poly_area, player, is_vision, is_vision_true) end

--Creating a random pool
---@return py.RandomPool # Random pool
function GameAPI.create_random_pool() end

--Set Random Pool Specifies integer weights
---@param random_pool py.RandomPool # Random pool
---@param value integer # integer
---@param weight integer # integer
function GameAPI.set_random_pool_value(random_pool, value, weight) end

--The random pool adds the weight of a specified integer
---@param random_pool py.RandomPool # Random pool
---@param value integer # integer
---@param increment integer # integer
function GameAPI.increase_random_pool_value(random_pool, value, increment) end

--Removes a specified integer from a random pool
---@param random_pool py.RandomPool # Random pool
---@param value integer # integer
function GameAPI.remove_random_pool_value(random_pool, value) end

--Gets a random integer from the random pool
---@param random_pool py.RandomPool # Random pool
---@param remain? boolean # Boole
---@return integer # integer
function GameAPI.get_bitrary_random_pool_value(random_pool, remain) end

--Gets the weighted probability of the specified integer in the random pool
---@param random_pool py.RandomPool # Random pool
---@param value integer # integer
---@return number # Weight probability
function GameAPI.get_random_pool_probability(random_pool, value) end

--Gets the weighted probability of the specified integer in the random pool
---@param random_pool py.RandomPool # Random pool
---@return integer # Total weight
function GameAPI.get_random_pool_all_weight(random_pool) end

--Gets the number of integers in the random pool
---@param random_pool py.RandomPool # Random pool
---@return integer # Integer quantity
function GameAPI.get_random_pool_size(random_pool) end

--Replication random pool
---@param random_pool py.RandomPool # Random pool
---@return py.RandomPool # Random pool
function GameAPI.copy_random_pool(random_pool) end

--Growth attribute
---@param entity_no py.UnitKey # Unit number
---@param attr string # Attribute name
---@return py.Fixed # Attribute value
function GameAPI.api_get_attr_growth(entity_no, attr) end

--Set growth properties
---@param entity_no py.UnitKey # Unit number
---@param attr string # Attribute name
---@param value py.Fixed # Attribute value
function GameAPI.api_set_attr_growth(entity_no, attr, value) end

--Gets a list of a random pool
---@param random_pool py.RandomPool # Random pool
---@return integer # integer
function GameAPI.get_all_random_pool_value(random_pool) end

--Gets the weight of a specified integer in a random pool
---@param random_pool py.RandomPool # Random pool
---@param value integer # integer
---@return integer # integer
function GameAPI.get_random_pool_pointed_weight(random_pool, value) end

--Translation string
---@param string string # Character string
---@return string # The translated string
function GameAPI.get_text_config(string) end

--Send a trigger custom event
---@param event_name string # Custom event name
---@param p1 integer # Parameter 1
---@param p2 integer # Parameter 2
---@param p3 integer # Parameter 3
---@param p4 integer # Parameter 4
---@param p5 integer # Parameter 5
function GameAPI.send_custom_event(event_name, p1, p2, p3, p4, p5) end

--Gets the image id of the icon icon
---@param parameter py.Actor # object
---@return integer # Picture id
function GameAPI.get_icon_id(parameter) end

--Gets the picture id of the skill icon icon
---@param key py.AbilityKey # Skill number
---@return integer # Picture id
function GameAPI.get_icon_id_by_ability_type(key) end

--Gets the image id of the item icon icon
---@param key py.ItemKey # Item number
---@return integer # Picture id
function GameAPI.get_icon_id_by_item_type(key) end

--Gets the image id of the unit icon icon
---@param key py.UnitKey # Unit number
---@return integer # Picture id
function GameAPI.get_icon_id_by_unit_type(key) end

--Gets the picture id of the Magic Effect icon icon
---@param key py.ModifierKey # Magic effect number
---@return integer # Picture id
function GameAPI.get_icon_id_by_buff_type(key) end

--Gets the visibility of the magic effect type icon
---@param key py.ModifierKey # Magic effect number
---@return boolean # Boolean value
function GameAPI.is_show_on_ui_by_buff_type(key) end

--Generate floating text
---@param point py.Point # point
---@param text_type string # Hop enumeration
---@param value string # Skip content
---@param player_group py.RoleGroup # Player group
---@param jump_word_track? integer # Skip trace
function GameAPI.create_harm_text(point, text_type, value, player_group, jump_word_track) end

--Whether the player presses a button
---@param role py.Role # Player
---@param key py.KeyboardKey # Keyboard key
---@return boolean # Pressed state
function GameAPI.player_key_is_pressed(role, key) end

--Player mouse position
---@param role py.Role # Player
---@return py.Point # Mouse position
function GameAPI.get_player_pointing_pos(role) end

--Player mouse screen position X
---@param role py.Role # Player
---@return integer # Mouse screen position X
function GameAPI.get_player_ui_pos_x(role) end

--Player mouse screen position Y
---@param role py.Role # Player
---@return integer # Mouse screen position Y
function GameAPI.get_player_ui_pos_y(role) end

--Player camera orientation
---@param role py.Role # Player
---@return py.Point # Camera orientation
function GameAPI.get_player_camera_direction(role) end

--Player camera center ray detection
---@param role py.Role # Player
---@return py.Point # Point of intersection
function GameAPI.get_camera_center_raycast(role) end

--The percentage of Windows at the player's mouse screen position X
---@param role py.Role # Player
---@return py.Fixed # Account for
function GameAPI.get_role_ui_x_per(role) end

--The percentage of Windows in the player's mouse screen position Y
---@param role py.Role # Player
---@return py.Fixed # Account for
function GameAPI.get_role_ui_y_per(role) end

--Returns the name of the specified unit type
---@param unit_key py.UnitKey # Unit type
---@return string # Description
function GameAPI.get_unit_name_by_type(unit_key) end

--Returns a description of the specified unit type
---@param unit_key py.UnitKey # Unit type
---@return string # Description
function GameAPI.get_unit_desc_by_type(unit_key) end

--Gets unit type Build Resource cost attribute (Player attribute)
---@param unit_key py.UnitKey # Unit type
---@param role_res_key py.RoleResKey # Player attributes
---@return integer # Player attribute value
function GameAPI.get_role_attr_by_unit_type(unit_key, role_res_key) end

--Returns the name of the specified destructible type
---@param dest_key py.DestructibleKey # Destructible object ID
---@return string # Description
function GameAPI.get_dest_name_by_type(dest_key) end

--Returns a description of the specified destructible type
---@param dest_key py.DestructibleKey # Destructible object ID
---@return string # Description
function GameAPI.get_dest_desc_by_type(dest_key) end

--Returns the name of the specified projectile type
---@param projectile_key py.ProjectileKey # Projectile ID
---@return string # Description
function GameAPI.get_projectile_name_by_type(projectile_key) end

--Returns a description of the specified projectile type
---@param projectile_key py.ProjectileKey # Projectile ID
---@return string # Description
function GameAPI.get_projectile_desc_by_type(projectile_key) end

--Returns a description of the specified item type
---@param item_key py.ItemKey # Item ID
---@return string # Description
function GameAPI.get_item_desc_by_type(item_key) end

--Returns a description of the specified skill type
---@param ability_key py.AbilityKey # Skill ID
---@return string # Description
function GameAPI.get_ability_desc_by_type(ability_key) end

--Returns the name of the specified skill type
---@param ability_key py.AbilityKey # Skill ID
---@return string # name
function GameAPI.get_ability_name_by_type(ability_key) end

--Returns the name of the specified technology type
---@param tech_key py.TechKey # Technology ID
---@return string # name
function GameAPI.get_tech_name_by_type(tech_key) end

--Returns a description of the specified technology type
---@param tech_key py.TechKey # Technology ID
---@return string # Description
function GameAPI.get_tech_desc_by_type(tech_key) end

--Returns the name of the specified magic effect type
---@param modifier_key py.ModifierKey # Magic effect ID
---@return string # Description
function GameAPI.get_modifier_name_by_type(modifier_key) end

--Returns a description of the specified magic effect type
---@param modifier_key py.ModifierKey # Magic effect ID
---@return string # Description
function GameAPI.get_modifier_desc_by_type(modifier_key) end

--Returns the name of the specified item type
---@param item_key py.ItemKey # Item ID
---@return string # Name
function GameAPI.get_item_name_by_type(item_key) end

--Mask global keyboard events
---@param role py.Role # Player
---@param block boolean # Mask or not
function GameAPI.block_global_key_event(role, block) end

--Mask global mouse events
---@param role py.Role # Player
---@param block boolean # Mask or not
function GameAPI.block_global_mouse_event(role, block) end

--Mask trigger keyboard events
---@param role py.Role # Player
---@param block boolean # Mask or not
function GameAPI.block_trigger_key_event(role, block) end

--Mask trigger mouse events
---@param role py.Role # Player
---@param block boolean # Mask or not
function GameAPI.block_trigger_mouse_event(role, block) end

--Get the player attribute Icon
---@param res_key py.RoleResKey # Player attributes
---@return integer # Picture ID
function GameAPI.get_role_res_icon(res_key) end

--Gets the player attribute name
---@param res_key py.RoleResKey # Player attributes
---@return string # Attribute name
function GameAPI.get_role_res_name(res_key) end

--(Debug) Draw gridlines
---@param role py.Role # Player
---@param start_x number # Starting Point x
---@param start_y number # Starting point y
---@param height number # Altitude
---@param space number # interval
---@param line_count integer # Line number
---@param r integer # r
---@param g integer # g
---@param b integer # b
function GameAPI.draw_grid_polyline(role, start_x, start_y, height, space, line_count, r, g, b) end

--(debugging) Drawing lines
---@param point_list py.List # point
---@param height number # Altitude
---@param r integer # r
---@param g integer # g
---@param b integer # b
---@return integer # index
function GameAPI.draw_polyline(point_list, height, r, g, b) end

--(Debug) Draw a rectangle
---@param point_list py.List # point
function GameAPI.draw_box(point_list) end

--(Debug) Hide all rectangles
function GameAPI.hide_all_rect() end

--(Debug) Clear debug lines
---@param index integer # index
function GameAPI.clear_grid_polyline(index) end

--(Debug) Set billboard font size
---@param role py.Role # Player
---@param size integer # size
function GameAPI.set_billboard_font_size(role, size) end

--Set the mouse to close the right click and move
---@param b boolean # Switch
function GameAPI.set_mouse_click_control_move(b) end

--Traverse the resource properties of all players
---@param is_iter_coin_only boolean # Whether to traverse currency types
---@return py.List # Resource attribute list
function GameAPI.iter_role_res(is_iter_coin_only) end

--Create a site attraction and bind the UI to the point
---@param comp_name string # Control name
---@param point py.Point # point
---@param visible_dis? number # Visible distance
---@param height_offset? number # Ground lift
---@return py.SceneNode # Site attraction
function GameAPI.create_scene_node_on_point(comp_name, point, visible_dis, height_offset) end

--Create a field attraction and bind the UI to the unit
---@param comp_name string # Control name
---@param player py.Role # Player
---@param unit py.Unit # unit
---@param socket_name string # Hanging contact
---@param visible_dis? number # Visible distance
---@return py.SceneNode # Site attraction
function GameAPI.create_scene_node_on_unit(comp_name, player, unit, socket_name, visible_dis) end

--Create a field attraction and bind the UI to 3D coordinates
---@param comp_name string # Control name
---@param position py.Vector3 # Three-dimensional coordinate
---@param visible_dis? number # Visible distance
---@return py.SceneNode # Site attraction
function GameAPI.create_scene_node_on_3d(comp_name, position, visible_dis) end

--Create a scene interface to a rigid body
---@param comp_name string # Control name
---@param body py.RigidBody # Rigid body
---@param offset py.Vector3 # offset
---@param visible_dis? number # Visible distance
---@return py.SceneNode # Site attraction
function GameAPI.create_scene_node_on_rigid_body(comp_name, body, offset, visible_dis) end

--Set the visible distance of the field attraction to the player
---@param scene_node py.SceneNode # Site attraction
---@param player py.Role # Player
---@param visible_dis number # Visible distance
function GameAPI.set_scene_node_visible_distance(scene_node, player, visible_dis) end

--Delete site
---@param scene_node_entity py.SceneNode # Site attraction
function GameAPI.delete_scene_node(scene_node_entity) end

--Unit type to string
---@param val py.UnitKey # Unit number
---@return string # Character string
function GameAPI.unit_key_to_str(val) end

--It is a string to a unit type
---@param val string # Character string
---@return py.UnitKey # Unit number
function GameAPI.str_to_unit_key(val) end

--Item type to string
---@param val py.ItemKey # Item number
---@return string # Character string
function GameAPI.item_key_to_str(val) end

--String to item type
---@param val string # Character string
---@return py.ItemKey # Item number
function GameAPI.str_to_item_key(val) end

--Skill type to string
---@param val py.AbilityKey # Skill number
---@return string # Character string
function GameAPI.ability_key_to_str(val) end

--The string is converted to the skill type
---@param val string # Character string
---@return py.AbilityKey # Skill number
function GameAPI.str_to_ability_key(val) end

--Destructible type to string
---@param obj py.DestructibleKey # Destructible number
---@return string # Character string
function GameAPI.dest_key_to_str(obj) end

--String to destructible type
---@param obj string # Character string
---@return py.DestructibleKey # Destructible number
function GameAPI.str_to_dest_key(obj) end

--Projectile type to string
---@param obj py.ProjectileKey # Projectile number
---@return string # Character string
function GameAPI.project_key_to_str(obj) end

--String transprojectile type
---@param obj string # Character string
---@return py.ProjectileKey # Projectile number
function GameAPI.str_to_project_key(obj) end

--Technology type to string
---@param val py.TechKey # Technology number
---@return string # Character string
function GameAPI.tech_key_to_str(val) end

--String to technology type
---@param val string # Character string
---@return py.TechKey # Technology number
function GameAPI.str_to_tech_key(val) end

--Model entity to string
---@param obj py.ModelEntity # Model entity
---@return string # Character string
function GameAPI.model_entity_to_str(obj) end

--Model type to string
---@param val py.ModelKey # Model number
---@return string # Character string
function GameAPI.model_key_to_str(val) end

--String to model type
---@param val string # Character string
---@return py.ModelKey # Model number
function GameAPI.str_to_model_key(val) end

--Magic effect type to string
---@param val py.ModifierKey # Effect number
---@return string # Character string
function GameAPI.modifier_key_to_str(val) end

--String to magic effect type
---@param val string # Character string
---@return py.ModifierKey # Effect number
function GameAPI.str_to_modifier_key(val) end

--Platform item type to string
---@param obj py.StoreKey # Platform item types
---@return string # Character string
function GameAPI.store_key_to_str(obj) end

--String to platform item type
---@param obj string # Character string
---@return py.StoreKey # Platform item types
function GameAPI.str_to_store_key(obj) end

--Shot to string
---@param id_value py.Camera # Lens
---@return string # Character string
function GameAPI.camera_to_str(id_value) end

--Interface component to a character string
---@param obj string # Component name
---@return string # Character string
function GameAPI.ui_comp_to_str(obj) end

--Player properties to string
---@param val py.RoleResKey # Resource type
---@return string # Character string
function GameAPI.role_res_to_str(val) end

--String to player properties
---@param val string # Character string
---@return py.RoleResKey # Resource type
function GameAPI.str_to_role_res(val) end

--Unit attribute to string
---@param val string # Attribute name
---@return string # Character string
function GameAPI.unit_attr_to_str(val) end

--String to unit property
---@param val string # Character string
---@return string # Unit attribute
function GameAPI.str_to_unit_attr(val) end

--String to camp object
---@param obj string # Character string
---@return py.Camp # Camp object
function GameAPI.str_to_camp(obj) end

--Gets a model of the destructible type
---@param dest_key py.DestructibleKey # Character string
---@return py.ModelKey # Model number
function GameAPI.get_model_key_of_dest_key(dest_key) end

--Turn on/off auto casting
---@param player py.Role # Player
---@param is_open boolean # Open or not
function GameAPI.set_smart_cast_ability(player, is_open) end

--Set the attack preview status of {player} to {on/off}
---@param player py.Role # Player
---@param is_open boolean # Open or not
function GameAPI.set_preview_common_atk_range(player, is_open) end

--Whether to let {player} 's smart casts use indicators
---@param player py.Role # Player
---@param use_skill_pointer boolean # Whether to use indicators
function GameAPI.set_smart_cast_with_pointer(player, use_skill_pointer) end

--Set shortcut keys
---@param role py.Role # Player
---@param plan integer # option
---@param key string # Shortcut key
---@param value1 integer # Keyboard code 1
---@param value2 integer # Keyboard code 2
function GameAPI.set_shortcut(role, plan, key, value1, value2) end

--Get shortcut keys
---@param role py.Role # Player
---@param plan integer # option
---@param key string # Shortcut key
---@return py.IntList # Keyboard code
function GameAPI.get_shortcut(role, plan, key) end

--Set smart casting
---@param role py.Role # Player
---@param value boolean # On/off
function GameAPI.set_simple_cast(role, value) end

--Get smart spells
---@param role py.Role # Player
---@return boolean # Whether to cast spells intelligently
function GameAPI.get_simple_cast(role) end

--Get client-side smart casting
---@param role py.Role # Player
---@return boolean # Whether to cast spells intelligently
function GameAPI.get_client_simple_cast(role) end

--Save the editor's intra-office Settings
---@param role py.Role # Player
function GameAPI.save_client_setting(role) end

--Save player Settings
---@param role py.Role # Player
function GameAPI.save_game_setting(role) end

--Acquire local players
---@return py.Role # Player
function GameAPI.get_client_role() end

--Set the mouse moving lens mode
---@param role py.Role # Player
---@param value boolean # On/off
function GameAPI.set_mouse_move_camera_mode(role, value) end

--Set the speed at which the mouse moves the lens
---@param role py.Role # Player
---@param value number # Moving speed
function GameAPI.set_mouse_move_camera_speed(role, value) end

--Set the keyboard moving camera speed
---@param role py.Role # Player
---@param value number # Moving speed
function GameAPI.set_key_move_camera_speed(role, value) end

--Modify the player master unit
---@param role py.Role # Player
---@param unit py.Unit # unit
function GameAPI.change_highlight_unit_of_role(role, unit) end

--Player master unit
---@param role py.Role # Player
---@param unit py.Unit # unit
function GameAPI.set_highlight_unit_of_role(role, unit) end

--Acquire the player master unit
---@param role py.Role # Player
function GameAPI.get_highlight_unit_of_role(role) end

--Get the local game environment
---@return py.StartMode # Game environment
function GameAPI.api_get_start_mode() end

--Attack type judgment
---@param attack_type0 integer # Attack type
---@param attack_type1 integer # Attack type
---@return boolean # Attack type judgment
function GameAPI.api_check_attack_type(attack_type0, attack_type1) end

--Armor type judgment
---@param armor_type0 integer # Type of armor
---@param armor_type1 integer # Type of armor
---@return boolean # Armor type judgment
function GameAPI.api_check_armor_type(armor_type0, armor_type1) end

--Weather system switch
---@param weatherID integer # Weather ID
---@param time number # time
---@param intensity number # intensity
function GameAPI.set_weahter_enable(weatherID, time, intensity) end

--Get the player platform avatar
---@param role py.Role # Player
---@return integer # Picture ID
function GameAPI.get_role_platform_icon(role) end

--Get the player platform model
---@param role py.Role # Player
---@return py.ModelKey # Model number
function GameAPI.get_role_platform_model(role) end

--Set the maximum viewing range of the camera
---@param role py.Role # Player
---@param distance_max number # Upper limit of height
function GameAPI.set_camera_distance_max(role, distance_max) end

--Quit the game
---@param role py.Role # Player
function GameAPI.exit_game(role) end

--Create a physical projectile
---@param p_key py.ProjectileKey # Projectile number
---@param position py.FVector3 # position
---@param rotation? py.FVector3 # orientation
---@param owner_unit_or_player? py.Unit # Affiliated unit
---@param duration? py.Fixed # duration
---@return py.ProjectileEntity # Created projectiles
function GameAPI.create_physics_projectile_in_scene(p_key, position, rotation, owner_unit_or_player, duration) end

--Gets the model for the unit type
---@param unit_key py.UnitKey # Unit type number
---@return py.ModelKey # Model number
function GameAPI.api_get_unit_type_model(unit_key) end

--Gets the classification of the unit type
---@param unit_key py.UnitKey # Unit type number
---@return integer # type
function GameAPI.api_get_unit_type_category(unit_key) end

--Player local chart platform rank leaderboard player name
---@param rank integer # Ranking
---@return string # Player name
function GameAPI.api_get_role_name_of_rank(rank) end

--Player local chart platform level Leaderboard player level
---@param rank integer # Ranking
---@return integer # Player level
function GameAPI.api_get_role_level_of_rank(rank) end

--Traverse the item type of the item composite material
---@param item_key py.ItemKey # Item type
function GameAPI.iter_compose_item_res_of_item_name(item_key) end

--Player composites that traverse item types
---@param item_key py.ItemKey # Item type
function GameAPI.iter_compose_role_attr_of_item_name(item_key) end

--A random player in the player group
---@param roles py.RoleGroup # Player group
---@return py.Role # Player
function GameAPI.get_random_role_in_role_group(roles) end

--The first player in the player group
---@param roles py.RoleGroup # Player group
---@return py.Role # First player
function GameAPI.get_first_role_in_group(roles) end

--The last player in the group
---@param roles py.RoleGroup # Player group
---@return py.Role # Last player
function GameAPI.get_last_role_in_group(roles) end

--Iterate over the unit properties of the item type
---@param item_key py.ItemKey # Item type
function GameAPI.iter_unit_attr_of_item_name(item_key) end

--Traverse the unit properties of the item
---@param item py.Item # item
function GameAPI.iter_unit_attr_of_item(item) end

--Set the blood bar picture
---@param unit py.Unit # unit
---@param node_name string # Blood stripe naming
---@param image_id py.Texture # picture
---@param role? py.Role # Player
function GameAPI.set_billboard_picture(unit, node_name, image_id, role) end

--Set the blood bar text
---@param unit py.Unit # unit
---@param node_name string # Blood stripe naming
---@param text string # text
---@param role? py.Role # Player
---@param font? string # typeface
function GameAPI.set_billboard_text(unit, node_name, text, role, font) end

--Set blood strip visibility
---@param unit py.Unit # unit
---@param node_name string # Blood stripe naming
---@param visible boolean # visibility
---@param role? py.Role # Player
function GameAPI.set_billboard_visible(unit, node_name, visible, role) end

--Set the blood bar progress
---@param unit py.Unit # unit
---@param node_name string # Blood stripe naming
---@param progress number # schedule
---@param role? py.Role # Player
---@param transition_time? number # Transition time
function GameAPI.set_billboard_progress(unit, node_name, progress, role, transition_time) end

--Players completely quit the game (lobby completely quit the game)
---@param role py.Role # Player
function GameAPI.lobby_exit_game(role) end

--Default library adds BOOLEAN key-value pairs
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value boolean # value
function GameAPI.set_prefab_key_boolean_kv(prefab_conf_key, item_key, key, value) end

--The default library adds INTEGER key-value pairs
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value integer # value
function GameAPI.set_prefab_key_integer_kv(prefab_conf_key, item_key, key, value) end

--Default libraries add FLOAT key-value pairs
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.Fixed # value
function GameAPI.set_prefab_key_float_kv(prefab_conf_key, item_key, key, value) end

--The default library adds STRING key-value pairs
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value string # value
function GameAPI.set_prefab_key_string_kv(prefab_conf_key, item_key, key, value) end

--The default library adds UI_COMP key-value pairs
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value string # value
function GameAPI.set_prefab_key_ui_comp_kv(prefab_conf_key, item_key, key, value) end

--The default library adds UI_COMP_TYPE key-value pairs
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value integer # value
function GameAPI.set_prefab_key_ui_comp_type_kv(prefab_conf_key, item_key, key, value) end

--The default library adds UI_COMP_EVENT_TYPE key-value pairs
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value integer # value
function GameAPI.set_prefab_key_ui_comp_event_type_kv(prefab_conf_key, item_key, key, value) end

--The default library adds UI_COMP_ATTR key-value pairs
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value string # value
function GameAPI.set_prefab_key_ui_comp_attr_kv(prefab_conf_key, item_key, key, value) end

--The default library adds a UI_COMP_ALIGN_TYPE key-value pair
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value integer # value
function GameAPI.set_prefab_key_ui_comp_align_type_kv(prefab_conf_key, item_key, key, value) end

--The default library adds UI_PREFAB key-value pairs
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value string # value
function GameAPI.set_prefab_key_ui_prefab_kv(prefab_conf_key, item_key, key, value) end

--The default library adds UI_PREFAB_INSTANCE key-value pairs
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.UIPrefabIns # value
function GameAPI.set_prefab_key_ui_prefab_instance_kv(prefab_conf_key, item_key, key, value) end

--The default library adds a UI_PREFAB_INS_UID key-value pair
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value string # value
function GameAPI.set_prefab_key_ui_prefab_ins_uid_kv(prefab_conf_key, item_key, key, value) end

--The default library adds UI_DIRECTION key-value pairs
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value integer # value
function GameAPI.set_prefab_key_ui_direction_kv(prefab_conf_key, item_key, key, value) end

--The default library adds a UI_MODEL_CAMERA_MOD key-value pair
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value integer # value
function GameAPI.set_prefab_key_ui_model_camera_mod_kv(prefab_conf_key, item_key, key, value) end

--The default library adds a UI_BTN_STATUS key-value pair
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value integer # value
function GameAPI.set_prefab_key_ui_btn_status_kv(prefab_conf_key, item_key, key, value) end

--The default library adds UI_SCROLLVIEW_TYPE key-value pair
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value integer # value
function GameAPI.set_prefab_key_ui_scrollview_type_kv(prefab_conf_key, item_key, key, value) end

--The default library adds UI_ANIM key-value pairs
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.UIAnimKey # value
function GameAPI.set_prefab_key_ui_anim_kv(prefab_conf_key, item_key, key, value) end

--The default library adds a UI_ANIM_CURVE key-value pair
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value integer # value
function GameAPI.set_prefab_key_ui_anim_curve_kv(prefab_conf_key, item_key, key, value) end

--The default library adds AUDIO_CHANNEL key-value pairs
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value integer # value
function GameAPI.set_prefab_key_audio_channel_kv(prefab_conf_key, item_key, key, value) end

--Add a UNIT_ENTITY key-value pair to the default library
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.Unit # value
function GameAPI.set_prefab_key_unit_entity_kv(prefab_conf_key, item_key, key, value) end

--The default library adds a UNIT_GROUP key-value pair
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.UnitGroup # value
function GameAPI.set_prefab_key_unit_group_kv(prefab_conf_key, item_key, key, value) end

--The default library adds a UNIT_NAME key-value pair
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.UnitKey # value
function GameAPI.set_prefab_key_unit_name_kv(prefab_conf_key, item_key, key, value) end

--Add a UNIT_NAME_POOL key and value pair to the default library
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.UnitKeyPool # value
function GameAPI.set_prefab_key_unit_name_pool_kv(prefab_conf_key, item_key, key, value) end

--The default library adds a UNIT_WRITE_ATTRIBUTE key-value pair
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value string # value
function GameAPI.set_prefab_key_unit_write_attribute_kv(prefab_conf_key, item_key, key, value) end

--The default library adds ATTR_ELEMENT key-value pairs
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value string # value
function GameAPI.set_prefab_key_attr_element_kv(prefab_conf_key, item_key, key, value) end

--The default library adds ATTR_ELEMENT_READ key-value pairs
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value string # value
function GameAPI.set_prefab_key_attr_element_read_kv(prefab_conf_key, item_key, key, value) end

--Add MOVER_ENTITY key-value pairs to the default library
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.Mover # value
function GameAPI.set_prefab_key_mover_entity_kv(prefab_conf_key, item_key, key, value) end

--The default library adds IMAGE_QUALITY key-value pairs
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value string # value
function GameAPI.set_prefab_key_image_quality_kv(prefab_conf_key, item_key, key, value) end

--The default library adds a WINDOW_TYPE_SETTING key-value pair
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value string # value
function GameAPI.set_prefab_key_window_type_setting_kv(prefab_conf_key, item_key, key, value) end

--The default library adds ITEM_ENTITY key-value pairs
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.Item # value
function GameAPI.set_prefab_key_item_entity_kv(prefab_conf_key, item_key, key, value) end

--The default library adds ITEM_GROUP key-value pairs
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.ItemGroup # value
function GameAPI.set_prefab_key_item_group_kv(prefab_conf_key, item_key, key, value) end

--The default library adds an ITEM_NAME key-value pair
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.ItemKey # value
function GameAPI.set_prefab_key_item_name_kv(prefab_conf_key, item_key, key, value) end

--ABILITY key-value pair added to default library
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.Ability # value
function GameAPI.set_prefab_key_ability_kv(prefab_conf_key, item_key, key, value) end

--The default library adds ABILITY_TYPE key-value pair
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value integer # value
function GameAPI.set_prefab_key_ability_type_kv(prefab_conf_key, item_key, key, value) end

--The default library adds ABILITY_CAST_TYPE key-value pairs
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value integer # value
function GameAPI.set_prefab_key_ability_cast_type_kv(prefab_conf_key, item_key, key, value) end

--The default library adds ABILITY_NAME key-value pairs
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.AbilityKey # value
function GameAPI.set_prefab_key_ability_name_kv(prefab_conf_key, item_key, key, value) end

--Adds SKILL_POINTER_TYPE key-value pairs to the default library
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value integer # value
function GameAPI.set_prefab_key_skill_pointer_type_kv(prefab_conf_key, item_key, key, value) end

--Default library adds MODIFIER_ENTITY key-value pair
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.ModifierEntity # value
function GameAPI.set_prefab_key_modifier_entity_kv(prefab_conf_key, item_key, key, value) end

--Default library adds MODIFIER_TYPE key-value pair
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.ModifierType # value
function GameAPI.set_prefab_key_modifier_type_kv(prefab_conf_key, item_key, key, value) end

--Add MODIFIER_EFFECT_TYPE key pair to default library
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.ModifierEffectType # value
function GameAPI.set_prefab_key_modifier_effect_type_kv(prefab_conf_key, item_key, key, value) end

--Default Library Adds MODIFIER key pair
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.ModifierKey # value
function GameAPI.set_prefab_key_modifier_kv(prefab_conf_key, item_key, key, value) end

--The default library adds a PROJECTILE key-value pair
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.ProjectileKey # value
function GameAPI.set_prefab_key_projectile_kv(prefab_conf_key, item_key, key, value) end

--PROJECTILE_ENTITY key value pairs are added to the default library
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.ProjectileEntity # value
function GameAPI.set_prefab_key_projectile_entity_kv(prefab_conf_key, item_key, key, value) end

--The default library adds PROJECTILE_GROUP key-value pairs
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.ProjectileGroup # value
function GameAPI.set_prefab_key_projectile_group_kv(prefab_conf_key, item_key, key, value) end

--Add a DESTRUCTIBLE_ENTITY key-value pair to the default library
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.Destructible # value
function GameAPI.set_prefab_key_destructible_entity_kv(prefab_conf_key, item_key, key, value) end

--Add a DESTRUCTIBLE_NAME key-value pair to the default library
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.DestructibleKey # value
function GameAPI.set_prefab_key_destructible_name_kv(prefab_conf_key, item_key, key, value) end

--The SOUND_ENTITY key pair is added to the preset library
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.SoundEntity # value
function GameAPI.set_prefab_key_sound_entity_kv(prefab_conf_key, item_key, key, value) end

--The default library adds AUDIO_KEY key-value pairs
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.AudioKey # value
function GameAPI.set_prefab_key_audio_key_kv(prefab_conf_key, item_key, key, value) end

--The default library adds GAME_MODE key-value pairs
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.GameMode # value
function GameAPI.set_prefab_key_game_mode_kv(prefab_conf_key, item_key, key, value) end

--The default library adds PLAYER key-value pairs
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.Role # value
function GameAPI.set_prefab_key_player_kv(prefab_conf_key, item_key, key, value) end

--The default library adds a PLAYER_GROUP key-value pair
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.RoleGroup # value
function GameAPI.set_prefab_key_player_group_kv(prefab_conf_key, item_key, key, value) end

--Add a ROLE_RES_KEY key-value pair to the default library
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.RoleResKey # value
function GameAPI.set_prefab_key_role_res_key_kv(prefab_conf_key, item_key, key, value) end

--The default library adds a ROLE_STATUS key-value pair
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.RoleStatus # value
function GameAPI.set_prefab_key_role_status_kv(prefab_conf_key, item_key, key, value) end

--The default library adds ROLE_TYPE key-value pair
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.RoleType # value
function GameAPI.set_prefab_key_role_type_kv(prefab_conf_key, item_key, key, value) end

--The default library adds ROLE_RELATION key and value pairs
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.RoleRelation # value
function GameAPI.set_prefab_key_role_relation_kv(prefab_conf_key, item_key, key, value) end

--Default libraries add TEAM key-value pairs
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.Camp # value
function GameAPI.set_prefab_key_team_kv(prefab_conf_key, item_key, key, value) end

--The default library adds a POINT key-value pair
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.FPoint # value
function GameAPI.set_prefab_key_point_kv(prefab_conf_key, item_key, key, value) end

--The default library adds VECTOR3 key-value pairs
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.FVector3 # value
function GameAPI.set_prefab_key_vector3_kv(prefab_conf_key, item_key, key, value) end

--Add ROTATION key pairs to default libraries
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.FRotation # value
function GameAPI.set_prefab_key_rotation_kv(prefab_conf_key, item_key, key, value) end

--The default library adds POINT_LIST key-value pairs
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.Road # value
function GameAPI.set_prefab_key_point_list_kv(prefab_conf_key, item_key, key, value) end

--The default library adds a RECTANGLE key-value pair
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.RecArea # value
function GameAPI.set_prefab_key_rectangle_kv(prefab_conf_key, item_key, key, value) end

--The default library adds ROUND_AREA key-value pairs
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.CirArea # value
function GameAPI.set_prefab_key_round_area_kv(prefab_conf_key, item_key, key, value) end

--The default library adds POLYGON key-value pairs
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.PolyArea # value
function GameAPI.set_prefab_key_polygon_kv(prefab_conf_key, item_key, key, value) end

--The default library adds a CAMERA key-value pair
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.Camera # value
function GameAPI.set_prefab_key_camera_kv(prefab_conf_key, item_key, key, value) end

--The default library adds CAMLINE key-value pairs
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.CamlineID # value
function GameAPI.set_prefab_key_camline_kv(prefab_conf_key, item_key, key, value) end

--The default library adds POINT_LIGHT key-value pairs
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.PointLight # value
function GameAPI.set_prefab_key_point_light_kv(prefab_conf_key, item_key, key, value) end

--The default library adds SPOT_LIGHT key-value pairs
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.SpotLight # value
function GameAPI.set_prefab_key_spot_light_kv(prefab_conf_key, item_key, key, value) end

--The default library adds FOG key-value pairs
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.Fog # value
function GameAPI.set_prefab_key_fog_kv(prefab_conf_key, item_key, key, value) end

--Add a SCENE_SOUND key-value pair to the default library
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.SceneSound # value
function GameAPI.set_prefab_key_scene_sound_kv(prefab_conf_key, item_key, key, value) end

--The default library adds MODEL key-value pairs
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.ModelKey # value
function GameAPI.set_prefab_key_model_kv(prefab_conf_key, item_key, key, value) end

--Add SFX_ENTITY key-value pairs to the default library
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.Sfx # value
function GameAPI.set_prefab_key_sfx_entity_kv(prefab_conf_key, item_key, key, value) end

--The default library adds SFX_KEY key-value pairs
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.SfxKey # value
function GameAPI.set_prefab_key_sfx_key_kv(prefab_conf_key, item_key, key, value) end

--Add a LINK_SFX_ENTITY key pair to the default library
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.LinkSfx # value
function GameAPI.set_prefab_key_link_sfx_entity_kv(prefab_conf_key, item_key, key, value) end

--Default libraries add LINK_SFX_KEY key-value pairs
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.LinkSfxKey # value
function GameAPI.set_prefab_key_link_sfx_key_kv(prefab_conf_key, item_key, key, value) end

--The default library adds a CURSOR_KEY key-value pair
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.CursorKey # value
function GameAPI.set_prefab_key_cursor_key_kv(prefab_conf_key, item_key, key, value) end

--The default library adds ANGLE key-value pairs
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.Fixed # value
function GameAPI.set_prefab_key_angle_kv(prefab_conf_key, item_key, key, value) end

--The default library adds TEXTURE key-value pairs
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.Texture # value
function GameAPI.set_prefab_key_texture_kv(prefab_conf_key, item_key, key, value) end

--Add SEQUENCE key-value pairs to the default library
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.Sequence # value
function GameAPI.set_prefab_key_sequence_kv(prefab_conf_key, item_key, key, value) end

--Add PHYSICS_OBJECT key-value pairs to the default library
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.PhysicsObject # value
function GameAPI.set_prefab_key_physics_object_kv(prefab_conf_key, item_key, key, value) end

--Add PHYSICS_ENTITY key-value pairs to the default library
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.PhysicsEntity # value
function GameAPI.set_prefab_key_physics_entity_kv(prefab_conf_key, item_key, key, value) end

--Add PHYSICS_OBJECT_KEY key pairs to the default library
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.PhysicsObjectKey # value
function GameAPI.set_prefab_key_physics_object_key_kv(prefab_conf_key, item_key, key, value) end

--Add a PHYSICS_ENTITY_KEY key-value pair to the default library
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.PhysicsEntityKey # value
function GameAPI.set_prefab_key_physics_entity_key_kv(prefab_conf_key, item_key, key, value) end

--The default library adds RIGID_BODY key-value pairs
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.RigidBody # value
function GameAPI.set_prefab_key_rigid_body_kv(prefab_conf_key, item_key, key, value) end

--The default library adds RIGID_BODY_GROUP key-value pairs
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.RigidBodyGroup # value
function GameAPI.set_prefab_key_rigid_body_group_kv(prefab_conf_key, item_key, key, value) end

--The default library adds COLLIDER key-value pairs
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.Collider # value
function GameAPI.set_prefab_key_collider_kv(prefab_conf_key, item_key, key, value) end

--Default libraries add JOINT key-value pairs
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.Joint # value
function GameAPI.set_prefab_key_joint_kv(prefab_conf_key, item_key, key, value) end

--The default library adds a REACTION key-value pair
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.Reaction # value
function GameAPI.set_prefab_key_reaction_kv(prefab_conf_key, item_key, key, value) end

--Add a REACTION_GROUP key value pair to the preset library
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.ReactionGroup # value
function GameAPI.set_prefab_key_reaction_group_kv(prefab_conf_key, item_key, key, value) end

--The default library adds DYNAMIC_TRIGGER_INSTANCE key-value pairs
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.DynamicTriggerInstance # value
function GameAPI.set_prefab_key_dynamic_trigger_instance_kv(prefab_conf_key, item_key, key, value) end

--The default library adds TABLE key-value pairs
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.Table # value
function GameAPI.set_prefab_key_table_kv(prefab_conf_key, item_key, key, value) end

--Add a RANDOM_POOL key-value pair to the default library
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.RandomPool # value
function GameAPI.set_prefab_key_random_pool_kv(prefab_conf_key, item_key, key, value) end

--Add a SCENE_UI key-value pair to the default library
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.SceneNode # value
function GameAPI.set_prefab_key_scene_ui_kv(prefab_conf_key, item_key, key, value) end

--The default library adds a DAMAGE_TYPE key-value pair
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value integer # value
function GameAPI.set_prefab_key_damage_type_kv(prefab_conf_key, item_key, key, value) end

--The default library adds a HARM_TEXT_TYPE_NEW key-value pair
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value string # value
function GameAPI.set_prefab_key_harm_text_type_new_kv(prefab_conf_key, item_key, key, value) end

--The default library adds a FONT_TYPE key-value pair
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value string # value
function GameAPI.set_prefab_key_font_type_kv(prefab_conf_key, item_key, key, value) end

--The default library adds JUMP_WORD_TRACK key-value pairs
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value integer # value
function GameAPI.set_prefab_key_jump_word_track_kv(prefab_conf_key, item_key, key, value) end

--The default library adds a NEW_TIMER key-value pair
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.Timer # value
function GameAPI.set_prefab_key_new_timer_kv(prefab_conf_key, item_key, key, value) end

--The default library adds a TECH_KEY key-value pair
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.TechKey # value
function GameAPI.set_prefab_key_tech_key_kv(prefab_conf_key, item_key, key, value) end

--Add STORE_KEY key-value pairs to the default library
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.StoreKey # value
function GameAPI.set_prefab_key_store_key_kv(prefab_conf_key, item_key, key, value) end

--Add a KEYBOARD_KEY pair to the default library
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.KeyboardKey # value
function GameAPI.set_prefab_key_keyboard_key_kv(prefab_conf_key, item_key, key, value) end

--Add FUNC_KEYBOARD_KEY key pairs to the default library
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.FuncKeyboardKey # value
function GameAPI.set_prefab_key_func_keyboard_key_kv(prefab_conf_key, item_key, key, value) end

--The default library adds MOUSE_KEY key-value pairs
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.MouseKey # value
function GameAPI.set_prefab_key_mouse_key_kv(prefab_conf_key, item_key, key, value) end

--The default library adds MOUSE_WHEEL key pairs
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.MouseWheel # value
function GameAPI.set_prefab_key_mouse_wheel_kv(prefab_conf_key, item_key, key, value) end

--The default library adds a POST_EFFECT key-value pair
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.PostEffect # value
function GameAPI.set_prefab_key_post_effect_kv(prefab_conf_key, item_key, key, value) end

--The default library adds a UNIT_TYPE key-value pair
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.UnitType # value
function GameAPI.set_prefab_key_unit_type_kv(prefab_conf_key, item_key, key, value) end

--The default library adds UNIT_COMMAND_TYPE key-value pairs
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.UnitCommandType # value
function GameAPI.set_prefab_key_unit_command_type_kv(prefab_conf_key, item_key, key, value) end

--Add MINI_MAP_COLOR_TYPE key-value pairs to the default library
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.MiniMapColorType # value
function GameAPI.set_prefab_key_mini_map_color_type_kv(prefab_conf_key, item_key, key, value) end

--The default library adds a UNIT_BEHAVIOR key-value pair
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.UnitBehavior # value
function GameAPI.set_prefab_key_unit_behavior_kv(prefab_conf_key, item_key, key, value) end

--The default library adds a CURVED_PATH key-value pair
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.CurvedPath # value
function GameAPI.set_prefab_key_curved_path_kv(prefab_conf_key, item_key, key, value) end

--The default library adds CURVED_PATH_3D key-value pairs
---@param prefab_conf_key integer # prefab Library ID
---@param item_key integer # ID
---@param key string # Key-value name
---@param value py.CurvedPath3D # value
function GameAPI.set_prefab_key_curved_path_3d_kv(prefab_conf_key, item_key, key, value) end

--Determines whether the default has a BOOLEAN key-value pair
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_boolean_kv(prefab_type, prefab_key, key) end

--Determines whether an INTEGER key-value pair exists in the default
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_integer_kv(prefab_type, prefab_key, key) end

--Determines whether the default has FLOAT key-value pairs
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_float_kv(prefab_type, prefab_key, key) end

--Determines whether the default STRING key-value pair exists
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_string_kv(prefab_type, prefab_key, key) end

--Determines whether a UI_COMP key-value pair exists in the default
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_ui_comp_kv(prefab_type, prefab_key, key) end

--Determines whether UI_COMP_TYPE key-value pairs exist in the default
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_ui_comp_type_kv(prefab_type, prefab_key, key) end

--Determines whether a UI_COMP_EVENT_TYPE key-value pair exists in the default
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_ui_comp_event_type_kv(prefab_type, prefab_key, key) end

--Determines whether a UI_COMP_ATTR key-value pair exists in the default
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_ui_comp_attr_kv(prefab_type, prefab_key, key) end

--Determines whether a UI_COMP_ALIGN_TYPE key value pair exists in the default
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_ui_comp_align_type_kv(prefab_type, prefab_key, key) end

--Determines whether the default has UI_PREFAB key-value pairs
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_ui_prefab_kv(prefab_type, prefab_key, key) end

--Determines whether the default has a UI_PREFAB_INSTANCE key-value pair
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_ui_prefab_instance_kv(prefab_type, prefab_key, key) end

--Determines if the default has a UI_PREFAB_INS_UID key-value pair
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_ui_prefab_ins_uid_kv(prefab_type, prefab_key, key) end

--Determines if the default has a UI_DIRECTION key-value pair
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_ui_direction_kv(prefab_type, prefab_key, key) end

--Determines whether the default has a UI_MODEL_CAMERA_MOD key-value pair
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_ui_model_camera_mod_kv(prefab_type, prefab_key, key) end

--Determines whether the default has a UI_BTN_STATUS key-value pair
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_ui_btn_status_kv(prefab_type, prefab_key, key) end

--Determines whether UI_SCROLLVIEW_TYPE key-value pair exists in the default
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_ui_scrollview_type_kv(prefab_type, prefab_key, key) end

--Determines whether a UI_ANIM key-value pair exists in the default
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_ui_anim_kv(prefab_type, prefab_key, key) end

--Determines if the default has a UI_ANIM_CURVE key-value pair
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_ui_anim_curve_kv(prefab_type, prefab_key, key) end

--Determines whether the default has an AUDIO_CHANNEL key-value pair
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_audio_channel_kv(prefab_type, prefab_key, key) end

--Check whether the default UNIT_ENTITY key pair exists
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_unit_entity_kv(prefab_type, prefab_key, key) end

--Check whether the default UNIT_GROUP key pair exists
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_unit_group_kv(prefab_type, prefab_key, key) end

--Check whether the default UNIT_NAME key value pair exists
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_unit_name_kv(prefab_type, prefab_key, key) end

--Check whether the default UNIT_NAME_POOL key and value pair exists
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_unit_name_pool_kv(prefab_type, prefab_key, key) end

--Check whether the default UNIT_WRITE_ATTRIBUTE key pair exists
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_unit_write_attribute_kv(prefab_type, prefab_key, key) end

--Determines whether the default has ATTR_ELEMENT key-value pairs
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_attr_element_kv(prefab_type, prefab_key, key) end

--Determines whether the default has ATTR_ELEMENT_READ key value pairs
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_attr_element_read_kv(prefab_type, prefab_key, key) end

--Check whether the default MOVER_ENTITY key pair exists
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_mover_entity_kv(prefab_type, prefab_key, key) end

--Determines whether the default IMAGE_QUALITY key-value pair exists
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_image_quality_kv(prefab_type, prefab_key, key) end

--Determines whether the default has a WINDOW_TYPE_SETTING key value pair
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_window_type_setting_kv(prefab_type, prefab_key, key) end

--Determines whether an ITEM_ENTITY key-value pair exists in the default
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_item_entity_kv(prefab_type, prefab_key, key) end

--Determines if the default has an ITEM_GROUP key-value pair
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_item_group_kv(prefab_type, prefab_key, key) end

--Determines if the default ITEM_NAME key-value pair exists
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_item_name_kv(prefab_type, prefab_key, key) end

--Determine whether the default ABILITY key-value pair exists
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_ability_kv(prefab_type, prefab_key, key) end

--Determines whether the default ABILITY_TYPE key-value pair exists
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_ability_type_kv(prefab_type, prefab_key, key) end

--Determines whether the default ABILITY_CAST_TYPE key-value pair exists
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_ability_cast_type_kv(prefab_type, prefab_key, key) end

--Check whether the default ABILITY_NAME key-value pair exists
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_ability_name_kv(prefab_type, prefab_key, key) end

--Determines whether the default SKILL_POINTER_TYPE key-value pair exists
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_skill_pointer_type_kv(prefab_type, prefab_key, key) end

--Check whether MODIFIER_ENTITY key pair exists in the default
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_modifier_entity_kv(prefab_type, prefab_key, key) end

--Check whether the default MODIFIER_TYPE key value pair exists
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_modifier_type_kv(prefab_type, prefab_key, key) end

--Check whether the MODIFIER_EFFECT_TYPE key pair exists
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_modifier_effect_type_kv(prefab_type, prefab_key, key) end

--Determine if the default has a MODIFIER key pair
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_modifier_kv(prefab_type, prefab_key, key) end

--Determines if the default has a PROJECTILE key-value pair
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_projectile_kv(prefab_type, prefab_key, key) end

--Determine whether PROJECTILE_ENTITY key/value pairs exist in default
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_projectile_entity_kv(prefab_type, prefab_key, key) end

--Determine whether the PROJECTILE_GROUP key value pair exists in default
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_projectile_group_kv(prefab_type, prefab_key, key) end

--Check whether the default key pair DESTRUCTIBLE_ENTITY exists
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_destructible_entity_kv(prefab_type, prefab_key, key) end

--Determine whether a DESTRUCTIBLE_NAME key pair exists in the default
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_destructible_name_kv(prefab_type, prefab_key, key) end

--Check whether the preset SOUND_ENTITY key pair exists
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_sound_entity_kv(prefab_type, prefab_key, key) end

--Check whether the default AUDIO_KEY key pair exists
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_audio_key_kv(prefab_type, prefab_key, key) end

--Determines if the default has a GAME_MODE key-value pair
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_game_mode_kv(prefab_type, prefab_key, key) end

--Determines whether the default has a PLAYER key-value pair
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_player_kv(prefab_type, prefab_key, key) end

--Determine whether a PLAYER_GROUP key value pair exists in the default
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_player_group_kv(prefab_type, prefab_key, key) end

--Check whether the default ROLE_RES_KEY key pair exists
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_role_res_key_kv(prefab_type, prefab_key, key) end

--Check whether the default ROLE_STATUS key pair exists
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_role_status_kv(prefab_type, prefab_key, key) end

--Determines whether the default ROLE_TYPE key-value pair exists
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_role_type_kv(prefab_type, prefab_key, key) end

--Check whether the default ROLE_RELATION key and value pairs exist
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_role_relation_kv(prefab_type, prefab_key, key) end

--Determines whether the default has a TEAM key-value pair
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_team_kv(prefab_type, prefab_key, key) end

--Check whether a POINT key-value pair exists in the default
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_point_kv(prefab_type, prefab_key, key) end

--Determines whether the default contains VECTOR3 key-value pairs
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_vector3_kv(prefab_type, prefab_key, key) end

--Check whether a ROTATION key pair exists
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_rotation_kv(prefab_type, prefab_key, key) end

--Check whether the default POINT_LIST key pair exists
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_point_list_kv(prefab_type, prefab_key, key) end

--Determines if the default RECTANGLE key pair exists
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_rectangle_kv(prefab_type, prefab_key, key) end

--Checks whether the default has a ROUND_AREA key pair
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_round_area_kv(prefab_type, prefab_key, key) end

--Determines whether POLYGON key-value pairs exist in the default
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_polygon_kv(prefab_type, prefab_key, key) end

--Determines whether a CAMERA key-value pair exists in the default
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_camera_kv(prefab_type, prefab_key, key) end

--Determines whether the default has a CAMLINE key-value pair
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_camline_kv(prefab_type, prefab_key, key) end

--Check whether the default POINT_LIGHT key pair exists
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_point_light_kv(prefab_type, prefab_key, key) end

--Determines whether SPOT_LIGHT key pairs exist in the default
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_spot_light_kv(prefab_type, prefab_key, key) end

--Determines whether FOG key-value pairs exist in the default
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_fog_kv(prefab_type, prefab_key, key) end

--Check whether the default SCENE_SOUND key pair exists
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_scene_sound_kv(prefab_type, prefab_key, key) end

--Determines whether the default has a MODEL key-value pair
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_model_kv(prefab_type, prefab_key, key) end

--Check whether the default SFX_ENTITY key pair exists
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_sfx_entity_kv(prefab_type, prefab_key, key) end

--Check whether the default SFX_KEY key pair exists
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_sfx_key_kv(prefab_type, prefab_key, key) end

--Check whether the default LINK_SFX_ENTITY key pair exists
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_link_sfx_entity_kv(prefab_type, prefab_key, key) end

--Check whether the default LINK_SFX_KEY key pair exists
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_link_sfx_key_kv(prefab_type, prefab_key, key) end

--Determines whether a CURSOR_KEY key pair exists in the default
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_cursor_key_kv(prefab_type, prefab_key, key) end

--Determines if the default ANGLE key-value pair exists
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_angle_kv(prefab_type, prefab_key, key) end

--Determine if the default has a TEXTURE key-value pair
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_texture_kv(prefab_type, prefab_key, key) end

--Determines whether a SEQUENCE key-value pair exists in the default
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_sequence_kv(prefab_type, prefab_key, key) end

--Check whether the default PHYSICS_OBJECT key pair exists
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_physics_object_kv(prefab_type, prefab_key, key) end

--Check whether the default PHYSICS_ENTITY key - value pair exists
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_physics_entity_kv(prefab_type, prefab_key, key) end

--Check whether a PHYSICS_OBJECT_KEY key pair exists in the default setting
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_physics_object_key_kv(prefab_type, prefab_key, key) end

--Check whether the default key pair of PHYSICS_ENTITY_KEY exists
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_physics_entity_key_kv(prefab_type, prefab_key, key) end

--Determines whether the RIGID_BODY key pair exists in the default
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_rigid_body_kv(prefab_type, prefab_key, key) end

--Check whether the preset RIGID_BODY_GROUP key pair exists
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_rigid_body_group_kv(prefab_type, prefab_key, key) end

--Determines if the default COLLIDER key-value pair exists
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_collider_kv(prefab_type, prefab_key, key) end

--Determines whether the default has JOINT key-value pairs
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_joint_kv(prefab_type, prefab_key, key) end

--Determine whether a REACTION key pair exists in the default
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_reaction_kv(prefab_type, prefab_key, key) end

--Determine whether the default mode is REACTION_GROUP key value pair
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_reaction_group_kv(prefab_type, prefab_key, key) end

--Determines whether a DYNAMIC_TRIGGER_INSTANCE key-value pair exists in the default
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_dynamic_trigger_instance_kv(prefab_type, prefab_key, key) end

--Determines whether a TABLE key-value pair exists in the default
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_table_kv(prefab_type, prefab_key, key) end

--Determine whether RANDOM_POOL key pair exists in the default
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_random_pool_kv(prefab_type, prefab_key, key) end

--Check whether the default SCENE_UI key pair exists
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_scene_ui_kv(prefab_type, prefab_key, key) end

--Determines whether a DAMAGE_TYPE key pair exists in the default
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_damage_type_kv(prefab_type, prefab_key, key) end

--Check whether the default HARM_TEXT_TYPE_NEW key pair exists
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_harm_text_type_new_kv(prefab_type, prefab_key, key) end

--Determines whether the default has a FONT_TYPE key pair
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_font_type_kv(prefab_type, prefab_key, key) end

--Determines whether JUMP_WORD_TRACK key pairs exist in the default
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_jump_word_track_kv(prefab_type, prefab_key, key) end

--Check whether the NEW_TIMER key-value pair exists in the default
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_new_timer_kv(prefab_type, prefab_key, key) end

--Check whether the preset TECH_KEY key pair exists
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_tech_key_kv(prefab_type, prefab_key, key) end

--Check whether the default has STORE_KEY key-value pairs
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_store_key_kv(prefab_type, prefab_key, key) end

--Check whether a KEYBOARD_KEY pair exists
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_keyboard_key_kv(prefab_type, prefab_key, key) end

--Determine whether a preset FUNC_KEYBOARD_KEY key pair exists
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_func_keyboard_key_kv(prefab_type, prefab_key, key) end

--Determines whether the default MOUSE_KEY key-value pair exists
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_mouse_key_kv(prefab_type, prefab_key, key) end

--Determines whether the default MOUSE_WHEEL key pair exists
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_mouse_wheel_kv(prefab_type, prefab_key, key) end

--Check whether the default has a POST_EFFECT key-value pair
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_post_effect_kv(prefab_type, prefab_key, key) end

--Determines whether the default UNIT_TYPE key-value pair exists
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_unit_type_kv(prefab_type, prefab_key, key) end

--Determines whether a UNIT_COMMAND_TYPE key pair exists in the default
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_unit_command_type_kv(prefab_type, prefab_key, key) end

--Determines whether the default has a MINI_MAP_COLOR_TYPE key-value pair
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_mini_map_color_type_kv(prefab_type, prefab_key, key) end

--Check whether the default UNIT_BEHAVIOR key pair exists
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_unit_behavior_kv(prefab_type, prefab_key, key) end

--Determines whether a CURVED_PATH key pair exists in the default
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_curved_path_kv(prefab_type, prefab_key, key) end

--Determines whether the default has a CURVED_PATH_3D key-value pair
---@param prefab_type string # Default type
---@param prefab_key py.UnitKey # Default number
---@param key string # Key name
---@return boolean # Existence or not
function GameAPI.has_prefab_curved_path_3d_kv(prefab_type, prefab_key, key) end

--Gets the unit number BOOLEAN key pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return boolean # Key value
function GameAPI.get_unit_key_boolean_kv(unit_key, key) end

--Gets item number BOOLEAN key pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return boolean # Key value
function GameAPI.get_item_key_boolean_kv(item_key, key) end

--Gets skill number BOOLEAN key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return boolean # Key value
function GameAPI.get_ability_key_boolean_kv(ability_key, key) end

--Gets Magic effect number BOOLEAN key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return boolean # Key value
function GameAPI.get_modifier_key_boolean_kv(modifier_key, key) end

--Gets effect number BOOLEAN key pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return boolean # Key value
function GameAPI.get_projectile_key_boolean_kv(projectile_key, key) end

--Gets destructible number BOOLEAN key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return boolean # Key value
function GameAPI.get_destructible_key_boolean_kv(destructible_key, key) end

--Gets technology number BOOLEAN key pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return boolean # Key value
function GameAPI.get_tech_key_boolean_kv(tech_key, key) end

--Gets image BOOLEAN key pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return boolean # Key value
function GameAPI.get_icon_id_boolean_kv(icon_id, key) end

--Gets the logic-physical component type BOOLEAN key-value pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return boolean # Key value
function GameAPI.get_physics_entity_key_boolean_kv(physics_entity_key, key) end

--Get the unit number INTEGER key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_unit_key_integer_kv(unit_key, key) end

--Gets the item number INTEGER key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_item_key_integer_kv(item_key, key) end

--Obtain the skill number INTEGER
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_ability_key_integer_kv(ability_key, key) end

--Get Magic Effects number INTEGER key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_modifier_key_integer_kv(modifier_key, key) end

--Get the special effect number INTEGER key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_projectile_key_integer_kv(projectile_key, key) end

--Gets the destructible number INTEGER key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_destructible_key_integer_kv(destructible_key, key) end

--Get the technology number INTEGER key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_tech_key_integer_kv(tech_key, key) end

--Get the image INTEGER key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_icon_id_integer_kv(icon_id, key) end

--Obtain the type of the logical physical component INTEGER key-value pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_physics_entity_key_integer_kv(physics_entity_key, key) end

--Gets the unit number FLOAT key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.Fixed # Key value
function GameAPI.get_unit_key_float_kv(unit_key, key) end

--Gets the item number FLOAT keyvalue pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.Fixed # Key value
function GameAPI.get_item_key_float_kv(item_key, key) end

--Gets the skill number FLOAT key-value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.Fixed # Key value
function GameAPI.get_ability_key_float_kv(ability_key, key) end

--Gets the Magic Effects number FLOAT keyvalue pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.Fixed # Key value
function GameAPI.get_modifier_key_float_kv(modifier_key, key) end

--Gets the effect number FLOAT key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.Fixed # Key value
function GameAPI.get_projectile_key_float_kv(projectile_key, key) end

--Gets the destructible number FLOAT key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.Fixed # Key value
function GameAPI.get_destructible_key_float_kv(destructible_key, key) end

--Gets the technology number FLOAT key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.Fixed # Key value
function GameAPI.get_tech_key_float_kv(tech_key, key) end

--Gets image FLOAT key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.Fixed # Key value
function GameAPI.get_icon_id_float_kv(icon_id, key) end

--Gets a logic-physical component type FLOAT key-value pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.Fixed # Key value
function GameAPI.get_physics_entity_key_float_kv(physics_entity_key, key) end

--Gets the unit number STRING key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_unit_key_string_kv(unit_key, key) end

--Gets the item number STRING key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_item_key_string_kv(item_key, key) end

--Get skill number STRING key-value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_ability_key_string_kv(ability_key, key) end

--Gets Magic Effects number STRING key-value pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_modifier_key_string_kv(modifier_key, key) end

--Gets the special effect number STRING key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_projectile_key_string_kv(projectile_key, key) end

--Gets the destructible number STRING key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_destructible_key_string_kv(destructible_key, key) end

--Gets the technology number STRING key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_tech_key_string_kv(tech_key, key) end

--Gets a picture STRING key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return string # Key value
function GameAPI.get_icon_id_string_kv(icon_id, key) end

--Gets the logical physical component type STRING key-value pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return string # Key value
function GameAPI.get_physics_entity_key_string_kv(physics_entity_key, key) end

--Gets the unit number UI_COMP key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_unit_key_ui_comp_kv(unit_key, key) end

--Gets the item number UI_COMP key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_item_key_ui_comp_kv(item_key, key) end

--Gets the skill number UI_COMP key-value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_ability_key_ui_comp_kv(ability_key, key) end

--Gets the Magic effect special effect number UI_COMP key-value pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_modifier_key_ui_comp_kv(modifier_key, key) end

--Gets the effect number UI_COMP key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_projectile_key_ui_comp_kv(projectile_key, key) end

--Gets destructible number UI_COMP key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_destructible_key_ui_comp_kv(destructible_key, key) end

--Gets the technology number UI_COMP key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_tech_key_ui_comp_kv(tech_key, key) end

--Gets the image UI_COMP key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return string # Key value
function GameAPI.get_icon_id_ui_comp_kv(icon_id, key) end

--Gets a logical physical component type UI_COMP key-value pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return string # Key value
function GameAPI.get_physics_entity_key_ui_comp_kv(physics_entity_key, key) end

--Gets the unit number UI_COMP_TYPE key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_unit_key_ui_comp_type_kv(unit_key, key) end

--Gets the item number UI_COMP_TYPE key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_item_key_ui_comp_type_kv(item_key, key) end

--Gets the skill number UI_COMP_TYPE key-value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_ability_key_ui_comp_type_kv(ability_key, key) end

--Gets the Magic effect special effect number UI_COMP_TYPE key-value pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_modifier_key_ui_comp_type_kv(modifier_key, key) end

--Gets the special effect number UI_COMP_TYPE key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_projectile_key_ui_comp_type_kv(projectile_key, key) end

--Gets destructible number UI_COMP_TYPE key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_destructible_key_ui_comp_type_kv(destructible_key, key) end

--Gets the technology number UI_COMP_TYPE key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_tech_key_ui_comp_type_kv(tech_key, key) end

--Gets the image UI_COMP_TYPE key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_icon_id_ui_comp_type_kv(icon_id, key) end

--Gets the logical physical component type UI_COMP_TYPE key-value pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_physics_entity_key_ui_comp_type_kv(physics_entity_key, key) end

--Gets the unit number UI_COMP_EVENT_TYPE key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_unit_key_ui_comp_event_type_kv(unit_key, key) end

--Gets the item number UI_COMP_EVENT_TYPE key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_item_key_ui_comp_event_type_kv(item_key, key) end

--Gets the skill number UI_COMP_EVENT_TYPE key-value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_ability_key_ui_comp_event_type_kv(ability_key, key) end

--Gets the Magic effect special effect number UI_COMP_EVENT_TYPE key-value pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_modifier_key_ui_comp_event_type_kv(modifier_key, key) end

--Gets the special effect number UI_COMP_EVENT_TYPE key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_projectile_key_ui_comp_event_type_kv(projectile_key, key) end

--Gets destructible number UI_COMP_EVENT_TYPE key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_destructible_key_ui_comp_event_type_kv(destructible_key, key) end

--Gets the technology number UI_COMP_EVENT_TYPE key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_tech_key_ui_comp_event_type_kv(tech_key, key) end

--Gets the image UI_COMP_EVENT_TYPE key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_icon_id_ui_comp_event_type_kv(icon_id, key) end

--Gets the logical physical component type UI_COMP_EVENT_TYPE key-value pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_physics_entity_key_ui_comp_event_type_kv(physics_entity_key, key) end

--Gets the unit number UI_COMP_ATTR key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_unit_key_ui_comp_attr_kv(unit_key, key) end

--Gets the item number UI_COMP_ATTR key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_item_key_ui_comp_attr_kv(item_key, key) end

--Gets the skill number UI_COMP_ATTR key-value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_ability_key_ui_comp_attr_kv(ability_key, key) end

--Gets the Magic effect special effect number UI_COMP_ATTR key-value pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_modifier_key_ui_comp_attr_kv(modifier_key, key) end

--Gets the special effect number UI_COMP_ATTR key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_projectile_key_ui_comp_attr_kv(projectile_key, key) end

--Gets the destructible number UI_COMP_ATTR key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_destructible_key_ui_comp_attr_kv(destructible_key, key) end

--Gets the technology number UI_COMP_ATTR key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_tech_key_ui_comp_attr_kv(tech_key, key) end

--Gets the image UI_COMP_ATTR key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return string # Key value
function GameAPI.get_icon_id_ui_comp_attr_kv(icon_id, key) end

--Gets the logical physical component type UI_COMP_ATTR key-value pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return string # Key value
function GameAPI.get_physics_entity_key_ui_comp_attr_kv(physics_entity_key, key) end

--Gets the unit number UI_COMP_ALIGN_TYPE key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_unit_key_ui_comp_align_type_kv(unit_key, key) end

--Gets the item number UI_COMP_ALIGN_TYPE key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_item_key_ui_comp_align_type_kv(item_key, key) end

--Gets the skill number UI_COMP_ALIGN_TYPE key-value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_ability_key_ui_comp_align_type_kv(ability_key, key) end

--Gets the magic effect number UI_COMP_ALIGN_TYPE key and value pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_modifier_key_ui_comp_align_type_kv(modifier_key, key) end

--Gets the special effect number UI_COMP_ALIGN_TYPE key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_projectile_key_ui_comp_align_type_kv(projectile_key, key) end

--Gets the destructible number UI_COMP_ALIGN_TYPE key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_destructible_key_ui_comp_align_type_kv(destructible_key, key) end

--Gets the technology number UI_COMP_ALIGN_TYPE key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_tech_key_ui_comp_align_type_kv(tech_key, key) end

--Gets the image UI_COMP_ALIGN_TYPE key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_icon_id_ui_comp_align_type_kv(icon_id, key) end

--Gets the UI_COMP_ALIGN_TYPE key-value pair of the logical physical component type
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_physics_entity_key_ui_comp_align_type_kv(physics_entity_key, key) end

--Gets the unit number UI_PREFAB key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_unit_key_ui_prefab_kv(unit_key, key) end

--Gets the item number UI_PREFAB key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_item_key_ui_prefab_kv(item_key, key) end

--Gets the skill number UI_PREFAB key-value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_ability_key_ui_prefab_kv(ability_key, key) end

--Gets the Magic effect special effect number UI_PREFAB key value pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_modifier_key_ui_prefab_kv(modifier_key, key) end

--Gets the effect number UI_PREFAB key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_projectile_key_ui_prefab_kv(projectile_key, key) end

--Gets the destructible number UI_PREFAB key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_destructible_key_ui_prefab_kv(destructible_key, key) end

--Gets the technology number UI_PREFAB key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_tech_key_ui_prefab_kv(tech_key, key) end

--Gets the image UI_PREFAB key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return string # Key value
function GameAPI.get_icon_id_ui_prefab_kv(icon_id, key) end

--Gets a logical physical component type UI_PREFAB key-value pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return string # Key value
function GameAPI.get_physics_entity_key_ui_prefab_kv(physics_entity_key, key) end

--Gets the unit number UI_PREFAB_INSTANCE key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.UIPrefabIns # Key value
function GameAPI.get_unit_key_ui_prefab_instance_kv(unit_key, key) end

--Gets the item number UI_PREFAB_INSTANCE key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.UIPrefabIns # Key value
function GameAPI.get_item_key_ui_prefab_instance_kv(item_key, key) end

--Gets the skill number UI_PREFAB_INSTANCE key-value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.UIPrefabIns # Key value
function GameAPI.get_ability_key_ui_prefab_instance_kv(ability_key, key) end

--Gets the Magic effect special effect number UI_PREFAB_INSTANCE key-value pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.UIPrefabIns # Key value
function GameAPI.get_modifier_key_ui_prefab_instance_kv(modifier_key, key) end

--Gets the special effect number UI_PREFAB_INSTANCE key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.UIPrefabIns # Key value
function GameAPI.get_projectile_key_ui_prefab_instance_kv(projectile_key, key) end

--Gets the destructible number UI_PREFAB_INSTANCE key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.UIPrefabIns # Key value
function GameAPI.get_destructible_key_ui_prefab_instance_kv(destructible_key, key) end

--Gets the technology number UI_PREFAB_INSTANCE key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.UIPrefabIns # Key value
function GameAPI.get_tech_key_ui_prefab_instance_kv(tech_key, key) end

--Gets the image UI_PREFAB_INSTANCE key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.UIPrefabIns # Key value
function GameAPI.get_icon_id_ui_prefab_instance_kv(icon_id, key) end

--Gets the logical physical component type UI_PREFAB_INSTANCE key-value pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.UIPrefabIns # Key value
function GameAPI.get_physics_entity_key_ui_prefab_instance_kv(physics_entity_key, key) end

--Gets the unit number UI_PREFAB_INS_UID key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_unit_key_ui_prefab_ins_uid_kv(unit_key, key) end

--Gets the item number UI_PREFAB_INS_UID key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_item_key_ui_prefab_ins_uid_kv(item_key, key) end

--Gets the skill number UI_PREFAB_INS_UID key-value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_ability_key_ui_prefab_ins_uid_kv(ability_key, key) end

--Gets the Magic effect special effect number UI_PREFAB_INS_UID key-value pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_modifier_key_ui_prefab_ins_uid_kv(modifier_key, key) end

--Gets the special effect number UI_PREFAB_INS_UID key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_projectile_key_ui_prefab_ins_uid_kv(projectile_key, key) end

--Gets the destructible number UI_PREFAB_INS_UID key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_destructible_key_ui_prefab_ins_uid_kv(destructible_key, key) end

--Gets the technology number UI_PREFAB_INS_UID key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_tech_key_ui_prefab_ins_uid_kv(tech_key, key) end

--Gets the image UI_PREFAB_INS_UID key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return string # Key value
function GameAPI.get_icon_id_ui_prefab_ins_uid_kv(icon_id, key) end

--Gets the logical physical component type UI_PREFAB_INS_UID key-value pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return string # Key value
function GameAPI.get_physics_entity_key_ui_prefab_ins_uid_kv(physics_entity_key, key) end

--Gets the unit number UI_DIRECTION key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_unit_key_ui_direction_kv(unit_key, key) end

--Gets the item number UI_DIRECTION key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_item_key_ui_direction_kv(item_key, key) end

--Gets the skill number UI_DIRECTION key-value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_ability_key_ui_direction_kv(ability_key, key) end

--Gets the Magic effect number UI_DIRECTION key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_modifier_key_ui_direction_kv(modifier_key, key) end

--Gets the special effect number UI_DIRECTION key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_projectile_key_ui_direction_kv(projectile_key, key) end

--Gets destructible number UI_DIRECTION key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_destructible_key_ui_direction_kv(destructible_key, key) end

--Gets the technology number UI_DIRECTION key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_tech_key_ui_direction_kv(tech_key, key) end

--Gets the image UI_DIRECTION key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_icon_id_ui_direction_kv(icon_id, key) end

--Gets a logical physical component type UI_DIRECTION key-value pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_physics_entity_key_ui_direction_kv(physics_entity_key, key) end

--Gets the unit number UI_MODEL_CAMERA_MOD key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_unit_key_ui_model_camera_mod_kv(unit_key, key) end

--Gets the item number UI_MODEL_CAMERA_MOD key value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_item_key_ui_model_camera_mod_kv(item_key, key) end

--Gets the skill number UI_MODEL_CAMERA_MOD key-value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_ability_key_ui_model_camera_mod_kv(ability_key, key) end

--Gets the Magic effect special effect number UI_MODEL_CAMERA_MOD key-value pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_modifier_key_ui_model_camera_mod_kv(modifier_key, key) end

--Gets the effect number UI_MODEL_CAMERA_MOD key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_projectile_key_ui_model_camera_mod_kv(projectile_key, key) end

--Gets the destructible number UI_MODEL_CAMERA_MOD key value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_destructible_key_ui_model_camera_mod_kv(destructible_key, key) end

--Gets the technology number UI_MODEL_CAMERA_MOD key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_tech_key_ui_model_camera_mod_kv(tech_key, key) end

--Gets the image UI_MODEL_CAMERA_MOD key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_icon_id_ui_model_camera_mod_kv(icon_id, key) end

--Gets the logical physical component type UI_MODEL_CAMERA_MOD key-value pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_physics_entity_key_ui_model_camera_mod_kv(physics_entity_key, key) end

--Gets the unit number UI_BTN_STATUS key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_unit_key_ui_btn_status_kv(unit_key, key) end

--Gets the item number UI_BTN_STATUS key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_item_key_ui_btn_status_kv(item_key, key) end

--Gets the skill number UI_BTN_STATUS key-value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_ability_key_ui_btn_status_kv(ability_key, key) end

--Gets the Magic effect special effect number UI_BTN_STATUS key-value pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_modifier_key_ui_btn_status_kv(modifier_key, key) end

--Gets the special effect number UI_BTN_STATUS key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_projectile_key_ui_btn_status_kv(projectile_key, key) end

--Gets the destructible number UI_BTN_STATUS key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_destructible_key_ui_btn_status_kv(destructible_key, key) end

--Gets the technology number UI_BTN_STATUS key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_tech_key_ui_btn_status_kv(tech_key, key) end

--Gets the image UI_BTN_STATUS key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_icon_id_ui_btn_status_kv(icon_id, key) end

--Gets the logical physical component type UI_BTN_STATUS key-value pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_physics_entity_key_ui_btn_status_kv(physics_entity_key, key) end

--Gets the unit number UI_SCROLLVIEW_TYPE key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_unit_key_ui_scrollview_type_kv(unit_key, key) end

--Gets item number UI_SCROLLVIEW_TYPE key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_item_key_ui_scrollview_type_kv(item_key, key) end

--Gets the skill number UI_SCROLLVIEW_TYPE key-value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_ability_key_ui_scrollview_type_kv(ability_key, key) end

--Gets Magic effect special effect number UI_SCROLLVIEW_TYPE key-value pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_modifier_key_ui_scrollview_type_kv(modifier_key, key) end

--Gets the special effect number UI_SCROLLVIEW_TYPE key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_projectile_key_ui_scrollview_type_kv(projectile_key, key) end

--Gets destructible number UI_SCROLLVIEW_TYPE key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_destructible_key_ui_scrollview_type_kv(destructible_key, key) end

--Gets the technology number UI_SCROLLVIEW_TYPE key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_tech_key_ui_scrollview_type_kv(tech_key, key) end

--Gets the image UI_SCROLLVIEW_TYPE key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_icon_id_ui_scrollview_type_kv(icon_id, key) end

--Gets the logical physical component type UI_SCROLLVIEW_TYPE key-value pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_physics_entity_key_ui_scrollview_type_kv(physics_entity_key, key) end

--Gets the unit number UI_ANIM key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.UIAnimKey # Key value
function GameAPI.get_unit_key_ui_anim_kv(unit_key, key) end

--Gets the item number UI_ANIM key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.UIAnimKey # Key value
function GameAPI.get_item_key_ui_anim_kv(item_key, key) end

--Gets the skill number UI_ANIM key-value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.UIAnimKey # Key value
function GameAPI.get_ability_key_ui_anim_kv(ability_key, key) end

--Gets the Magic effect special effect number UI_ANIM key-value pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.UIAnimKey # Key value
function GameAPI.get_modifier_key_ui_anim_kv(modifier_key, key) end

--Gets the effect number UI_ANIM key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.UIAnimKey # Key value
function GameAPI.get_projectile_key_ui_anim_kv(projectile_key, key) end

--Gets destructible number UI_ANIM key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.UIAnimKey # Key value
function GameAPI.get_destructible_key_ui_anim_kv(destructible_key, key) end

--Gets the technology number UI_ANIM key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.UIAnimKey # Key value
function GameAPI.get_tech_key_ui_anim_kv(tech_key, key) end

--Gets the image UI_ANIM key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.UIAnimKey # Key value
function GameAPI.get_icon_id_ui_anim_kv(icon_id, key) end

--Gets a logical physical component type UI_ANIM key-value pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.UIAnimKey # Key value
function GameAPI.get_physics_entity_key_ui_anim_kv(physics_entity_key, key) end

--Gets the unit number UI_ANIM_CURVE key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_unit_key_ui_anim_curve_kv(unit_key, key) end

--Gets the item number UI_ANIM_CURVE key pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_item_key_ui_anim_curve_kv(item_key, key) end

--Gets the skill number UI_ANIM_CURVE key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_ability_key_ui_anim_curve_kv(ability_key, key) end

--Gets the Magic effect special effect number UI_ANIM_CURVE key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_modifier_key_ui_anim_curve_kv(modifier_key, key) end

--Gets the special effect number UI_ANIM_CURVE key pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_projectile_key_ui_anim_curve_kv(projectile_key, key) end

--Gets the destructible number UI_ANIM_CURVE key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_destructible_key_ui_anim_curve_kv(destructible_key, key) end

--Gets the technology number UI_ANIM_CURVE key pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_tech_key_ui_anim_curve_kv(tech_key, key) end

--Gets the image UI_ANIM_CURVE key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_icon_id_ui_anim_curve_kv(icon_id, key) end

--Gets the logical physical component type UI_ANIM_CURVE key-value pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_physics_entity_key_ui_anim_curve_kv(physics_entity_key, key) end

--Gets the unit number AUDIO_CHANNEL key pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_unit_key_audio_channel_kv(unit_key, key) end

--Gets the item number AUDIO_CHANNEL key value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_item_key_audio_channel_kv(item_key, key) end

--Obtain the skill number AUDIO_CHANNEL key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_ability_key_audio_channel_kv(ability_key, key) end

--Gets the Magic Effects number AUDIO_CHANNEL key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_modifier_key_audio_channel_kv(modifier_key, key) end

--Gets the effect number AUDIO_CHANNEL key pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_projectile_key_audio_channel_kv(projectile_key, key) end

--Gets the destructible number AUDIO_CHANNEL key value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_destructible_key_audio_channel_kv(destructible_key, key) end

--Gets the technology number AUDIO_CHANNEL key pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_tech_key_audio_channel_kv(tech_key, key) end

--Gets the image AUDIO_CHANNEL key pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_icon_id_audio_channel_kv(icon_id, key) end

--Gets the logical physical component type AUDIO_CHANNEL key pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_physics_entity_key_audio_channel_kv(physics_entity_key, key) end

--Obtain the unit number UNIT_ENTITY key pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.Unit # Key value
function GameAPI.get_unit_key_unit_entity_kv(unit_key, key) end

--Gets the item number UNIT_ENTITY key value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.Unit # Key value
function GameAPI.get_item_key_unit_entity_kv(item_key, key) end

--Obtain the skill number UNIT_ENTITY key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.Unit # Key value
function GameAPI.get_ability_key_unit_entity_kv(ability_key, key) end

--Get a magic effect UNIT_ENTITY key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.Unit # Key value
function GameAPI.get_modifier_key_unit_entity_kv(modifier_key, key) end

--Gets the special effect number UNIT_ENTITY key pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.Unit # Key value
function GameAPI.get_projectile_key_unit_entity_kv(projectile_key, key) end

--Gets the destructible number UNIT_ENTITY key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.Unit # Key value
function GameAPI.get_destructible_key_unit_entity_kv(destructible_key, key) end

--Obtain the UNIT_ENTITY key pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.Unit # Key value
function GameAPI.get_tech_key_unit_entity_kv(tech_key, key) end

--Get an image UNIT_ENTITY key pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.Unit # Key value
function GameAPI.get_icon_id_unit_entity_kv(icon_id, key) end

--Gets the UNIT_ENTITY key pair of the logical physical component type
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.Unit # Key value
function GameAPI.get_physics_entity_key_unit_entity_kv(physics_entity_key, key) end

--Gets the UNIT_GROUP key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.UnitGroup # Key value
function GameAPI.get_unit_key_unit_group_kv(unit_key, key) end

--Gets the item number UNIT_GROUP key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.UnitGroup # Key value
function GameAPI.get_item_key_unit_group_kv(item_key, key) end

--Gets the skill number UNIT_GROUP key-value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.UnitGroup # Key value
function GameAPI.get_ability_key_unit_group_kv(ability_key, key) end

--Get the Magic effect UNIT_GROUP key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.UnitGroup # Key value
function GameAPI.get_modifier_key_unit_group_kv(modifier_key, key) end

--Gets the special effect number UNIT_GROUP key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.UnitGroup # Key value
function GameAPI.get_projectile_key_unit_group_kv(projectile_key, key) end

--Gets the destructible number UNIT_GROUP key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.UnitGroup # Key value
function GameAPI.get_destructible_key_unit_group_kv(destructible_key, key) end

--Gets the technology number UNIT_GROUP key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.UnitGroup # Key value
function GameAPI.get_tech_key_unit_group_kv(tech_key, key) end

--Gets the image UNIT_GROUP key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.UnitGroup # Key value
function GameAPI.get_icon_id_unit_group_kv(icon_id, key) end

--Gets the UNIT_GROUP key pair of the logical physical component type
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.UnitGroup # Key value
function GameAPI.get_physics_entity_key_unit_group_kv(physics_entity_key, key) end

--Gets the UNIT_NAME key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.UnitKey # Key value
function GameAPI.get_unit_key_unit_name_kv(unit_key, key) end

--Gets the item number UNIT_NAME key value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.UnitKey # Key value
function GameAPI.get_item_key_unit_name_kv(item_key, key) end

--Gets the skill number UNIT_NAME key value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.UnitKey # Key value
function GameAPI.get_ability_key_unit_name_kv(ability_key, key) end

--Get the Magic effect UNIT_NAME key value pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.UnitKey # Key value
function GameAPI.get_modifier_key_unit_name_kv(modifier_key, key) end

--Gets the special effect number UNIT_NAME key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.UnitKey # Key value
function GameAPI.get_projectile_key_unit_name_kv(projectile_key, key) end

--Gets the destructible number UNIT_NAME key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.UnitKey # Key value
function GameAPI.get_destructible_key_unit_name_kv(destructible_key, key) end

--Get technology number UNIT_NAME key value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.UnitKey # Key value
function GameAPI.get_tech_key_unit_name_kv(tech_key, key) end

--Get image UNIT_NAME key value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.UnitKey # Key value
function GameAPI.get_icon_id_unit_name_kv(icon_id, key) end

--Gets the logical physical component type UNIT_NAME key value pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.UnitKey # Key value
function GameAPI.get_physics_entity_key_unit_name_kv(physics_entity_key, key) end

--Obtain the UNIT_NAME_POOL key and value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.UnitKeyPool # Key value
function GameAPI.get_unit_key_unit_name_pool_kv(unit_key, key) end

--Gets the item number UNIT_NAME_POOL key value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.UnitKeyPool # Key value
function GameAPI.get_item_key_unit_name_pool_kv(item_key, key) end

--Obtain the skill number UNIT_NAME_POOL key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.UnitKeyPool # Key value
function GameAPI.get_ability_key_unit_name_pool_kv(ability_key, key) end

--Get Magic effect UNIT_NAME_POOL key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.UnitKeyPool # Key value
function GameAPI.get_modifier_key_unit_name_pool_kv(modifier_key, key) end

--Obtain the UNIT_NAME_POOL key and value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.UnitKeyPool # Key value
function GameAPI.get_projectile_key_unit_name_pool_kv(projectile_key, key) end

--Gets the destructible number UNIT_NAME_POOL key value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.UnitKeyPool # Key value
function GameAPI.get_destructible_key_unit_name_pool_kv(destructible_key, key) end

--Obtain the UNIT_NAME_POOL key and value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.UnitKeyPool # Key value
function GameAPI.get_tech_key_unit_name_pool_kv(tech_key, key) end

--Get the image UNIT_NAME_POOL key and value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.UnitKeyPool # Key value
function GameAPI.get_icon_id_unit_name_pool_kv(icon_id, key) end

--Obtain the UNIT_NAME_POOL key and value pair of the logical physical component
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.UnitKeyPool # Key value
function GameAPI.get_physics_entity_key_unit_name_pool_kv(physics_entity_key, key) end

--Get the UNIT_WRITE_ATTRIBUTE key pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_unit_key_unit_write_attribute_kv(unit_key, key) end

--Gets the item number UNIT_WRITE_ATTRIBUTE key and value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_item_key_unit_write_attribute_kv(item_key, key) end

--Obtain the UNIT_WRITE_ATTRIBUTE key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_ability_key_unit_write_attribute_kv(ability_key, key) end

--Gets the Magic effect special effect number UNIT_WRITE_ATTRIBUTE key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_modifier_key_unit_write_attribute_kv(modifier_key, key) end

--Get the UNIT_WRITE_ATTRIBUTE key pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_projectile_key_unit_write_attribute_kv(projectile_key, key) end

--Gets the destructible number UNIT_WRITE_ATTRIBUTE key and value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_destructible_key_unit_write_attribute_kv(destructible_key, key) end

--Obtain the UNIT_WRITE_ATTRIBUTE key pair with the technology number
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_tech_key_unit_write_attribute_kv(tech_key, key) end

--Get an image UNIT_WRITE_ATTRIBUTE key pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return string # Key value
function GameAPI.get_icon_id_unit_write_attribute_kv(icon_id, key) end

--Obtain the UNIT_WRITE_ATTRIBUTE key pair of the logical physical component type
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return string # Key value
function GameAPI.get_physics_entity_key_unit_write_attribute_kv(physics_entity_key, key) end

--Gets the unit number ATTR_ELEMENT key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_unit_key_attr_element_kv(unit_key, key) end

--Gets the item number ATTR_ELEMENT key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_item_key_attr_element_kv(item_key, key) end

--Gets the skill number ATTR_ELEMENT key-value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_ability_key_attr_element_kv(ability_key, key) end

--Get the magic effect number ATTR_ELEMENT key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_modifier_key_attr_element_kv(modifier_key, key) end

--Gets the special effect number ATTR_ELEMENT key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_projectile_key_attr_element_kv(projectile_key, key) end

--Gets the destructible number ATTR_ELEMENT key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_destructible_key_attr_element_kv(destructible_key, key) end

--Gets the technology number ATTR_ELEMENT key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_tech_key_attr_element_kv(tech_key, key) end

--Gets the ATTR_ELEMENT key-value pair for the image
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return string # Key value
function GameAPI.get_icon_id_attr_element_kv(icon_id, key) end

--Gets the ATTR_ELEMENT key-value pair of the logical physical component type
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return string # Key value
function GameAPI.get_physics_entity_key_attr_element_kv(physics_entity_key, key) end

--Gets the unit number ATTR_ELEMENT_READ key pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_unit_key_attr_element_read_kv(unit_key, key) end

--Gets item number ATTR_ELEMENT_READ key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_item_key_attr_element_read_kv(item_key, key) end

--Obtain skill number ATTR_ELEMENT_READ key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_ability_key_attr_element_read_kv(ability_key, key) end

--Get the Magic effect special effect number ATTR_ELEMENT_READ key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_modifier_key_attr_element_read_kv(modifier_key, key) end

--Gets the special effect number ATTR_ELEMENT_READ key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_projectile_key_attr_element_read_kv(projectile_key, key) end

--Gets the destructible number ATTR_ELEMENT_READ key value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_destructible_key_attr_element_read_kv(destructible_key, key) end

--Get the technology number ATTR_ELEMENT_READ key pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_tech_key_attr_element_read_kv(tech_key, key) end

--Gets the image ATTR_ELEMENT_READ key pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return string # Key value
function GameAPI.get_icon_id_attr_element_read_kv(icon_id, key) end

--Gets the ATTR_ELEMENT_READ key and value pair of the logical physical component type
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return string # Key value
function GameAPI.get_physics_entity_key_attr_element_read_kv(physics_entity_key, key) end

--Obtain the unit number MOVER_ENTITY key pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.Mover # Key value
function GameAPI.get_unit_key_mover_entity_kv(unit_key, key) end

--Gets the item number MOVER_ENTITY key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.Mover # Key value
function GameAPI.get_item_key_mover_entity_kv(item_key, key) end

--Obtain the skill number MOVER_ENTITY key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.Mover # Key value
function GameAPI.get_ability_key_mover_entity_kv(ability_key, key) end

--Get the magic effect number MOVER_ENTITY key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.Mover # Key value
function GameAPI.get_modifier_key_mover_entity_kv(modifier_key, key) end

--Gets the special effect number MOVER_ENTITY key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.Mover # Key value
function GameAPI.get_projectile_key_mover_entity_kv(projectile_key, key) end

--Gets the destructible number MOVER_ENTITY key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.Mover # Key value
function GameAPI.get_destructible_key_mover_entity_kv(destructible_key, key) end

--Obtain the technology ID MOVER_ENTITY key pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.Mover # Key value
function GameAPI.get_tech_key_mover_entity_kv(tech_key, key) end

--Get an image MOVER_ENTITY key pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.Mover # Key value
function GameAPI.get_icon_id_mover_entity_kv(icon_id, key) end

--Get the key pair of the logical physical component type MOVER_ENTITY
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.Mover # Key value
function GameAPI.get_physics_entity_key_mover_entity_kv(physics_entity_key, key) end

--Gets the unit number IMAGE_QUALITY key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_unit_key_image_quality_kv(unit_key, key) end

--Gets the item number IMAGE_QUALITY key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_item_key_image_quality_kv(item_key, key) end

--Gets the skill number IMAGE_QUALITY key-value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_ability_key_image_quality_kv(ability_key, key) end

--Gets the Magic effect number IMAGE_QUALITY key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_modifier_key_image_quality_kv(modifier_key, key) end

--Gets the special effect number IMAGE_QUALITY key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_projectile_key_image_quality_kv(projectile_key, key) end

--Gets the destructible number IMAGE_QUALITY key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_destructible_key_image_quality_kv(destructible_key, key) end

--Gets the technology number IMAGE_QUALITY key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_tech_key_image_quality_kv(tech_key, key) end

--Gets the image IMAGE_QUALITY key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return string # Key value
function GameAPI.get_icon_id_image_quality_kv(icon_id, key) end

--Gets the IMAGE_QUALITY key-value pair of the logical physical component type
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return string # Key value
function GameAPI.get_physics_entity_key_image_quality_kv(physics_entity_key, key) end

--Gets the unit number WINDOW_TYPE_SETTING key value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_unit_key_window_type_setting_kv(unit_key, key) end

--Gets the item number WINDOW_TYPE_SETTING key value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_item_key_window_type_setting_kv(item_key, key) end

--Gets the skill number WINDOW_TYPE_SETTING key value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_ability_key_window_type_setting_kv(ability_key, key) end

--Gets the Magic effects number WINDOW_TYPE_SETTING key value pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_modifier_key_window_type_setting_kv(modifier_key, key) end

--Gets the special effect number WINDOW_TYPE_SETTING key value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_projectile_key_window_type_setting_kv(projectile_key, key) end

--Gets the destructible number WINDOW_TYPE_SETTING key value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_destructible_key_window_type_setting_kv(destructible_key, key) end

--Gets the technology number WINDOW_TYPE_SETTING key value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_tech_key_window_type_setting_kv(tech_key, key) end

--Gets the picture WINDOW_TYPE_SETTING key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return string # Key value
function GameAPI.get_icon_id_window_type_setting_kv(icon_id, key) end

--Gets the logical physical component type WINDOW_TYPE_SETTING key value pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return string # Key value
function GameAPI.get_physics_entity_key_window_type_setting_kv(physics_entity_key, key) end

--Gets the ITEM_ENTITY key-value pair with the unit number
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.Item # Key value
function GameAPI.get_unit_key_item_entity_kv(unit_key, key) end

--Gets the item number ITEM_ENTITY key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.Item # Key value
function GameAPI.get_item_key_item_entity_kv(item_key, key) end

--Gets the skill number ITEM_ENTITY key-value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.Item # Key value
function GameAPI.get_ability_key_item_entity_kv(ability_key, key) end

--Gets a magic effect number ITEM_ENTITY key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.Item # Key value
function GameAPI.get_modifier_key_item_entity_kv(modifier_key, key) end

--Gets the special effect number ITEM_ENTITY key pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.Item # Key value
function GameAPI.get_projectile_key_item_entity_kv(projectile_key, key) end

--Gets the destructible number ITEM_ENTITY key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.Item # Key value
function GameAPI.get_destructible_key_item_entity_kv(destructible_key, key) end

--Gets the technology number ITEM_ENTITY key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.Item # Key value
function GameAPI.get_tech_key_item_entity_kv(tech_key, key) end

--Gets the ITEM_ENTITY key-value pair for the image
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.Item # Key value
function GameAPI.get_icon_id_item_entity_kv(icon_id, key) end

--Gets a key-value pair of the logical physical component type ITEM_ENTITY
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.Item # Key value
function GameAPI.get_physics_entity_key_item_entity_kv(physics_entity_key, key) end

--Gets a key-value pair with the unit number ITEM_GROUP
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.ItemGroup # Key value
function GameAPI.get_unit_key_item_group_kv(unit_key, key) end

--Gets the item number ITEM_GROUP key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.ItemGroup # Key value
function GameAPI.get_item_key_item_group_kv(item_key, key) end

--Gets the skill number ITEM_GROUP key-value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.ItemGroup # Key value
function GameAPI.get_ability_key_item_group_kv(ability_key, key) end

--Gets the magic effect number ITEM_GROUP key-value pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.ItemGroup # Key value
function GameAPI.get_modifier_key_item_group_kv(modifier_key, key) end

--Gets the key value pair of the special effect number ITEM_GROUP
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.ItemGroup # Key value
function GameAPI.get_projectile_key_item_group_kv(projectile_key, key) end

--Gets the destructible number ITEM_GROUP key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.ItemGroup # Key value
function GameAPI.get_destructible_key_item_group_kv(destructible_key, key) end

--Gets the technology number ITEM_GROUP key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.ItemGroup # Key value
function GameAPI.get_tech_key_item_group_kv(tech_key, key) end

--Gets the ITEM_GROUP key-value pair for the picture
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.ItemGroup # Key value
function GameAPI.get_icon_id_item_group_kv(icon_id, key) end

--Gets a key-value pair of the logical physical component type ITEM_GROUP
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.ItemGroup # Key value
function GameAPI.get_physics_entity_key_item_group_kv(physics_entity_key, key) end

--Gets the ITEM_NAME key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.ItemKey # Key value
function GameAPI.get_unit_key_item_name_kv(unit_key, key) end

--Gets the item number ITEM_NAME key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.ItemKey # Key value
function GameAPI.get_item_key_item_name_kv(item_key, key) end

--Gets the skill number ITEM_NAME key-value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.ItemKey # Key value
function GameAPI.get_ability_key_item_name_kv(ability_key, key) end

--Gets the magic effect number ITEM_NAME key-value pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.ItemKey # Key value
function GameAPI.get_modifier_key_item_name_kv(modifier_key, key) end

--Gets the special effect number ITEM_NAME key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.ItemKey # Key value
function GameAPI.get_projectile_key_item_name_kv(projectile_key, key) end

--Gets the destructible number ITEM_NAME key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.ItemKey # Key value
function GameAPI.get_destructible_key_item_name_kv(destructible_key, key) end

--Gets the technology number ITEM_NAME key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.ItemKey # Key value
function GameAPI.get_tech_key_item_name_kv(tech_key, key) end

--Gets the ITEM_NAME key-value pair for the picture
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.ItemKey # Key value
function GameAPI.get_icon_id_item_name_kv(icon_id, key) end

--Gets a key-value pair of the logical physical component type ITEM_NAME
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.ItemKey # Key value
function GameAPI.get_physics_entity_key_item_name_kv(physics_entity_key, key) end

--Gets the ABILITY key pair with the unit number
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.Ability # Key value
function GameAPI.get_unit_key_ability_kv(unit_key, key) end

--Gets the ABILITY key pair for item number
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.Ability # Key value
function GameAPI.get_item_key_ability_kv(item_key, key) end

--Gets the ABILITY key pair with the skill number
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.Ability # Key value
function GameAPI.get_ability_key_ability_kv(ability_key, key) end

--Get the ABILITY key pair for magic effects
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.Ability # Key value
function GameAPI.get_modifier_key_ability_kv(modifier_key, key) end

--Gets the ABILITY key pair for the effect number
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.Ability # Key value
function GameAPI.get_projectile_key_ability_kv(projectile_key, key) end

--Gets the destructible numbering ABILITY key value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.Ability # Key value
function GameAPI.get_destructible_key_ability_kv(destructible_key, key) end

--Get the ABILITY key pair with the technology number
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.Ability # Key value
function GameAPI.get_tech_key_ability_kv(tech_key, key) end

--Get image ABILITY key pairs
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.Ability # Key value
function GameAPI.get_icon_id_ability_kv(icon_id, key) end

--Gets the ABILITY key-value pair of the logical physical component type
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.Ability # Key value
function GameAPI.get_physics_entity_key_ability_kv(physics_entity_key, key) end

--Gets the unit number ABILITY_TYPE key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_unit_key_ability_type_kv(unit_key, key) end

--Gets the item number ABILITY_TYPE key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_item_key_ability_type_kv(item_key, key) end

--Obtain the skill number ABILITY_TYPE key-value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_ability_key_ability_type_kv(ability_key, key) end

--Gets Magic effect number ABILITY_TYPE key-value pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_modifier_key_ability_type_kv(modifier_key, key) end

--Gets the special effect number ABILITY_TYPE key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_projectile_key_ability_type_kv(projectile_key, key) end

--Gets the destructible number ABILITY_TYPE key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_destructible_key_ability_type_kv(destructible_key, key) end

--Gets the technology number ABILITY_TYPE key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_tech_key_ability_type_kv(tech_key, key) end

--Gets the image ABILITY_TYPE key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_icon_id_ability_type_kv(icon_id, key) end

--Obtain the logical physical component type ABILITY_TYPE key-value pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_physics_entity_key_ability_type_kv(physics_entity_key, key) end

--Obtain the unit number ABILITY_CAST_TYPE key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_unit_key_ability_cast_type_kv(unit_key, key) end

--Gets the item number ABILITY_CAST_TYPE key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_item_key_ability_cast_type_kv(item_key, key) end

--Obtain the skill number ABILITY_CAST_TYPE key-value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_ability_key_ability_cast_type_kv(ability_key, key) end

--Gets the Magic effect number ABILITY_CAST_TYPE key-value pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_modifier_key_ability_cast_type_kv(modifier_key, key) end

--Get the special effect number ABILITY_CAST_TYPE key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_projectile_key_ability_cast_type_kv(projectile_key, key) end

--Gets the destructible number ABILITY_CAST_TYPE key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_destructible_key_ability_cast_type_kv(destructible_key, key) end

--Gets the technology number ABILITY_CAST_TYPE key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_tech_key_ability_cast_type_kv(tech_key, key) end

--Obtain the image ABILITY_CAST_TYPE key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_icon_id_ability_cast_type_kv(icon_id, key) end

--Obtain the ABILITY_CAST_TYPE key value pair of the logical physical component type
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_physics_entity_key_ability_cast_type_kv(physics_entity_key, key) end

--Gets the unit number ABILITY_NAME key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.AbilityKey # Key value
function GameAPI.get_unit_key_ability_name_kv(unit_key, key) end

--Gets the item number ABILITY_NAME key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.AbilityKey # Key value
function GameAPI.get_item_key_ability_name_kv(item_key, key) end

--Obtain the skill number ABILITY_NAME key-value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.AbilityKey # Key value
function GameAPI.get_ability_key_ability_name_kv(ability_key, key) end

--Gets the Magic effect number ABILITY_NAME key-value pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.AbilityKey # Key value
function GameAPI.get_modifier_key_ability_name_kv(modifier_key, key) end

--Gets the special effect number ABILITY_NAME key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.AbilityKey # Key value
function GameAPI.get_projectile_key_ability_name_kv(projectile_key, key) end

--Gets the destructible number ABILITY_NAME key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.AbilityKey # Key value
function GameAPI.get_destructible_key_ability_name_kv(destructible_key, key) end

--Gets the technology number ABILITY_NAME key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.AbilityKey # Key value
function GameAPI.get_tech_key_ability_name_kv(tech_key, key) end

--Gets the image ABILITY_NAME key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.AbilityKey # Key value
function GameAPI.get_icon_id_ability_name_kv(icon_id, key) end

--Obtain the ABILITY_NAME key value pair of the logical physical component type
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.AbilityKey # Key value
function GameAPI.get_physics_entity_key_ability_name_kv(physics_entity_key, key) end

--Gets the unit number SKILL_POINTER_TYPE key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_unit_key_skill_pointer_type_kv(unit_key, key) end

--Gets item number SKILL_POINTER_TYPE key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_item_key_skill_pointer_type_kv(item_key, key) end

--Gets the skill number SKILL_POINTER_TYPE key-value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_ability_key_skill_pointer_type_kv(ability_key, key) end

--Gets the Magic effect number SKILL_POINTER_TYPE key-value pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_modifier_key_skill_pointer_type_kv(modifier_key, key) end

--Gets the special effect number SKILL_POINTER_TYPE key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_projectile_key_skill_pointer_type_kv(projectile_key, key) end

--Gets the destructible number SKILL_POINTER_TYPE key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_destructible_key_skill_pointer_type_kv(destructible_key, key) end

--Gets the technology number SKILL_POINTER_TYPE key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_tech_key_skill_pointer_type_kv(tech_key, key) end

--Get an image SKILL_POINTER_TYPE key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_icon_id_skill_pointer_type_kv(icon_id, key) end

--Gets the logical physical component type SKILL_POINTER_TYPE key-value pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_physics_entity_key_skill_pointer_type_kv(physics_entity_key, key) end

--Get the unit number MODIFIER_ENTITY key and value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.ModifierEntity # Key value
function GameAPI.get_unit_key_modifier_entity_kv(unit_key, key) end

--Gets item number MODIFIER_ENTITY key and value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.ModifierEntity # Key value
function GameAPI.get_item_key_modifier_entity_kv(item_key, key) end

--Obtain the skill number MODIFIER_ENTITY key and value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.ModifierEntity # Key value
function GameAPI.get_ability_key_modifier_entity_kv(ability_key, key) end

--Get Magic effect number MODIFIER_ENTITY key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.ModifierEntity # Key value
function GameAPI.get_modifier_key_modifier_entity_kv(modifier_key, key) end

--Get the special effect number MODIFIER_ENTITY key pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.ModifierEntity # Key value
function GameAPI.get_projectile_key_modifier_entity_kv(projectile_key, key) end

--Gets an array of trigger GOODS_KEY group variables
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_actor_variable_all_goods_key(actor, key) end

--Gets the global trigger MAP non-array variable
---@param key string # Variable name
---@return py.Map # value
function GameAPI.get_trigger_variable_map(key) end

--Gets trigger MAP non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.Map # value
function GameAPI.get_trigger_actor_variable_map(actor, key) end

--Gets the global trigger MAP array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@return py.Map # value
function GameAPI.get_trigger_list_variable_map(key, index) end

--Gets trigger MAP array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@return py.Map # value
function GameAPI.get_trigger_list_actor_variable_map(actor, key, index) end

--Gets the global trigger MAP array variable
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_variable_all_map(key) end

--Gets an array of trigger MAP group variables
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_actor_variable_all_map(actor, key) end

--Gets the global trigger STORE_ITEM_TYPE non-array variable
---@param key string # Variable name
---@return py.StoreItemType # value
function GameAPI.get_trigger_variable_store_item_type(key) end

--Gets the trigger STORE_ITEM_TYPE non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.StoreItemType # value
function GameAPI.get_trigger_actor_variable_store_item_type(actor, key) end

--Gets the global trigger STORE_ITEM_TYPE array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@return py.StoreItemType # value
function GameAPI.get_trigger_list_variable_store_item_type(key, index) end

--Gets the trigger STORE_ITEM_TYPE array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@return py.StoreItemType # value
function GameAPI.get_trigger_list_actor_variable_store_item_type(actor, key, index) end

--Gets the global trigger STORE_ITEM_TYPE array variable
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_variable_all_store_item_type(key) end

--Gets an array of trigger STORE_ITEM_TYPE group variables
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_actor_variable_all_store_item_type(actor, key) end

--Gets the global trigger SITE_STATE non-array variable
---@param key string # Variable name
---@return py.SITE_STATE # value
function GameAPI.get_trigger_variable_site_state(key) end

--Gets trigger SITE_STATE non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.SITE_STATE # value
function GameAPI.get_trigger_actor_variable_site_state(actor, key) end

--Gets the global trigger SITE_STATE array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@return py.SITE_STATE # value
function GameAPI.get_trigger_list_variable_site_state(key, index) end

--Gets the trigger SITE_STATE array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@return py.SITE_STATE # value
function GameAPI.get_trigger_list_actor_variable_site_state(actor, key, index) end

--Gets the global trigger SITE_STATE array variable
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_variable_all_site_state(key) end

--Gets an array of trigger SITE_STATE group variables
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_actor_variable_all_site_state(actor, key) end

--Gets the global trigger COIN_CURRENCY non-array variable
---@param key string # Variable name
---@return py.COIN_CURRENCY # value
function GameAPI.get_trigger_variable_coin_currency(key) end

--Gets the trigger COIN_CURRENCY non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.COIN_CURRENCY # value
function GameAPI.get_trigger_actor_variable_coin_currency(actor, key) end

--Gets the global trigger COIN_CURRENCY array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@return py.COIN_CURRENCY # value
function GameAPI.get_trigger_list_variable_coin_currency(key, index) end

--Gets the trigger COIN_CURRENCY array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@return py.COIN_CURRENCY # value
function GameAPI.get_trigger_list_actor_variable_coin_currency(actor, key, index) end

--Gets the global trigger COIN_CURRENCY array variable
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_variable_all_coin_currency(key) end

--Gets an array of trigger COIN_CURRENCY group variables
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_actor_variable_all_coin_currency(actor, key) end

--Sets the global trigger UI_GRIDVIEW_TYPE array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@param value? integer # value
function GameAPI.set_trigger_list_variable_ui_gridview_type(key, index, value) end

--Sets the global trigger UI_GRIDVIEW_TYPE array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@param value? integer # value
function GameAPI.set_trigger_list_actor_variable_ui_gridview_type(actor, key, index, value) end

--Sets the global trigger UI_GRIDVIEW_TYPE non-array variable
---@param key string # Variable name
---@param value? integer # value
function GameAPI.set_trigger_variable_ui_gridview_type(key, value) end

--Sets the global trigger UI_GRIDVIEW_TYPE non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param value? integer # value
function GameAPI.set_trigger_actor_variable_ui_gridview_type(actor, key, value) end

--Sets the global trigger UI_GRIDVIEW_BAR_TYPE array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@param value? integer # value
function GameAPI.set_trigger_list_variable_ui_gridview_bar_type(key, index, value) end

--Sets the global trigger UI_GRIDVIEW_BAR_TYPE array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@param value? integer # value
function GameAPI.set_trigger_list_actor_variable_ui_gridview_bar_type(actor, key, index, value) end

--Sets the global trigger UI_GRIDVIEW_BAR_TYPE non-array variable
---@param key string # Variable name
---@param value? integer # value
function GameAPI.set_trigger_variable_ui_gridview_bar_type(key, value) end

--Sets the global trigger UI_GRIDVIEW_BAR_TYPE non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param value? integer # value
function GameAPI.set_trigger_actor_variable_ui_gridview_bar_type(actor, key, value) end

--Set the global trigger UI_EFFECT_CAMERA_MODE array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@param value? integer # value
function GameAPI.set_trigger_list_variable_ui_effect_camera_mode(key, index, value) end

--Set the global trigger UI_EFFECT_CAMERA_MODE array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@param value? integer # value
function GameAPI.set_trigger_list_actor_variable_ui_effect_camera_mode(actor, key, index, value) end

--Set the global trigger UI_EFFECT_CAMERA_MODE non-array variable
---@param key string # Variable name
---@param value? integer # value
function GameAPI.set_trigger_variable_ui_effect_camera_mode(key, value) end

--Set the global trigger UI_EFFECT_CAMERA_MODE non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param value? integer # value
function GameAPI.set_trigger_actor_variable_ui_effect_camera_mode(actor, key, value) end

--Sets the global trigger UI_EQUIP_SLOT_USE_TYPE array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@param value? integer # value
function GameAPI.set_trigger_list_variable_ui_equip_slot_use_type(key, index, value) end

--Sets the global trigger UI_EQUIP_SLOT_USE_TYPE array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@param value? integer # value
function GameAPI.set_trigger_list_actor_variable_ui_equip_slot_use_type(actor, key, index, value) end

--Sets the global trigger UI_EQUIP_SLOT_USE_TYPE non-array variable
---@param key string # Variable name
---@param value? integer # value
function GameAPI.set_trigger_variable_ui_equip_slot_use_type(key, value) end

--Set the global trigger UI_EQUIP_SLOT_USE_TYPE non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param value? integer # value
function GameAPI.set_trigger_actor_variable_ui_equip_slot_use_type(actor, key, value) end

--Sets the global trigger UI_EQUIP_SLOT_DRAG_TYPE array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@param value? integer # value
function GameAPI.set_trigger_list_variable_ui_equip_slot_drag_type(key, index, value) end

--Sets the global trigger UI_EQUIP_SLOT_DRAG_TYPE array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@param value? integer # value
function GameAPI.set_trigger_list_actor_variable_ui_equip_slot_drag_type(actor, key, index, value) end

--Sets the global trigger UI_EQUIP_SLOT_DRAG_TYPE non-array variable
---@param key string # Variable name
---@param value? integer # value
function GameAPI.set_trigger_variable_ui_equip_slot_drag_type(key, value) end

--Set the global trigger UI_EQUIP_SLOT_DRAG_TYPE non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param value? integer # value
function GameAPI.set_trigger_actor_variable_ui_equip_slot_drag_type(actor, key, value) end

--Sets the global trigger UI_LAYOUT_CLIPPING_TYPE array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@param value? integer # value
function GameAPI.set_trigger_list_variable_ui_layout_clipping_type(key, index, value) end

--Sets the global trigger UI_LAYOUT_CLIPPING_TYPE array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@param value? integer # value
function GameAPI.set_trigger_list_actor_variable_ui_layout_clipping_type(actor, key, index, value) end

--Sets the global trigger UI_LAYOUT_CLIPPING_TYPE non-array variable
---@param key string # Variable name
---@param value? integer # value
function GameAPI.set_trigger_variable_ui_layout_clipping_type(key, value) end

--Sets the global trigger UI_LAYOUT_CLIPPING_TYPE non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param value? integer # value
function GameAPI.set_trigger_actor_variable_ui_layout_clipping_type(actor, key, value) end

--Set the global trigger UI_TEXT_OVER_LENGTH_HANDLING_TYPE array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@param value? integer # value
function GameAPI.set_trigger_list_variable_ui_text_over_length_handling_type(key, index, value) end

--Set the global trigger UI_TEXT_OVER_LENGTH_HANDLING_TYPE array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@param value? integer # value
function GameAPI.set_trigger_list_actor_variable_ui_text_over_length_handling_type(actor, key, index, value) end

--Sets the global trigger UI_TEXT_OVER_LENGTH_HANDLING_TYPE non-array variable
---@param key string # Variable name
---@param value? integer # value
function GameAPI.set_trigger_variable_ui_text_over_length_handling_type(key, value) end

--Set the global trigger UI_TEXT_OVER_LENGTH_HANDLING_TYPE non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param value? integer # value
function GameAPI.set_trigger_actor_variable_ui_text_over_length_handling_type(actor, key, value) end

--Sets the global trigger UI_POS_ADAPT_MODE array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@param value? integer # value
function GameAPI.set_trigger_list_variable_ui_pos_adapt_mode(key, index, value) end

--Sets the global trigger UI_POS_ADAPT_MODE array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@param value? integer # value
function GameAPI.set_trigger_list_actor_variable_ui_pos_adapt_mode(actor, key, index, value) end

--Sets the global trigger UI_POS_ADAPT_MODE non-array variable
---@param key string # Variable name
---@param value? integer # value
function GameAPI.set_trigger_variable_ui_pos_adapt_mode(key, value) end

--Sets the global trigger UI_POS_ADAPT_MODE non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param value? integer # value
function GameAPI.set_trigger_actor_variable_ui_pos_adapt_mode(actor, key, value) end

--Sets the global trigger UI_CHAT_SEND_CHANNEL array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@param value? integer # value
function GameAPI.set_trigger_list_variable_ui_chat_send_channel(key, index, value) end

--Sets the global trigger UI_CHAT_SEND_CHANNEL array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@param value? integer # value
function GameAPI.set_trigger_list_actor_variable_ui_chat_send_channel(actor, key, index, value) end

--Sets the global trigger UI_CHAT_SEND_CHANNEL non-array variable
---@param key string # Variable name
---@param value? integer # value
function GameAPI.set_trigger_variable_ui_chat_send_channel(key, value) end

--Sets the global trigger UI_CHAT_SEND_CHANNEL non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param value? integer # value
function GameAPI.set_trigger_actor_variable_ui_chat_send_channel(actor, key, value) end

--Sets the global trigger UI_CHAT_RECV_CHANNEL array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@param value? integer # value
function GameAPI.set_trigger_list_variable_ui_chat_recv_channel(key, index, value) end

--Sets the global trigger UI_CHAT_RECV_CHANNEL array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@param value? integer # value
function GameAPI.set_trigger_list_actor_variable_ui_chat_recv_channel(actor, key, index, value) end

--Sets the global trigger UI_CHAT_RECV_CHANNEL non-array variable
---@param key string # Variable name
---@param value? integer # value
function GameAPI.set_trigger_variable_ui_chat_recv_channel(key, value) end

--Sets the global trigger UI_CHAT_RECV_CHANNEL non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param value? integer # value
function GameAPI.set_trigger_actor_variable_ui_chat_recv_channel(actor, key, value) end

--Sets the global trigger UI_ANIM_PLAY_MODE array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@param value? integer # value
function GameAPI.set_trigger_list_variable_ui_anim_play_mode(key, index, value) end

--Sets the global trigger UI_ANIM_PLAY_MODE array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@param value? integer # value
function GameAPI.set_trigger_list_actor_variable_ui_anim_play_mode(actor, key, index, value) end

--Sets the global trigger UI_ANIM_PLAY_MODE non-array variable
---@param key string # Variable name
---@param value? integer # value
function GameAPI.set_trigger_variable_ui_anim_play_mode(key, value) end

--Sets the global trigger UI_ANIM_PLAY_MODE non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param value? integer # value
function GameAPI.set_trigger_actor_variable_ui_anim_play_mode(actor, key, value) end

--Sets the global trigger UI_TEXT_FONT_NAME array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@param value? string # value
function GameAPI.set_trigger_list_variable_ui_text_font_name(key, index, value) end

--Sets the global trigger UI_TEXT_FONT_NAME array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@param value? string # value
function GameAPI.set_trigger_list_actor_variable_ui_text_font_name(actor, key, index, value) end

--Sets the global trigger UI_TEXT_FONT_NAME non-array variable
---@param key string # Variable name
---@param value? string # value
function GameAPI.set_trigger_variable_ui_text_font_name(key, value) end

--Sets the global trigger UI_TEXT_FONT_NAME non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param value? string # value
function GameAPI.set_trigger_actor_variable_ui_text_font_name(actor, key, value) end

--Sets the global trigger UI_ECA_ANIM_TYPE array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@param value? integer # value
function GameAPI.set_trigger_list_variable_ui_eca_anim_type(key, index, value) end

--Sets the global trigger UI_ECA_ANIM_TYPE array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@param value? integer # value
function GameAPI.set_trigger_list_actor_variable_ui_eca_anim_type(actor, key, index, value) end

--Sets the global trigger UI_ECA_ANIM_TYPE non-array variable
---@param key string # Variable name
---@param value? integer # value
function GameAPI.set_trigger_variable_ui_eca_anim_type(key, value) end

--Sets the global trigger UI_ECA_ANIM_TYPE non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param value? integer # value
function GameAPI.set_trigger_actor_variable_ui_eca_anim_type(actor, key, value) end

--Set the LOCAL_UNIT_ENTITY array variable subentry of the global trigger
---@param key string # Variable name
---@param index integer # subscript
---@param value? py.LocalUnit # value
function GameAPI.set_trigger_list_variable_local_unit_entity(key, index, value) end

--Set the LOCAL_UNIT_ENTITY array group variable subitem of the global trigger
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@param value? py.LocalUnit # value
function GameAPI.set_trigger_list_actor_variable_local_unit_entity(actor, key, index, value) end

--Set the global trigger LOCAL_UNIT_ENTITY non-array variable
---@param key string # Variable name
---@param value? py.LocalUnit # value
function GameAPI.set_trigger_variable_local_unit_entity(key, value) end

--Set the global trigger LOCAL_UNIT_ENTITY non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param value? py.LocalUnit # value
function GameAPI.set_trigger_actor_variable_local_unit_entity(actor, key, value) end

--Sets the global trigger LOCAL_UNIT_GROUP array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@param value? py.LocalUnitGroup # value
function GameAPI.set_trigger_list_variable_local_unit_group(key, index, value) end

--Sets the global trigger LOCAL_UNIT_GROUP array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@param value? py.LocalUnitGroup # value
function GameAPI.set_trigger_list_actor_variable_local_unit_group(actor, key, index, value) end

--Sets the global trigger LOCAL_UNIT_GROUP non-array variable
---@param key string # Variable name
---@param value? py.LocalUnitGroup # value
function GameAPI.set_trigger_variable_local_unit_group(key, value) end

--Sets the global trigger LOCAL_UNIT_GROUP non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param value? py.LocalUnitGroup # value
function GameAPI.set_trigger_actor_variable_local_unit_group(actor, key, value) end

--Sets the global trigger DECO_ENTITY array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@param value? py.DecoID # value
function GameAPI.set_trigger_list_variable_deco_entity(key, index, value) end

--Sets the global trigger DECO_ENTITY array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@param value? py.DecoID # value
function GameAPI.set_trigger_list_actor_variable_deco_entity(actor, key, index, value) end

--Set the global trigger DECO_ENTITY non-array variable
---@param key string # Variable name
---@param value? py.DecoID # value
function GameAPI.set_trigger_variable_deco_entity(key, value) end

--Sets the global trigger DECO_ENTITY non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param value? py.DecoID # value
function GameAPI.set_trigger_actor_variable_deco_entity(actor, key, value) end

--Sets the global trigger SCENE_PRESET array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@param value? py.ScenePreset # value
function GameAPI.set_trigger_list_variable_scene_preset(key, index, value) end

--Sets the global trigger SCENE_PRESET array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@param value? py.ScenePreset # value
function GameAPI.set_trigger_list_actor_variable_scene_preset(actor, key, index, value) end

--Sets the global trigger SCENE_PRESET non-array variable
---@param key string # Variable name
---@param value? py.ScenePreset # value
function GameAPI.set_trigger_variable_scene_preset(key, value) end

--Sets the global trigger SCENE_PRESET non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param value? py.ScenePreset # value
function GameAPI.set_trigger_actor_variable_scene_preset(actor, key, value) end

--Sets the global trigger ITEM_STACK_TYPE array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@param value? py.ItemStackType # value
function GameAPI.set_trigger_list_variable_item_stack_type(key, index, value) end

--Sets the global trigger ITEM_STACK_TYPE array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@param value? py.ItemStackType # value
function GameAPI.set_trigger_list_actor_variable_item_stack_type(actor, key, index, value) end

--Sets the global trigger ITEM_STACK_TYPE non-array variable
---@param key string # Variable name
---@param value? py.ItemStackType # value
function GameAPI.set_trigger_variable_item_stack_type(key, value) end

--Sets the global trigger ITEM_STACK_TYPE non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param value? py.ItemStackType # value
function GameAPI.set_trigger_actor_variable_item_stack_type(actor, key, value) end

--Sets the global trigger ABILITY_RELEASE_ID array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@param value? py.AbilityReleaseId # value
function GameAPI.set_trigger_list_variable_ability_release_id(key, index, value) end

--Sets the global trigger ABILITY_RELEASE_ID array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@param value? py.AbilityReleaseId # value
function GameAPI.set_trigger_list_actor_variable_ability_release_id(actor, key, index, value) end

--Sets the global trigger ABILITY_RELEASE_ID non-array variable
---@param key string # Variable name
---@param value? py.AbilityReleaseId # value
function GameAPI.set_trigger_variable_ability_release_id(key, value) end

--Sets the global trigger ABILITY_RELEASE_ID non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param value? py.AbilityReleaseId # value
function GameAPI.set_trigger_actor_variable_ability_release_id(actor, key, value) end

--Sets the global trigger DECO_NAME array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@param value? py.DecoKey # value
function GameAPI.set_trigger_list_variable_deco_name(key, index, value) end

--Sets the global trigger DECO_NAME array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@param value? py.DecoKey # value
function GameAPI.set_trigger_list_actor_variable_deco_name(actor, key, index, value) end

--Set the global trigger DECO_NAME to be a non-array variable
---@param key string # Variable name
---@param value? py.DecoKey # value
function GameAPI.set_trigger_variable_deco_name(key, value) end

--Sets the global trigger DECO_NAME to be a non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param value? py.DecoKey # value
function GameAPI.set_trigger_actor_variable_deco_name(actor, key, value) end

--Sets the global trigger UI_POINT array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@param value? py.FUIPoint # value
function GameAPI.set_trigger_list_variable_ui_point(key, index, value) end

--Sets the global trigger UI_POINT array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@param value? py.FUIPoint # value
function GameAPI.set_trigger_list_actor_variable_ui_point(actor, key, index, value) end

--Sets the global trigger UI_POINT non-array variable
---@param key string # Variable name
---@param value? py.FUIPoint # value
function GameAPI.set_trigger_variable_ui_point(key, value) end

--Sets the global trigger UI_POINT non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param value? py.FUIPoint # value
function GameAPI.set_trigger_actor_variable_ui_point(actor, key, value) end

--Sets the global trigger ATTACH_MODEL_ENTITY array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@param value? py.AttachModelEntity # value
function GameAPI.set_trigger_list_variable_attach_model_entity(key, index, value) end

--Sets the global trigger ATTACH_MODEL_ENTITY Array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@param value? py.AttachModelEntity # value
function GameAPI.set_trigger_list_actor_variable_attach_model_entity(actor, key, index, value) end

--Sets global trigger ATTACH_MODEL_ENTITY non-array variable
---@param key string # Variable name
---@param value? py.AttachModelEntity # value
function GameAPI.set_trigger_variable_attach_model_entity(key, value) end

--Sets global trigger ATTACH_MODEL_ENTITY non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param value? py.AttachModelEntity # value
function GameAPI.set_trigger_actor_variable_attach_model_entity(actor, key, value) end

--Sets the global trigger LIVE2D array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@param value? py.Live2dKey # value
function GameAPI.set_trigger_list_variable_live2d(key, index, value) end

--Sets the global trigger LIVE2D array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@param value? py.Live2dKey # value
function GameAPI.set_trigger_list_actor_variable_live2d(actor, key, index, value) end

--Sets the global trigger LIVE2D non-array variable
---@param key string # Variable name
---@param value? py.Live2dKey # value
function GameAPI.set_trigger_variable_live2d(key, value) end

--Sets the global trigger LIVE2D non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param value? py.Live2dKey # value
function GameAPI.set_trigger_actor_variable_live2d(actor, key, value) end

--Sets the global trigger SPINE array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@param value? py.Spine # value
function GameAPI.set_trigger_list_variable_spine(key, index, value) end

--Sets the global trigger SPINE array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@param value? py.Spine # value
function GameAPI.set_trigger_list_actor_variable_spine(actor, key, index, value) end

--Sets the global trigger SPINE non-array variable
---@param key string # Variable name
---@param value? py.Spine # value
function GameAPI.set_trigger_variable_spine(key, value) end

--Sets the global trigger SPINE non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param value? py.Spine # value
function GameAPI.set_trigger_actor_variable_spine(actor, key, value) end

--Sets the global trigger DEBUG_SHAPE array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@param value? integer # value
function GameAPI.set_trigger_list_variable_debug_shape(key, index, value) end

--Sets the global trigger DEBUG_SHAPE array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@param value? integer # value
function GameAPI.set_trigger_list_actor_variable_debug_shape(actor, key, index, value) end

--Sets the global trigger DEBUG_SHAPE non-array variable
---@param key string # Variable name
---@param value? integer # value
function GameAPI.set_trigger_variable_debug_shape(key, value) end

--Sets the global trigger DEBUG_SHAPE non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param value? integer # value
function GameAPI.set_trigger_actor_variable_debug_shape(actor, key, value) end

--Sets the global trigger WATCHING_MODE_STATUS array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@param value? py.WatchingModeStatus # value
function GameAPI.set_trigger_list_variable_watching_mode_status(key, index, value) end

--Sets the global trigger WATCHING_MODE_STATUS array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@param value? py.WatchingModeStatus # value
function GameAPI.set_trigger_list_actor_variable_watching_mode_status(actor, key, index, value) end

--Sets the global trigger WATCHING_MODE_STATUS non-array variable
---@param key string # Variable name
---@param value? py.WatchingModeStatus # value
function GameAPI.set_trigger_variable_watching_mode_status(key, value) end

--Sets the global trigger WATCHING_MODE_STATUS non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param value? py.WatchingModeStatus # value
function GameAPI.set_trigger_actor_variable_watching_mode_status(actor, key, value) end

--Set the global trigger FORCE_ENTITY array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@param value? py.Force # value
function GameAPI.set_trigger_list_variable_force_entity(key, index, value) end

--Set the global trigger FORCE_ENTITY Array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@param value? py.Force # value
function GameAPI.set_trigger_list_actor_variable_force_entity(actor, key, index, value) end

--Set the global trigger FORCE_ENTITY non-array variable
---@param key string # Variable name
---@param value? py.Force # value
function GameAPI.set_trigger_variable_force_entity(key, value) end

--Set the global trigger FORCE_ENTITY non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param value? py.Force # value
function GameAPI.set_trigger_actor_variable_force_entity(actor, key, value) end

--Sets the global trigger GOODS_KEY array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@param value? py.GoodsKey # value
function GameAPI.set_trigger_list_variable_goods_key(key, index, value) end

--Sets the global trigger GOODS_KEY array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@param value? py.GoodsKey # value
function GameAPI.set_trigger_list_actor_variable_goods_key(actor, key, index, value) end

--Sets the global trigger GOODS_KEY non-array variable
---@param key string # Variable name
---@param value? py.GoodsKey # value
function GameAPI.set_trigger_variable_goods_key(key, value) end

--Sets the global trigger GOODS_KEY non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param value? py.GoodsKey # value
function GameAPI.set_trigger_actor_variable_goods_key(actor, key, value) end

--Sets the global trigger MAP array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@param value? py.Map # value
function GameAPI.set_trigger_list_variable_map(key, index, value) end

--Sets the global trigger MAP array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@param value? py.Map # value
function GameAPI.set_trigger_list_actor_variable_map(actor, key, index, value) end

--Sets the global trigger MAP non-array variable
---@param key string # Variable name
---@param value? py.Map # value
function GameAPI.set_trigger_variable_map(key, value) end

--Sets the global trigger MAP non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param value? py.Map # value
function GameAPI.set_trigger_actor_variable_map(actor, key, value) end

--Sets the global trigger STORE_ITEM_TYPE array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@param value? py.StoreItemType # value
function GameAPI.set_trigger_list_variable_store_item_type(key, index, value) end

--Sets the global trigger STORE_ITEM_TYPE array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@param value? py.StoreItemType # value
function GameAPI.set_trigger_list_actor_variable_store_item_type(actor, key, index, value) end

--Sets the global trigger STORE_ITEM_TYPE non-array variable
---@param key string # Variable name
---@param value? py.StoreItemType # value
function GameAPI.set_trigger_variable_store_item_type(key, value) end

--Sets the global trigger STORE_ITEM_TYPE non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param value? py.StoreItemType # value
function GameAPI.set_trigger_actor_variable_store_item_type(actor, key, value) end

--Sets the global trigger SITE_STATE array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@param value? py.SITE_STATE # value
function GameAPI.set_trigger_list_variable_site_state(key, index, value) end

--Sets the global trigger SITE_STATE array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@param value? py.SITE_STATE # value
function GameAPI.set_trigger_list_actor_variable_site_state(actor, key, index, value) end

--Sets the global trigger SITE_STATE non-array variable
---@param key string # Variable name
---@param value? py.SITE_STATE # value
function GameAPI.set_trigger_variable_site_state(key, value) end

--Sets the global trigger SITE_STATE non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param value? py.SITE_STATE # value
function GameAPI.set_trigger_actor_variable_site_state(actor, key, value) end

--Sets the global trigger COIN_CURRENCY array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@param value? py.COIN_CURRENCY # value
function GameAPI.set_trigger_list_variable_coin_currency(key, index, value) end

--Sets the global trigger COIN_CURRENCY array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@param value? py.COIN_CURRENCY # value
function GameAPI.set_trigger_list_actor_variable_coin_currency(actor, key, index, value) end

--Sets the global trigger COIN_CURRENCY non-array variable
---@param key string # Variable name
---@param value? py.COIN_CURRENCY # value
function GameAPI.set_trigger_variable_coin_currency(key, value) end

--Sets the global trigger COIN_CURRENCY non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param value? py.COIN_CURRENCY # value
function GameAPI.set_trigger_actor_variable_coin_currency(actor, key, value) end

--Gets an item in the DECO_ENTITY array
---@param l py.List # list
---@param i integer # subscript
---@return py.DecoID # value
function GameAPI.get_deco_entity_list_value(l, i) end

--Sets an item in the DECO_ENTITY array
---@param l py.List # list
---@param i integer # subscript
---@param v py.DecoID # value
function GameAPI.set_deco_entity_list_value(l, i, v) end

--Generate n DECO_ENTITY arrays of values v
---@param n integer # Length
---@param v? py.DecoID # value
---@return py.List # list
function GameAPI.get_deco_entity_n_list(n, v) end

--Gets an item in the SCENE_PRESET array
---@param l py.List # list
---@param i integer # subscript
---@return py.ScenePreset # value
function GameAPI.get_scene_preset_list_value(l, i) end

--Sets an item in the SCENE_PRESET array
---@param l py.List # list
---@param i integer # subscript
---@param v py.ScenePreset # value
function GameAPI.set_scene_preset_list_value(l, i, v) end

--Generates n SCENE_PRESET arrays with values of v
---@param n integer # Length
---@param v? py.ScenePreset # value
---@return py.List # list
function GameAPI.get_scene_preset_n_list(n, v) end

--Gets an item in the SPINE array
---@param l py.List # list
---@param i integer # subscript
---@return py.Spine # value
function GameAPI.get_spine_list_value(l, i) end

--Sets an item in the SPINE array
---@param l py.List # list
---@param i integer # subscript
---@param v py.Spine # value
function GameAPI.set_spine_list_value(l, i, v) end

--Generates a SPINE array of n values v
---@param n integer # Length
---@param v? py.Spine # value
---@return py.List # list
function GameAPI.get_spine_n_list(n, v) end

--Gets an item in the UI_ANIM_PLAY_MODE array
---@param l py.List # list
---@param i integer # subscript
---@return integer # value
function GameAPI.get_ui_anim_play_mode_list_value(l, i) end

--Sets an item in the UI_ANIM_PLAY_MODE array
---@param l py.List # list
---@param i integer # subscript
---@param v integer # value
function GameAPI.set_ui_anim_play_mode_list_value(l, i, v) end

--Generates n UI_ANIM_PLAY_MODE arrays with value v
---@param n integer # Length
---@param v? integer # value
---@return py.List # list
function GameAPI.get_ui_anim_play_mode_n_list(n, v) end

--Gets an item in the DEBUG_SHAPE array
---@param l py.List # list
---@param i integer # subscript
---@return integer # value
function GameAPI.get_debug_shape_list_value(l, i) end

--Set an item in the DEBUG_SHAPE array
---@param l py.List # list
---@param i integer # subscript
---@param v integer # value
function GameAPI.set_debug_shape_list_value(l, i, v) end

--Generates n DEBUG_SHAPE arrays with value v
---@param n integer # Length
---@param v? integer # value
---@return py.List # list
function GameAPI.get_debug_shape_n_list(n, v) end

--Gets an item in the UI_TEXT_FONT_NAME array
---@param l py.List # list
---@param i integer # subscript
---@return string # value
function GameAPI.get_ui_text_font_name_list_value(l, i) end

--Sets an item in the UI_TEXT_FONT_NAME array
---@param l py.List # list
---@param i integer # subscript
---@param v string # value
function GameAPI.set_ui_text_font_name_list_value(l, i, v) end

--Generates a UI_TEXT_FONT_NAME array of n values v
---@param n integer # Length
---@param v? string # value
---@return py.List # list
function GameAPI.get_ui_text_font_name_n_list(n, v) end

--Gets an item in the UI_ECA_ANIM_TYPE array
---@param l py.List # list
---@param i integer # subscript
---@return integer # value
function GameAPI.get_ui_eca_anim_type_list_value(l, i) end

--Sets an item in the UI_ECA_ANIM_TYPE array
---@param l py.List # list
---@param i integer # subscript
---@param v integer # value
function GameAPI.set_ui_eca_anim_type_list_value(l, i, v) end

--Generates n UI_ECA_ANIM_TYPE arrays of value v
---@param n integer # Length
---@param v? integer # value
---@return py.List # list
function GameAPI.get_ui_eca_anim_type_n_list(n, v) end

--Gets an item in the LOCAL_UNIT_ENTITY array
---@param l py.List # list
---@param i integer # subscript
---@return py.LocalUnit # value
function GameAPI.get_local_unit_entity_list_value(l, i) end

--Set an item in the LOCAL_UNIT_ENTITY array
---@param l py.List # list
---@param i integer # subscript
---@param v py.LocalUnit # value
function GameAPI.set_local_unit_entity_list_value(l, i, v) end

--Generate n LOCAL_UNIT_ENTITY arrays with the value v
---@param n integer # Length
---@param v? py.LocalUnit # value
---@return py.List # list
function GameAPI.get_local_unit_entity_n_list(n, v) end

--Gets an item in the LOCAL_UNIT_GROUP array
---@param l py.List # list
---@param i integer # subscript
---@return py.LocalUnitGroup # value
function GameAPI.get_local_unit_group_list_value(l, i) end

--Sets an item in the LOCAL_UNIT_GROUP array
---@param l py.List # list
---@param i integer # subscript
---@param v py.LocalUnitGroup # value
function GameAPI.set_local_unit_group_list_value(l, i, v) end

--Generates n LOCAL_UNIT_GROUP arrays with the value v
---@param n integer # Length
---@param v? py.LocalUnitGroup # value
---@return py.List # list
function GameAPI.get_local_unit_group_n_list(n, v) end

--Gets an item in the STORE_ITEM_TYPE array
---@param l py.List # list
---@param i integer # subscript
---@return py.StoreItemType # value
function GameAPI.get_store_item_type_list_value(l, i) end

--Sets an item in the STORE_ITEM_TYPE array
---@param l py.List # list
---@param i integer # subscript
---@param v py.StoreItemType # value
function GameAPI.set_store_item_type_list_value(l, i, v) end

--Generates an array of n STORE_ITEM_TYPE values of v
---@param n integer # Length
---@param v? py.StoreItemType # value
---@return py.List # list
function GameAPI.get_store_item_type_n_list(n, v) end

--Gets an item in the WATCHING_MODE_STATUS array
---@param l py.List # list
---@param i integer # subscript
---@return py.WatchingModeStatus # value
function GameAPI.get_watching_mode_status_list_value(l, i) end

--Sets an item in the WATCHING_MODE_STATUS array
---@param l py.List # list
---@param i integer # subscript
---@param v py.WatchingModeStatus # value
function GameAPI.set_watching_mode_status_list_value(l, i, v) end

--Generates n WATCHING_MODE_STATUS arrays of value v
---@param n integer # Length
---@param v? py.WatchingModeStatus # value
---@return py.List # list
function GameAPI.get_watching_mode_status_n_list(n, v) end

--Gets an item in the ITEM_STACK_TYPE array
---@param l py.List # list
---@param i integer # subscript
---@return py.ItemStackType # value
function GameAPI.get_item_stack_type_list_value(l, i) end

--Sets an item in the ITEM_STACK_TYPE array
---@param l py.List # list
---@param i integer # subscript
---@param v py.ItemStackType # value
function GameAPI.set_item_stack_type_list_value(l, i, v) end

--Generates n ITEM_STACK_TYPE arrays with the value v
---@param n integer # Length
---@param v? py.ItemStackType # value
---@return py.List # list
function GameAPI.get_item_stack_type_n_list(n, v) end

--Gets an item in the DECO_NAME array
---@param l py.List # list
---@param i integer # subscript
---@return py.DecoKey # value
function GameAPI.get_deco_name_list_value(l, i) end

--Sets an item in the DECO_NAME array
---@param l py.List # list
---@param i integer # subscript
---@param v py.DecoKey # value
function GameAPI.set_deco_name_list_value(l, i, v) end

--Generate n DECO_NAME arrays of values v
---@param n integer # Length
---@param v? py.DecoKey # value
---@return py.List # list
function GameAPI.get_deco_name_n_list(n, v) end

--Gets an item in the ABILITY_RELEASE_ID array
---@param l py.List # list
---@param i integer # subscript
---@return py.AbilityReleaseId # value
function GameAPI.get_ability_release_id_list_value(l, i) end

--Set an item in the ABILITY_RELEASE_ID array
---@param l py.List # list
---@param i integer # subscript
---@param v py.AbilityReleaseId # value
function GameAPI.set_ability_release_id_list_value(l, i, v) end

--Generates an array of n ABILITY_RELEASE_ID values of v
---@param n integer # Length
---@param v? py.AbilityReleaseId # value
---@return py.List # list
function GameAPI.get_ability_release_id_n_list(n, v) end

--Gets an item in the UI_POINT array
---@param l py.List # list
---@param i integer # subscript
---@return py.FUIPoint # value
function GameAPI.get_ui_point_list_value(l, i) end

--Sets an item in the UI_POINT array
---@param l py.List # list
---@param i integer # subscript
---@param v py.FUIPoint # value
function GameAPI.set_ui_point_list_value(l, i, v) end

--Generates n UI_POINT arrays of value v
---@param n integer # Length
---@param v? py.FUIPoint # value
---@return py.List # list
function GameAPI.get_ui_point_n_list(n, v) end

--Gets an item in the FORCE_ENTITY array
---@param l py.List # list
---@param i integer # subscript
---@return py.Force # value
function GameAPI.get_force_entity_list_value(l, i) end

--Set an item in the FORCE_ENTITY array
---@param l py.List # list
---@param i integer # subscript
---@param v py.Force # value
function GameAPI.set_force_entity_list_value(l, i, v) end

--Generate n FORCE_ENTITY arrays with the value v
---@param n integer # Length
---@param v? py.Force # value
---@return py.List # list
function GameAPI.get_force_entity_n_list(n, v) end

--Gets an item in the SITE_STATE array
---@param l py.List # list
---@param i integer # subscript
---@return py.SITE_STATE # value
function GameAPI.get_site_state_list_value(l, i) end

--Sets an item in the SITE_STATE array
---@param l py.List # list
---@param i integer # subscript
---@param v py.SITE_STATE # value
function GameAPI.set_site_state_list_value(l, i, v) end

--Generates an array of n SITE_STATE values of v
---@param n integer # Length
---@param v? py.SITE_STATE # value
---@return py.List # list
function GameAPI.get_site_state_n_list(n, v) end

--Gets an item in the COIN_CURRENCY array
---@param l py.List # list
---@param i integer # subscript
---@return py.COIN_CURRENCY # value
function GameAPI.get_coin_currency_list_value(l, i) end
