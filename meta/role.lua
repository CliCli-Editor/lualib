--This file is generated by tools/genGameAPI, do not modify it manually.
---@meta

---@class py.Role
local Role = {}

--The player gets the player ID
---@return py.RoleID? # Player ID
function Role:api_get_role_id() end

--Gets the player is faction ID
---@return integer? # The player is faction ID
function Role:api_get_camp_id() end

--Get the player ID number
---@return integer? # Player ID value
function Role:get_role_id_num() end

--Gets the player is faction ID value
---@return integer? # The player is faction ID number
function Role:get_camp_id_num() end

--Get player name
---@return string? # Player name
function Role:get_role_name() end

--Get the player is unique name
---@return string? # Player unique name
function Role:get_role__unique_name() end

--Gain the player platform level
---@return integer? # Player level
function Role:get_role_plat_map_level() end

--Gets the player controller type
---@return py.RoleType? # Type of player controller
function Role:get_role_type() end

--Whether the player joins halfway
---@return boolean? # Whether to join halfway
function Role:is_middle_join() end

--Gets the player is faction object
---@return py.Camp? # Camp object
function Role:api_get_camp() end

--Player-set attributes
---@param k string # Attribute name
---@param value integer # Attribute value
function Role:set_attr_val(k, value) end

--Gets all player unit objects
---@return py.UnitGroup? # Unit object list
function Role:get_all_unit_id() end

--Set the player experience gain rate
---@param rate number # magnification
function Role:set_role_exp_rate(rate) end

--Gain player experience multiplier
---@return py.Fixed? # Return multiplier
function Role:get_role_exp_rate() end

--Set the player is birth point
---@param point py.Point # point
function Role:set_role_spawn_point(point) end

--Get player birthpoints
---@return py.FVector3? # Return to the birth location
function Role:get_role_spawn_point() end

--Set the player party ID
---@param new_camp py.Camp # Team ID
function Role:api_set_camp(new_camp) end

--Set player name
---@param name string # Name
function Role:set_role_name(name) end

--Modifying player Resources
---@param res_key py.RoleResKey # Resource name
---@param res_cnt py.Fixed # Resource value
function Role:change_role_res(res_key, res_cnt) end

--Set player resources
---@param res_key py.RoleResKey # Resource name
---@param res_cnt py.Fixed # Resource value
function Role:set_role_res(res_key, res_cnt) end

--Get player resources
---@param res_key py.RoleResKey # Resource name
---@return py.Fixed? # Resource value
function Role:get_role_res(res_key) end

--Set a strict mode for group pathfinding
---@param group_navigate_mode boolean # Enable group pathfinding strict mode
function Role:set_group_navigate_mode(group_navigate_mode) end

--Set integer parameters to the player save field
---@param index integer # Player save field
---@param value integer # Integer parameter
function Role:set_save_data_int_value(index, value) end

--Adds integer parameters to the player save field
---@param index integer # Player save field
---@param value integer # Integer parameter
function Role:add_save_data_int_value(index, value) end

--Multiply real type parameters to the player save field
---@param index integer # Player save field
---@param value py.Fixed # Parameter of real type
function Role:mult_save_data_value(index, value) end

--Set real type parameters to the player save field
---@param index integer # Player save field
---@param value py.Fixed # Parameter of real type
function Role:set_save_data_fixed_value(index, value) end

--Adds real type parameters to the player save field
---@param index integer # Player save field
---@param value py.Fixed # Parameter of real type
function Role:add_save_data_fixed_value(index, value) end

--Set Boolean parameters to the player save field
---@param index integer # Player save field
---@param value boolean # Boolean type parameter
function Role:set_save_data_bool_value(index, value) end

--Set string parameters to the player save field
---@param index integer # Player save field
---@param value string # String type parameter
function Role:set_save_data_str_value(index, value) end

--Set phenotype parameters to the player save field
---@param index integer # Player save field
---@param value py.Table # Phenotypic parameter
function Role:set_save_data_table_value(index, value) end

--set_save_table_key_value
---@param save_slot integer # Player save field
---@param key1 string # key1
---@param value py.Actor # value
---@param key2 string # key2
---@param key3 string # key3
---@param value_convert_func string # value_convert_func
function Role:set_save_table_key_value(save_slot, key1, value, key2, key3, value_convert_func) end

--add_save_table_key_value
---@param save_slot integer # Player save field
---@param key1 string # key1
---@param value py.Actor # value
---@param key2 string # key2
---@param key3 string # key3
function Role:add_save_table_key_value(save_slot, key1, value, key2, key3) end

--multiply_save_table_key_value
---@param save_slot integer # Player save field
---@param key1 string # key1
---@param value py.Actor # value
---@param key2 string # key2
---@param key3 string # key3
function Role:multiply_save_table_key_value(save_slot, key1, value, key2, key3) end

--remove_save_table_key_value
---@param save_slot integer # Player save field
---@param key1 string # key1
---@param key2 string # key2
---@param key3 string # key3
function Role:remove_save_table_key_value(save_slot, key1, key2, key3) end

--get_save_table_key_value
---@param save_slot integer # Player save field
---@param key1 string # key1
---@param key2 string # key2
---@param key3 string # key3
---@param default_value py.Actor # value
---@param value_convert_func string # key2
function Role:get_save_table_key_value(save_slot, key1, key2, key3, default_value, value_convert_func) end

--Upload player save data
---@param use_proxy? boolean # Do proxy upload
function Role:upload_save_data(use_proxy) end

--Increases the archive value of the specified key for the current map
---@param key string # Global archive key value
---@param value integer # Incremental value
function Role:add_global_map_archive_data(key, value) end

--Gets the ranking of the leaderboard corresponding to the global save key value specified by the player
---@param rank_key string # Global archive key value
---@return integer? # integer
function Role:get_player_rank_num(rank_key) end

--Gets the ranking of the leaderboard corresponding to the individual save field specified by the player
---@param archive_key integer # Player save field
---@return integer? # integer
function Role:get_player_archive_rank_num(archive_key) end

--Download player save data
function Role:download_save_data() end

--Reset the download file data callback
function Role:reset_download_save_data_callback() end

--Read integer player save data
---@param index integer # Player save field
---@return integer? # integer
function Role:get_save_data_int_value(index) end

--Read real player save data
---@param index integer # Player save field
---@return py.Fixed? # Fixed point number
function Role:get_save_data_fixed_value(index) end

--Read Boolean player save data
---@param index integer # Player save field
---@return boolean? # Boolean value
function Role:get_save_data_bool_value(index) end

--Read string player archive data
---@param index integer # Player save field
---@return string? # Character string
function Role:get_save_data_str_value(index) end

--Read the phenotypic player save data
---@param index integer # Player save field
---@return py.Table? # table
function Role:get_save_data_table_value(index) end

--Get the player is encrypted uuid
function Role:get_encry_uuid() end

--Players use premium items
---@param cnt integer # quantity
---@param no py.StoreKey # Charge item KEY
function Role:api_use_store_item(cnt, no) end

--Get the number of items charged by the player
---@param no py.StoreKey # Charge item key
---@return integer? # Charge item quantity
function Role:get_store_item_cnt(no) end

--Whether the player has visibility into the units
---@param unit py.Unit # unit
---@return boolean? # Visible or not
function Role:get_visibility_of_unit(unit) end

--Modify the player is tech level
---@param tech_no py.TechKey # Technology number
---@param delta_lv integer # Degree of change
function Role:api_change_tech_level(tech_no, delta_lv) end

--Modify the player is tech level
---@param tech_no py.TechKey # Technology number
---@param lv integer # Lv.
function Role:api_set_tech_level(tech_no, lv) end

--Gain the player is tech level
---@param tech_no py.TechKey # Technology number
---@return integer? # Technological grade
function Role:api_get_tech_level(tech_no) end

--Whether the point is visible to the player
---@param point py.FPoint # point
---@return boolean? # Boolean value
function Role:is_point_visible_to_player(point) end

--Point is in the fog
---@param point py.FPoint # point
---@return boolean? # Boolean value
function Role:is_point_in_fog(point) end

--Whether the point is in a black shadow
---@param point py.FPoint # point
---@return boolean? # Boolean value
function Role:is_point_in_shadow(point) end

--Get player status
---@return py.RoleStatus? # Player status
function Role:get_role_status() end

--Sets whether the player is hostile
---@param role py.Role # Player
---@param is_enemy boolean # Boolean variable
function Role:set_role_hostility(role, is_enemy) end

--Whether the player is in an alliance
---@param role py.Role # Player
---@return boolean? # Returned value
function Role:players_is_alliance(role) end

--Whether the player has a hostile relationship
---@param role py.Role # Player
---@return boolean? # Returned value
function Role:players_is_enemy(role) end

--The original player opens his eyes to the target player
---@param role_2 py.Role # Player
---@return boolean? # Returned value
function Role:share_source_player_vision_to_target(role_2) end

--The original player closes the field of view to the target player
---@param role_2 py.Role # Player
---@return boolean? # Returned value
function Role:close_source_player_vision_to_target(role_2) end

--The original unit opens its vision to the target player
---@param unit py.Unit # unit
---@return boolean? # Returned value
function Role:share_source_unit_vision_to_target(unit) end

--The original unit closes its vision to the target player
---@param unit py.Unit # unit
---@return boolean? # Returned value
function Role:close_source_unit_vision_to_target(unit) end

--Select the unit or unit group
---@param unit_or_unit_groupd py.DynamicTypeMeta # Unit or group of units
function Role:role_select_unit(unit_or_unit_groupd) end

--Open/close the player is mouse click
---@param value boolean # On/Off
function Role:set_role_mouse_left_click(value) end

--Open/close the player is mouse is box selection
---@param value boolean # On/Off
function Role:set_role_mouse_move_select(value) end

--Turn on/off the player is mouse wheel
---@param value boolean # On/Off
function Role:set_role_mouse_wheel(value) end

--Set the player dark corner switch
---@param value boolean # Dark Angle switch
function Role:set_role_vignetting_enable(value) end

--Set the player is dark corner size
---@param value number # Dark Angle size
function Role:set_role_vignetting_size(value) end

--Set the player is dark corner breathing cycle
---@param value number # Respiratory cycle
function Role:set_role_vignetting_breath_rate(value) end

--Sets how much the player is dark Angle changes
---@param value number # Amplitude of change
function Role:set_role_vignetting_change_range(value) end

--Set the player is dark corner color
---@param r number # R
---@param g number # G
---@param b number # B
---@param interval? number # Interval
function Role:set_role_vignetting_color(r, g, b, interval) end

--Set the player is basic action shortcuts (filter out those that prohibit modification)
---@param game_func_id py.EditableGameFunc # Editable operation
---@param normal_key py.NormalKey # Function key
---@param record_key py.RecordKey # Auxiliary key
function Role:api_set_role_editable_game_func(game_func_id, normal_key, record_key) end

--Set the player's base action switch (includes all base actions)
---@param game_func_id py.AllGameFunc # All operations
---@param is_enable boolean # On/Off
function Role:api_set_role_all_game_func_enable(game_func_id, is_enable) end

--Whether the shortcut keys for the base operation response are occupied (filter out the ones that prohibit modification)
---@param normal_key py.NormalKey # Function key
---@param record_key py.RecordKey # Auxiliary key
---@return boolean? # Whether or not
function Role:api_is_conf_of_editable_game_func(normal_key, record_key) end

--Get the basic actions of the player in response to keyboard keystrokes (filter out the ones that prohibit modification)
---@param normal_key py.NormalKey # Function key
---@param record_key py.RecordKey # subsidiary
---@return py.EditableGameFunc? # Basic operations can be modified
function Role:api_get_editable_game_func_of_shortcut(normal_key, record_key) end

--Set the player is Boolean buried point data
---@param key integer # Boolean key
---@param value boolean # Boolean value
function Role:set_bool_hit_point_data(key, value) end

--Set the player is integer buried point data
---@param key integer # Integer key
---@param value integer # integer
function Role:set_int_hit_point_data(key, value) end

--Set following distance
---@param follow_distance py.Fixed # Following distance
function Role:api_set_follow_distance(follow_distance) end

--Sets the player is mouse style
---@param cur_state_key py.CursorState # Mouse state
---@param cur_key py.CursorKey # Mouse key
function Role:api_set_role_cursor(cur_state_key, cur_key) end

--Set the player is skill indicator effects
---@param skill_indicator_key integer # Indicator effect enumeration
---@param effect_key py.SfxKey # Special effects key
function Role:api_set_role_skill_indicator(skill_indicator_key, effect_key) end

--Get player colors
---@return string? # colour
function Role:api_get_role_color() end

--Whether the player is an honorary member of the platform
---@return boolean? # Be a member or not
function Role:api_is_honor_vip() end

--Whether the player is the current author
---@return boolean? # Author or not
function Role:api_is_cur_map_author() end

--Gets the ID of the player is equipment decoration type
---@param plat_deco_type py.PlatformDecoType # Platform decoration type
---@return integer? # Decoration ID
function Role:api_get_equip_deco_id(plat_deco_type) end

--Gets the player is level in the local graph
---@return integer? # Map level
function Role:api_get_map_level() end

--Gets the player's accumulated game count on the local graph
---@return integer? # inning
function Role:api_get_played_times() end

--The player is platform rank in the local chart
---@return integer? # Ranking
function Role:api_get_map_level_rank() end

--Number of days players sign in
---@param signin_type py.PlatformSigninType # Sign-in days type
---@return integer? # Sign-in days
function Role:api_get_sign_in_days_of_platform(signin_type) end

--Player interaction in the community
---@param community_type py.PlatformCommunityType # Platform community type
---@return integer? # number
function Role:api_get_community_value(community_type) end

--Whether the player is a returning user of the current map
---@return boolean? # Reflow or not user
function Role:api_is_returning_player() end

--Whether the player saves the current map
---@return boolean? # Whether to save the current map
function Role:api_is_bookmark_current_map() end

--Get the player is current season ladder ranking points
---@param ladder_key string # Ladder key
---@return integer? # points
function Role:api_get_ladder_rank_points(ladder_key) end

--Get the player is cumulative recharge for the map
---@return py.Fixed? # Cumulative recharge
function Role:api_get_role_total_consume() end

--Get whether the player has tipped the map
---@return boolean? # Whether to reward the map
function Role:api_get_role_is_donated() end

--Get a token for player mall login
---@return string? # Mall token
function Role:api_get_role_store_params() end

--Get achievement points for the player's current map
---@return boolean? # Achievement points
function Role:api_get_role_achieve_point() end

--Gets whether the player is current map achievement is unlocked
---@param achieve_id string # Achievement ID
---@return boolean? # Unlock or not
function Role:api_get_role_achieve_unlock(achieve_id) end

--Pet http request call
---@param api string # The api method name of the request
---@param is_post boolean # Whether the api is a post method
---@param body string # Requested body
---@param timeout? integer # Timeout period
---@param callback? function # Callback function
function Role:pet_http_request(api, is_post, body, timeout, callback) end

--Request to create a private copy
---@param level_id py.Map # Level id
---@param game_mode py.GameMode # Game mode
---@param max_player? integer # Maximum number of people
---@param custom_param? string # Custom parameter
function Role:request_create_private_dungeon(level_id, game_mode, max_player, custom_param) end

--Request to join a private copy
---@param token string # Room password
function Role:request_join_private_dungeon(token) end

--Force player to upload a non-real-time save
---@param use_proxy? boolean # Do proxy upload
function Role:force_upload_save_data(use_proxy) end

--Get the platform item expiration timestamp
---@param no py.StoreKey # Charge item key
---@return integer? # Charge item quantity
function Role:get_store_item_expired_time(no) end

--Set player Dark corner color (HEX)
---@param color string # hex
---@param interval? number # Interval
function Role:set_role_vignetting_color_hex(color, interval) end

--Report player rankings
---@param rank integer # Game rankings of the game
function Role:upload_player_game_rank(rank) end

--Gets the player is currently selected unit group
---@return py.UnitGroup? # Unit group
function Role:api_get_role_select_units() end

--Gets the player is current season ladder number
---@param ladder_key string # Ladder key
---@return integer? # Season number
function Role:api_get_current_season_id(ladder_key) end

--Get the player is current season ladder rank
---@param ladder_key string # Ladder key
---@return integer? # Current season standings
function Role:api_get_current_season_standing(ladder_key) end

--Gets the player is current ladder ranking
---@param ladder_key string # Ladder key
---@param rank_number integer # Which rank
---@return integer? # Ranking times
function Role:api_get_current_season_standing_number(ladder_key, rank_number) end

--Copy the phenotype save to the Player Save field
---@param src_index integer # Source player save field
---@param dst_index integer # Target player save field
function Role:copy_save_data_table_value(src_index, dst_index) end

--Update player save leaderboards
---@param save_index integer # Player save field
function Role:update_player_save_rank(save_index) end

--Gets the player is current map expeditions
---@return integer? # expeditions
function Role:api_get_number_of_expeditions() end

--Get the player is current map adventure duration
---@return integer? # Duration of expedition
function Role:api_get_time_of_expeditions() end

--Request to join a public copy
---@param level_id py.Map # Level id
---@param game_mode py.GameMode # Game mode
function Role:request_join_public_dungeon(level_id, game_mode) end

--Get player general information
---@return py.Table? # Player general information
function Role:get_role_general_depot() end
