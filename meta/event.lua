--This file is generated by tools/genGameAPI, do not modify it manually.
---@meta

---@class py.Event
local event = {}

---@class EventParam.ET_LOGIC_UNIT_DESTROY

--LOGIC_UNIT_DESTROY
event.ET_LOGIC_UNIT_DESTROY = {}

---@class EventParam.ET_TIMEOUT

--Timer timeout
event.ET_TIMEOUT = {}

---@class EventParam.ET_REPEAT_TIMEOUT

--Periodic timer timeout
event.ET_REPEAT_TIMEOUT = {}

---@class EventParam.ET_TIMEOUT_BY_FRAME

--After a certain number of frames
event.ET_TIMEOUT_BY_FRAME = {}

---@class EventParam.ET_REPEAT_TIMEOUT_BY_FRAME

--Periodically through a certain number of frames
event.ET_REPEAT_TIMEOUT_BY_FRAME = {}

---@class EventParam.ET_GAME_INIT

--Game initialization
event.ET_GAME_INIT = {}

---@class EventParam.ET_LOADING_END

--Loading end
event.ET_LOADING_END = {}

---@class EventParam.ET_RELAUNCH_FRAME_CATCHING_FINISHED

--Restart the client frame tracing is complete
event.ET_RELAUNCH_FRAME_CATCHING_FINISHED = {}

---@class EventParam.ET_GAME_SNAPSHOT_MISMATCH
---@field int1 integer # Asynchronous frame number

--Snapshot asynchronous
event.ET_GAME_SNAPSHOT_MISMATCH = {
    [1] = {
        name = "__int1",
        type = "integer",
        lua_name = "int1",
        lua_type = "integer",
        desc = "Asynchronous frame number",
        lua_desc = "Asynchronous frame number",
    },
}

---@class EventParam.ET_SCENE_PRESET_LOADING_FINISH
---@field scene_preset py.ScenePreset # Scene preset hash

--Terrain default changes are loaded
event.ET_SCENE_PRESET_LOADING_FINISH = {
    [1] = {
        name = "__scene_preset",
        type = "py.ScenePreset",
        lua_name = "scene_preset",
        lua_type = "py.ScenePreset",
        desc = "Scene preset hash",
        lua_desc = "Scene preset hash",
    },
}

---@class EventParam.ET_RECV_TRIGGER
---@field trigger_id py.TriggerID # Trigger id

--Receive trigger event
event.ET_RECV_TRIGGER = {
    [1] = {
        name = "__trigger_id",
        type = "py.TriggerID",
        lua_name = "trigger_id",
        lua_type = "py.TriggerID",
        desc = "Trigger id",
        lua_desc = "Trigger id",
    },
}

---@class EventParam.ET_GAME_END

--Game over
event.ET_GAME_END = {}

---@class EventParam.ET_GAME_PAUSE

--Game pause
event.ET_GAME_PAUSE = {}

---@class EventParam.ET_GAME_RESUME

--Game recovery
event.ET_GAME_RESUME = {}

---@class EventParam.ET_EMPTY

--Null event
event.ET_EMPTY = {}

---@class EventParam.TIMER_TIMEOUT
---@field name string # Timer name

--Global timer timeout
event.TIMER_TIMEOUT = {
    [1] = {
        name = "__name",
        type = "string",
        lua_name = "name",
        lua_type = "string",
        desc = "Timer name",
        lua_desc = "Timer name",
    },
}

---@class EventParam.ET_DAY_NIGHT_CHANGE
---@field is_day_to_night boolean # Whether day turns to night

--Diurnal change
event.ET_DAY_NIGHT_CHANGE = {
    [1] = {
        name = "__is_day_to_night",
        type = "boolean",
        lua_name = "is_day_to_night",
        lua_type = "boolean",
        desc = "Whether day turns to night",
        lua_desc = "Whether day turns to night",
    },
}

---@class EventParam.ET_DAY_NIGHT_TIME_CHANGE

--The time of day and night changes
event.ET_DAY_NIGHT_TIME_CHANGE = {}

---@class EventParam.ET_CONTAINER_ADDED
---@field name string # Container name
---@field container py.ActorContainer # container

--Add container
event.ET_CONTAINER_ADDED = {
    [1] = {
        name = "__name",
        type = "string",
        lua_name = "name",
        lua_type = "string",
        desc = "Container name",
        lua_desc = "Container name",
    },
    [2] = {
        name = "__container",
        type = "py.ActorContainer",
        lua_name = "container",
        lua_type = "py.ActorContainer",
        desc = "container",
        lua_desc = "container",
    },
}

---@class EventParam.ET_CONTAINER_ACTOR_ADDED
---@field owner py.Actor # Container slave actor

--Add the actor to the container
event.ET_CONTAINER_ACTOR_ADDED = {
    [1] = {
        name = "__owner",
        type = "py.Actor",
        lua_name = "owner",
        lua_type = "py.Actor",
        desc = "Container slave actor",
        lua_desc = "Container slave actor",
    },
}

---@class EventParam.ET_CONTAINER_ACTOR_REMOVED
---@field owner py.Actor # The original container is a slave actor

--Delete the actor from the container
event.ET_CONTAINER_ACTOR_REMOVED = {
    [1] = {
        name = "__owner",
        type = "py.Actor",
        lua_name = "owner",
        lua_type = "py.Actor",
        desc = "The original container is a slave actor",
        lua_desc = "The original container is a slave actor",
    },
}

---@class EventParam.ET_ACTOR_ATTR_UPDATED
---@field name string # Attribute name

--actor attribute update
event.ET_ACTOR_ATTR_UPDATED = {
    [1] = {
        name = "__name",
        type = "string",
        lua_name = "name",
        lua_type = "string",
        desc = "Attribute name",
        lua_desc = "Attribute name",
    },
}

---@class EventParam.ET_AREA_ENTER
---@field unit Unit # unit
---@field area Area # region
---@field trigger_id py.TriggerID # Trigger ID

--Unit entry area
event.ET_AREA_ENTER = {
    [1] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Unit ID",
        lua_desc = "unit",
    },
    [2] = {
        name = "__area_id",
        type = "py.AreaID",
        lua_name = "area",
        lua_type = "Area",
        desc = "Area ID",
        lua_desc = "region",
    },
    [3] = {
        name = "__trigger_id",
        type = "py.TriggerID",
        lua_name = "trigger_id",
        lua_type = "py.TriggerID",
        desc = "Trigger ID",
        lua_desc = "Trigger ID",
    },
}

---@class EventParam.ET_AREA_LEAVE
---@field unit Unit # unit
---@field area Area # region
---@field trigger_id py.TriggerID # Trigger ID

--Unit out of area
event.ET_AREA_LEAVE = {
    [1] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Unit ID",
        lua_desc = "unit",
    },
    [2] = {
        name = "__area_id",
        type = "py.AreaID",
        lua_name = "area",
        lua_type = "Area",
        desc = "Area ID",
        lua_desc = "region",
    },
    [3] = {
        name = "__trigger_id",
        type = "py.TriggerID",
        lua_name = "trigger_id",
        lua_type = "py.TriggerID",
        desc = "Trigger ID",
        lua_desc = "Trigger ID",
    },
}

---@class EventParam.ET_HTTP_RESPONSE
---@field http_req string # http request
---@field http_resp_body string # Response content
---@field http_resp_status string # Response state

--http request return
event.ET_HTTP_RESPONSE = {
    [1] = {
        name = "__http_req",
        type = "string",
        lua_name = "http_req",
        lua_type = "string",
        desc = "http request",
        lua_desc = "http request",
    },
    [2] = {
        name = "__http_resp_body",
        type = "string",
        lua_name = "http_resp_body",
        lua_type = "string",
        desc = "Response content",
        lua_desc = "Response content",
    },
    [3] = {
        name = "__http_resp_status",
        type = "string",
        lua_name = "http_resp_status",
        lua_type = "string",
        desc = "Response state",
        lua_desc = "Response state",
    },
}

---@class EventParam.ET_BROADCAST_LUA_MSG
---@field broadcast_lua_msg_id string # Message id
---@field broadcast_lua_msg_content string # Message content
---@field player Player # Player

--Broadcast a custom Lua message
event.ET_BROADCAST_LUA_MSG = {
    [1] = {
        name = "__broadcast_lua_msg_id",
        type = "string",
        lua_name = "broadcast_lua_msg_id",
        lua_type = "string",
        desc = "Message id",
        lua_desc = "Message id",
    },
    [2] = {
        name = "__broadcast_lua_msg_content",
        type = "string",
        lua_name = "broadcast_lua_msg_content",
        lua_type = "string",
        desc = "Message content",
        lua_desc = "Message content",
    },
    [3] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "Player ID",
        lua_desc = "Player",
    },
}

---@class EventParam.ET_BROADCAST_MSG
---@field broadcast_msg_id string # Message id
---@field broadcast_msg_content string # Message content
---@field player Player # CHARACTERS

--Broadcast a custom message
event.ET_BROADCAST_MSG = {
    [1] = {
        name = "__broadcast_msg_id",
        type = "string",
        lua_name = "broadcast_msg_id",
        lua_type = "string",
        desc = "Message id",
        lua_desc = "Message id",
    },
    [2] = {
        name = "__broadcast_msg_content",
        type = "string",
        lua_name = "broadcast_msg_content",
        lua_type = "string",
        desc = "Message content",
        lua_desc = "Message content",
    },
    [3] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "Role ID",
        lua_desc = "CHARACTERS",
    },
}

---@class EventParam.ET_WATCHING_PLAYER_CHANGED
---@field player Player # New viewers
---@field watching_mode_status py.WatchingModeStatus # Viewing mode state

--The viewing player ID has changed
event.ET_WATCHING_PLAYER_CHANGED = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "New viewing player ID",
        lua_desc = "New viewers",
    },
    [2] = {
        name = "__watching_mode_status",
        type = "py.WatchingModeStatus",
        lua_name = "watching_mode_status",
        lua_type = "py.WatchingModeStatus",
        desc = "Viewing mode state",
        lua_desc = "Viewing mode state",
    },
}

---@class EventParam.ET_CLOSE_MALL_COIN_PAYMENT
---@field player Player # CHARACTERS
---@field int1 integer # Error code

--Internal purchase event
event.ET_CLOSE_MALL_COIN_PAYMENT = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "Role ID",
        lua_desc = "CHARACTERS",
    },
    [2] = {
        name = "__int1",
        type = "integer",
        lua_name = "int1",
        lua_type = "integer",
        desc = "Error code",
        lua_desc = "Error code",
    },
}

---@class EventParam.ET_MALL_GOODS_CHANGE
---@field player Player # CHARACTERS
---@field int1 integer # quantity

--Player merchandise changes events
event.ET_MALL_GOODS_CHANGE = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "Role ID",
        lua_desc = "CHARACTERS",
    },
    [2] = {
        name = "__int1",
        type = "integer",
        lua_name = "int1",
        lua_type = "integer",
        desc = "quantity",
        lua_desc = "quantity",
    },
}

---@class EventParam.ET_MALL_COIN_CHANGE
---@field player Player # CHARACTERS
---@field int1 integer # quantity

--Player currency change event
event.ET_MALL_COIN_CHANGE = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "Role ID",
        lua_desc = "CHARACTERS",
    },
    [2] = {
        name = "__int1",
        type = "integer",
        lua_name = "int1",
        lua_type = "integer",
        desc = "quantity",
        lua_desc = "quantity",
    },
}

---@class EventParam.ET_CAMERA_SHOOT_RAYCAST_HIT
---@field player Player # CHARACTERS
---@field unit Unit # unit
---@field float1 number # Altitude

--Shooting incident
event.ET_CAMERA_SHOOT_RAYCAST_HIT = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "Role ID",
        lua_desc = "CHARACTERS",
    },
    [2] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Unit ID",
        lua_desc = "unit",
    },
    [3] = {
        name = "__float1",
        type = "py.Fixed",
        lua_name = "float1",
        lua_type = "number",
        desc = "Altitude",
        lua_desc = "Altitude",
    },
}

---@class EventParam.ET_ROLE_JOIN_BATTLE
---@field player Player # Player
---@field is_middle_join boolean # Whether to join halfway

--Players join the battle
event.ET_ROLE_JOIN_BATTLE = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "Player ID",
        lua_desc = "Player",
    },
    [2] = {
        name = "__is_middle_join",
        type = "boolean",
        lua_name = "is_middle_join",
        lua_type = "boolean",
        desc = "Whether to join halfway",
        lua_desc = "Whether to join halfway",
    },
}

---@class EventParam.ET_ROLE_ACTIVE_EXIT_GAME_EVENT
---@field player Player # Player

--The player actively exits the game
event.ET_ROLE_ACTIVE_EXIT_GAME_EVENT = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "Player ID",
        lua_desc = "Player",
    },
}

---@class EventParam.ET_ROLE_LOSE_CONNECT
---@field player Player # Player

--The player disconnects the server
event.ET_ROLE_LOSE_CONNECT = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "Player ID",
        lua_desc = "Player",
    },
}

---@class EventParam.ET_AI_TAKE_CONTROL
---@field player Player # Player

--AI takes over the player
event.ET_AI_TAKE_CONTROL = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "Player ID",
        lua_desc = "Player",
    },
}

---@class EventParam.ET_DOWNLOAD_MAP_ARCHIVE_CALLBACK
---@field player Player # Player

--Download file data callback
event.ET_DOWNLOAD_MAP_ARCHIVE_CALLBACK = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "Player ID",
        lua_desc = "Player",
    },
}

---@class EventParam.ET_ROLE_USE_STORE_ITEM_END
---@field player Player # Player
---@field store_key py.StoreKey # Charge item number
---@field use_cnt integer # Usage times

--The player successfully uses the charged item
event.ET_ROLE_USE_STORE_ITEM_END = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "Player ID",
        lua_desc = "Player",
    },
    [2] = {
        name = "__store_key",
        type = "py.StoreKey",
        lua_name = "store_key",
        lua_type = "py.StoreKey",
        desc = "Charge item number",
        lua_desc = "Charge item number",
    },
    [3] = {
        name = "__use_cnt",
        type = "integer",
        lua_name = "use_cnt",
        lua_type = "integer",
        desc = "Usage times",
        lua_desc = "Usage times",
    },
}

---@class EventParam.ET_CONSUME_STORE_ITEM
---@field player Player # Player
---@field store_key py.StoreKey # Charge item number

--The player successfully uses the charged item (inside the trigger)
event.ET_CONSUME_STORE_ITEM = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "Player ID",
        lua_desc = "Player",
    },
    [2] = {
        name = "__store_key",
        type = "py.StoreKey",
        lua_name = "store_key",
        lua_type = "py.StoreKey",
        desc = "Charge item number",
        lua_desc = "Charge item number",
    },
}

---@class EventParam.ET_ROLE_HOLD_STORE_ITEM
---@field player Player # Player
---@field store_key py.StoreKey # Charge item number

--The player holds a premium item
event.ET_ROLE_HOLD_STORE_ITEM = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "Player ID",
        lua_desc = "Player",
    },
    [2] = {
        name = "__store_key",
        type = "py.StoreKey",
        lua_name = "store_key",
        lua_type = "py.StoreKey",
        desc = "Charge item number",
        lua_desc = "Charge item number",
    },
}

---@class EventParam.ET_ROLE_RESOURCE_CHANGED
---@field player Player # Player
---@field res_key py.RoleResKey # Player resource type
---@field res_value integer # Player resource value
---@field res_value_delta number # Player resource variable value

--Player resource change
event.ET_ROLE_RESOURCE_CHANGED = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "Player ID",
        lua_desc = "Player",
    },
    [2] = {
        name = "__res_key",
        type = "py.RoleResKey",
        lua_name = "res_key",
        lua_type = "py.RoleResKey",
        desc = "Player resource type",
        lua_desc = "Player resource type",
    },
    [3] = {
        name = "__res_value",
        type = "integer",
        lua_name = "res_value",
        lua_type = "integer",
        desc = "Player resource value",
        lua_desc = "Player resource value",
    },
    [4] = {
        name = "__res_value_delta",
        type = "py.Fixed",
        lua_name = "res_value_delta",
        lua_type = "number",
        desc = "Player resource variable value",
        lua_desc = "Player resource variable value",
    },
}

---@class EventParam.ET_ROLE_INPUT_MSG
---@field player Player # Player
---@field msg string # Character string

--Player input string
event.ET_ROLE_INPUT_MSG = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "Player ID",
        lua_desc = "Player",
    },
    [2] = {
        name = "__msg",
        type = "string",
        lua_name = "msg",
        lua_type = "string",
        desc = "Character string",
        lua_desc = "Character string",
    },
}

---@class EventParam.ET_ROLE_INPUT_ACTIVATION_CODE
---@field player Player # Player
---@field activation_code_group string # Activation block

--The player enters the activation code
event.ET_ROLE_INPUT_ACTIVATION_CODE = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "Player ID",
        lua_desc = "Player",
    },
    [2] = {
        name = "__activation_code_group",
        type = "string",
        lua_name = "activation_code_group",
        lua_type = "string",
        desc = "Activation block",
        lua_desc = "Activation block",
    },
}

---@class EventParam.ET_ROLE_TECH_UPGRADE
---@field player Player # Player
---@field tech_no py.TechKey # Technology number
---@field curr_lv integer # Current level of technology

--Player technology upgrade
event.ET_ROLE_TECH_UPGRADE = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "Player ID",
        lua_desc = "Player",
    },
    [2] = {
        name = "__tech_no",
        type = "py.TechKey",
        lua_name = "tech_no",
        lua_type = "py.TechKey",
        desc = "Technology number",
        lua_desc = "Technology number",
    },
    [3] = {
        name = "__curr_lv",
        type = "integer",
        lua_name = "curr_lv",
        lua_type = "integer",
        desc = "Current level of technology",
        lua_desc = "Current level of technology",
    },
}

---@class EventParam.ET_ROLE_TECH_DOWNGRADE
---@field player Player # Player
---@field tech_no py.TechKey # Technology number
---@field curr_lv integer # Current level of technology

--Player tech degradation
event.ET_ROLE_TECH_DOWNGRADE = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "Player ID",
        lua_desc = "Player",
    },
    [2] = {
        name = "__tech_no",
        type = "py.TechKey",
        lua_name = "tech_no",
        lua_type = "py.TechKey",
        desc = "Technology number",
        lua_desc = "Technology number",
    },
    [3] = {
        name = "__curr_lv",
        type = "integer",
        lua_name = "curr_lv",
        lua_type = "integer",
        desc = "Current level of technology",
        lua_desc = "Current level of technology",
    },
}

---@class EventParam.ET_ROLE_TECH_CHANGED
---@field player Player # Player
---@field tech_no py.TechKey # Technology number
---@field curr_lv integer # Current level of technology
---@field delta_lv integer # Degree of technological change

--Player technology change
event.ET_ROLE_TECH_CHANGED = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "Player ID",
        lua_desc = "Player",
    },
    [2] = {
        name = "__tech_no",
        type = "py.TechKey",
        lua_name = "tech_no",
        lua_type = "py.TechKey",
        desc = "Technology number",
        lua_desc = "Technology number",
    },
    [3] = {
        name = "__curr_lv",
        type = "integer",
        lua_name = "curr_lv",
        lua_type = "integer",
        desc = "Current level of technology",
        lua_desc = "Current level of technology",
    },
    [4] = {
        name = "__delta_lv",
        type = "integer",
        lua_name = "delta_lv",
        lua_type = "integer",
        desc = "Degree of technological change",
        lua_desc = "Degree of technological change",
    },
}

---@class EventParam.ET_ROLE_SET_CLIENT_GRAPH_QUALITY
---@field player Player # Player
---@field image_quality py.ImageQuality # Picture quality

--The picture quality of the player client has changed
event.ET_ROLE_SET_CLIENT_GRAPH_QUALITY = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "Player ID",
        lua_desc = "Player",
    },
    [2] = {
        name = "__image_quality",
        type = "py.ImageQuality",
        lua_name = "image_quality",
        lua_type = "py.ImageQuality",
        desc = "Picture quality",
        lua_desc = "Picture quality",
    },
}

---@class EventParam.ET_UNIT_UPGRADE_TECH
---@field unit Unit # unit
---@field player Player # Unit player
---@field tech_no py.TechKey # Technology number

--Unit R&D technology
event.ET_UNIT_UPGRADE_TECH = {
    [1] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Unit ID",
        lua_desc = "unit",
    },
    [2] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "The player ID of the unit",
        lua_desc = "Unit player",
    },
    [3] = {
        name = "__tech_no",
        type = "py.TechKey",
        lua_name = "tech_no",
        lua_type = "py.TechKey",
        desc = "Technology number",
        lua_desc = "Technology number",
    },
}

---@class EventParam.ET_UNIT_ADD_TECH
---@field unit Unit # unit
---@field player Player # Unit player
---@field tech_no py.TechKey # Technology number

--Unit addition technology
event.ET_UNIT_ADD_TECH = {
    [1] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Unit ID",
        lua_desc = "unit",
    },
    [2] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "The player ID of the unit",
        lua_desc = "Unit player",
    },
    [3] = {
        name = "__tech_no",
        type = "py.TechKey",
        lua_name = "tech_no",
        lua_type = "py.TechKey",
        desc = "Technology number",
        lua_desc = "Technology number",
    },
}

---@class EventParam.ET_UNIT_REMOVE_TECH
---@field unit Unit # unit
---@field player Player # Unit player
---@field tech_no py.TechKey # Technology number

--Unit deletion technology
event.ET_UNIT_REMOVE_TECH = {
    [1] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Unit ID",
        lua_desc = "unit",
    },
    [2] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "The player ID of the unit",
        lua_desc = "Unit player",
    },
    [3] = {
        name = "__tech_no",
        type = "py.TechKey",
        lua_name = "tech_no",
        lua_type = "py.TechKey",
        desc = "Technology number",
        lua_desc = "Technology number",
    },
}

---@class EventParam.ET_ROLE_CHANGE_RELATION
---@field src_player Player # Source player
---@field dst_player Player # Target player
---@field relation py.RoleRelation # relation

--Player antagonism changes
event.ET_ROLE_CHANGE_RELATION = {
    [1] = {
        name = "__src_role_id",
        type = "py.RoleID",
        lua_name = "src_player",
        lua_type = "Player",
        desc = "Source player ID",
        lua_desc = "Source player",
    },
    [2] = {
        name = "__dst_role_id",
        type = "py.RoleID",
        lua_name = "dst_player",
        lua_type = "Player",
        desc = "Target player ID",
        lua_desc = "Target player",
    },
    [3] = {
        name = "__relation",
        type = "py.RoleRelation",
        lua_name = "relation",
        lua_type = "py.RoleRelation",
        desc = "relation",
        lua_desc = "relation",
    },
}

---@class EventParam.ET_ROLE_RECONNECT
---@field player Player # Player

--Player disconnects and reconnects
event.ET_ROLE_RECONNECT = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "Player ID",
        lua_desc = "Player",
    },
}

---@class EventParam.ET_ROLE_ARCHIVE_SET_FAILED
---@field player Player # Player
---@field archive_slot_name string # Player save slot name
---@field error_code integer # Error code

--Player save setting failed
event.ET_ROLE_ARCHIVE_SET_FAILED = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "Player ID",
        lua_desc = "Player",
    },
    [2] = {
        name = "__archive_slot_name",
        type = "string",
        lua_name = "archive_slot_name",
        lua_type = "string",
        desc = "Player save slot name",
        lua_desc = "Player save slot name",
    },
    [3] = {
        name = "__error_code",
        type = "integer",
        lua_name = "error_code",
        lua_type = "integer",
        desc = "Error code",
        lua_desc = "Error code",
    },
}

---@class EventParam.ET_UNIT_BUILD_UPGRADE_START
---@field unit Unit # Start upgrading the building unit
---@field old_unit_key py.UnitKey # Old unit stuff
---@field new_unit_key py.UnitKey # New unit stuff

--Building unit upgrade starts
event.ET_UNIT_BUILD_UPGRADE_START = {
    [1] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Start upgrading the building unit",
        lua_desc = "Start upgrading the building unit",
    },
    [2] = {
        name = "__old_unit_key",
        type = "py.UnitKey",
        lua_name = "old_unit_key",
        lua_type = "py.UnitKey",
        desc = "Old unit stuff",
        lua_desc = "Old unit stuff",
    },
    [3] = {
        name = "__new_unit_key",
        type = "py.UnitKey",
        lua_name = "new_unit_key",
        lua_type = "py.UnitKey",
        desc = "New unit stuff",
        lua_desc = "New unit stuff",
    },
}

---@class EventParam.ET_UNIT_BUILD_UPGRADE_CANCEL
---@field unit Unit # Cancel the upgrade of the building unit
---@field old_unit_key py.UnitKey # Old unit stuff
---@field new_unit_key py.UnitKey # New unit stuff

--Building unit upgrade cancelled
event.ET_UNIT_BUILD_UPGRADE_CANCEL = {
    [1] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Cancel the upgrade of the building unit",
        lua_desc = "Cancel the upgrade of the building unit",
    },
    [2] = {
        name = "__old_unit_key",
        type = "py.UnitKey",
        lua_name = "old_unit_key",
        lua_type = "py.UnitKey",
        desc = "Old unit stuff",
        lua_desc = "Old unit stuff",
    },
    [3] = {
        name = "__new_unit_key",
        type = "py.UnitKey",
        lua_name = "new_unit_key",
        lua_type = "py.UnitKey",
        desc = "New unit stuff",
        lua_desc = "New unit stuff",
    },
}

---@class EventParam.ET_UNIT_BUILD_UPGRADE_FINISH
---@field unit Unit # Upgrade completed building units
---@field old_unit_key py.UnitKey # Old unit stuff
---@field new_unit_key py.UnitKey # New unit stuff

--The building unit was upgraded successfully
event.ET_UNIT_BUILD_UPGRADE_FINISH = {
    [1] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Upgrade completed building units",
        lua_desc = "Upgrade completed building units",
    },
    [2] = {
        name = "__old_unit_key",
        type = "py.UnitKey",
        lua_name = "old_unit_key",
        lua_type = "py.UnitKey",
        desc = "Old unit stuff",
        lua_desc = "Old unit stuff",
    },
    [3] = {
        name = "__new_unit_key",
        type = "py.UnitKey",
        lua_name = "new_unit_key",
        lua_type = "py.UnitKey",
        desc = "New unit stuff",
        lua_desc = "New unit stuff",
    },
}

---@class EventParam.ET_UNIT_CONSTRUCT_START
---@field unit Unit # Start building units

--Unit construction starts
event.ET_UNIT_CONSTRUCT_START = {
    [1] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Start building units",
        lua_desc = "Start building units",
    },
}

---@class EventParam.ET_UNIT_CONSTRUCT_CANCEL
---@field unit Unit # Cancel the construction of the unit

--Flat construction cancellation
event.ET_UNIT_CONSTRUCT_CANCEL = {
    [1] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Cancel the construction of the unit",
        lua_desc = "Cancel the construction of the unit",
    },
}

---@class EventParam.ET_UNIT_CONSTRUCT_FINISH
---@field unit Unit # Built units completed

--Unit construction success
event.ET_UNIT_CONSTRUCT_FINISH = {
    [1] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Built units completed",
        lua_desc = "Built units completed",
    },
}

---@class EventParam.ET_UNIT_BEFORE_ONE_KICK_REPAIR
---@field unit Unit # To release the repair skills of the unit

--Before a single repair order is issued
event.ET_UNIT_BEFORE_ONE_KICK_REPAIR = {
    [1] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "To release the repair skills of the unit",
        lua_desc = "To release the repair skills of the unit",
    },
}

---@class EventParam.ET_ON_UNIT_TRANSFORMATION
---@field unit Unit # unit
---@field old_unit_key py.UnitKey # Old unit stuff
---@field new_unit_key py.UnitKey # New unit stuff

--Unit transformation
event.ET_ON_UNIT_TRANSFORMATION = {
    [1] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "unit",
        lua_desc = "unit",
    },
    [2] = {
        name = "__old_unit_key",
        type = "py.UnitKey",
        lua_name = "old_unit_key",
        lua_type = "py.UnitKey",
        desc = "Old unit stuff",
        lua_desc = "Old unit stuff",
    },
    [3] = {
        name = "__new_unit_key",
        type = "py.UnitKey",
        lua_name = "new_unit_key",
        lua_type = "py.UnitKey",
        desc = "New unit stuff",
        lua_desc = "New unit stuff",
    },
}

---@class EventParam.ET_ABILITY_BUILD_FINISH
---@field ability Ability # skill
---@field ability_type py.AbilityType # Skill type
---@field ability_index py.AbilityIndex # Skill ID
---@field ability_seq py.AbilitySeq # Skills Seq
---@field unit Unit # master
---@field build_unit Unit # Built out units

--Building skills to build successfully
event.ET_ABILITY_BUILD_FINISH = {
    [1] = {
        name = "__ability",
        type = "py.Ability",
        lua_name = "ability",
        lua_type = "Ability",
        desc = "skill",
        lua_desc = "skill",
    },
    [2] = {
        name = "__ability_type",
        type = "py.AbilityType",
        lua_name = "ability_type",
        lua_type = "py.AbilityType",
        desc = "Skill type",
        lua_desc = "Skill type",
    },
    [3] = {
        name = "__ability_index",
        type = "py.AbilityIndex",
        lua_name = "ability_index",
        lua_type = "py.AbilityIndex",
        desc = "Skill ID",
        lua_desc = "Skill ID",
    },
    [4] = {
        name = "__ability_seq",
        type = "py.AbilitySeq",
        lua_name = "ability_seq",
        lua_type = "py.AbilitySeq",
        desc = "Skills Seq",
        lua_desc = "Skills Seq",
    },
    [5] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "master",
        lua_desc = "master",
    },
    [6] = {
        name = "__build_unit_id",
        type = "py.UnitID",
        lua_name = "build_unit",
        lua_type = "Unit",
        desc = "ID of the built unit",
        lua_desc = "Built out units",
    },
}

---@class EventParam.ET_ATTACK_HIT_TARGET
---@field ability_id integer # Skill id

--Normal attack hit
event.ET_ATTACK_HIT_TARGET = {
    [1] = {
        name = "__ability_id",
        type = "integer",
        lua_name = "ability_id",
        lua_type = "integer",
        desc = "Skill id",
        lua_desc = "Skill id",
    },
}

---@class EventParam.ET_ATTACK_HURT
---@field ability_id integer # Skill id
---@field other_unit Unit # Damaged unit

--Normal attacks deal damage
event.ET_ATTACK_HURT = {
    [1] = {
        name = "__ability_id",
        type = "integer",
        lua_name = "ability_id",
        lua_type = "integer",
        desc = "Skill id",
        lua_desc = "Skill id",
    },
    [2] = {
        name = "__other_unit",
        type = "py.Unit",
        lua_name = "other_unit",
        lua_type = "Unit",
        desc = "Damaged unit",
        lua_desc = "Damaged unit",
    },
}

---@class EventParam.ET_ABILITY_CD_CHANGE
---@field ability_index py.AbilityIndex # Skill pit
---@field left number # cd remaining time
---@field total number # Total cd duration
---@field ability_id py.AbilityKey # Skill id

--Skill CD change
event.ET_ABILITY_CD_CHANGE = {
    [1] = {
        name = "__ability_index",
        type = "py.AbilityIndex",
        lua_name = "ability_index",
        lua_type = "py.AbilityIndex",
        desc = "Skill pit",
        lua_desc = "Skill pit",
    },
    [2] = {
        name = "__left",
        type = "py.Fixed",
        lua_name = "left",
        lua_type = "number",
        desc = "cd remaining time",
        lua_desc = "cd remaining time",
    },
    [3] = {
        name = "__total",
        type = "py.Fixed",
        lua_name = "total",
        lua_type = "number",
        desc = "Total cd duration",
        lua_desc = "Total cd duration",
    },
    [4] = {
        name = "__ability_id",
        type = "py.AbilityKey",
        lua_name = "ability_id",
        lua_type = "py.AbilityKey",
        desc = "Skill id",
        lua_desc = "Skill id",
    },
}

---@class EventParam.ET_ACTIVE_ABILITY_CHANGED
---@field ability_index py.AbilityIndex # Skill pit

--Units gain new skills
event.ET_ACTIVE_ABILITY_CHANGED = {
    [1] = {
        name = "__ability_index",
        type = "py.AbilityIndex",
        lua_name = "ability_index",
        lua_type = "py.AbilityIndex",
        desc = "Skill pit",
        lua_desc = "Skill pit",
    },
}

---@class EventParam.ET_ABILITY_STACK_CHANGE
---@field ability_index py.AbilityIndex # Skill pit
---@field stack number # Skill charge levels

--Skill charge levels change
event.ET_ABILITY_STACK_CHANGE = {
    [1] = {
        name = "__ability_index",
        type = "py.AbilityIndex",
        lua_name = "ability_index",
        lua_type = "py.AbilityIndex",
        desc = "Skill pit",
        lua_desc = "Skill pit",
    },
    [2] = {
        name = "__stack",
        type = "py.Fixed",
        lua_name = "stack",
        lua_type = "number",
        desc = "Skill charge levels",
        lua_desc = "Skill charge levels",
    },
}

---@class EventParam.ET_ABILITY_PLUS_POINT
---@field ability_index py.AbilityIndex # Skill pit
---@field ability Ability # Skill object
---@field unit Unit # unit

--Skill point
event.ET_ABILITY_PLUS_POINT = {
    [1] = {
        name = "__ability_index",
        type = "py.AbilityIndex",
        lua_name = "ability_index",
        lua_type = "py.AbilityIndex",
        desc = "Skill pit",
        lua_desc = "Skill pit",
    },
    [2] = {
        name = "__ability",
        type = "py.Ability",
        lua_name = "ability",
        lua_type = "Ability",
        desc = "Skill object",
        lua_desc = "Skill object",
    },
    [3] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Unit ID",
        lua_desc = "unit",
    },
}

---@class EventParam.ET_ABILITY_STACK_CD_CHANGE
---@field ability_index py.AbilityIndex # Skill pit
---@field left number # Remaining time of charging cd
---@field total number # Total charge cd duration

--Charge CD changes
event.ET_ABILITY_STACK_CD_CHANGE = {
    [1] = {
        name = "__ability_index",
        type = "py.AbilityIndex",
        lua_name = "ability_index",
        lua_type = "py.AbilityIndex",
        desc = "Skill pit",
        lua_desc = "Skill pit",
    },
    [2] = {
        name = "__left",
        type = "py.Fixed",
        lua_name = "left",
        lua_type = "number",
        desc = "Remaining time of charging cd",
        lua_desc = "Remaining time of charging cd",
    },
    [3] = {
        name = "__total",
        type = "py.Fixed",
        lua_name = "total",
        lua_type = "number",
        desc = "Total charge cd duration",
        lua_desc = "Total charge cd duration",
    },
}

---@class EventParam.ET_ABILITY_CD_PAUSED
---@field ability_index py.AbilityIndex # Skill pit
---@field left number # Remaining time of charging cd
---@field total number # Total charge cd duration

--Skill CD pause
event.ET_ABILITY_CD_PAUSED = {
    [1] = {
        name = "__ability_index",
        type = "py.AbilityIndex",
        lua_name = "ability_index",
        lua_type = "py.AbilityIndex",
        desc = "Skill pit",
        lua_desc = "Skill pit",
    },
    [2] = {
        name = "__left",
        type = "py.Fixed",
        lua_name = "left",
        lua_type = "number",
        desc = "Remaining time of charging cd",
        lua_desc = "Remaining time of charging cd",
    },
    [3] = {
        name = "__total",
        type = "py.Fixed",
        lua_name = "total",
        lua_type = "number",
        desc = "Total charge cd duration",
        lua_desc = "Total charge cd duration",
    },
}

---@class EventParam.ET_ABILITY_CD_RESUMED
---@field ability_index py.AbilityIndex # Skill pit
---@field left number # Remaining time of charging cd
---@field total number # Total charge cd duration

--Skill CD Recovery
event.ET_ABILITY_CD_RESUMED = {
    [1] = {
        name = "__ability_index",
        type = "py.AbilityIndex",
        lua_name = "ability_index",
        lua_type = "py.AbilityIndex",
        desc = "Skill pit",
        lua_desc = "Skill pit",
    },
    [2] = {
        name = "__left",
        type = "py.Fixed",
        lua_name = "left",
        lua_type = "number",
        desc = "Remaining time of charging cd",
        lua_desc = "Remaining time of charging cd",
    },
    [3] = {
        name = "__total",
        type = "py.Fixed",
        lua_name = "total",
        lua_type = "number",
        desc = "Total charge cd duration",
        lua_desc = "Total charge cd duration",
    },
}

---@class EventParam.ET_ABILITY_FORBIDDEN_CHANGED
---@field ability_index py.AbilityIndex # Skill pit
---@field is_forbidden boolean # Whether to disable

--The skill disabled status changed. Procedure
event.ET_ABILITY_FORBIDDEN_CHANGED = {
    [1] = {
        name = "__ability_index",
        type = "py.AbilityIndex",
        lua_name = "ability_index",
        lua_type = "py.AbilityIndex",
        desc = "Skill pit",
        lua_desc = "Skill pit",
    },
    [2] = {
        name = "__is_forbidden",
        type = "boolean",
        lua_name = "is_forbidden",
        lua_type = "boolean",
        desc = "Whether to disable",
        lua_desc = "Whether to disable",
    },
}

---@class EventParam.ET_ABILITY_SILENT_CHANGED
---@field is_silent boolean # Whether to disable

--The silent state of the skill changes
event.ET_ABILITY_SILENT_CHANGED = {
    [1] = {
        name = "__is_silent",
        type = "boolean",
        lua_name = "is_silent",
        lua_type = "boolean",
        desc = "Whether to disable",
        lua_desc = "Whether to disable",
    },
}

---@class EventParam.ET_ABILITY_ICON_CHANGED

--The skill icon has changed
event.ET_ABILITY_ICON_CHANGED = {}

---@class EventParam.ET_UNIT_NAME_CHANGE

--The name of the unit changes
event.ET_UNIT_NAME_CHANGE = {}

---@class EventParam.ET_UNIT_CHANGE_MINI_MAP_ICON

--The unit minimap icon has changed
event.ET_UNIT_CHANGE_MINI_MAP_ICON = {}

---@class EventParam.ET_UNIT_IS_MINI_MAP_SHOW_CHANGED

--The minimap of the unit shows that the status has changed
event.ET_UNIT_IS_MINI_MAP_SHOW_CHANGED = {}

---@class EventParam.ET_UNIT_ICON_CHANGE
---@field unit Unit # No description

--The unit profile picture icon has changed
event.ET_UNIT_ICON_CHANGE = {
    [1] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
    },
}

---@class EventParam.ET_ROLE_UNIT_CHANGE
---@field unit Unit # No description

--The unit in the camp changes
event.ET_ROLE_UNIT_CHANGE = {
    [1] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
    },
}

---@class EventParam.ET_ROLE_UNIT_TAG_CHANGE
---@field unit Unit # No description

--The unit label in the camp changes
event.ET_ROLE_UNIT_TAG_CHANGE = {
    [1] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
    },
}

---@class EventParam.ET_UNIT_ENTER_MOVER_STATE
---@field unit Unit # No description

--Unit enters motor state
event.ET_UNIT_ENTER_MOVER_STATE = {
    [1] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
    },
}

---@class EventParam.ET_UNIT_START_MOVE
---@field unit Unit # No description

--Unit start to move
event.ET_UNIT_START_MOVE = {
    [1] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
    },
}

---@class EventParam.ET_UNIT_END_MOVE
---@field unit Unit # No description

--End of unit move
event.ET_UNIT_END_MOVE = {
    [1] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
    },
}

---@class EventParam.ET_UNIT_REMOVE
---@field unit Unit # No description

--Unit Removal (ECA only)
event.ET_UNIT_REMOVE = {
    [1] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
    },
}

---@class EventParam.ET_UNIT_DELETE
---@field unit Unit # No description

--Unit deletion (object true destruction)
event.ET_UNIT_DELETE = {
    [1] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
    },
}

---@class EventParam.ET_UNIT_END_TRANSLATE
---@field unit Unit # No description

--End of unit transfer
event.ET_UNIT_END_TRANSLATE = {
    [1] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
    },
}

---@class EventParam.ET_UNIT_ATTR_CHANGE
---@field unit Unit # No description
---@field attr string # No description
---@field old_float_attr_value number # No description

--Unit attribute change
event.ET_UNIT_ATTR_CHANGE = {
    [1] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
    },
    [2] = {
        name = "__attr",
        type = "string",
        lua_name = "attr",
        lua_type = "string",
    },
    [3] = {
        name = "__old_float_attr_value",
        type = "py.Fixed",
        lua_name = "old_float_attr_value",
        lua_type = "number",
    },
}

---@class EventParam.ET_BEFORE_UNIT_DIE
---@field damage number # The amount of damage taken
---@field source_unit Unit # Units that inflict damage
---@field target_unit Unit # Units that take damage
---@field ability Ability # Skill that the current damage belongs to
---@field damage_type integer # Injury type
---@field unit Unit # No description

--Unit dying
event.ET_BEFORE_UNIT_DIE = {
    [1] = {
        name = "__damage",
        type = "py.Fixed",
        lua_name = "damage",
        lua_type = "number",
        desc = "The amount of damage taken",
        lua_desc = "The amount of damage taken",
    },
    [2] = {
        name = "__source_unit",
        type = "py.Unit",
        lua_name = "source_unit",
        lua_type = "Unit",
        desc = "Units that inflict damage",
        lua_desc = "Units that inflict damage",
    },
    [3] = {
        name = "__target_unit",
        type = "py.Unit",
        lua_name = "target_unit",
        lua_type = "Unit",
        desc = "Units that take damage",
        lua_desc = "Units that take damage",
    },
    [4] = {
        name = "__ability",
        type = "py.Ability",
        lua_name = "ability",
        lua_type = "Ability",
        desc = "Skill that the current damage belongs to",
        lua_desc = "Skill that the current damage belongs to",
    },
    [5] = {
        name = "__damage_type",
        type = "integer",
        lua_name = "damage_type",
        lua_type = "integer",
        desc = "Injury type",
        lua_desc = "Injury type",
    },
    [6] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
    },
}

---@class EventParam.ET_UNIT_DIE
---@field damage number # The amount of damage taken
---@field source_unit Unit # Units that inflict damage
---@field target_unit Unit # Units that take damage
---@field ability Ability # Skill that the current damage belongs to
---@field damage_type integer # Injury type
---@field unit Unit # No description

--Unit death
event.ET_UNIT_DIE = {
    [1] = {
        name = "__damage",
        type = "py.Fixed",
        lua_name = "damage",
        lua_type = "number",
        desc = "The amount of damage taken",
        lua_desc = "The amount of damage taken",
    },
    [2] = {
        name = "__source_unit",
        type = "py.Unit",
        lua_name = "source_unit",
        lua_type = "Unit",
        desc = "Units that inflict damage",
        lua_desc = "Units that inflict damage",
    },
    [3] = {
        name = "__target_unit",
        type = "py.Unit",
        lua_name = "target_unit",
        lua_type = "Unit",
        desc = "Units that take damage",
        lua_desc = "Units that take damage",
    },
    [4] = {
        name = "__ability",
        type = "py.Ability",
        lua_name = "ability",
        lua_type = "Ability",
        desc = "Skill that the current damage belongs to",
        lua_desc = "Skill that the current damage belongs to",
    },
    [5] = {
        name = "__damage_type",
        type = "integer",
        lua_name = "damage_type",
        lua_type = "integer",
        desc = "Injury type",
        lua_desc = "Injury type",
    },
    [6] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
    },
}

---@class EventParam.ET_UNIT_DIE_INTERNAL
---@field damage number # The amount of damage taken
---@field source_unit Unit # Units that inflict damage
---@field target_unit Unit # Units that take damage
---@field ability Ability # Skill that the current damage belongs to
---@field damage_type integer # Injury type
---@field unit Unit # No description

--Unit death (internal code only, sent before death event)
event.ET_UNIT_DIE_INTERNAL = {
    [1] = {
        name = "__damage",
        type = "py.Fixed",
        lua_name = "damage",
        lua_type = "number",
        desc = "The amount of damage taken",
        lua_desc = "The amount of damage taken",
    },
    [2] = {
        name = "__source_unit",
        type = "py.Unit",
        lua_name = "source_unit",
        lua_type = "Unit",
        desc = "Units that inflict damage",
        lua_desc = "Units that inflict damage",
    },
    [3] = {
        name = "__target_unit",
        type = "py.Unit",
        lua_name = "target_unit",
        lua_type = "Unit",
        desc = "Units that take damage",
        lua_desc = "Units that take damage",
    },
    [4] = {
        name = "__ability",
        type = "py.Ability",
        lua_name = "ability",
        lua_type = "Ability",
        desc = "Skill that the current damage belongs to",
        lua_desc = "Skill that the current damage belongs to",
    },
    [5] = {
        name = "__damage_type",
        type = "integer",
        lua_name = "damage_type",
        lua_type = "integer",
        desc = "Injury type",
        lua_desc = "Injury type",
    },
    [6] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
    },
}

---@class EventParam.ET_UNIT_ON_UNBIND_ROLE
---@field unit Unit # No description
---@field player Player # No description

--Units unbind players
event.ET_UNIT_ON_UNBIND_ROLE = {
    [1] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
    },
    [2] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
    },
}

---@class EventParam.ET_UNIT_ON_BIND_ROLE
---@field unit Unit # No description
---@field player Player # No description

--Unit bound player
event.ET_UNIT_ON_BIND_ROLE = {
    [1] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
    },
    [2] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
    },
}

---@class EventParam.ET_UNIT_BE_HURT
---@field is_normal_hit boolean # Is it a common attack?
---@field damage number # The amount of damage taken
---@field source_unit Unit # Units that inflict damage
---@field target_unit Unit # Units that take damage
---@field ability Ability # Skill that the current damage belongs to
---@field damage_type integer # Injury type
---@field unit Unit # No description
---@field damage_instance DamageInstance # Injury instance

--Units are about to be attacked
event.ET_UNIT_BE_HURT = {
    [1] = {
        name = "__is_normal_hit",
        type = "boolean",
        lua_name = "is_normal_hit",
        lua_type = "boolean",
        desc = "Is it a common attack?",
        lua_desc = "Is it a common attack?",
    },
    [2] = {
        name = "__damage",
        type = "py.Fixed",
        lua_name = "damage",
        lua_type = "number",
        desc = "The amount of damage taken",
        lua_desc = "The amount of damage taken",
    },
    [3] = {
        name = "__source_unit",
        type = "py.Unit",
        lua_name = "source_unit",
        lua_type = "Unit",
        desc = "Units that inflict damage",
        lua_desc = "Units that inflict damage",
    },
    [4] = {
        name = "__target_unit",
        type = "py.Unit",
        lua_name = "target_unit",
        lua_type = "Unit",
        desc = "Units that take damage",
        lua_desc = "Units that take damage",
    },
    [5] = {
        name = "__ability",
        type = "py.Ability",
        lua_name = "ability",
        lua_type = "Ability",
        desc = "Skill that the current damage belongs to",
        lua_desc = "Skill that the current damage belongs to",
    },
    [6] = {
        name = "__damage_type",
        type = "integer",
        lua_name = "damage_type",
        lua_type = "integer",
        desc = "Injury type",
        lua_desc = "Injury type",
    },
    [7] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
    },
    [8] = {
        name = nil,
        type = nil,
        lua_name = "damage_instance",
        lua_type = "DamageInstance",
        lua_desc = "Injury instance",
        lua_code = function (data)
            local instance = New 'DamageInstance' (data, "pre-damage")
            return instance
        end,
    },
}

---@class EventParam.ET_UNIT_HURT_OTHER
---@field is_normal_hit boolean # Is it a common attack?
---@field damage number # The amount of damage taken
---@field source_unit Unit # Units that inflict damage
---@field target_unit Unit # Units that take damage
---@field ability Ability # Skill that the current damage belongs to
---@field damage_type integer # Injury type
---@field unit Unit # No description
---@field damage_instance DamageInstance # Injury instance

--Units are about to hit other units
event.ET_UNIT_HURT_OTHER = {
    [1] = {
        name = "__is_normal_hit",
        type = "boolean",
        lua_name = "is_normal_hit",
        lua_type = "boolean",
        desc = "Is it a common attack?",
        lua_desc = "Is it a common attack?",
    },
    [2] = {
        name = "__damage",
        type = "py.Fixed",
        lua_name = "damage",
        lua_type = "number",
        desc = "The amount of damage taken",
        lua_desc = "The amount of damage taken",
    },
    [3] = {
        name = "__source_unit",
        type = "py.Unit",
        lua_name = "source_unit",
        lua_type = "Unit",
        desc = "Units that inflict damage",
        lua_desc = "Units that inflict damage",
    },
    [4] = {
        name = "__target_unit",
        type = "py.Unit",
        lua_name = "target_unit",
        lua_type = "Unit",
        desc = "Units that take damage",
        lua_desc = "Units that take damage",
    },
    [5] = {
        name = "__ability",
        type = "py.Ability",
        lua_name = "ability",
        lua_type = "Ability",
        desc = "Skill that the current damage belongs to",
        lua_desc = "Skill that the current damage belongs to",
    },
    [6] = {
        name = "__damage_type",
        type = "integer",
        lua_name = "damage_type",
        lua_type = "integer",
        desc = "Injury type",
        lua_desc = "Injury type",
    },
    [7] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
    },
    [8] = {
        name = nil,
        type = nil,
        lua_name = "damage_instance",
        lua_type = "DamageInstance",
        lua_desc = "Injury instance",
        lua_code = function (data)
            local instance = New 'DamageInstance' (data, "pre-damage")
            return instance
        end,
    },
}

---@class EventParam.ET_UNIT_BE_HURT_BEFORE_APPLY
---@field is_normal_hit boolean # Is it a common attack?
---@field damage number # The amount of damage taken
---@field source_unit Unit # Units that inflict damage
---@field target_unit Unit # Units that take damage
---@field ability Ability # Skill that the current damage belongs to
---@field damage_type integer # Injury type
---@field unit Unit # No description
---@field damage_instance DamageInstance # Injury instance

--Units are about to be attacked (after counting the bonus)
event.ET_UNIT_BE_HURT_BEFORE_APPLY = {
    [1] = {
        name = "__is_normal_hit",
        type = "boolean",
        lua_name = "is_normal_hit",
        lua_type = "boolean",
        desc = "Is it a common attack?",
        lua_desc = "Is it a common attack?",
    },
    [2] = {
        name = "__damage",
        type = "py.Fixed",
        lua_name = "damage",
        lua_type = "number",
        desc = "The amount of damage taken",
        lua_desc = "The amount of damage taken",
    },
    [3] = {
        name = "__source_unit",
        type = "py.Unit",
        lua_name = "source_unit",
        lua_type = "Unit",
        desc = "Units that inflict damage",
        lua_desc = "Units that inflict damage",
    },
    [4] = {
        name = "__target_unit",
        type = "py.Unit",
        lua_name = "target_unit",
        lua_type = "Unit",
        desc = "Units that take damage",
        lua_desc = "Units that take damage",
    },
    [5] = {
        name = "__ability",
        type = "py.Ability",
        lua_name = "ability",
        lua_type = "Ability",
        desc = "Skill that the current damage belongs to",
        lua_desc = "Skill that the current damage belongs to",
    },
    [6] = {
        name = "__damage_type",
        type = "integer",
        lua_name = "damage_type",
        lua_type = "integer",
        desc = "Injury type",
        lua_desc = "Injury type",
    },
    [7] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
    },
    [8] = {
        name = nil,
        type = nil,
        lua_name = "damage_instance",
        lua_type = "DamageInstance",
        lua_desc = "Injury instance",
        lua_code = function (data)
            local instance = New 'DamageInstance' (data, "Damage time")
            return instance
        end,
    },
}

---@class EventParam.ET_UNIT_HURT_OTHER_BEFORE_APPLY
---@field is_normal_hit boolean # Is it a common attack?
---@field damage number # The amount of damage taken
---@field source_unit Unit # Units that inflict damage
---@field target_unit Unit # Units that take damage
---@field ability Ability # Skill that the current damage belongs to
---@field damage_type integer # Injury type
---@field unit Unit # No description
---@field damage_instance DamageInstance # Injury instance

--Unit about to hit another unit (after counting bonus)
event.ET_UNIT_HURT_OTHER_BEFORE_APPLY = {
    [1] = {
        name = "__is_normal_hit",
        type = "boolean",
        lua_name = "is_normal_hit",
        lua_type = "boolean",
        desc = "Is it a common attack?",
        lua_desc = "Is it a common attack?",
    },
    [2] = {
        name = "__damage",
        type = "py.Fixed",
        lua_name = "damage",
        lua_type = "number",
        desc = "The amount of damage taken",
        lua_desc = "The amount of damage taken",
    },
    [3] = {
        name = "__source_unit",
        type = "py.Unit",
        lua_name = "source_unit",
        lua_type = "Unit",
        desc = "Units that inflict damage",
        lua_desc = "Units that inflict damage",
    },
    [4] = {
        name = "__target_unit",
        type = "py.Unit",
        lua_name = "target_unit",
        lua_type = "Unit",
        desc = "Units that take damage",
        lua_desc = "Units that take damage",
    },
    [5] = {
        name = "__ability",
        type = "py.Ability",
        lua_name = "ability",
        lua_type = "Ability",
        desc = "Skill that the current damage belongs to",
        lua_desc = "Skill that the current damage belongs to",
    },
    [6] = {
        name = "__damage_type",
        type = "integer",
        lua_name = "damage_type",
        lua_type = "integer",
        desc = "Injury type",
        lua_desc = "Injury type",
    },
    [7] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
    },
    [8] = {
        name = nil,
        type = nil,
        lua_name = "damage_instance",
        lua_type = "DamageInstance",
        lua_desc = "Injury instance",
        lua_code = function (data)
            local instance = New 'DamageInstance' (data, "Damage time")
            return instance
        end,
    },
}

---@class EventParam.ET_UNIT_HURT_OTHER_FINISH
---@field is_critical_hit boolean # Critical strike or not
---@field is_normal_hit boolean # Is it a common attack?
---@field damage number # The amount of damage taken
---@field source_unit Unit # Units that inflict damage
---@field target_unit Unit # Units that take damage
---@field ability Ability # Skill that the current damage belongs to
---@field damage_type integer # Injury type
---@field unit Unit # No description
---@field damage_instance DamageInstance # Injury instance

--Units actually deal damage to other units
event.ET_UNIT_HURT_OTHER_FINISH = {
    [1] = {
        name = "__is_critical_hit",
        type = "boolean",
        lua_name = "is_critical_hit",
        lua_type = "boolean",
        desc = "Critical strike or not",
        lua_desc = "Critical strike or not",
    },
    [2] = {
        name = "__is_normal_hit",
        type = "boolean",
        lua_name = "is_normal_hit",
        lua_type = "boolean",
        desc = "Is it a common attack?",
        lua_desc = "Is it a common attack?",
    },
    [3] = {
        name = "__damage",
        type = "py.Fixed",
        lua_name = "damage",
        lua_type = "number",
        desc = "The amount of damage taken",
        lua_desc = "The amount of damage taken",
    },
    [4] = {
        name = "__source_unit",
        type = "py.Unit",
        lua_name = "source_unit",
        lua_type = "Unit",
        desc = "Units that inflict damage",
        lua_desc = "Units that inflict damage",
    },
    [5] = {
        name = "__target_unit",
        type = "py.Unit",
        lua_name = "target_unit",
        lua_type = "Unit",
        desc = "Units that take damage",
        lua_desc = "Units that take damage",
    },
    [6] = {
        name = "__ability",
        type = "py.Ability",
        lua_name = "ability",
        lua_type = "Ability",
        desc = "Skill that the current damage belongs to",
        lua_desc = "Skill that the current damage belongs to",
    },
    [7] = {
        name = "__damage_type",
        type = "integer",
        lua_name = "damage_type",
        lua_type = "integer",
        desc = "Injury type",
        lua_desc = "Injury type",
    },
    [8] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
    },
    [9] = {
        name = nil,
        type = nil,
        lua_name = "damage_instance",
        lua_type = "DamageInstance",
        lua_desc = "Injury instance",
        lua_code = function (data)
            local instance = New 'DamageInstance' (data, "After damage")
            return instance
        end,
    },
}

---@class EventParam.ET_UNIT_BE_HURT_COMPLETE
---@field is_critical_hit boolean # Critical strike or not
---@field is_normal_hit boolean # Is it a common attack?
---@field damage number # The amount of damage taken
---@field source_unit Unit # Units that inflict damage
---@field target_unit Unit # Units that take damage
---@field ability Ability # Skill that the current damage belongs to
---@field damage_type integer # Injury type
---@field unit Unit # No description
---@field damage_instance DamageInstance # Injury instance

--Units actually take damage
event.ET_UNIT_BE_HURT_COMPLETE = {
    [1] = {
        name = "__is_critical_hit",
        type = "py.Fixed",
        lua_name = "is_critical_hit",
        lua_type = "boolean",
        desc = "Critical strike or not",
        lua_desc = "Critical strike or not",
    },
    [2] = {
        name = "__is_normal_hit",
        type = "boolean",
        lua_name = "is_normal_hit",
        lua_type = "boolean",
        desc = "Is it a common attack?",
        lua_desc = "Is it a common attack?",
    },
    [3] = {
        name = "__damage",
        type = "py.Fixed",
        lua_name = "damage",
        lua_type = "number",
        desc = "The amount of damage taken",
        lua_desc = "The amount of damage taken",
    },
    [4] = {
        name = "__source_unit",
        type = "py.Unit",
        lua_name = "source_unit",
        lua_type = "Unit",
        desc = "Units that inflict damage",
        lua_desc = "Units that inflict damage",
    },
    [5] = {
        name = "__target_unit",
        type = "py.Unit",
        lua_name = "target_unit",
        lua_type = "Unit",
        desc = "Units that take damage",
        lua_desc = "Units that take damage",
    },
    [6] = {
        name = "__ability",
        type = "py.Ability",
        lua_name = "ability",
        lua_type = "Ability",
        desc = "Skill that the current damage belongs to",
        lua_desc = "Skill that the current damage belongs to",
    },
    [7] = {
        name = "__damage_type",
        type = "integer",
        lua_name = "damage_type",
        lua_type = "integer",
        desc = "Injury type",
        lua_desc = "Injury type",
    },
    [8] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
    },
    [9] = {
        name = nil,
        type = nil,
        lua_name = "damage_instance",
        lua_type = "DamageInstance",
        lua_desc = "Injury instance",
        lua_code = function (data)
            local instance = New 'DamageInstance' (data, "After damage")
            return instance
        end,
    },
}

---@class EventParam.ET_UNIT_GET_CURE_BEFORE_APPLY
---@field cured_value number # The value of treatment received
---@field ability Ability # Current healing skills
---@field heal_instance HealInstance # Treatment instance

--The unit is about to be treated
event.ET_UNIT_GET_CURE_BEFORE_APPLY = {
    [1] = {
        name = "__cured_value",
        type = "py.Fixed",
        lua_name = "cured_value",
        lua_type = "number",
        desc = "The value of treatment received",
        lua_desc = "The value of treatment received",
    },
    [2] = {
        name = "__ability",
        type = "py.Ability",
        lua_name = "ability",
        lua_type = "Ability",
        desc = "Current healing skills",
        lua_desc = "Current healing skills",
    },
    [3] = {
        name = nil,
        type = nil,
        lua_name = "heal_instance",
        lua_type = "HealInstance",
        lua_desc = "Treatment instance",
        lua_code = function (data)
            local instance = New 'HealInstance' (data, "pre-treatment")
            return instance
        end,
    },
}

---@class EventParam.ET_UNIT_GET_CURE_FINISH
---@field cured_value number # The value of treatment received
---@field ability Ability # Current healing skills

--Unit receives treatment end
event.ET_UNIT_GET_CURE_FINISH = {
    [1] = {
        name = "__cured_value",
        type = "py.Fixed",
        lua_name = "cured_value",
        lua_type = "number",
        desc = "The value of treatment received",
        lua_desc = "The value of treatment received",
    },
    [2] = {
        name = "__ability",
        type = "py.Ability",
        lua_name = "ability",
        lua_type = "Ability",
        desc = "Current healing skills",
        lua_desc = "Current healing skills",
    },
}

---@class EventParam.ET_UNIT_GET_CURE
---@field cured_value number # The value of treatment received
---@field ability Ability # Current healing skills
---@field heal_instance HealInstance # Treatment instance

--Unit under treatment
event.ET_UNIT_GET_CURE = {
    [1] = {
        name = "__cured_value",
        type = "py.Fixed",
        lua_name = "cured_value",
        lua_type = "number",
        desc = "The value of treatment received",
        lua_desc = "The value of treatment received",
    },
    [2] = {
        name = "__ability",
        type = "py.Ability",
        lua_name = "ability",
        lua_type = "Ability",
        desc = "Current healing skills",
        lua_desc = "Current healing skills",
    },
    [3] = {
        name = nil,
        type = nil,
        lua_name = "heal_instance",
        lua_type = "HealInstance",
        lua_desc = "Treatment instance",
        lua_code = function (data)
            local instance = New 'HealInstance' (data, "During treatment")
            return instance
        end,
    },
}

---@class EventParam.ET_UNIT_ANIM_STATE_ENTER
---@field unit Unit # unit
---@field last_asm_state py.CcAsmState # Previous animator status
---@field cur_asm_state py.CcAsmState # Current animator status
---@field asm_node_name string # Node name
---@field asm_node_id integer # Node ID

--The unit animation state machine enters the state
event.ET_UNIT_ANIM_STATE_ENTER = {
    [1] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "unit",
        lua_desc = "unit",
    },
    [2] = {
        name = "__last_asm_state",
        type = "py.CcAsmState",
        lua_name = "last_asm_state",
        lua_type = "py.CcAsmState",
        desc = "Previous animator status",
        lua_desc = "Previous animator status",
    },
    [3] = {
        name = "__cur_asm_state",
        type = "py.CcAsmState",
        lua_name = "cur_asm_state",
        lua_type = "py.CcAsmState",
        desc = "Current animator status",
        lua_desc = "Current animator status",
    },
    [4] = {
        name = "__asm_node_name",
        type = "string",
        lua_name = "asm_node_name",
        lua_type = "string",
        desc = "Node name",
        lua_desc = "Node name",
    },
    [5] = {
        name = "__asm_node_id",
        type = "integer",
        lua_name = "asm_node_id",
        lua_type = "integer",
        desc = "Node ID",
        lua_desc = "Node ID",
    },
}

---@class EventParam.ET_UNIT_ANIM_STATE_EXIT
---@field unit Unit # unit
---@field cur_asm_state py.CcAsmState # Current animator status
---@field asm_node_name string # Node name
---@field asm_node_id integer # Node ID

--Unit animation state machine exit state
event.ET_UNIT_ANIM_STATE_EXIT = {
    [1] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "unit",
        lua_desc = "unit",
    },
    [2] = {
        name = "__cur_asm_state",
        type = "py.CcAsmState",
        lua_name = "cur_asm_state",
        lua_type = "py.CcAsmState",
        desc = "Current animator status",
        lua_desc = "Current animator status",
    },
    [3] = {
        name = "__asm_node_name",
        type = "string",
        lua_name = "asm_node_name",
        lua_type = "string",
        desc = "Node name",
        lua_desc = "Node name",
    },
    [4] = {
        name = "__asm_node_id",
        type = "integer",
        lua_name = "asm_node_id",
        lua_type = "integer",
        desc = "Node ID",
        lua_desc = "Node ID",
    },
}

---@class EventParam.ET_RES_ICON_CHANGED
---@field res_key py.RoleResKey # ASSETS
---@field icon_id integer # ICON ID

--Modify the player properties icon
event.ET_RES_ICON_CHANGED = {
    [1] = {
        name = "__res_key",
        type = "py.RoleResKey",
        lua_name = "res_key",
        lua_type = "py.RoleResKey",
        desc = "ASSETS",
        lua_desc = "ASSETS",
    },
    [2] = {
        name = "__icon_id",
        type = "integer",
        lua_name = "icon_id",
        lua_type = "integer",
        desc = "ICON ID",
        lua_desc = "ICON ID",
    },
}

---@class EventParam.ET_UNIT_RELEASE_ABILITY
---@field ability Ability # Cast skill object
---@field unit Unit # The unit that triggers the event unit_
---@field ability_target_unit Unit # Target unit of skill

--Unit cast skill event
event.ET_UNIT_RELEASE_ABILITY = {
    [1] = {
        name = "__ability",
        type = "py.Ability",
        lua_name = "ability",
        lua_type = "Ability",
        desc = "Cast skill object",
        lua_desc = "Cast skill object",
    },
    [2] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "unit_id Indicates the unit that triggered the event",
        lua_desc = "The unit that triggers the event unit_",
    },
    [3] = {
        name = "__ability_target_unit_id",
        type = "py.UnitID",
        lua_name = "ability_target_unit",
        lua_type = "Unit",
        desc = "The target unit ID of the skill",
        lua_desc = "Target unit of skill",
    },
}

---@class EventParam.ET_UNIT_RELEASE_ABILITY_START
---@field ability Ability # Cast skill object
---@field unit Unit # The unit that triggers the event unit_

--Unit cast ability start event
event.ET_UNIT_RELEASE_ABILITY_START = {
    [1] = {
        name = "__ability",
        type = "py.Ability",
        lua_name = "ability",
        lua_type = "Ability",
        desc = "Cast skill object",
        lua_desc = "Cast skill object",
    },
    [2] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "unit_id Indicates the unit that triggered the event",
        lua_desc = "The unit that triggers the event unit_",
    },
}

---@class EventParam.ET_UNIT_RELEASE_ABILITY_END
---@field ability Ability # Cast skill object
---@field unit Unit # The unit that triggers the event unit_

--Unit cast skill end event
event.ET_UNIT_RELEASE_ABILITY_END = {
    [1] = {
        name = "__ability",
        type = "py.Ability",
        lua_name = "ability",
        lua_type = "Ability",
        desc = "Cast skill object",
        lua_desc = "Cast skill object",
    },
    [2] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "unit_id Indicates the unit that triggered the event",
        lua_desc = "The unit that triggers the event unit_",
    },
}

---@class EventParam.ET_UNIT_RELEASE_MAGIC_BOOK
---@field ability Ability # Cast skill object
---@field unit Unit # The unit that triggers the event unit_

--Unit cast skill event
event.ET_UNIT_RELEASE_MAGIC_BOOK = {
    [1] = {
        name = "__ability",
        type = "py.Ability",
        lua_name = "ability",
        lua_type = "Ability",
        desc = "Cast skill object",
        lua_desc = "Cast skill object",
    },
    [2] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "unit_id Indicates the unit that triggered the event",
        lua_desc = "The unit that triggers the event unit_",
    },
}

---@class EventParam.ET_UNIT_LEVEL_CHANGE

--Unit skill change event
event.ET_UNIT_LEVEL_CHANGE = {}

---@class EventParam.ET_UNIT_EXP_CHANGE

--Unit experience changes events
event.ET_UNIT_EXP_CHANGE = {}

---@class EventParam.ET_UNIT_PRE_ADD_EXP
---@field unit Unit # Gain experience in the unit
---@field add_exp number # Added experience
---@field set_exp fun(exp: number) # Revision experience

--Units are about to gain experience
event.ET_UNIT_PRE_ADD_EXP = {
    [1] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Gain experience in the unit",
        lua_desc = "Gain experience in the unit",
    },
    [2] = {
        name = "__add_exp",
        type = "number",
        lua_name = "add_exp",
        lua_type = "number",
        desc = "Added experience",
        lua_desc = "Added experience",
    },
    [3] = {
        name = nil,
        type = nil,
        lua_name = "set_exp",
        lua_type = "fun(exp: number)",
        lua_desc = "Revision experience",
        lua_code = function (data)
            return function (new_exp)
                data.unit.handle:api_set_changed_exp_in_event(new_exp)
            end
        end,
    },
}

---@class EventParam.ET_UNIT_ON_ADD_EXP
---@field unit Unit # Gain experience in the unit
---@field add_exp number # Added experience

--Unit gain experience
event.ET_UNIT_ON_ADD_EXP = {
    [1] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Gain experience in the unit",
        lua_desc = "Gain experience in the unit",
    },
    [2] = {
        name = "__add_exp",
        type = "number",
        lua_name = "add_exp",
        lua_type = "number",
        desc = "Added experience",
        lua_desc = "Added experience",
    },
}

---@class EventParam.ET_UNIT_ON_COMMAND
---@field unit Unit # unit
---@field cmd_type py.UnitCommand # Received command
---@field target_unit Unit # Target unit
---@field point Point # Target point
---@field destructible Destructible # Target destructible
---@field item Item # Target item
---@field ability Ability # Released skills

--Unit receive command
event.ET_UNIT_ON_COMMAND = {
    [1] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "unit",
        lua_desc = "unit",
    },
    [2] = {
        name = "__cmd_type",
        type = "py.UnitCommand",
        lua_name = "cmd_type",
        lua_type = "py.UnitCommand",
        desc = "Received command",
        lua_desc = "Received command",
    },
    [3] = {
        name = "__target_unit",
        type = "py.Unit",
        lua_name = "target_unit",
        lua_type = "Unit",
        desc = "Target unit",
        lua_desc = "Target unit",
    },
    [4] = {
        name = "__point",
        type = "py.Point",
        lua_name = "point",
        lua_type = "Point",
        desc = "Target point",
        lua_desc = "Target point",
    },
    [5] = {
        name = "__destructible_id",
        type = "py.DestructibleID",
        lua_name = "destructible",
        lua_type = "Destructible",
        desc = "Target destructible ID",
        lua_desc = "Target destructible",
    },
    [6] = {
        name = "__item_id",
        type = "py.ItemID",
        lua_name = "item",
        lua_type = "Item",
        desc = "Object ID",
        lua_desc = "Target item",
    },
    [7] = {
        name = "__ability",
        type = "py.Ability",
        lua_name = "ability",
        lua_type = "Ability",
        desc = "Released skills",
        lua_desc = "Released skills",
    },
}

---@class EventParam.ET_KILL_UNIT
---@field damage number # Damage
---@field source_unit Unit # Killer unit
---@field target_unit Unit # Death unit
---@field ability Ability # The ability to do fatal damage
---@field damage_type integer # Fatal injury type
---@field unit Unit # No description

--Units kill other units
event.ET_KILL_UNIT = {
    [1] = {
        name = "__damage",
        type = "py.Fixed",
        lua_name = "damage",
        lua_type = "number",
        desc = "Damage",
        lua_desc = "Damage",
    },
    [2] = {
        name = "__source_unit",
        type = "py.Unit",
        lua_name = "source_unit",
        lua_type = "Unit",
        desc = "Killer unit",
        lua_desc = "Killer unit",
    },
    [3] = {
        name = "__target_unit",
        type = "py.Unit",
        lua_name = "target_unit",
        lua_type = "Unit",
        desc = "Death unit",
        lua_desc = "Death unit",
    },
    [4] = {
        name = "__ability",
        type = "py.Ability",
        lua_name = "ability",
        lua_type = "Ability",
        desc = "The ability to do fatal damage",
        lua_desc = "The ability to do fatal damage",
    },
    [5] = {
        name = "__damage_type",
        type = "integer",
        lua_name = "damage_type",
        lua_type = "integer",
        desc = "Fatal injury type",
        lua_desc = "Fatal injury type",
    },
    [6] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
    },
}

---@class EventParam.ET_UNIT_BORN
---@field unit Unit # No description
---@field lua_table py.Table # User-defined configuration table

--Unit birth
event.ET_UNIT_BORN = {
    [1] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
    },
    [2] = {
        name = "__lua_table",
        type = "py.Table",
        lua_name = "lua_table",
        lua_type = "py.Table",
        desc = "User-defined configuration table",
        lua_desc = "User-defined configuration table",
    },
}

---@class EventParam.ET_UNIT_ENTER_BATTLE
---@field unit Unit # unit

--Units are in combat mode
event.ET_UNIT_ENTER_BATTLE = {
    [1] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Unit id",
        lua_desc = "unit",
    },
}

---@class EventParam.ET_UNIT_EXIT_BATTLE
---@field unit Unit # unit

--Unit out of combat
event.ET_UNIT_EXIT_BATTLE = {
    [1] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Unit id",
        lua_desc = "unit",
    },
}

---@class EventParam.ET_UNIT_CREATE_SLAVE
---@field unit Unit # henchman

--Unit creation minions
event.ET_UNIT_CREATE_SLAVE = {
    [1] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Servant id",
        lua_desc = "henchman",
    },
}

---@class EventParam.UNIT_ANIMATION_FINISHED_EVENT

--Unit animation finished playing
event.UNIT_ANIMATION_FINISHED_EVENT = {}

---@class EventParam.ET_UNIT_TRY_PICK_ITEM
---@field unit Unit # unit
---@field equip_slot_type py.SlotType # Backpack type

--Unit about to pick up item
event.ET_UNIT_TRY_PICK_ITEM = {
    [1] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Unit id",
        lua_desc = "unit",
    },
    [2] = {
        name = "__equip_slot_type",
        type = "py.SlotType",
        lua_name = "equip_slot_type",
        lua_type = "py.SlotType",
        desc = "Backpack type",
        lua_desc = "Backpack type",
    },
}

---@class EventParam.ET_UNIT_TRY_PICK_ITEM_NEW
---@field unit Unit # unit
---@field equip_slot_type py.SlotType # Backpack type
---@field item Item # Target item

--Unit about to pick up item
event.ET_UNIT_TRY_PICK_ITEM_NEW = {
    [1] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Unit id",
        lua_desc = "unit",
    },
    [2] = {
        name = "__equip_slot_type",
        type = "py.SlotType",
        lua_name = "equip_slot_type",
        lua_type = "py.SlotType",
        desc = "Backpack type",
        lua_desc = "Backpack type",
    },
    [3] = {
        name = "__item_id",
        type = "py.ItemID",
        lua_name = "item",
        lua_type = "Item",
        desc = "Object ID",
        lua_desc = "Target item",
    },
}

---@class EventParam.ET_UNIT_LOAD_DEFAULT_AI

--Default behavior of unit switching
event.ET_UNIT_LOAD_DEFAULT_AI = {}

---@class EventParam.ET_UNIT_TRY_ACQUIRE_TARGET
---@field unit Unit # unit

--The unit is about to attempt to capture the enemy
event.ET_UNIT_TRY_ACQUIRE_TARGET = {
    [1] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Unit id",
        lua_desc = "unit",
    },
}

---@class EventParam.ET_UNIT_ACQUIRED_TARGET
---@field unit Unit # unit
---@field target_unit Unit # Target unit

--Unit discovery target
event.ET_UNIT_ACQUIRED_TARGET = {
    [1] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Unit id",
        lua_desc = "unit",
    },
    [2] = {
        name = "__target_unit",
        type = "py.Unit",
        lua_name = "target_unit",
        lua_type = "Unit",
        desc = "Target unit",
        lua_desc = "Target unit",
    },
}

---@class EventParam.ET_ABILITY_CAST_PARALLEL
---@field ability Ability # Skill object

--Skill concurrency
event.ET_ABILITY_CAST_PARALLEL = {
    [1] = {
        name = "__ability",
        type = "py.Ability",
        lua_name = "ability",
        lua_type = "Ability",
        desc = "Skill object",
        lua_desc = "Skill object",
    },
}

---@class EventParam.ET_HITBOX_CONTACT
---@field source_unit Unit # Attack unit
---@field target_unit Unit # Target unit
---@field hitbox_name string # Attack box
---@field target_hitbox_name string # Hit box
---@field collision_pos py.FPoint # Impact point
---@field collision_normal py.FPoint # Collision normal vector

--Strike box collides
event.ET_HITBOX_CONTACT = {
    [1] = {
        name = "__source_unit",
        type = "py.Unit",
        lua_name = "source_unit",
        lua_type = "Unit",
        desc = "Attack unit",
        lua_desc = "Attack unit",
    },
    [2] = {
        name = "__target_unit",
        type = "py.Unit",
        lua_name = "target_unit",
        lua_type = "Unit",
        desc = "Target unit",
        lua_desc = "Target unit",
    },
    [3] = {
        name = "__hitbox_name",
        type = "string",
        lua_name = "hitbox_name",
        lua_type = "string",
        desc = "Attack box",
        lua_desc = "Attack box",
    },
    [4] = {
        name = "__target_hitbox_name",
        type = "string",
        lua_name = "target_hitbox_name",
        lua_type = "string",
        desc = "Hit box",
        lua_desc = "Hit box",
    },
    [5] = {
        name = "__collision_pos",
        type = "py.FPoint",
        lua_name = "collision_pos",
        lua_type = "py.FPoint",
        desc = "Impact point",
        lua_desc = "Impact point",
    },
    [6] = {
        name = "__collision_normal",
        type = "py.FPoint",
        lua_name = "collision_normal",
        lua_type = "py.FPoint",
        desc = "Collision normal vector",
        lua_desc = "Collision normal vector",
    },
}

---@class EventParam.ET_RECEIVE_HITBOX_CONTACT
---@field source_unit Unit # Attack unit
---@field target_unit Unit # Target unit
---@field ability Ability # Skill object
---@field hitbox_name string # Attack box
---@field target_hitbox_name string # Hit box
---@field collision_pos py.FPoint # Impact point
---@field collision_normal py.FPoint # Collision normal vector

--Hit box collision event
event.ET_RECEIVE_HITBOX_CONTACT = {
    [1] = {
        name = "__source_unit",
        type = "py.Unit",
        lua_name = "source_unit",
        lua_type = "Unit",
        desc = "Attack unit",
        lua_desc = "Attack unit",
    },
    [2] = {
        name = "__target_unit",
        type = "py.Unit",
        lua_name = "target_unit",
        lua_type = "Unit",
        desc = "Target unit",
        lua_desc = "Target unit",
    },
    [3] = {
        name = "__ability",
        type = "py.Ability",
        lua_name = "ability",
        lua_type = "Ability",
        desc = "Skill object",
        lua_desc = "Skill object",
    },
    [4] = {
        name = "__hitbox_name",
        type = "string",
        lua_name = "hitbox_name",
        lua_type = "string",
        desc = "Attack box",
        lua_desc = "Attack box",
    },
    [5] = {
        name = "__target_hitbox_name",
        type = "string",
        lua_name = "target_hitbox_name",
        lua_type = "string",
        desc = "Hit box",
        lua_desc = "Hit box",
    },
    [6] = {
        name = "__collision_pos",
        type = "py.FPoint",
        lua_name = "collision_pos",
        lua_type = "py.FPoint",
        desc = "Impact point",
        lua_desc = "Impact point",
    },
    [7] = {
        name = "__collision_normal",
        type = "py.FPoint",
        lua_name = "collision_normal",
        lua_type = "py.FPoint",
        desc = "Collision normal vector",
        lua_desc = "Collision normal vector",
    },
}

---@class EventParam.ET_HITBOX_STAY
---@field unit Unit # unit
---@field target_unit Unit # Target unit
---@field hitbox_id integer # Punch box id
---@field target_hitbox_id integer # Target strike box id

--Strike box stay
event.ET_HITBOX_STAY = {
    [1] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Unit id",
        lua_desc = "unit",
    },
    [2] = {
        name = "__target_unit_id",
        type = "py.UnitID",
        lua_name = "target_unit",
        lua_type = "Unit",
        desc = "Target unit id",
        lua_desc = "Target unit",
    },
    [3] = {
        name = "__hitbox_id",
        type = "integer",
        lua_name = "hitbox_id",
        lua_type = "integer",
        desc = "Punch box id",
        lua_desc = "Punch box id",
    },
    [4] = {
        name = "__target_hitbox_id",
        type = "integer",
        lua_name = "target_hitbox_id",
        lua_type = "integer",
        desc = "Target strike box id",
        lua_desc = "Target strike box id",
    },
}

---@class EventParam.ET_HITBOX_EXIT
---@field unit Unit # unit
---@field target_unit Unit # Target unit
---@field hitbox_id integer # Punch box id
---@field target_hitbox_id integer # Target strike box id

--Strike box away
event.ET_HITBOX_EXIT = {
    [1] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Unit id",
        lua_desc = "unit",
    },
    [2] = {
        name = "__target_unit_id",
        type = "py.UnitID",
        lua_name = "target_unit",
        lua_type = "Unit",
        desc = "Target unit id",
        lua_desc = "Target unit",
    },
    [3] = {
        name = "__hitbox_id",
        type = "integer",
        lua_name = "hitbox_id",
        lua_type = "integer",
        desc = "Punch box id",
        lua_desc = "Punch box id",
    },
    [4] = {
        name = "__target_hitbox_id",
        type = "integer",
        lua_name = "target_hitbox_id",
        lua_type = "integer",
        desc = "Target strike box id",
        lua_desc = "Target strike box id",
    },
}

---@class EventParam.ET_DETECT_BONE_COLLISON
---@field source_unit Unit # No description
---@field target_unit Unit # No description
---@field src_bone string # No description
---@field target_bone string # No description
---@field hitPos Point # No description
---@field hitNormal Point # No description

--Detect an inverted collision in which bones collide
event.ET_DETECT_BONE_COLLISON = {
    [1] = {
        name = "__source_unit",
        type = "py.Unit",
        lua_name = "source_unit",
        lua_type = "Unit",
    },
    [2] = {
        name = "__target_unit",
        type = "py.Unit",
        lua_name = "target_unit",
        lua_type = "Unit",
    },
    [3] = {
        name = "__src_bone",
        type = "string",
        lua_name = "src_bone",
        lua_type = "string",
    },
    [4] = {
        name = "__target_bone",
        type = "string",
        lua_name = "target_bone",
        lua_type = "string",
    },
    [5] = {
        name = "__hitPos",
        type = "py.Vector3",
        lua_name = "hitPos",
        lua_type = "Point",
    },
    [6] = {
        name = "__hitNormal",
        type = "py.Vector3",
        lua_name = "hitNormal",
        lua_type = "Point",
    },
}

---@class EventParam.ET_ITEM_ATTACHED_ATTR_CHANGED
---@field item Item # No description
---@field attr_key string # No description
---@field delta number # No description

--Item attached attributes change
event.ET_ITEM_ATTACHED_ATTR_CHANGED = {
    [1] = {
        name = "__item_id",
        type = "py.ItemID",
        lua_name = "item",
        lua_type = "Item",
    },
    [2] = {
        name = "__attr_key",
        type = "string",
        lua_name = "attr_key",
        lua_type = "string",
    },
    [3] = {
        name = "__delta",
        type = "py.Fixed",
        lua_name = "delta",
        lua_type = "number",
    },
}

---@class EventParam.ET_UNIT_SHOP_BUY_ITEM
---@field unit Unit # Purchasing unit
---@field shop_unit Unit # Shop unit
---@field tab_idx integer # Shop paging
---@field cnt integer # Commodity quantity
---@field item Item # commodity

--Commodity purchase
event.ET_UNIT_SHOP_BUY_ITEM = {
    [1] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Purchase item unit id",
        lua_desc = "Purchasing unit",
    },
    [2] = {
        name = "__shop_unit_id",
        type = "py.UnitID",
        lua_name = "shop_unit",
        lua_type = "Unit",
        desc = "Shop unit id",
        lua_desc = "Shop unit",
    },
    [3] = {
        name = "__tab_idx",
        type = "integer",
        lua_name = "tab_idx",
        lua_type = "integer",
        desc = "Shop paging",
        lua_desc = "Shop paging",
    },
    [4] = {
        name = "__cnt",
        type = "integer",
        lua_name = "cnt",
        lua_type = "integer",
        desc = "Commodity quantity",
        lua_desc = "Commodity quantity",
    },
    [5] = {
        name = "__item_id",
        type = "py.ItemID",
        lua_name = "item",
        lua_type = "Item",
        desc = "Item id",
        lua_desc = "commodity",
    },
}

---@class EventParam.ET_UNIT_SHOP_BUY_UNIT
---@field unit Unit # Purchasing unit
---@field shop_unit Unit # Shop unit
---@field tab_idx integer # Shop paging
---@field cnt integer # Commodity quantity
---@field unit_stuff Unit # Commodity unit

--Commodity purchase
event.ET_UNIT_SHOP_BUY_UNIT = {
    [1] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Purchase item unit id",
        lua_desc = "Purchasing unit",
    },
    [2] = {
        name = "__shop_unit_id",
        type = "py.UnitID",
        lua_name = "shop_unit",
        lua_type = "Unit",
        desc = "Shop unit id",
        lua_desc = "Shop unit",
    },
    [3] = {
        name = "__tab_idx",
        type = "integer",
        lua_name = "tab_idx",
        lua_type = "integer",
        desc = "Shop paging",
        lua_desc = "Shop paging",
    },
    [4] = {
        name = "__cnt",
        type = "integer",
        lua_name = "cnt",
        lua_type = "integer",
        desc = "Commodity quantity",
        lua_desc = "Commodity quantity",
    },
    [5] = {
        name = "__unit_stuff_id",
        type = "py.UnitID",
        lua_name = "unit_stuff",
        lua_type = "Unit",
        desc = "Commodity unit id",
        lua_desc = "Commodity unit",
    },
}

---@class EventParam.ET_UNIT_ITEM_SELL
---@field unit Unit # Purchasing unit
---@field shop_unit Unit # Shop unit
---@field item Item # property

--Prop sale
event.ET_UNIT_ITEM_SELL = {
    [1] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Purchase item unit id",
        lua_desc = "Purchasing unit",
    },
    [2] = {
        name = "__shop_unit_id",
        type = "py.UnitID",
        lua_name = "shop_unit",
        lua_type = "Unit",
        desc = "Shop unit id",
        lua_desc = "Shop unit",
    },
    [3] = {
        name = "__item_id",
        type = "py.ItemID",
        lua_name = "item",
        lua_type = "Item",
        desc = "Item id",
        lua_desc = "property",
    },
}

---@class EventParam.ET_SHOP_ITEM_CHANGED
---@field shop_unit Unit # Shop unit
---@field tab_idx integer # Shop paging
---@field shop_key string # Product id
---@field curr_stock integer # Current stock

--Store merchandise change
event.ET_SHOP_ITEM_CHANGED = {
    [1] = {
        name = "__shop_unit_id",
        type = "py.UnitID",
        lua_name = "shop_unit",
        lua_type = "Unit",
        desc = "Shop unit id",
        lua_desc = "Shop unit",
    },
    [2] = {
        name = "__tab_idx",
        type = "integer",
        lua_name = "tab_idx",
        lua_type = "integer",
        desc = "Shop paging",
        lua_desc = "Shop paging",
    },
    [3] = {
        name = "__shop_key",
        type = "string",
        lua_name = "shop_key",
        lua_type = "string",
        desc = "Product id",
        lua_desc = "Product id",
    },
    [4] = {
        name = "__curr_stock",
        type = "integer",
        lua_name = "curr_stock",
        lua_type = "integer",
        desc = "Current stock",
        lua_desc = "Current stock",
    },
}

---@class EventParam.ET_SHOP_STOCK_CHANGED
---@field shop_unit Unit # Shop unit
---@field tab_idx integer # Shop paging
---@field shop_key string # Product id
---@field curr_stock integer # Current stock

--Change in commodity inventory
event.ET_SHOP_STOCK_CHANGED = {
    [1] = {
        name = "__shop_unit_id",
        type = "py.UnitID",
        lua_name = "shop_unit",
        lua_type = "Unit",
        desc = "Shop unit id",
        lua_desc = "Shop unit",
    },
    [2] = {
        name = "__tab_idx",
        type = "integer",
        lua_name = "tab_idx",
        lua_type = "integer",
        desc = "Shop paging",
        lua_desc = "Shop paging",
    },
    [3] = {
        name = "__shop_key",
        type = "string",
        lua_name = "shop_key",
        lua_type = "string",
        desc = "Product id",
        lua_desc = "Product id",
    },
    [4] = {
        name = "__curr_stock",
        type = "integer",
        lua_name = "curr_stock",
        lua_type = "integer",
        desc = "Current stock",
        lua_desc = "Current stock",
    },
}

---@class EventParam.ET_SHOP_RES_COST_CHANGED
---@field shop_unit Unit # Shop unit
---@field tab_idx integer # Shop paging
---@field shop_key string # Product id
---@field res_type py.RoleResKey # Resource number
---@field res_cost integer # Current selling price

--Price change
event.ET_SHOP_RES_COST_CHANGED = {
    [1] = {
        name = "__shop_unit_id",
        type = "py.UnitID",
        lua_name = "shop_unit",
        lua_type = "Unit",
        desc = "Shop unit id",
        lua_desc = "Shop unit",
    },
    [2] = {
        name = "__tab_idx",
        type = "integer",
        lua_name = "tab_idx",
        lua_type = "integer",
        desc = "Shop paging",
        lua_desc = "Shop paging",
    },
    [3] = {
        name = "__shop_key",
        type = "string",
        lua_name = "shop_key",
        lua_type = "string",
        desc = "Product id",
        lua_desc = "Product id",
    },
    [4] = {
        name = "__res_type",
        type = "py.RoleResKey",
        lua_name = "res_type",
        lua_type = "py.RoleResKey",
        desc = "Resource number",
        lua_desc = "Resource number",
    },
    [5] = {
        name = "__res_cost",
        type = "integer",
        lua_name = "res_cost",
        lua_type = "integer",
        desc = "Current selling price",
        lua_desc = "Current selling price",
    },
}

---@class EventParam.ET_UNIT_ITEM_COMPOSE
---@field unit Unit # unit
---@field compose_id py.ItemKey # Item number
---@field item_prop Item # property

--Item composition event
event.ET_UNIT_ITEM_COMPOSE = {
    [1] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Unit id",
        lua_desc = "unit",
    },
    [2] = {
        name = "__compose_id",
        type = "py.ItemKey",
        lua_name = "compose_id",
        lua_type = "py.ItemKey",
        desc = "Item number",
        lua_desc = "Item number",
    },
    [3] = {
        name = "__item_prop_id",
        type = "py.ItemID",
        lua_name = "item_prop",
        lua_type = "Item",
        desc = "Item id",
        lua_desc = "property",
    },
}

---@class EventParam.ET_UNIT_SHOP_BUY_WITH_COMPOSE
---@field unit Unit # Purchasing unit
---@field shop_unit Unit # Shop unit
---@field item Item # Item number

--Synthetic purchase of commodities
event.ET_UNIT_SHOP_BUY_WITH_COMPOSE = {
    [1] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Purchase item unit id",
        lua_desc = "Purchasing unit",
    },
    [2] = {
        name = "__shop_unit_id",
        type = "py.UnitID",
        lua_name = "shop_unit",
        lua_type = "Unit",
        desc = "Shop unit id",
        lua_desc = "Shop unit",
    },
    [3] = {
        name = "__item_id",
        type = "py.ItemID",
        lua_name = "item",
        lua_type = "Item",
        desc = "Item number",
        lua_desc = "Item number",
    },
}

---@class EventParam.ET_REVIVE_UNIT
---@field unit Unit # No description

--Unit regeneration
event.ET_REVIVE_UNIT = {
    [1] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
    },
}

---@class EventParam.ET_UPGRADE_UNIT
---@field unit Unit # No description

--Unit upgrade
event.ET_UPGRADE_UNIT = {
    [1] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
    },
}

---@class EventParam.ET_REACH_MOVE_TARGET_UNIT
---@field unit Unit # No description

--Unit movement goal achieved
event.ET_REACH_MOVE_TARGET_UNIT = {
    [1] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
    },
}

---@class EventParam.ET_COLLIDE_OBSTACLE_UNIT
---@field unit Unit # No description

--Unit collides with obstacle
event.ET_COLLIDE_OBSTACLE_UNIT = {
    [1] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
    },
}

---@class EventParam.ET_UNIT_ENTER_GRASS
---@field unit Unit # unit

--Unit into grass
event.ET_UNIT_ENTER_GRASS = {
    [1] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Unit id",
        lua_desc = "unit",
    },
}

---@class EventParam.ET_UNIT_LEAVE_GRASS
---@field unit Unit # unit

--Unit off the grass
event.ET_UNIT_LEAVE_GRASS = {
    [1] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Unit id",
        lua_desc = "unit",
    },
}

---@class EventParam.ET_MAP_VISIBILITY_CHANGE

--Map display changes due to triggers
event.ET_MAP_VISIBILITY_CHANGE = {}

---@class EventParam.ET_UNIT_ROLE_CHANGED
---@field unit Unit # The unit that triggered the event
---@field old_player Player # The player the unit originally belonged to
---@field new_player Player # Unit new player

--The player that the unit belongs to has changed
event.ET_UNIT_ROLE_CHANGED = {
    [1] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "The unit that triggered the event",
        lua_desc = "The unit that triggered the event",
    },
    [2] = {
        name = "__old_role_id",
        type = "py.RoleID",
        lua_name = "old_player",
        lua_type = "Player",
        desc = "The player the unit originally belonged to",
        lua_desc = "The player the unit originally belonged to",
    },
    [3] = {
        name = "__new_role_id",
        type = "py.RoleID",
        lua_name = "new_player",
        lua_type = "Player",
        desc = "Unit new player",
        lua_desc = "Unit new player",
    },
}

---@class EventParam.ET_UNIT_KV_CHANGE
---@field kv_name string # KV-name

--Unit kv property sent changes
event.ET_UNIT_KV_CHANGE = {
    [1] = {
        name = "__kv_name",
        type = "string",
        lua_name = "kv_name",
        lua_type = "string",
        desc = "KV-name",
        lua_desc = "KV-name",
    },
}

---@class EventParam.ET_UNIT_MUL_KV_CHANGE
---@field kv_name_list py.List # The player the unit originally belonged to

--Unit of multiple kv properties sent changes
event.ET_UNIT_MUL_KV_CHANGE = {
    [1] = {
        name = "__kv_name_list",
        type = "py.List",
        lua_name = "kv_name_list",
        lua_type = "py.List",
        desc = "The player the unit originally belonged to",
        lua_desc = "The player the unit originally belonged to",
    },
}

---@class EventParam.ET_UNIT_PRECONDITION_SUCCEED
---@field unit_key py.UnitKey # Unit type
---@field player Player # Player

--Prerequisites of the unit type Meet requirements
event.ET_UNIT_PRECONDITION_SUCCEED = {
    [1] = {
        name = "unit_key",
        type = "py.UnitKey",
        lua_name = "unit_key",
        lua_type = "py.UnitKey",
        desc = "Unit type",
        lua_desc = "Unit type",
    },
    [2] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "Player ID",
        lua_desc = "Player",
    },
}

---@class EventParam.ET_UNIT_PRECONDITION_FAILED
---@field unit_key py.UnitKey # Unit type
---@field player Player # Player

--Prerequisites for the unit type do not meet requirements
event.ET_UNIT_PRECONDITION_FAILED = {
    [1] = {
        name = "unit_key",
        type = "py.UnitKey",
        lua_name = "unit_key",
        lua_type = "py.UnitKey",
        desc = "Unit type",
        lua_desc = "Unit type",
    },
    [2] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "Player ID",
        lua_desc = "Player",
    },
}

---@class EventParam.ET_ITEM_PRECONDITION_SUCCEED
---@field item_no py.ItemKey # Item type
---@field player Player # Player

--Prerequisites for item type meet requirements
event.ET_ITEM_PRECONDITION_SUCCEED = {
    [1] = {
        name = "__item_no",
        type = "py.ItemKey",
        lua_name = "item_no",
        lua_type = "py.ItemKey",
        desc = "Item type",
        lua_desc = "Item type",
    },
    [2] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "Player ID",
        lua_desc = "Player",
    },
}

---@class EventParam.ET_ITEM_PRECONDITION_FAILED
---@field item_no py.ItemKey # Item type
---@field player Player # Player

--Item type preconditions do not meet requirements
event.ET_ITEM_PRECONDITION_FAILED = {
    [1] = {
        name = "__item_no",
        type = "py.ItemKey",
        lua_name = "item_no",
        lua_type = "py.ItemKey",
        desc = "Item type",
        lua_desc = "Item type",
    },
    [2] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "Player ID",
        lua_desc = "Player",
    },
}

---@class EventParam.ET_ABILITY_PRECONDITION_SUCCEED
---@field ability_id py.AbilityKey # Skill type
---@field player Player # Player

--The prerequisites for the skill type meet the requirements
event.ET_ABILITY_PRECONDITION_SUCCEED = {
    [1] = {
        name = "__ability_id",
        type = "py.AbilityKey",
        lua_name = "ability_id",
        lua_type = "py.AbilityKey",
        desc = "Skill type",
        lua_desc = "Skill type",
    },
    [2] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "Player ID",
        lua_desc = "Player",
    },
}

---@class EventParam.ET_ABILITY_PRECONDITION_FAILED
---@field ability_id py.AbilityKey # Skill type
---@field player Player # Player

--The prerequisite conditions for the skill type are not met
event.ET_ABILITY_PRECONDITION_FAILED = {
    [1] = {
        name = "__ability_id",
        type = "py.AbilityKey",
        lua_name = "ability_id",
        lua_type = "py.AbilityKey",
        desc = "Skill type",
        lua_desc = "Skill type",
    },
    [2] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "Player ID",
        lua_desc = "Player",
    },
}

---@class EventParam.ET_TECH_PRECONDITION_SUCCEED
---@field tech_no py.TechKey # Science and technology type
---@field player Player # Player

--Prerequisites of the technology type Meet the requirements
event.ET_TECH_PRECONDITION_SUCCEED = {
    [1] = {
        name = "__tech_no",
        type = "py.TechKey",
        lua_name = "tech_no",
        lua_type = "py.TechKey",
        desc = "Science and technology type",
        lua_desc = "Science and technology type",
    },
    [2] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "Player ID",
        lua_desc = "Player",
    },
}

---@class EventParam.ET_TECH_PRECONDITION_FAILED
---@field tech_no py.TechKey # Science and technology type
---@field player Player # Player

--The preconditions of the technology type do not meet the requirements
event.ET_TECH_PRECONDITION_FAILED = {
    [1] = {
        name = "__tech_no",
        type = "py.TechKey",
        lua_name = "tech_no",
        lua_type = "py.TechKey",
        desc = "Science and technology type",
        lua_desc = "Science and technology type",
    },
    [2] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "Player ID",
        lua_desc = "Player",
    },
}

---@class EventParam.ET_ABILITY_UPGRADE
---@field ability Ability # Skill object
---@field unit Unit # Skill Owner

--Skill upgrading
event.ET_ABILITY_UPGRADE = {
    [1] = {
        name = "__ability",
        type = "py.Ability",
        lua_name = "ability",
        lua_type = "Ability",
        desc = "Skill object",
        lua_desc = "Skill object",
    },
    [2] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Skill Owner",
        lua_desc = "Skill Owner",
    },
}

---@class EventParam.ET_ABILITY_CS_START
---@field ability Ability # Skill object
---@field unit Unit # Skill Owner
---@field ability_target_unit Unit # Skill objective unit
---@field cast Cast # conjure

--Skills begin casting spells
event.ET_ABILITY_CS_START = {
    [1] = {
        name = "__ability",
        type = "py.Ability",
        lua_name = "ability",
        lua_type = "Ability",
        desc = "Skill object",
        lua_desc = "Skill object",
    },
    [2] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Skill Owner",
        lua_desc = "Skill Owner",
    },
    [3] = {
        name = "__ability_target_unit_id",
        type = "py.UnitID",
        lua_name = "ability_target_unit",
        lua_type = "Unit",
        desc = "Skill target unit ID",
        lua_desc = "Skill objective unit",
    },
    [4] = {
        name = nil,
        type = nil,
        lua_name = "cast",
        lua_type = "Cast",
        lua_desc = "conjure",
        lua_code = function (data)
            local ability = data.ability
            local id = data._py_params['__ability_runtime_id']
            local cast = clicli.cast.get(ability, id)
            return cast
        end,
    },
}

---@class EventParam.ET_ABILITY_CS_END
---@field ability Ability # Skill object
---@field unit Unit # Skill Owner
---@field ability_target_unit Unit # Skill objective unit

--Skills start and spells end
event.ET_ABILITY_CS_END = {
    [1] = {
        name = "__ability",
        type = "py.Ability",
        lua_name = "ability",
        lua_type = "Ability",
        desc = "Skill object",
        lua_desc = "Skill object",
    },
    [2] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Skill Owner",
        lua_desc = "Skill Owner",
    },
    [3] = {
        name = "__ability_target_unit_id",
        type = "py.UnitID",
        lua_name = "ability_target_unit",
        lua_type = "Unit",
        desc = "Skill target unit ID",
        lua_desc = "Skill objective unit",
    },
}

---@class EventParam.ET_ABILITY_PS_START
---@field ability Ability # Skill object
---@field unit Unit # Skill Owner
---@field ability_target_unit Unit # Skill objective unit
---@field cast Cast # conjure

--Skill front shake start
event.ET_ABILITY_PS_START = {
    [1] = {
        name = "__ability",
        type = "py.Ability",
        lua_name = "ability",
        lua_type = "Ability",
        desc = "Skill object",
        lua_desc = "Skill object",
    },
    [2] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Skill Owner",
        lua_desc = "Skill Owner",
    },
    [3] = {
        name = "__ability_target_unit_id",
        type = "py.UnitID",
        lua_name = "ability_target_unit",
        lua_type = "Unit",
        desc = "Skill target unit ID",
        lua_desc = "Skill objective unit",
    },
    [4] = {
        name = nil,
        type = nil,
        lua_name = "cast",
        lua_type = "Cast",
        lua_desc = "conjure",
        lua_code = function (data)
            local ability = data.ability
            local id = data._py_params['__ability_runtime_id']
            local cast = clicli.cast.get(ability, id)
            return cast
        end,
    },
}

---@class EventParam.ET_ABILITY_PS_END
---@field ability Ability # Skill object
---@field unit Unit # Skill Owner
---@field ability_target_unit Unit # Skill objective unit
---@field cast Cast # conjure

--Skill front shake ends
event.ET_ABILITY_PS_END = {
    [1] = {
        name = "__ability",
        type = "py.Ability",
        lua_name = "ability",
        lua_type = "Ability",
        desc = "Skill object",
        lua_desc = "Skill object",
    },
    [2] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Skill Owner",
        lua_desc = "Skill Owner",
    },
    [3] = {
        name = "__ability_target_unit_id",
        type = "py.UnitID",
        lua_name = "ability_target_unit",
        lua_type = "Unit",
        desc = "Skill target unit ID",
        lua_desc = "Skill objective unit",
    },
    [4] = {
        name = nil,
        type = nil,
        lua_name = "cast",
        lua_type = "Cast",
        lua_desc = "conjure",
        lua_code = function (data)
            local ability = data.ability
            local id = data._py_params['__ability_runtime_id']
            local cast = clicli.cast.get(ability, id)
            return cast
        end,
    },
}

---@class EventParam.ET_ITEM_ABILITY_PS_END
---@field ability Ability # Skill object

--Prop skill front shake ends
event.ET_ITEM_ABILITY_PS_END = {
    [1] = {
        name = "__ability",
        type = "py.Ability",
        lua_name = "ability",
        lua_type = "Ability",
        desc = "Skill object",
        lua_desc = "Skill object",
    },
}

---@class EventParam.ET_ABILITY_SP_END
---@field ability Ability # Skill object
---@field unit Unit # Skill Owner
---@field ability_target_unit Unit # Skill objective unit
---@field cast Cast # conjure

--Skill ready end
event.ET_ABILITY_SP_END = {
    [1] = {
        name = "__ability",
        type = "py.Ability",
        lua_name = "ability",
        lua_type = "Ability",
        desc = "Skill object",
        lua_desc = "Skill object",
    },
    [2] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Skill Owner",
        lua_desc = "Skill Owner",
    },
    [3] = {
        name = "__ability_target_unit_id",
        type = "py.UnitID",
        lua_name = "ability_target_unit",
        lua_type = "Unit",
        desc = "Skill target unit ID",
        lua_desc = "Skill objective unit",
    },
    [4] = {
        name = nil,
        type = nil,
        lua_name = "cast",
        lua_type = "Cast",
        lua_desc = "conjure",
        lua_code = function (data)
            local ability = data.ability
            local id = data._py_params['__ability_runtime_id']
            local cast = clicli.cast.get(ability, id)
            return cast
        end,
    },
}

---@class EventParam.ET_ABILITY_CST_END
---@field ability Ability # Skill object
---@field unit Unit # Skill Owner
---@field ability_target_unit Unit # Skill objective unit
---@field cast Cast # conjure

--End of spell cast
event.ET_ABILITY_CST_END = {
    [1] = {
        name = "__ability",
        type = "py.Ability",
        lua_name = "ability",
        lua_type = "Ability",
        desc = "Skill object",
        lua_desc = "Skill object",
    },
    [2] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Skill Owner",
        lua_desc = "Skill Owner",
    },
    [3] = {
        name = "__ability_target_unit_id",
        type = "py.UnitID",
        lua_name = "ability_target_unit",
        lua_type = "Unit",
        desc = "Skill target unit ID",
        lua_desc = "Skill objective unit",
    },
    [4] = {
        name = nil,
        type = nil,
        lua_name = "cast",
        lua_type = "Cast",
        lua_desc = "conjure",
        lua_code = function (data)
            local ability = data.ability
            local id = data._py_params['__ability_runtime_id']
            local cast = clicli.cast.get(ability, id)
            return cast
        end,
    },
}

---@class EventParam.ET_ABILITY_BS_END
---@field ability Ability # Skill object
---@field unit Unit # Skill Owner
---@field ability_target_unit Unit # Skill objective unit
---@field cast Cast # conjure

--Skill after shake ends
event.ET_ABILITY_BS_END = {
    [1] = {
        name = "__ability",
        type = "py.Ability",
        lua_name = "ability",
        lua_type = "Ability",
        desc = "Skill object",
        lua_desc = "Skill object",
    },
    [2] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Skill Owner",
        lua_desc = "Skill Owner",
    },
    [3] = {
        name = "__ability_target_unit_id",
        type = "py.UnitID",
        lua_name = "ability_target_unit",
        lua_type = "Unit",
        desc = "Skill target unit ID",
        lua_desc = "Skill objective unit",
    },
    [4] = {
        name = nil,
        type = nil,
        lua_name = "cast",
        lua_type = "Cast",
        lua_desc = "conjure",
        lua_code = function (data)
            local ability = data.ability
            local id = data._py_params['__ability_runtime_id']
            local cast = clicli.cast.get(ability, id)
            return cast
        end,
    },
}

---@class EventParam.ET_ABILITY_CS_INTERRUPT
---@field ability Ability # Skill object
---@field unit Unit # Skill Owner
---@field ability_target_unit Unit # Skill objective unit

--The skill preparation phase is interrupted
event.ET_ABILITY_CS_INTERRUPT = {
    [1] = {
        name = "__ability",
        type = "py.Ability",
        lua_name = "ability",
        lua_type = "Ability",
        desc = "Skill object",
        lua_desc = "Skill object",
    },
    [2] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Skill Owner",
        lua_desc = "Skill Owner",
    },
    [3] = {
        name = "__ability_target_unit_id",
        type = "py.UnitID",
        lua_name = "ability_target_unit",
        lua_type = "Unit",
        desc = "Skill target unit ID",
        lua_desc = "Skill objective unit",
    },
}

---@class EventParam.ET_ABILITY_PS_INTERRUPT
---@field ability Ability # Skill object
---@field unit Unit # Skill Owner
---@field ability_target_unit Unit # Skill objective unit
---@field cast Cast # conjure

--The skill front shake phase is interrupted
event.ET_ABILITY_PS_INTERRUPT = {
    [1] = {
        name = "__ability",
        type = "py.Ability",
        lua_name = "ability",
        lua_type = "Ability",
        desc = "Skill object",
        lua_desc = "Skill object",
    },
    [2] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Skill Owner",
        lua_desc = "Skill Owner",
    },
    [3] = {
        name = "__ability_target_unit_id",
        type = "py.UnitID",
        lua_name = "ability_target_unit",
        lua_type = "Unit",
        desc = "Skill target unit ID",
        lua_desc = "Skill objective unit",
    },
    [4] = {
        name = nil,
        type = nil,
        lua_name = "cast",
        lua_type = "Cast",
        lua_desc = "conjure",
        lua_code = function (data)
            local ability = data.ability
            local id = data._py_params['__ability_runtime_id']
            local cast = clicli.cast.get(ability, id)
            return cast
        end,
    },
}

---@class EventParam.ET_ABILITY_SP_INTERRUPT
---@field ability Ability # Skill object
---@field unit Unit # Skill Owner
---@field ability_target_unit Unit # Skill objective unit
---@field cast Cast # conjure

--The skill preparation phase is interrupted
event.ET_ABILITY_SP_INTERRUPT = {
    [1] = {
        name = "__ability",
        type = "py.Ability",
        lua_name = "ability",
        lua_type = "Ability",
        desc = "Skill object",
        lua_desc = "Skill object",
    },
    [2] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Skill Owner",
        lua_desc = "Skill Owner",
    },
    [3] = {
        name = "__ability_target_unit_id",
        type = "py.UnitID",
        lua_name = "ability_target_unit",
        lua_type = "Unit",
        desc = "Skill target unit ID",
        lua_desc = "Skill objective unit",
    },
    [4] = {
        name = nil,
        type = nil,
        lua_name = "cast",
        lua_type = "Cast",
        lua_desc = "conjure",
        lua_code = function (data)
            local ability = data.ability
            local id = data._py_params['__ability_runtime_id']
            local cast = clicli.cast.get(ability, id)
            return cast
        end,
    },
}

---@class EventParam.ET_ABILITY_CST_INTERRUPT
---@field ability Ability # Skill object
---@field unit Unit # Skill Owner
---@field ability_target_unit Unit # Skill objective unit
---@field cast Cast # conjure

--The ongoing spell phase of the skill was interrupted
event.ET_ABILITY_CST_INTERRUPT = {
    [1] = {
        name = "__ability",
        type = "py.Ability",
        lua_name = "ability",
        lua_type = "Ability",
        desc = "Skill object",
        lua_desc = "Skill object",
    },
    [2] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Skill Owner",
        lua_desc = "Skill Owner",
    },
    [3] = {
        name = "__ability_target_unit_id",
        type = "py.UnitID",
        lua_name = "ability_target_unit",
        lua_type = "Unit",
        desc = "Skill target unit ID",
        lua_desc = "Skill objective unit",
    },
    [4] = {
        name = nil,
        type = nil,
        lua_name = "cast",
        lua_type = "Cast",
        lua_desc = "conjure",
        lua_code = function (data)
            local ability = data.ability
            local id = data._py_params['__ability_runtime_id']
            local cast = clicli.cast.get(ability, id)
            return cast
        end,
    },
}

---@class EventParam.ET_ABILITY_BS_INTERRUPT
---@field ability Ability # Skill object
---@field unit Unit # Skill Owner
---@field ability_target_unit Unit # Skill objective unit

--The skill roll phase is interrupted
event.ET_ABILITY_BS_INTERRUPT = {
    [1] = {
        name = "__ability",
        type = "py.Ability",
        lua_name = "ability",
        lua_type = "Ability",
        desc = "Skill object",
        lua_desc = "Skill object",
    },
    [2] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Skill Owner",
        lua_desc = "Skill Owner",
    },
    [3] = {
        name = "__ability_target_unit_id",
        type = "py.UnitID",
        lua_name = "ability_target_unit",
        lua_type = "Unit",
        desc = "Skill target unit ID",
        lua_desc = "Skill objective unit",
    },
}

---@class EventParam.ET_ABILITY_END
---@field ability Ability # Skill object
---@field unit Unit # Skill Owner
---@field ability_target_unit Unit # Skill objective unit
---@field cast Cast # conjure

--End of skill (either way)
event.ET_ABILITY_END = {
    [1] = {
        name = "__ability",
        type = "py.Ability",
        lua_name = "ability",
        lua_type = "Ability",
        desc = "Skill object",
        lua_desc = "Skill object",
    },
    [2] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Skill Owner",
        lua_desc = "Skill Owner",
    },
    [3] = {
        name = "__ability_target_unit_id",
        type = "py.UnitID",
        lua_name = "ability_target_unit",
        lua_type = "Unit",
        desc = "Skill target unit ID",
        lua_desc = "Skill objective unit",
    },
    [4] = {
        name = nil,
        type = nil,
        lua_name = "cast",
        lua_type = "Cast",
        lua_desc = "conjure",
        lua_code = function (data)
            local ability = data.ability
            local id = data._py_params['__ability_runtime_id']
            local cast = clicli.cast.get(ability, id)
            return cast
        end,
    },
}

---@class EventParam.ET_ABILITY_OBTAIN
---@field ability Ability # Skill object
---@field unit Unit # unit
---@field lua_table py.Table # User-defined configuration table

--Acquire skills
event.ET_ABILITY_OBTAIN = {
    [1] = {
        name = "__ability",
        type = "py.Ability",
        lua_name = "ability",
        lua_type = "Ability",
        desc = "Skill object",
        lua_desc = "Skill object",
    },
    [2] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Unit ID",
        lua_desc = "unit",
    },
    [3] = {
        name = "__lua_table",
        type = "py.Table",
        lua_name = "lua_table",
        lua_type = "py.Table",
        desc = "User-defined configuration table",
        lua_desc = "User-defined configuration table",
    },
}

---@class EventParam.ET_ABILITY_LOSE
---@field ability Ability # Skill object
---@field unit Unit # unit

--Lose skill
event.ET_ABILITY_LOSE = {
    [1] = {
        name = "__ability",
        type = "py.Ability",
        lua_name = "ability",
        lua_type = "Ability",
        desc = "Skill object",
        lua_desc = "Skill object",
    },
    [2] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Unit ID",
        lua_desc = "unit",
    },
}

---@class EventParam.ET_ABILITY_SWITCH
---@field ability Ability # Skill object
---@field unit Unit # Skill Owner

--Exchange skills
event.ET_ABILITY_SWITCH = {
    [1] = {
        name = "__ability",
        type = "py.Ability",
        lua_name = "ability",
        lua_type = "Ability",
        desc = "Skill object",
        lua_desc = "Skill object",
    },
    [2] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Skill Owner",
        lua_desc = "Skill Owner",
    },
}

---@class EventParam.ET_ABILITY_DISABLE
---@field ability Ability # Skill object

--Skill disable
event.ET_ABILITY_DISABLE = {
    [1] = {
        name = "__ability",
        type = "py.Ability",
        lua_name = "ability",
        lua_type = "Ability",
        desc = "Skill object",
        lua_desc = "Skill object",
    },
}

---@class EventParam.ET_ABILITY_ENABLE
---@field ability Ability # Skill object

--Skill enabling
event.ET_ABILITY_ENABLE = {
    [1] = {
        name = "__ability",
        type = "py.Ability",
        lua_name = "ability",
        lua_type = "Ability",
        desc = "Skill object",
        lua_desc = "Skill object",
    },
}

---@class EventParam.ET_ABILITY_ATTR_CHANGED
---@field ability Ability # Skill object

--Skill attribute change
event.ET_ABILITY_ATTR_CHANGED = {
    [1] = {
        name = "__ability",
        type = "py.Ability",
        lua_name = "ability",
        lua_type = "Ability",
        desc = "Skill object",
        lua_desc = "Skill object",
    },
}

---@class EventParam.ET_ABILITY_CD_END
---@field ability Ability # Skill object
---@field unit Unit # Skill Owner

--Skill cooldown event
event.ET_ABILITY_CD_END = {
    [1] = {
        name = "__ability",
        type = "py.Ability",
        lua_name = "ability",
        lua_type = "Ability",
        desc = "Skill object",
        lua_desc = "Skill object",
    },
    [2] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Skill Owner",
        lua_desc = "Skill Owner",
    },
}

---@class EventParam.ET_ABILITY_AUTOCAST_CHANGED
---@field ability Ability # Skill object

--Skills automatically release status changes
event.ET_ABILITY_AUTOCAST_CHANGED = {
    [1] = {
        name = "__ability",
        type = "py.Ability",
        lua_name = "ability",
        lua_type = "Ability",
        desc = "Skill object",
        lua_desc = "Skill object",
    },
}

---@class EventParam.ET_ABILITY_SEND_CUE_EVENT
---@field ability Ability # Skill object

--Ability to send custom CUE events
event.ET_ABILITY_SEND_CUE_EVENT = {
    [1] = {
        name = "__ability",
        type = "py.Ability",
        lua_name = "ability",
        lua_type = "Ability",
        desc = "Skill object",
        lua_desc = "Skill object",
    },
}

---@class EventParam.ET_ABILITY_CHARGE_END
---@field ability Ability # Skill object
---@field unit Unit # Skill Owner
---@field ability_target_unit Unit # Skill objective unit

--Skill accumulation is over
event.ET_ABILITY_CHARGE_END = {
    [1] = {
        name = "__ability",
        type = "py.Ability",
        lua_name = "ability",
        lua_type = "Ability",
        desc = "Skill object",
        lua_desc = "Skill object",
    },
    [2] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Skill Owner",
        lua_desc = "Skill Owner",
    },
    [3] = {
        name = "__ability_target_unit_id",
        type = "py.UnitID",
        lua_name = "ability_target_unit",
        lua_type = "Unit",
        desc = "Skill target unit ID",
        lua_desc = "Skill objective unit",
    },
}

---@class EventParam.ET_OBTAIN_MODIFIER
---@field buff Buff # Trigger magic effects
---@field owner_unit Unit # Effect carrier
---@field from_unit Unit # effector
---@field lua_table py.Table # User-defined configuration table

--Get results
event.ET_OBTAIN_MODIFIER = {
    [1] = {
        name = "__modifier",
        type = "py.ModifierEntity",
        lua_name = "buff",
        lua_type = "Buff",
        desc = "Trigger magic effects",
        lua_desc = "Trigger magic effects",
    },
    [2] = {
        name = "__owner_unit",
        type = "py.Unit",
        lua_name = "owner_unit",
        lua_type = "Unit",
        desc = "Effect carrier",
        lua_desc = "Effect carrier",
    },
    [3] = {
        name = "__from_unit_id",
        type = "py.UnitID",
        lua_name = "from_unit",
        lua_type = "Unit",
        desc = "effector",
        lua_desc = "effector",
    },
    [4] = {
        name = "__lua_table",
        type = "py.Table",
        lua_name = "lua_table",
        lua_type = "py.Table",
        desc = "User-defined configuration table",
        lua_desc = "User-defined configuration table",
    },
}

---@class EventParam.ET_LOSS_MODIFIER
---@field buff Buff # Trigger magic effects
---@field owner_unit Unit # Effect carrier
---@field from_unit Unit # effector

--Lose effect
event.ET_LOSS_MODIFIER = {
    [1] = {
        name = "__modifier",
        type = "py.ModifierEntity",
        lua_name = "buff",
        lua_type = "Buff",
        desc = "Trigger magic effects",
        lua_desc = "Trigger magic effects",
    },
    [2] = {
        name = "__owner_unit",
        type = "py.Unit",
        lua_name = "owner_unit",
        lua_type = "Unit",
        desc = "Effect carrier",
        lua_desc = "Effect carrier",
    },
    [3] = {
        name = "__from_unit_id",
        type = "py.UnitID",
        lua_name = "from_unit",
        lua_type = "Unit",
        desc = "effector",
        lua_desc = "effector",
    },
}

---@class EventParam.ET_MODIFIER_CYCLE_TRIGGER
---@field buff Buff # Trigger magic effects
---@field owner_unit Unit # Effect carrier
---@field from_unit Unit # effector

--Loop trigger event
event.ET_MODIFIER_CYCLE_TRIGGER = {
    [1] = {
        name = "__modifier",
        type = "py.ModifierEntity",
        lua_name = "buff",
        lua_type = "Buff",
        desc = "Trigger magic effects",
        lua_desc = "Trigger magic effects",
    },
    [2] = {
        name = "__owner_unit",
        type = "py.Unit",
        lua_name = "owner_unit",
        lua_type = "Unit",
        desc = "Effect carrier",
        lua_desc = "Effect carrier",
    },
    [3] = {
        name = "__from_unit_id",
        type = "py.UnitID",
        lua_name = "from_unit",
        lua_type = "Unit",
        desc = "effector",
        lua_desc = "effector",
    },
}

---@class EventParam.ET_MODIFIER_UPDATE_TIMER

--BUFF update event
event.ET_MODIFIER_UPDATE_TIMER = {}

---@class EventParam.ET_MODIFIER_ADDTION
---@field buff Buff # Trigger magic effects
---@field owner_unit Unit # Effect carrier
---@field from_unit Unit # effector

--BUFF stack event
event.ET_MODIFIER_ADDTION = {
    [1] = {
        name = "__modifier",
        type = "py.ModifierEntity",
        lua_name = "buff",
        lua_type = "Buff",
        desc = "Trigger magic effects",
        lua_desc = "Trigger magic effects",
    },
    [2] = {
        name = "__owner_unit",
        type = "py.Unit",
        lua_name = "owner_unit",
        lua_type = "Unit",
        desc = "Effect carrier",
        lua_desc = "Effect carrier",
    },
    [3] = {
        name = "__from_unit_id",
        type = "py.UnitID",
        lua_name = "from_unit",
        lua_type = "Unit",
        desc = "effector",
        lua_desc = "effector",
    },
}

---@class EventParam.ET_MODIFIER_LAYER_CHANGE
---@field buff Buff # Trigger magic effects
---@field owner_unit Unit # Effect carrier
---@field layer_change_values integer # Change value of the number of layers
---@field from_unit Unit # effector

--Effect level change event
event.ET_MODIFIER_LAYER_CHANGE = {
    [1] = {
        name = "__modifier",
        type = "py.ModifierEntity",
        lua_name = "buff",
        lua_type = "Buff",
        desc = "Trigger magic effects",
        lua_desc = "Trigger magic effects",
    },
    [2] = {
        name = "__owner_unit",
        type = "py.Unit",
        lua_name = "owner_unit",
        lua_type = "Unit",
        desc = "Effect carrier",
        lua_desc = "Effect carrier",
    },
    [3] = {
        name = "__layer_change_values",
        type = "integer",
        lua_name = "layer_change_values",
        lua_type = "integer",
        desc = "Change value of the number of layers",
        lua_desc = "Change value of the number of layers",
    },
    [4] = {
        name = "__from_unit_id",
        type = "py.UnitID",
        lua_name = "from_unit",
        lua_type = "Unit",
        desc = "effector",
        lua_desc = "effector",
    },
}

---@class EventParam.ET_MODIFIER_GET_BEFORE_CREATE
---@field buff Buff # Trigger magic effects
---@field owner_unit Unit # Effect carrier
---@field from_unit Unit # effector

--Magical effects are about to be obtained in the event
event.ET_MODIFIER_GET_BEFORE_CREATE = {
    [1] = {
        name = "__modifier",
        type = "py.ModifierEntity",
        lua_name = "buff",
        lua_type = "Buff",
        desc = "Trigger magic effects",
        lua_desc = "Trigger magic effects",
    },
    [2] = {
        name = "__owner_unit",
        type = "py.Unit",
        lua_name = "owner_unit",
        lua_type = "Unit",
        desc = "Effect carrier",
        lua_desc = "Effect carrier",
    },
    [3] = {
        name = "__from_unit_id",
        type = "py.UnitID",
        lua_name = "from_unit",
        lua_type = "Unit",
        desc = "effector",
        lua_desc = "effector",
    },
}

---@class EventParam.ET_MODIFIER_BE_COVERED
---@field owner_unit Unit # Effect carrier
---@field old_buff Buff # Existing magic effects
---@field new_buff Buff # Added magic effects

--Magical effects are covered by events
event.ET_MODIFIER_BE_COVERED = {
    [1] = {
        name = "__owner_unit",
        type = "py.Unit",
        lua_name = "owner_unit",
        lua_type = "Unit",
        desc = "Effect carrier",
        lua_desc = "Effect carrier",
    },
    [2] = {
        name = "__old_modifier",
        type = "py.ModifierEntity",
        lua_name = "old_buff",
        lua_type = "Buff",
        desc = "Existing magic effects",
        lua_desc = "Existing magic effects",
    },
    [3] = {
        name = "__new_modifier",
        type = "py.ModifierEntity",
        lua_name = "new_buff",
        lua_type = "Buff",
        desc = "Added magic effects",
        lua_desc = "Added magic effects",
    },
}

---@class EventParam.ET_MODIFIER_ATTR_CHANGE
---@field buff Buff # Magic effect

--Magic effect attribute change event
event.ET_MODIFIER_ATTR_CHANGE = {
    [1] = {
        name = "__modifier",
        type = "py.ModifierEntity",
        lua_name = "buff",
        lua_type = "Buff",
        desc = "Magic effect",
        lua_desc = "Magic effect",
    },
}

---@class EventParam.ET_SOURCE_NUMS_CHANGE

--The number of destructible resources changes
event.ET_SOURCE_NUMS_CHANGE = {}

---@class EventParam.ET_NAME_CHANGE

--The name of the destructible changes
event.ET_NAME_CHANGE = {}

---@class EventParam.ET_SOURCE_NAME_CHANGE

--The name of destructible resource changes
event.ET_SOURCE_NAME_CHANGE = {}

---@class EventParam.ET_DEST_DIE
---@field destructible Destructible # The destructible of death
---@field unit_for_dest Unit # Killer unit

--Destructible death
event.ET_DEST_DIE = {
    [1] = {
        name = "__destructible_id",
        type = "py.DestructibleID",
        lua_name = "destructible",
        lua_type = "Destructible",
        desc = "The destructible of death",
        lua_desc = "The destructible of death",
    },
    [2] = {
        name = "__unit_for_dest",
        type = "py.Unit",
        lua_name = "unit_for_dest",
        lua_type = "Unit",
        desc = "Killer unit",
        lua_desc = "Killer unit",
    },
}

---@class EventParam.ET_DEST_SOURCE_DRY
---@field destructible Destructible # Destructors of depleted resources
---@field unit_for_dest Unit # Collection unit

--Destructible material is harvested and depleted
event.ET_DEST_SOURCE_DRY = {
    [1] = {
        name = "__destructible_id",
        type = "py.DestructibleID",
        lua_name = "destructible",
        lua_type = "Destructible",
        desc = "Destructors of depleted resources",
        lua_desc = "Destructors of depleted resources",
    },
    [2] = {
        name = "__unit_for_dest",
        type = "py.Unit",
        lua_name = "unit_for_dest",
        lua_type = "Unit",
        desc = "Collection unit",
        lua_desc = "Collection unit",
    },
}

---@class EventParam.ET_DEST_ATTACKED
---@field destructible Destructible # Destructible object under attack
---@field unit_for_dest Unit # Attack unit

--Destructible is attacked
event.ET_DEST_ATTACKED = {
    [1] = {
        name = "__destructible_id",
        type = "py.DestructibleID",
        lua_name = "destructible",
        lua_type = "Destructible",
        desc = "Destructible object under attack",
        lua_desc = "Destructible object under attack",
    },
    [2] = {
        name = "__unit_for_dest",
        type = "py.Unit",
        lua_name = "unit_for_dest",
        lua_type = "Unit",
        desc = "Attack unit",
        lua_desc = "Attack unit",
    },
}

---@class EventParam.ET_DEST_COLLECTED
---@field destructible Destructible # Destructible material that is collected
---@field unit_for_dest Unit # Collection unit

--Destructible material is collected
event.ET_DEST_COLLECTED = {
    [1] = {
        name = "__destructible_id",
        type = "py.DestructibleID",
        lua_name = "destructible",
        lua_type = "Destructible",
        desc = "Destructible material that is collected",
        lua_desc = "Destructible material that is collected",
    },
    [2] = {
        name = "__unit_for_dest",
        type = "py.Unit",
        lua_name = "unit_for_dest",
        lua_type = "Unit",
        desc = "Collection unit",
        lua_desc = "Collection unit",
    },
}

---@class EventParam.ET_DEST_AREA_DIE
---@field area Area # An area where destructors die
---@field destructible Destructible # The destructible of death
---@field unit_for_dest Unit # Killer unit

--Destructible objects in the area die
event.ET_DEST_AREA_DIE = {
    [1] = {
        name = "__area",
        type = "py.Area",
        lua_name = "area",
        lua_type = "Area",
        desc = "An area where destructors die",
        lua_desc = "An area where destructors die",
    },
    [2] = {
        name = "__destructible_id",
        type = "py.DestructibleID",
        lua_name = "destructible",
        lua_type = "Destructible",
        desc = "The destructible of death",
        lua_desc = "The destructible of death",
    },
    [3] = {
        name = "__unit_for_dest",
        type = "py.Unit",
        lua_name = "unit_for_dest",
        lua_type = "Unit",
        desc = "Killer unit",
        lua_desc = "Killer unit",
    },
}

---@class EventParam.ET_DEST_AREA_DRY
---@field area Area # An area where spoilables have been harvested and depleted
---@field destructible Destructible # Destructors of depleted resources
---@field unit_for_dest Unit # Collection unit

--The area is depleted of destructible material
event.ET_DEST_AREA_DRY = {
    [1] = {
        name = "__area",
        type = "py.Area",
        lua_name = "area",
        lua_type = "Area",
        desc = "An area where spoilables have been harvested and depleted",
        lua_desc = "An area where spoilables have been harvested and depleted",
    },
    [2] = {
        name = "__destructible_id",
        type = "py.DestructibleID",
        lua_name = "destructible",
        lua_type = "Destructible",
        desc = "Destructors of depleted resources",
        lua_desc = "Destructors of depleted resources",
    },
    [3] = {
        name = "__unit_for_dest",
        type = "py.Unit",
        lua_name = "unit_for_dest",
        lua_type = "Unit",
        desc = "Collection unit",
        lua_desc = "Collection unit",
    },
}

---@class EventParam.ET_DEST_AREA_ATTACKED
---@field area Area # The area where destructible objects are attacked
---@field destructible Destructible # Destructible object under attack
---@field unit_for_dest Unit # Attack unit

--Destructible objects in the area are attacked
event.ET_DEST_AREA_ATTACKED = {
    [1] = {
        name = "__area",
        type = "py.Area",
        lua_name = "area",
        lua_type = "Area",
        desc = "The area where destructible objects are attacked",
        lua_desc = "The area where destructible objects are attacked",
    },
    [2] = {
        name = "__destructible_id",
        type = "py.DestructibleID",
        lua_name = "destructible",
        lua_type = "Destructible",
        desc = "Destructible object under attack",
        lua_desc = "Destructible object under attack",
    },
    [3] = {
        name = "__unit_for_dest",
        type = "py.Unit",
        lua_name = "unit_for_dest",
        lua_type = "Unit",
        desc = "Attack unit",
        lua_desc = "Attack unit",
    },
}

---@class EventParam.ET_DEST_AREA_COLLECTED
---@field area Area # The area where destructible material is collected
---@field destructible Destructible # Destructible material that is collected
---@field unit_for_dest Unit # Collection unit

--Destructible objects in the area are collected
event.ET_DEST_AREA_COLLECTED = {
    [1] = {
        name = "__area",
        type = "py.Area",
        lua_name = "area",
        lua_type = "Area",
        desc = "The area where destructible material is collected",
        lua_desc = "The area where destructible material is collected",
    },
    [2] = {
        name = "__destructible_id",
        type = "py.DestructibleID",
        lua_name = "destructible",
        lua_type = "Destructible",
        desc = "Destructible material that is collected",
        lua_desc = "Destructible material that is collected",
    },
    [3] = {
        name = "__unit_for_dest",
        type = "py.Unit",
        lua_name = "unit_for_dest",
        lua_type = "Unit",
        desc = "Collection unit",
        lua_desc = "Collection unit",
    },
}

---@class EventParam.ET_DEST_CREATE_NEW
---@field destructible Destructible # destructible
---@field lua_table py.Table # User-defined configuration table

--Destructible creation
event.ET_DEST_CREATE_NEW = {
    [1] = {
        name = "__destructible_id",
        type = "py.DestructibleID",
        lua_name = "destructible",
        lua_type = "Destructible",
        desc = "Destructible object ID",
        lua_desc = "destructible",
    },
    [2] = {
        name = "__lua_table",
        type = "py.Table",
        lua_name = "lua_table",
        lua_type = "py.Table",
        desc = "User-defined configuration table",
        lua_desc = "User-defined configuration table",
    },
}

---@class EventParam.ET_DEST_DIE_NEW
---@field destructible Destructible # destructible
---@field unit_id_of_dest_killer Unit # Killer unit ID

--Destructible death
event.ET_DEST_DIE_NEW = {
    [1] = {
        name = "__destructible_id",
        type = "py.DestructibleID",
        lua_name = "destructible",
        lua_type = "Destructible",
        desc = "Destructible object ID",
        lua_desc = "destructible",
    },
    [2] = {
        name = "__unit_id_of_dest_killer",
        type = "py.UnitID",
        lua_name = "unit_id_of_dest_killer",
        lua_type = "Unit",
        desc = "Killer unit ID",
        lua_desc = "Killer unit ID",
    },
}

---@class EventParam.ET_DEST_REVIVE_NEW
---@field destructible Destructible # destructible

--Destructible resurrects
event.ET_DEST_REVIVE_NEW = {
    [1] = {
        name = "__destructible_id",
        type = "py.DestructibleID",
        lua_name = "destructible",
        lua_type = "Destructible",
        desc = "Destructible object ID",
        lua_desc = "destructible",
    },
}

---@class EventParam.ET_DEST_RES_CNT_CHG_NEW
---@field destructible Destructible # destructible
---@field res_chg_cnt_in_dest_event integer # Amount of destructible resource change

--Changes in the amount of destructible resources
event.ET_DEST_RES_CNT_CHG_NEW = {
    [1] = {
        name = "__destructible_id",
        type = "py.DestructibleID",
        lua_name = "destructible",
        lua_type = "Destructible",
        desc = "Destructible object ID",
        lua_desc = "destructible",
    },
    [2] = {
        name = "__res_chg_cnt_in_dest_event",
        type = "integer",
        lua_name = "res_chg_cnt_in_dest_event",
        lua_type = "integer",
        desc = "Amount of destructible resource change",
        lua_desc = "Amount of destructible resource change",
    },
}

---@class EventParam.ET_DEST_COLLECTED_NEW
---@field destructible Destructible # destructible
---@field unit_id_in_dest_event Unit # Unit in event
---@field ability_in_dest_event Ability # The skill object in the event
---@field player_res_cnt_in_event integer # The number of player attributes collected

--Destructible material is collected
event.ET_DEST_COLLECTED_NEW = {
    [1] = {
        name = "__destructible_id",
        type = "py.DestructibleID",
        lua_name = "destructible",
        lua_type = "Destructible",
        desc = "Destructible object ID",
        lua_desc = "destructible",
    },
    [2] = {
        name = "__unit_id_in_dest_event",
        type = "py.UnitID",
        lua_name = "unit_id_in_dest_event",
        lua_type = "Unit",
        desc = "Unit in event",
        lua_desc = "Unit in event",
    },
    [3] = {
        name = "__ability_in_dest_event",
        type = "py.Ability",
        lua_name = "ability_in_dest_event",
        lua_type = "Ability",
        desc = "The skill object in the event",
        lua_desc = "The skill object in the event",
    },
    [4] = {
        name = "__role_res_cnt_in_event",
        type = "integer",
        lua_name = "player_res_cnt_in_event",
        lua_type = "integer",
        desc = "The number of player attributes collected",
        lua_desc = "The number of player attributes collected",
    },
}

---@class EventParam.ET_GET_HURT_NEW
---@field destructible Destructible # destructible
---@field unit_id_of_hurt_dest Unit # Unit in event
---@field damage_value_of_hurt_dest number # Injury received

--Destructible objects are damaged
event.ET_GET_HURT_NEW = {
    [1] = {
        name = "__destructible_id",
        type = "py.DestructibleID",
        lua_name = "destructible",
        lua_type = "Destructible",
        desc = "Destructible object ID",
        lua_desc = "destructible",
    },
    [2] = {
        name = "__unit_id_of_hurt_dest",
        type = "py.UnitID",
        lua_name = "unit_id_of_hurt_dest",
        lua_type = "Unit",
        desc = "Unit in event",
        lua_desc = "Unit in event",
    },
    [3] = {
        name = "__damage_value_of_hurt_dest",
        type = "py.Fixed",
        lua_name = "damage_value_of_hurt_dest",
        lua_type = "number",
        desc = "Injury received",
        lua_desc = "Injury received",
    },
}

---@class EventParam.ET_SELECT_DEST
---@field player Player # Player
---@field destructible Destructible # Click on destructible

--The player selects destructible objects
event.ET_SELECT_DEST = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "Player ID",
        lua_desc = "Player",
    },
    [2] = {
        name = "__destructible_id",
        type = "py.DestructibleID",
        lua_name = "destructible",
        lua_type = "Destructible",
        desc = "Click to destruct id",
        lua_desc = "Click on destructible",
    },
}

---@class EventParam.ET_ASYNC_SELECT_DEST
---@field player Player # Player
---@field destructible Destructible # Click on destructible

--Asynchronous player selects destructible
event.ET_ASYNC_SELECT_DEST = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "Player ID",
        lua_desc = "Player",
    },
    [2] = {
        name = "__destructible_id",
        type = "py.DestructibleID",
        lua_name = "destructible",
        lua_type = "Destructible",
        desc = "Click to destruct id",
        lua_desc = "Click on destructible",
    },
}

---@class EventParam.ET_DEST_DELETE
---@field destructible Destructible # Destructible that triggers an event

--Remove destructible objects
event.ET_DEST_DELETE = {
    [1] = {
        name = "__destructible_id",
        type = "py.DestructibleID",
        lua_name = "destructible",
        lua_type = "Destructible",
        desc = "Destructible that triggers an event",
        lua_desc = "Destructible that triggers an event",
    },
}

---@class EventParam.ET_PRODUCE_PROJECTILE
---@field projectile Projectile # projectile

--Projectile generation
event.ET_PRODUCE_PROJECTILE = {
    [1] = {
        name = nil,
        type = nil,
        lua_name = "projectile",
        lua_type = "Projectile",
        lua_desc = "projectile",
        lua_code = function (data)
            local py_proj = data._py_params['projectile']
            local projectile = clicli.projectile.get_by_handle(py_proj)
            return projectile
        end,
    },
}

---@class EventParam.ET_DEATH_PROJECTILE
---@field projectile Projectile # projectile

--Projectile death
event.ET_DEATH_PROJECTILE = {
    [1] = {
        name = nil,
        type = nil,
        lua_name = "projectile",
        lua_type = "Projectile",
        lua_desc = "projectile",
        lua_code = function (data)
            local py_proj = data._py_params['projectile']
            local projectile = clicli.projectile.get_by_handle(py_proj)
            return projectile
        end,
    },
}

---@class EventParam.ET_START_MOVE_PROJECTILE

--Projectile motion begins
event.ET_START_MOVE_PROJECTILE = {}

---@class EventParam.ET_REACH_MOVE_TARGET_PROJECTILE

--Projectile movement target achieved
event.ET_REACH_MOVE_TARGET_PROJECTILE = {}

---@class EventParam.ET_COLLIDE_OBSTACLE_PROJECTILE
---@field unit Unit # No description

--Projectiles collide with obstacles
event.ET_COLLIDE_OBSTACLE_PROJECTILE = {
    [1] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
    },
}

---@class EventParam.ET_UNIT_PRODUCE_PROJECTILE

--Create projectiles for units
event.ET_UNIT_PRODUCE_PROJECTILE = {}

---@class EventParam.ET_TRIGGER_COMPONENT_EVENT
---@field player Player # Player
---@field ui_event_name string # ui event variable name
---@field comp_name string # Trigger event control name
---@field pos py.Vector2 # Contact coordinates
---@field touch_id integer # Touch ID
---@field str1 string # Custom information
---@field ui UI # ui
---@field data any # Custom data

--ui editor event
event.ET_TRIGGER_COMPONENT_EVENT = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "Player ID",
        lua_desc = "Player",
    },
    [2] = {
        name = "__ui_event_name",
        type = "string",
        lua_name = "ui_event_name",
        lua_type = "string",
        desc = "ui event variable name",
        lua_desc = "ui event variable name",
    },
    [3] = {
        name = "__comp_name",
        type = "string",
        lua_name = "comp_name",
        lua_type = "string",
        desc = "Trigger event control name",
        lua_desc = "Trigger event control name",
    },
    [4] = {
        name = "__pos",
        type = "py.Vector2",
        lua_name = "pos",
        lua_type = "py.Vector2",
        desc = "Contact coordinates",
        lua_desc = "Contact coordinates",
    },
    [5] = {
        name = "__touch_id",
        type = "integer",
        lua_name = "touch_id",
        lua_type = "integer",
        desc = "Touch ID",
        lua_desc = "Touch ID",
    },
    [6] = {
        name = "__str1",
        type = "string",
        lua_name = "str1",
        lua_type = "string",
        desc = "Custom information",
        lua_desc = "Custom information",
    },
    [7] = {
        name = nil,
        type = nil,
        lua_name = "ui",
        lua_type = "UI",
        lua_desc = "ui",
        lua_code = function (data)
            local ui = clicli.ui.get_by_handle(data.player, data.comp_name)
            return ui
        end,
    },
    [8] = {
        name = nil,
        type = nil,
        lua_name = "data",
        lua_type = "any",
        lua_desc = "Custom data",
        lua_code = function (data)
            local bin = data.str1
            local undumped = clicli.dump.decode(bin)
            return undumped
        end,
    },
}

---@class EventParam.ET_ON_CLICK_MINI_MAP_PANEL
---@field player Player # Player
---@field mini_map_touched_world_pos Point # Click on the corresponding world coordinates

--Player clicks on minimap event
event.ET_ON_CLICK_MINI_MAP_PANEL = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "Player ID",
        lua_desc = "Player",
    },
    [2] = {
        name = "__mini_map_touched_world_pos",
        type = "py.Point",
        lua_name = "mini_map_touched_world_pos",
        lua_type = "Point",
        desc = "Click on the corresponding world coordinates",
        lua_desc = "Click on the corresponding world coordinates",
    },
}

---@class EventParam.ET_TRIGGER_UI_SLIDER_CHANGE_EVENT
---@field player Player # Player
---@field ui_event_name string # ui event variable name
---@field comp_name string # Trigger event control name
---@field float1 number # Custom information
---@field ui UI # ui

--ui slider event
event.ET_TRIGGER_UI_SLIDER_CHANGE_EVENT = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "Player ID",
        lua_desc = "Player",
    },
    [2] = {
        name = "__ui_event_name",
        type = "string",
        lua_name = "ui_event_name",
        lua_type = "string",
        desc = "ui event variable name",
        lua_desc = "ui event variable name",
    },
    [3] = {
        name = "__comp_name",
        type = "string",
        lua_name = "comp_name",
        lua_type = "string",
        desc = "Trigger event control name",
        lua_desc = "Trigger event control name",
    },
    [4] = {
        name = "__float1",
        type = "py.Fixed",
        lua_name = "float1",
        lua_type = "number",
        desc = "Custom information",
        lua_desc = "Custom information",
    },
    [5] = {
        name = nil,
        type = nil,
        lua_name = "ui",
        lua_type = "UI",
        lua_desc = "ui",
        lua_code = function (data)
            local ui = clicli.ui.get_by_handle(data.player, data.comp_name)
            return ui
        end,
    },
}

---@class EventParam.ET_TRIGGER_UI_CHATBOX_VISIBLE_CHANGE_EVENT
---@field player Player # Player
---@field ui_event_name string # ui event variable name
---@field comp_name string # Trigger event control name
---@field bool1 boolean # Custom information
---@field ui UI # ui

--ui chat box component visibility change event
event.ET_TRIGGER_UI_CHATBOX_VISIBLE_CHANGE_EVENT = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "Player ID",
        lua_desc = "Player",
    },
    [2] = {
        name = "__ui_event_name",
        type = "string",
        lua_name = "ui_event_name",
        lua_type = "string",
        desc = "ui event variable name",
        lua_desc = "ui event variable name",
    },
    [3] = {
        name = "__comp_name",
        type = "string",
        lua_name = "comp_name",
        lua_type = "string",
        desc = "Trigger event control name",
        lua_desc = "Trigger event control name",
    },
    [4] = {
        name = "__bool1",
        type = "boolean",
        lua_name = "bool1",
        lua_type = "boolean",
        desc = "Custom information",
        lua_desc = "Custom information",
    },
    [5] = {
        name = nil,
        type = nil,
        lua_name = "ui",
        lua_type = "UI",
        lua_desc = "ui",
        lua_code = function (data)
            local ui = clicli.ui.get_by_handle(data.player, data.comp_name)
            return ui
        end,
    },
}

---@class EventParam.ET_TRIGGER_UI_EQUIP_SLOT_DRAG_EVENT
---@field ui_event_name string # Event name
---@field player Player # Player
---@field equip_slot_id integer # Slot index
---@field equip_slot_type integer # Inventory type
---@field equip_slot_item Item # item
---@field equip_slot_unit Unit # unit
---@field equip_slot_is_begin boolean # Whether to start dragging
---@field ui UI # ui

--UI Equipment bar drag event
event.ET_TRIGGER_UI_EQUIP_SLOT_DRAG_EVENT = {
    [1] = {
        name = "__ui_event_name",
        type = "string",
        lua_name = "ui_event_name",
        lua_type = "string",
        desc = "Event name",
        lua_desc = "Event name",
    },
    [2] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "Player ID",
        lua_desc = "Player",
    },
    [3] = {
        name = "__equip_slot_id",
        type = "integer",
        lua_name = "equip_slot_id",
        lua_type = "integer",
        desc = "Slot index",
        lua_desc = "Slot index",
    },
    [4] = {
        name = "__equip_slot_type",
        type = "integer",
        lua_name = "equip_slot_type",
        lua_type = "integer",
        desc = "Inventory type",
        lua_desc = "Inventory type",
    },
    [5] = {
        name = "__equip_slot_item",
        type = "py.Item",
        lua_name = "equip_slot_item",
        lua_type = "Item",
        desc = "item",
        lua_desc = "item",
    },
    [6] = {
        name = "__equip_slot_unit",
        type = "py.Unit",
        lua_name = "equip_slot_unit",
        lua_type = "Unit",
        desc = "unit",
        lua_desc = "unit",
    },
    [7] = {
        name = "__equip_slot_is_begin",
        type = "boolean",
        lua_name = "equip_slot_is_begin",
        lua_type = "boolean",
        desc = "Whether to start dragging",
        lua_desc = "Whether to start dragging",
    },
    [8] = {
        name = nil,
        type = nil,
        lua_name = "ui",
        lua_type = "UI",
        lua_desc = "ui",
        lua_code = function (data)
            local ui = clicli.ui.get_by_handle(data.player, data.comp_name)
            return ui
        end,
    },
}

---@class EventParam.ET_UI_JOYSTICK_START_MOVE
---@field player Player # Player
---@field comp_name string # Trigger event control name

--
event.ET_UI_JOYSTICK_START_MOVE = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "Player ID",
        lua_desc = "Player",
    },
    [2] = {
        name = "__comp_name",
        type = "string",
        lua_name = "comp_name",
        lua_type = "string",
        desc = "Trigger event control name",
        lua_desc = "Trigger event control name",
    },
}

---@class EventParam.ET_UI_JOYSTICK_END_MOVE
---@field player Player # Player
---@field comp_name string # Trigger event control name

--ui check box event
event.ET_UI_JOYSTICK_END_MOVE = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "Player ID",
        lua_desc = "Player",
    },
    [2] = {
        name = "__comp_name",
        type = "string",
        lua_name = "comp_name",
        lua_type = "string",
        desc = "Trigger event control name",
        lua_desc = "Trigger event control name",
    },
}

---@class EventParam.ET_TRIGGER_UI_CHECKBOX_CHANGE_EVENT
---@field player Player # Player
---@field ui_event_name string # ui event variable name
---@field comp_name string # Trigger event control name
---@field bool1 boolean # Custom information
---@field ui UI # ui

--ui check box event
event.ET_TRIGGER_UI_CHECKBOX_CHANGE_EVENT = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "Player ID",
        lua_desc = "Player",
    },
    [2] = {
        name = "__ui_event_name",
        type = "string",
        lua_name = "ui_event_name",
        lua_type = "string",
        desc = "ui event variable name",
        lua_desc = "ui event variable name",
    },
    [3] = {
        name = "__comp_name",
        type = "string",
        lua_name = "comp_name",
        lua_type = "string",
        desc = "Trigger event control name",
        lua_desc = "Trigger event control name",
    },
    [4] = {
        name = "__bool1",
        type = "boolean",
        lua_name = "bool1",
        lua_type = "boolean",
        desc = "Custom information",
        lua_desc = "Custom information",
    },
    [5] = {
        name = nil,
        type = nil,
        lua_name = "ui",
        lua_type = "UI",
        lua_desc = "ui",
        lua_code = function (data)
            local ui = clicli.ui.get_by_handle(data.player, data.comp_name)
            return ui
        end,
    },
}

---@class EventParam.ET_TRIGGER_UI_TABWIDGET_CHANGE_EVENT
---@field player Player # Player
---@field ui_event_name string # ui event variable name
---@field comp_name string # Trigger event control name
---@field ui_tab_widget_index integer # Index value

--ui TAB click event
event.ET_TRIGGER_UI_TABWIDGET_CHANGE_EVENT = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "Player ID",
        lua_desc = "Player",
    },
    [2] = {
        name = "__ui_event_name",
        type = "string",
        lua_name = "ui_event_name",
        lua_type = "string",
        desc = "ui event variable name",
        lua_desc = "ui event variable name",
    },
    [3] = {
        name = "__comp_name",
        type = "string",
        lua_name = "comp_name",
        lua_type = "string",
        desc = "Trigger event control name",
        lua_desc = "Trigger event control name",
    },
    [4] = {
        name = "__ui_tab_widget_index",
        type = "integer",
        lua_name = "ui_tab_widget_index",
        lua_type = "integer",
        desc = "Index value",
        lua_desc = "Index value",
    },
}

---@class EventParam.ET_TRIGGER_UI_VIDEO_END_EVENT
---@field player Player # Player
---@field ui_event_name string # ui event variable name
---@field comp_name string # Trigger event control name
---@field str1 string # Custom information
---@field ui UI # ui

--ui video playback completed event
event.ET_TRIGGER_UI_VIDEO_END_EVENT = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "Player ID",
        lua_desc = "Player",
    },
    [2] = {
        name = "__ui_event_name",
        type = "string",
        lua_name = "ui_event_name",
        lua_type = "string",
        desc = "ui event variable name",
        lua_desc = "ui event variable name",
    },
    [3] = {
        name = "__comp_name",
        type = "string",
        lua_name = "comp_name",
        lua_type = "string",
        desc = "Trigger event control name",
        lua_desc = "Trigger event control name",
    },
    [4] = {
        name = "__str1",
        type = "string",
        lua_name = "str1",
        lua_type = "string",
        desc = "Custom information",
        lua_desc = "Custom information",
    },
    [5] = {
        name = nil,
        type = nil,
        lua_name = "ui",
        lua_type = "UI",
        lua_desc = "ui",
        lua_code = function (data)
            local ui = clicli.ui.get_by_handle(data.player, data.comp_name)
            return ui
        end,
    },
}

---@class EventParam.ET_TRIGGER_UI_INPUT_FIELD_GET_FOCUS_EVENT
---@field player Player # Player
---@field ui_event_name string # ui event variable name
---@field comp_name string # Trigger event control name
---@field ui UI # ui

--UI input box gets focus event
event.ET_TRIGGER_UI_INPUT_FIELD_GET_FOCUS_EVENT = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "Player ID",
        lua_desc = "Player",
    },
    [2] = {
        name = "__ui_event_name",
        type = "string",
        lua_name = "ui_event_name",
        lua_type = "string",
        desc = "ui event variable name",
        lua_desc = "ui event variable name",
    },
    [3] = {
        name = "__comp_name",
        type = "string",
        lua_name = "comp_name",
        lua_type = "string",
        desc = "Trigger event control name",
        lua_desc = "Trigger event control name",
    },
    [4] = {
        name = nil,
        type = nil,
        lua_name = "ui",
        lua_type = "UI",
        lua_desc = "ui",
        lua_code = function (data)
            local ui = clicli.ui.get_by_handle(data.player, data.comp_name)
            return ui
        end,
    },
}

---@class EventParam.ET_TRIGGER_UI_INPUT_FIELD_LOST_FOCUS_EVENT
---@field player Player # Player
---@field ui_event_name string # ui event variable name
---@field comp_name string # Trigger event control name
---@field ui UI # ui

--UI input box out of focus event
event.ET_TRIGGER_UI_INPUT_FIELD_LOST_FOCUS_EVENT = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "Player ID",
        lua_desc = "Player",
    },
    [2] = {
        name = "__ui_event_name",
        type = "string",
        lua_name = "ui_event_name",
        lua_type = "string",
        desc = "ui event variable name",
        lua_desc = "ui event variable name",
    },
    [3] = {
        name = "__comp_name",
        type = "string",
        lua_name = "comp_name",
        lua_type = "string",
        desc = "Trigger event control name",
        lua_desc = "Trigger event control name",
    },
    [4] = {
        name = nil,
        type = nil,
        lua_name = "ui",
        lua_type = "UI",
        lua_desc = "ui",
        lua_code = function (data)
            local ui = clicli.ui.get_by_handle(data.player, data.comp_name)
            return ui
        end,
    },
}

---@class EventParam.ET_TRIGGER_UI_INPUT_FIELD_TEXT_CHANGED_EVENT
---@field player Player # Player
---@field ui_event_name string # ui event variable name
---@field comp_name string # Trigger event control name
---@field str1 string # Text content
---@field ui UI # ui

--UI input box content change event
event.ET_TRIGGER_UI_INPUT_FIELD_TEXT_CHANGED_EVENT = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "Player ID",
        lua_desc = "Player",
    },
    [2] = {
        name = "__ui_event_name",
        type = "string",
        lua_name = "ui_event_name",
        lua_type = "string",
        desc = "ui event variable name",
        lua_desc = "ui event variable name",
    },
    [3] = {
        name = "__comp_name",
        type = "string",
        lua_name = "comp_name",
        lua_type = "string",
        desc = "Trigger event control name",
        lua_desc = "Trigger event control name",
    },
    [4] = {
        name = "__str1",
        type = "string",
        lua_name = "str1",
        lua_type = "string",
        desc = "Text content",
        lua_desc = "Text content",
    },
    [5] = {
        name = nil,
        type = nil,
        lua_name = "ui",
        lua_type = "UI",
        lua_desc = "ui",
        lua_code = function (data)
            local ui = clicli.ui.get_by_handle(data.player, data.comp_name)
            return ui
        end,
    },
}

---@class EventParam.ET_UI_RESOLUTION_CHANGED_EVENT

--UI resolution change event
event.ET_UI_RESOLUTION_CHANGED_EVENT = {}

---@class EventParam.ET_TRIGGER_LANGUAGE_CHANGED_EVENT

--Language change event
event.ET_TRIGGER_LANGUAGE_CHANGED_EVENT = {}

---@class EventParam.ET_GLOBAL_EVENT_TO_UI_WITH_DICT
---@field event_name string # ui event name
---@field args py.Dict # argument

--Global triggers send ui events
event.ET_GLOBAL_EVENT_TO_UI_WITH_DICT = {
    [1] = {
        name = "__event_name",
        type = "string",
        lua_name = "event_name",
        lua_type = "string",
        desc = "ui event name",
        lua_desc = "ui event name",
    },
    [2] = {
        name = "__args",
        type = "py.Dict",
        lua_name = "args",
        lua_type = "py.Dict",
        desc = "argument",
        lua_desc = "argument",
    },
}

---@class EventParam.ET_KEYBOARD_KEY_DOWN_EVENT
---@field player Player # The player who triggers the button
---@field current_key py.KeyboardKey # Current keyboard key

--Keyboard keys are pressed
event.ET_KEYBOARD_KEY_DOWN_EVENT = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "The player ID that triggered the button",
        lua_desc = "The player who triggers the button",
    },
    [2] = {
        name = "__current_key",
        type = "py.KeyboardKey",
        lua_name = "current_key",
        lua_type = "py.KeyboardKey",
        desc = "Current keyboard key",
        lua_desc = "Current keyboard key",
    },
}

---@class EventParam.ET_KEYBOARD_KEY_UP_EVENT
---@field player Player # The player who triggers the button
---@field current_key py.KeyboardKey # Current keyboard key

--Keyboard key lift
event.ET_KEYBOARD_KEY_UP_EVENT = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "The player ID that triggered the button",
        lua_desc = "The player who triggers the button",
    },
    [2] = {
        name = "__current_key",
        type = "py.KeyboardKey",
        lua_name = "current_key",
        lua_type = "py.KeyboardKey",
        desc = "Current keyboard key",
        lua_desc = "Current keyboard key",
    },
}

---@class EventParam.ET_ASYNC_KEYBOARD_KEY_DOWN_EVENT
---@field player Player # The player who triggers the button
---@field current_key py.KeyboardKey # Current keyboard key

--Asynchronous keyboard keys are pressed
event.ET_ASYNC_KEYBOARD_KEY_DOWN_EVENT = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "The player ID that triggered the button",
        lua_desc = "The player who triggers the button",
    },
    [2] = {
        name = "__current_key",
        type = "py.KeyboardKey",
        lua_name = "current_key",
        lua_type = "py.KeyboardKey",
        desc = "Current keyboard key",
        lua_desc = "Current keyboard key",
    },
}

---@class EventParam.ET_ASYNC_KEYBOARD_KEY_UP_EVENT
---@field player Player # The player who triggers the button
---@field current_key py.KeyboardKey # Current keyboard key

--Asynchronous keyboard key lift
event.ET_ASYNC_KEYBOARD_KEY_UP_EVENT = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "The player ID that triggered the button",
        lua_desc = "The player who triggers the button",
    },
    [2] = {
        name = "__current_key",
        type = "py.KeyboardKey",
        lua_name = "current_key",
        lua_type = "py.KeyboardKey",
        desc = "Current keyboard key",
        lua_desc = "Current keyboard key",
    },
}

---@class EventParam.ET_MOUSE_KEY_DOWN_EVENT
---@field player Player # The player who triggers the button
---@field current_key py.MouseKey # Current mouse button
---@field pointing_world_pos Point # The mouse points to the world coordinates
---@field is_click_swallowed_by_ui boolean # Whether the click event is swallowed by the UI

--Press the mouse button
event.ET_MOUSE_KEY_DOWN_EVENT = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "The player ID that triggered the button",
        lua_desc = "The player who triggers the button",
    },
    [2] = {
        name = "__current_key",
        type = "py.MouseKey",
        lua_name = "current_key",
        lua_type = "py.MouseKey",
        desc = "Current mouse button",
        lua_desc = "Current mouse button",
    },
    [3] = {
        name = "__pointing_world_pos",
        type = "py.Point",
        lua_name = "pointing_world_pos",
        lua_type = "Point",
        desc = "The mouse points to the world coordinates",
        lua_desc = "The mouse points to the world coordinates",
    },
    [4] = {
        name = "__is_click_swallowed_by_ui",
        type = "boolean",
        lua_name = "is_click_swallowed_by_ui",
        lua_type = "boolean",
        desc = "Whether the click event is swallowed by the UI",
        lua_desc = "Whether the click event is swallowed by the UI",
    },
}

---@class EventParam.ET_MOUSE_KEY_UP_EVENT
---@field player Player # The player who triggers the button
---@field current_key py.MouseKey # Current mouse button
---@field pointing_world_pos Point # The mouse points to the world coordinates

--Mouse button lift
event.ET_MOUSE_KEY_UP_EVENT = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "The player ID that triggered the button",
        lua_desc = "The player who triggers the button",
    },
    [2] = {
        name = "__current_key",
        type = "py.MouseKey",
        lua_name = "current_key",
        lua_type = "py.MouseKey",
        desc = "Current mouse button",
        lua_desc = "Current mouse button",
    },
    [3] = {
        name = "__pointing_world_pos",
        type = "py.Point",
        lua_name = "pointing_world_pos",
        lua_type = "Point",
        desc = "The mouse points to the world coordinates",
        lua_desc = "The mouse points to the world coordinates",
    },
}

---@class EventParam.MOUSE_KEY_DB_CLICK_EVENT
---@field player Player # The player who triggers the button
---@field current_key py.MouseKey # Current mouse button
---@field pointing_world_pos Point # The mouse points to the world coordinates

--Double click
event.MOUSE_KEY_DB_CLICK_EVENT = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "The player ID that triggered the button",
        lua_desc = "The player who triggers the button",
    },
    [2] = {
        name = "__current_key",
        type = "py.MouseKey",
        lua_name = "current_key",
        lua_type = "py.MouseKey",
        desc = "Current mouse button",
        lua_desc = "Current mouse button",
    },
    [3] = {
        name = "__pointing_world_pos",
        type = "py.Point",
        lua_name = "pointing_world_pos",
        lua_type = "Point",
        desc = "The mouse points to the world coordinates",
        lua_desc = "The mouse points to the world coordinates",
    },
}

---@class EventParam.ET_ASYNC_MOUSE_KEY_DOWN_EVENT
---@field player Player # The player who triggers the button
---@field current_key py.MouseKey # Current mouse button
---@field pointing_world_pos Point # The mouse points to the world coordinates
---@field is_click_swallowed_by_ui boolean # Whether the click event is swallowed by the UI

--Asynchronous mouse key press
event.ET_ASYNC_MOUSE_KEY_DOWN_EVENT = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "The player ID that triggered the button",
        lua_desc = "The player who triggers the button",
    },
    [2] = {
        name = "__current_key",
        type = "py.MouseKey",
        lua_name = "current_key",
        lua_type = "py.MouseKey",
        desc = "Current mouse button",
        lua_desc = "Current mouse button",
    },
    [3] = {
        name = "__pointing_world_pos",
        type = "py.Point",
        lua_name = "pointing_world_pos",
        lua_type = "Point",
        desc = "The mouse points to the world coordinates",
        lua_desc = "The mouse points to the world coordinates",
    },
    [4] = {
        name = "__is_click_swallowed_by_ui",
        type = "boolean",
        lua_name = "is_click_swallowed_by_ui",
        lua_type = "boolean",
        desc = "Whether the click event is swallowed by the UI",
        lua_desc = "Whether the click event is swallowed by the UI",
    },
}

---@class EventParam.ET_ASYNC_MOUSE_KEY_UP_EVENT
---@field player Player # The player who triggers the button
---@field current_key py.MouseKey # Current mouse button
---@field pointing_world_pos Point # The mouse points to the world coordinates

--Asynchronous mouse button lift
event.ET_ASYNC_MOUSE_KEY_UP_EVENT = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "The player ID that triggered the button",
        lua_desc = "The player who triggers the button",
    },
    [2] = {
        name = "__current_key",
        type = "py.MouseKey",
        lua_name = "current_key",
        lua_type = "py.MouseKey",
        desc = "Current mouse button",
        lua_desc = "Current mouse button",
    },
    [3] = {
        name = "__pointing_world_pos",
        type = "py.Point",
        lua_name = "pointing_world_pos",
        lua_type = "Point",
        desc = "The mouse points to the world coordinates",
        lua_desc = "The mouse points to the world coordinates",
    },
}

---@class EventParam.ET_ASYNC_MOUSE_KEY_DB_CLICK_EVENT
---@field player Player # The player who triggers the button
---@field current_key py.MouseKey # Current mouse button
---@field pointing_world_pos Point # The mouse points to the world coordinates

--Asynchronous mouse button double-click
event.ET_ASYNC_MOUSE_KEY_DB_CLICK_EVENT = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "The player ID that triggered the button",
        lua_desc = "The player who triggers the button",
    },
    [2] = {
        name = "__current_key",
        type = "py.MouseKey",
        lua_name = "current_key",
        lua_type = "py.MouseKey",
        desc = "Current mouse button",
        lua_desc = "Current mouse button",
    },
    [3] = {
        name = "__pointing_world_pos",
        type = "py.Point",
        lua_name = "pointing_world_pos",
        lua_type = "Point",
        desc = "The mouse points to the world coordinates",
        lua_desc = "The mouse points to the world coordinates",
    },
}

---@class EventParam.MOUSE_KEY_DOWN_UNIT_EVENT
---@field player Player # The player who triggers the button
---@field current_key py.MouseKey # Current mouse button
---@field unit Unit # Unit of the current operation

--The mouse button presses the unit
event.MOUSE_KEY_DOWN_UNIT_EVENT = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "The player ID that triggered the button",
        lua_desc = "The player who triggers the button",
    },
    [2] = {
        name = "__current_key",
        type = "py.MouseKey",
        lua_name = "current_key",
        lua_type = "py.MouseKey",
        desc = "Current mouse button",
        lua_desc = "Current mouse button",
    },
    [3] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Unit ID of the current operation",
        lua_desc = "Unit of the current operation",
    },
}

---@class EventParam.MOUSE_KEY_UP_UNIT_EVENT
---@field player Player # The player who triggers the button
---@field current_key py.MouseKey # Current mouse button
---@field unit Unit # Unit of the current operation

--Mouse button lift unit
event.MOUSE_KEY_UP_UNIT_EVENT = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "The player ID that triggered the button",
        lua_desc = "The player who triggers the button",
    },
    [2] = {
        name = "__current_key",
        type = "py.MouseKey",
        lua_name = "current_key",
        lua_type = "py.MouseKey",
        desc = "Current mouse button",
        lua_desc = "Current mouse button",
    },
    [3] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Unit ID of the current operation",
        lua_desc = "Unit of the current operation",
    },
}

---@class EventParam.MOUSE_KEY_DB_CLICK_UNIT_EVENT
---@field player Player # The player who triggers the button
---@field current_key py.MouseKey # Current mouse button
---@field unit Unit # Unit of the current operation

--Double-click the unit with the mouse button
event.MOUSE_KEY_DB_CLICK_UNIT_EVENT = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "The player ID that triggered the button",
        lua_desc = "The player who triggers the button",
    },
    [2] = {
        name = "__current_key",
        type = "py.MouseKey",
        lua_name = "current_key",
        lua_type = "py.MouseKey",
        desc = "Current mouse button",
        lua_desc = "Current mouse button",
    },
    [3] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Unit ID of the current operation",
        lua_desc = "Unit of the current operation",
    },
}

---@class EventParam.ET_MOUSE_KEY_DOWN_UNIT_EVENT
---@field player Player # The player who triggers the button
---@field current_key py.MouseKey # Current mouse button
---@field unit Unit # Unit of the current operation

--The asynchronous mouse button presses the unit
event.ET_MOUSE_KEY_DOWN_UNIT_EVENT = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "The player ID that triggered the button",
        lua_desc = "The player who triggers the button",
    },
    [2] = {
        name = "__current_key",
        type = "py.MouseKey",
        lua_name = "current_key",
        lua_type = "py.MouseKey",
        desc = "Current mouse button",
        lua_desc = "Current mouse button",
    },
    [3] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Unit ID of the current operation",
        lua_desc = "Unit of the current operation",
    },
}

---@class EventParam.ET_MOUSE_KEY_UP_UNIT_EVENT
---@field player Player # The player who triggers the button
---@field current_key py.MouseKey # Current mouse button
---@field unit Unit # Unit of the current operation

--Asynchronous mouse key lift unit
event.ET_MOUSE_KEY_UP_UNIT_EVENT = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "The player ID that triggered the button",
        lua_desc = "The player who triggers the button",
    },
    [2] = {
        name = "__current_key",
        type = "py.MouseKey",
        lua_name = "current_key",
        lua_type = "py.MouseKey",
        desc = "Current mouse button",
        lua_desc = "Current mouse button",
    },
    [3] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Unit ID of the current operation",
        lua_desc = "Unit of the current operation",
    },
}

---@class EventParam.ET_MOUSE_KEY_DB_CLICK_UNIT_EVENT
---@field player Player # The player who triggers the button
---@field current_key py.MouseKey # Current mouse button
---@field unit Unit # Unit of the current operation

--Asynchronous mouse button double click the unit
event.ET_MOUSE_KEY_DB_CLICK_UNIT_EVENT = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "The player ID that triggered the button",
        lua_desc = "The player who triggers the button",
    },
    [2] = {
        name = "__current_key",
        type = "py.MouseKey",
        lua_name = "current_key",
        lua_type = "py.MouseKey",
        desc = "Current mouse button",
        lua_desc = "Current mouse button",
    },
    [3] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Unit ID of the current operation",
        lua_desc = "Unit of the current operation",
    },
}

---@class EventParam.MOUSE_MOVE_EVENT
---@field player Player # The player who triggers the button
---@field pointing_world_pos Point # The mouse points to the world coordinates
---@field tar_x integer # The mouse points to the screen coordinate X
---@field tar_y integer # The mouse points to the screen coordinate Y

--Mouse movement event
event.MOUSE_MOVE_EVENT = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "The player ID that triggered the button",
        lua_desc = "The player who triggers the button",
    },
    [2] = {
        name = "__pointing_world_pos",
        type = "py.Point",
        lua_name = "pointing_world_pos",
        lua_type = "Point",
        desc = "The mouse points to the world coordinates",
        lua_desc = "The mouse points to the world coordinates",
    },
    [3] = {
        name = "__tar_x",
        type = "integer",
        lua_name = "tar_x",
        lua_type = "integer",
        desc = "The mouse points to the screen coordinate X",
        lua_desc = "The mouse points to the screen coordinate X",
    },
    [4] = {
        name = "__tar_y",
        type = "integer",
        lua_name = "tar_y",
        lua_type = "integer",
        desc = "The mouse points to the screen coordinate Y",
        lua_desc = "The mouse points to the screen coordinate Y",
    },
}

---@class EventParam.ET_ASYNC_MOUSE_MOVE_EVENT
---@field player Player # The player who triggers the button
---@field pointing_world_pos Point # The mouse points to the world coordinates
---@field tar_x integer # The mouse points to the screen coordinate X
---@field tar_y integer # The mouse points to the screen coordinate Y

--Asynchronous mouse movement event
event.ET_ASYNC_MOUSE_MOVE_EVENT = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "The player ID that triggered the button",
        lua_desc = "The player who triggers the button",
    },
    [2] = {
        name = "__pointing_world_pos",
        type = "py.Point",
        lua_name = "pointing_world_pos",
        lua_type = "Point",
        desc = "The mouse points to the world coordinates",
        lua_desc = "The mouse points to the world coordinates",
    },
    [3] = {
        name = "__tar_x",
        type = "integer",
        lua_name = "tar_x",
        lua_type = "integer",
        desc = "The mouse points to the screen coordinate X",
        lua_desc = "The mouse points to the screen coordinate X",
    },
    [4] = {
        name = "__tar_y",
        type = "integer",
        lua_name = "tar_y",
        lua_type = "integer",
        desc = "The mouse points to the screen coordinate Y",
        lua_desc = "The mouse points to the screen coordinate Y",
    },
}

---@class EventParam.ET_MOUSE_WHEEL_EVENT
---@field player Player # The player who triggers the button
---@field mouse_wheel py.MouseWheel # Current mouse wheel

--Mouse wheel event
event.ET_MOUSE_WHEEL_EVENT = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "The player ID that triggered the button",
        lua_desc = "The player who triggers the button",
    },
    [2] = {
        name = "__mouse_wheel",
        type = "py.MouseWheel",
        lua_name = "mouse_wheel",
        lua_type = "py.MouseWheel",
        desc = "Current mouse wheel",
        lua_desc = "Current mouse wheel",
    },
}

---@class EventParam.ET_ASYNC_MOUSE_WHEEL_EVENT
---@field player Player # The player who triggers the button
---@field mouse_wheel py.MouseWheel # Current mouse wheel

--Mouse wheel event
event.ET_ASYNC_MOUSE_WHEEL_EVENT = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "The player ID that triggered the button",
        lua_desc = "The player who triggers the button",
    },
    [2] = {
        name = "__mouse_wheel",
        type = "py.MouseWheel",
        lua_name = "mouse_wheel",
        lua_type = "py.MouseWheel",
        desc = "Current mouse wheel",
        lua_desc = "Current mouse wheel",
    },
}

---@class EventParam.LOCAL_MOUSE_MOVE_EVENT

--Local mouse movement event (do not use this event for logical operations)
event.LOCAL_MOUSE_MOVE_EVENT = {}

---@class EventParam.MOUSE_DOWN_RAW_INPUT_EVENT
---@field player Player # The player who triggers the button
---@field current_key py.KeyboardKey # Current mouse button
---@field pointing_world_pos Point # Mouse location
---@field unit_group_id_list UnitGroup # The unit in which the mouse clicks when the event occurs

--Mouse click on the original input event
event.MOUSE_DOWN_RAW_INPUT_EVENT = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "The player ID that triggered the button",
        lua_desc = "The player who triggers the button",
    },
    [2] = {
        name = "__current_key",
        type = "py.KeyboardKey",
        lua_name = "current_key",
        lua_type = "py.KeyboardKey",
        desc = "Current mouse button",
        lua_desc = "Current mouse button",
    },
    [3] = {
        name = "__pointing_world_pos",
        type = "py.Point",
        lua_name = "pointing_world_pos",
        lua_type = "Point",
        desc = "Mouse location",
        lua_desc = "Mouse location",
    },
    [4] = {
        name = "__unit_group_id_list",
        type = "py.UnitGroup",
        lua_name = "unit_group_id_list",
        lua_type = "UnitGroup",
        desc = "The unit in which the mouse clicks when the event occurs",
        lua_desc = "The unit in which the mouse clicks when the event occurs",
    },
}

---@class EventParam.MOUSE_UP_RAW_INPUT_EVENT
---@field player Player # The player who triggers the button
---@field current_key py.KeyboardKey # Current mouse button
---@field pointing_world_pos Point # Mouse location
---@field unit_group_id_list UnitGroup # The unit in which the mouse clicks when the event occurs

--The mouse lifts the original input event
event.MOUSE_UP_RAW_INPUT_EVENT = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "The player ID that triggered the button",
        lua_desc = "The player who triggers the button",
    },
    [2] = {
        name = "__current_key",
        type = "py.KeyboardKey",
        lua_name = "current_key",
        lua_type = "py.KeyboardKey",
        desc = "Current mouse button",
        lua_desc = "Current mouse button",
    },
    [3] = {
        name = "__pointing_world_pos",
        type = "py.Point",
        lua_name = "pointing_world_pos",
        lua_type = "Point",
        desc = "Mouse location",
        lua_desc = "Mouse location",
    },
    [4] = {
        name = "__unit_group_id_list",
        type = "py.UnitGroup",
        lua_name = "unit_group_id_list",
        lua_type = "UnitGroup",
        desc = "The unit in which the mouse clicks when the event occurs",
        lua_desc = "The unit in which the mouse clicks when the event occurs",
    },
}

---@class EventParam.ET_UNIT_EVENT_TO_GLOBAL
---@field event_name string # Event name
---@field point Point # point
---@field int1 integer # Integer 1
---@field float1 number # Real number 1
---@field bool1 boolean # Boolean 1
---@field str1 string # String 1
---@field unit Unit # unit

--The unit trigger sends an event to the global trigger
event.ET_UNIT_EVENT_TO_GLOBAL = {
    [1] = {
        name = "__event_name",
        type = "string",
        lua_name = "event_name",
        lua_type = "string",
        desc = "Event name",
        lua_desc = "Event name",
    },
    [2] = {
        name = "__point",
        type = "py.Point",
        lua_name = "point",
        lua_type = "Point",
        desc = "point",
        lua_desc = "point",
    },
    [3] = {
        name = "__int1",
        type = "integer",
        lua_name = "int1",
        lua_type = "integer",
        desc = "Integer 1",
        lua_desc = "Integer 1",
    },
    [4] = {
        name = "__float1",
        type = "py.Fixed",
        lua_name = "float1",
        lua_type = "number",
        desc = "Real number 1",
        lua_desc = "Real number 1",
    },
    [5] = {
        name = "__bool1",
        type = "boolean",
        lua_name = "bool1",
        lua_type = "boolean",
        desc = "Boolean 1",
        lua_desc = "Boolean 1",
    },
    [6] = {
        name = "__str1",
        type = "string",
        lua_name = "str1",
        lua_type = "string",
        desc = "String 1",
        lua_desc = "String 1",
    },
    [7] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Unit id",
        lua_desc = "unit",
    },
}

---@class EventParam.ET_ABILITY_EVENT_TO_GLOBAL
---@field event_name string # Event name
---@field point Point # point
---@field int1 integer # Integer 1
---@field float1 number # Real number 1
---@field bool1 boolean # Boolean 1
---@field str1 string # String 1
---@field unit Unit # unit

--The skill trigger sends an event to the global trigger
event.ET_ABILITY_EVENT_TO_GLOBAL = {
    [1] = {
        name = "__event_name",
        type = "string",
        lua_name = "event_name",
        lua_type = "string",
        desc = "Event name",
        lua_desc = "Event name",
    },
    [2] = {
        name = "__point",
        type = "py.Point",
        lua_name = "point",
        lua_type = "Point",
        desc = "point",
        lua_desc = "point",
    },
    [3] = {
        name = "__int1",
        type = "integer",
        lua_name = "int1",
        lua_type = "integer",
        desc = "Integer 1",
        lua_desc = "Integer 1",
    },
    [4] = {
        name = "__float1",
        type = "py.Fixed",
        lua_name = "float1",
        lua_type = "number",
        desc = "Real number 1",
        lua_desc = "Real number 1",
    },
    [5] = {
        name = "__bool1",
        type = "boolean",
        lua_name = "bool1",
        lua_type = "boolean",
        desc = "Boolean 1",
        lua_desc = "Boolean 1",
    },
    [6] = {
        name = "__str1",
        type = "string",
        lua_name = "str1",
        lua_type = "string",
        desc = "String 1",
        lua_desc = "String 1",
    },
    [7] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Unit id",
        lua_desc = "unit",
    },
}

---@class EventParam.ET_MODIFIER_EVENT_TO_GLOBAL
---@field event_name string # Event name
---@field point Point # point
---@field int1 integer # Integer 1
---@field float1 number # Real number 1
---@field bool1 boolean # Boolean 1
---@field str1 string # String 1
---@field unit Unit # unit

--The effect trigger sends an event to the global trigger
event.ET_MODIFIER_EVENT_TO_GLOBAL = {
    [1] = {
        name = "__event_name",
        type = "string",
        lua_name = "event_name",
        lua_type = "string",
        desc = "Event name",
        lua_desc = "Event name",
    },
    [2] = {
        name = "__point",
        type = "py.Point",
        lua_name = "point",
        lua_type = "Point",
        desc = "point",
        lua_desc = "point",
    },
    [3] = {
        name = "__int1",
        type = "integer",
        lua_name = "int1",
        lua_type = "integer",
        desc = "Integer 1",
        lua_desc = "Integer 1",
    },
    [4] = {
        name = "__float1",
        type = "py.Fixed",
        lua_name = "float1",
        lua_type = "number",
        desc = "Real number 1",
        lua_desc = "Real number 1",
    },
    [5] = {
        name = "__bool1",
        type = "boolean",
        lua_name = "bool1",
        lua_type = "boolean",
        desc = "Boolean 1",
        lua_desc = "Boolean 1",
    },
    [6] = {
        name = "__str1",
        type = "string",
        lua_name = "str1",
        lua_type = "string",
        desc = "String 1",
        lua_desc = "String 1",
    },
    [7] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Unit id",
        lua_desc = "unit",
    },
}

---@class EventParam.ET_PROJECTILE_EVENT_TO_GLOBAL
---@field event_name string # Event name
---@field point Point # point
---@field int1 integer # Integer 1
---@field float1 number # Real number 1
---@field bool1 boolean # Boolean 1
---@field str1 string # String 1
---@field unit Unit # unit

--The projectile trigger sends an event to the global trigger
event.ET_PROJECTILE_EVENT_TO_GLOBAL = {
    [1] = {
        name = "__event_name",
        type = "string",
        lua_name = "event_name",
        lua_type = "string",
        desc = "Event name",
        lua_desc = "Event name",
    },
    [2] = {
        name = "__point",
        type = "py.Point",
        lua_name = "point",
        lua_type = "Point",
        desc = "point",
        lua_desc = "point",
    },
    [3] = {
        name = "__int1",
        type = "integer",
        lua_name = "int1",
        lua_type = "integer",
        desc = "Integer 1",
        lua_desc = "Integer 1",
    },
    [4] = {
        name = "__float1",
        type = "py.Fixed",
        lua_name = "float1",
        lua_type = "number",
        desc = "Real number 1",
        lua_desc = "Real number 1",
    },
    [5] = {
        name = "__bool1",
        type = "boolean",
        lua_name = "bool1",
        lua_type = "boolean",
        desc = "Boolean 1",
        lua_desc = "Boolean 1",
    },
    [6] = {
        name = "__str1",
        type = "string",
        lua_name = "str1",
        lua_type = "string",
        desc = "String 1",
        lua_desc = "String 1",
    },
    [7] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Unit id",
        lua_desc = "unit",
    },
}

---@class EventParam.ET_ITEM_EVENT_TO_GLOBAL
---@field event_name string # Event name
---@field point Point # point
---@field int1 integer # Integer 1
---@field float1 number # Real number 1
---@field bool1 boolean # Boolean 1
---@field str1 string # String 1
---@field unit Unit # unit

--The item trigger sends an event to the global trigger
event.ET_ITEM_EVENT_TO_GLOBAL = {
    [1] = {
        name = "__event_name",
        type = "string",
        lua_name = "event_name",
        lua_type = "string",
        desc = "Event name",
        lua_desc = "Event name",
    },
    [2] = {
        name = "__point",
        type = "py.Point",
        lua_name = "point",
        lua_type = "Point",
        desc = "point",
        lua_desc = "point",
    },
    [3] = {
        name = "__int1",
        type = "integer",
        lua_name = "int1",
        lua_type = "integer",
        desc = "Integer 1",
        lua_desc = "Integer 1",
    },
    [4] = {
        name = "__float1",
        type = "py.Fixed",
        lua_name = "float1",
        lua_type = "number",
        desc = "Real number 1",
        lua_desc = "Real number 1",
    },
    [5] = {
        name = "__bool1",
        type = "boolean",
        lua_name = "bool1",
        lua_type = "boolean",
        desc = "Boolean 1",
        lua_desc = "Boolean 1",
    },
    [6] = {
        name = "__str1",
        type = "string",
        lua_name = "str1",
        lua_type = "string",
        desc = "String 1",
        lua_desc = "String 1",
    },
    [7] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Unit id",
        lua_desc = "unit",
    },
}

---@class EventParam.ET_SELECT_UNIT
---@field player Player # Player
---@field unit Unit # Click to unit

--Player selected unit
event.ET_SELECT_UNIT = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "Player ID",
        lua_desc = "Player",
    },
    [2] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Click on the unit id",
        lua_desc = "Click to unit",
    },
}

---@class EventParam.ET_ASYNC_SELECT_UNIT
---@field player Player # Player
---@field unit Unit # Click unit

--Asynchronous player selects units
event.ET_ASYNC_SELECT_UNIT = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "Player ID",
        lua_desc = "Player",
    },
    [2] = {
        name = nil,
        type = nil,
        lua_name = "unit",
        lua_type = "Unit",
        lua_desc = "Click unit",
        lua_code = function (data)
            local unit_id = data._py_params['__unit_id']
                        or  data._py_params['__destructible_id']
            return clicli.unit.get_by_id(unit_id)
        end,
    },
}

---@class EventParam.CANCEL_SELECT_UNIT
---@field player Player # Player

--Uncheck unit
event.CANCEL_SELECT_UNIT = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "Player ID",
        lua_desc = "Player",
    },
}

---@class EventParam.ET_ASYNC_CANCEL_SELECT_UNIT
---@field player Player # Player

--Asynchronous cancellation unit selected
event.ET_ASYNC_CANCEL_SELECT_UNIT = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "Player ID",
        lua_desc = "Player",
    },
}

---@class EventParam.LOST_SELECT_UNIT
---@field player Player # Player
---@field unit Unit # Click to unit

--Lost selected unit
event.LOST_SELECT_UNIT = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "Player ID",
        lua_desc = "Player",
    },
    [2] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Click on the unit id",
        lua_desc = "Click to unit",
    },
}

---@class EventParam.ET_ASYNC_LOST_SELECT_UNIT
---@field player Player # Player
---@field unit Unit # Click to unit

--Asynchronous lost unit selected
event.ET_ASYNC_LOST_SELECT_UNIT = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "Player ID",
        lua_desc = "Player",
    },
    [2] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Click on the unit id",
        lua_desc = "Click to unit",
    },
}

---@class EventParam.ET_HIGH_LIGHT_UNIT_CHANGE
---@field player Player # Player
---@field high_light_unit_id py.HighLightUnitID # Highlight the unit id

--Highlighted units controlled by the player
event.ET_HIGH_LIGHT_UNIT_CHANGE = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "Player ID",
        lua_desc = "Player",
    },
    [2] = {
        name = "__high_light_unit_id",
        type = "py.HighLightUnitID",
        lua_name = "high_light_unit_id",
        lua_type = "py.HighLightUnitID",
        desc = "Highlight the unit id",
        lua_desc = "Highlight the unit id",
    },
}

---@class EventParam.ET_SELECT_ITEM
---@field player Player # Player
---@field item Item # Click to item

--Player selected item
event.ET_SELECT_ITEM = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "Player ID",
        lua_desc = "Player",
    },
    [2] = {
        name = "__item_id",
        type = "py.ItemID",
        lua_name = "item",
        lua_type = "Item",
        desc = "Click on the item id",
        lua_desc = "Click to item",
    },
}

---@class EventParam.ET_ASYNC_SELECT_ITEM
---@field player Player # Player
---@field item Item # Click to item

--Asynchronous player selects item
event.ET_ASYNC_SELECT_ITEM = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "Player ID",
        lua_desc = "Player",
    },
    [2] = {
        name = "__item_id",
        type = "py.ItemID",
        lua_name = "item",
        lua_type = "Item",
        desc = "Click on the item id",
        lua_desc = "Click to item",
    },
}

---@class EventParam.ET_ATTR_CHEATING_DETECTED
---@field player Player # Cheat player
---@field unit Unit # Cheating unit
---@field attr_key string # Cheat attribute name
---@field cheating_value number # Cheat value
---@field real_value number # True value

--Player cheating
event.ET_ATTR_CHEATING_DETECTED = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "Cheating player ID",
        lua_desc = "Cheat player",
    },
    [2] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Cheat unit id",
        lua_desc = "Cheating unit",
    },
    [3] = {
        name = "__attr_key",
        type = "string",
        lua_name = "attr_key",
        lua_type = "string",
        desc = "Cheat attribute name",
        lua_desc = "Cheat attribute name",
    },
    [4] = {
        name = "__cheating_value",
        type = "py.Fixed",
        lua_name = "cheating_value",
        lua_type = "number",
        desc = "Cheat value",
        lua_desc = "Cheat value",
    },
    [5] = {
        name = "__real_value",
        type = "py.Fixed",
        lua_name = "real_value",
        lua_type = "number",
        desc = "True value",
        lua_desc = "True value",
    },
}

---@class EventParam.ET_DOUBLE_CLICK_ITEM
---@field player Player # Player
---@field item Item # Double click to item

--The player double-clicks the selected item
event.ET_DOUBLE_CLICK_ITEM = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "Player ID",
        lua_desc = "Player",
    },
    [2] = {
        name = "__item_id",
        type = "py.ItemID",
        lua_name = "item",
        lua_type = "Item",
        desc = "Double-click on the item id",
        lua_desc = "Double click to item",
    },
}

---@class EventParam.ET_OPEN_SHOP_PANEL
---@field player Player # Player
---@field unit Unit # Shop unit

--Open the store screen
event.ET_OPEN_SHOP_PANEL = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "Player ID",
        lua_desc = "Player",
    },
    [2] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Shop unit ID",
        lua_desc = "Shop unit",
    },
}

---@class EventParam.ET_DOUBLE_CLICK_DEST
---@field player Player # Player
---@field destructible Destructible # Double click on destructible

--Players double-click to select destructible objects
event.ET_DOUBLE_CLICK_DEST = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "Player ID",
        lua_desc = "Player",
    },
    [2] = {
        name = "__destructible_id",
        type = "py.DestructibleID",
        lua_name = "destructible",
        lua_type = "Destructible",
        desc = "Double-click to destruct id",
        lua_desc = "Double click on destructible",
    },
}

---@class EventParam.ET_SELECT_UNIT_GROUP
---@field player Player # Player
---@field unit_group_id_list UnitGroup # Box is selected to the list of unit group ids
---@field team_id integer # Team number

--The player selects the unit group
event.ET_SELECT_UNIT_GROUP = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "Player ID",
        lua_desc = "Player",
    },
    [2] = {
        name = "__unit_group_id_list",
        type = "py.UnitGroup",
        lua_name = "unit_group_id_list",
        lua_type = "UnitGroup",
        desc = "Box is selected to the list of unit group ids",
        lua_desc = "Box is selected to the list of unit group ids",
    },
    [3] = {
        name = "__team_id",
        type = "integer",
        lua_name = "team_id",
        lua_type = "integer",
        desc = "Team number",
        lua_desc = "Team number",
    },
}

---@class EventParam.ET_ASYNC_SELECT_UNIT_GROUP
---@field player Player # Player
---@field unit_group_id_list UnitGroup # Box is selected to the list of unit group ids
---@field team_id integer # Team number

--The player selects the unit group
event.ET_ASYNC_SELECT_UNIT_GROUP = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "Player ID",
        lua_desc = "Player",
    },
    [2] = {
        name = "__unit_group_id_list",
        type = "py.UnitGroup",
        lua_name = "unit_group_id_list",
        lua_type = "UnitGroup",
        desc = "Box is selected to the list of unit group ids",
        lua_desc = "Box is selected to the list of unit group ids",
    },
    [3] = {
        name = "__team_id",
        type = "integer",
        lua_name = "team_id",
        lua_type = "integer",
        desc = "Team number",
        lua_desc = "Team number",
    },
}

---@class EventParam.ET_START_SKILL_POINTER
---@field player Player # Player
---@field unit Unit # Release unit
---@field ability_type py.AbilityType # Skill type
---@field ability_index py.AbilityIndex # Skill Index
---@field ability_seq py.AbilitySeq # Skills Seq
---@field ability Ability # skill

--Turn on skill indicator
event.ET_START_SKILL_POINTER = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "Player ID",
        lua_desc = "Player",
    },
    [2] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Release unit id",
        lua_desc = "Release unit",
    },
    [3] = {
        name = "__ability_type",
        type = "py.AbilityType",
        lua_name = "ability_type",
        lua_type = "py.AbilityType",
        desc = "Skill type",
        lua_desc = "Skill type",
    },
    [4] = {
        name = "__ability_index",
        type = "py.AbilityIndex",
        lua_name = "ability_index",
        lua_type = "py.AbilityIndex",
        desc = "Skill Index",
        lua_desc = "Skill Index",
    },
    [5] = {
        name = "__ability_seq",
        type = "py.AbilitySeq",
        lua_name = "ability_seq",
        lua_type = "py.AbilitySeq",
        desc = "Skills Seq",
        lua_desc = "Skills Seq",
    },
    [6] = {
        name = nil,
        type = nil,
        lua_name = "ability",
        lua_type = "Ability",
        lua_desc = "skill",
        lua_code = function (data)
            return data.unit:get_ability_by_seq(data.ability_seq)
        end,
    },
}

---@class EventParam.ET_BUILD_SKILL_BEFORE_RELEASE
---@field player Player # Player
---@field unit Unit # Release unit
---@field ability_seq py.AbilitySeq # Skills Seq
---@field ability Ability # skill
---@field new_unit_key py.UnitKey # Item ID of the unit to be built
---@field ability_target_pos Point # Casting target position
---@field ability_release_id py.AbilityReleaseId # Single skill release unique ID

--Build skills before release
event.ET_BUILD_SKILL_BEFORE_RELEASE = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "Player ID",
        lua_desc = "Player",
    },
    [2] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Release unit id",
        lua_desc = "Release unit",
    },
    [3] = {
        name = "__ability_seq",
        type = "py.AbilitySeq",
        lua_name = "ability_seq",
        lua_type = "py.AbilitySeq",
        desc = "Skills Seq",
        lua_desc = "Skills Seq",
    },
    [4] = {
        name = nil,
        type = nil,
        lua_name = "ability",
        lua_type = "Ability",
        lua_desc = "skill",
        lua_code = function (data)
            return data.unit:get_ability_by_seq(data.ability_seq)
        end,
    },
    [5] = {
        name = "__new_unit_key",
        type = "py.UnitKey",
        lua_name = "new_unit_key",
        lua_type = "py.UnitKey",
        desc = "Item ID of the unit to be built",
        lua_desc = "Item ID of the unit to be built",
    },
    [6] = {
        name = "__ability_target_pos",
        type = "py.Point",
        lua_name = "ability_target_pos",
        lua_type = "Point",
        desc = "Casting target position",
        lua_desc = "Casting target position",
    },
    [7] = {
        name = "__ability_release_id",
        type = "py.AbilityReleaseId",
        lua_name = "ability_release_id",
        lua_type = "py.AbilityReleaseId",
        desc = "Single skill release unique ID",
        lua_desc = "Single skill release unique ID",
    },
}

---@class EventParam.ET_STOP_SKILL_POINTER
---@field player Player # Player
---@field unit Unit # Release unit
---@field ability_type py.AbilityType # Skill type
---@field ability_index py.AbilityIndex # Skill Index
---@field ability_seq py.AbilitySeq # Skills Seq
---@field ability Ability # skill

--Turn off skill indicator
event.ET_STOP_SKILL_POINTER = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "Player ID",
        lua_desc = "Player",
    },
    [2] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Release unit id",
        lua_desc = "Release unit",
    },
    [3] = {
        name = "__ability_type",
        type = "py.AbilityType",
        lua_name = "ability_type",
        lua_type = "py.AbilityType",
        desc = "Skill type",
        lua_desc = "Skill type",
    },
    [4] = {
        name = "__ability_index",
        type = "py.AbilityIndex",
        lua_name = "ability_index",
        lua_type = "py.AbilityIndex",
        desc = "Skill Index",
        lua_desc = "Skill Index",
    },
    [5] = {
        name = "__ability_seq",
        type = "py.AbilitySeq",
        lua_name = "ability_seq",
        lua_type = "py.AbilitySeq",
        desc = "Skills Seq",
        lua_desc = "Skills Seq",
    },
    [6] = {
        name = nil,
        type = nil,
        lua_name = "ability",
        lua_type = "Ability",
        lua_desc = "skill",
        lua_code = function (data)
            return data.unit:get_ability_by_seq(data.ability_seq)
        end,
    },
}

---@class EventParam.ET_RESIZE_SKILL_POINTER
---@field player Player # Player
---@field unit Unit # Release unit
---@field ability_type py.AbilityType # Skill type
---@field ability_index py.AbilityIndex # Skill Index
---@field ability_seq py.AbilitySeq # Skills Seq

--Scale the skill indicator range circle
event.ET_RESIZE_SKILL_POINTER = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "Player ID",
        lua_desc = "Player",
    },
    [2] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Release unit id",
        lua_desc = "Release unit",
    },
    [3] = {
        name = "__ability_type",
        type = "py.AbilityType",
        lua_name = "ability_type",
        lua_type = "py.AbilityType",
        desc = "Skill type",
        lua_desc = "Skill type",
    },
    [4] = {
        name = "__ability_index",
        type = "py.AbilityIndex",
        lua_name = "ability_index",
        lua_type = "py.AbilityIndex",
        desc = "Skill Index",
        lua_desc = "Skill Index",
    },
    [5] = {
        name = "__ability_seq",
        type = "py.AbilitySeq",
        lua_name = "ability_seq",
        lua_type = "py.AbilitySeq",
        desc = "Skills Seq",
        lua_desc = "Skills Seq",
    },
}

---@class EventParam.ET_SET_ABILITY_SECTOR_RADIUS
---@field ability_seq py.AbilitySeq # Skills Seq

--Set the fan indicator radius
event.ET_SET_ABILITY_SECTOR_RADIUS = {
    [1] = {
        name = "__ability_seq",
        type = "py.AbilitySeq",
        lua_name = "ability_seq",
        lua_type = "py.AbilitySeq",
        desc = "Skills Seq",
        lua_desc = "Skills Seq",
    },
}

---@class EventParam.ET_SET_ABILITY_SECTOR_ANGLE
---@field ability_seq py.AbilitySeq # Skills Seq

--Set the sector indicator Angle
event.ET_SET_ABILITY_SECTOR_ANGLE = {
    [1] = {
        name = "__ability_seq",
        type = "py.AbilitySeq",
        lua_name = "ability_seq",
        lua_type = "py.AbilitySeq",
        desc = "Skills Seq",
        lua_desc = "Skills Seq",
    },
}

---@class EventParam.ET_SET_ABILITY_ARROW_LENGTH
---@field ability_seq py.AbilitySeq # Skills Seq

--Sets the arrow/multi-segment indicator length
event.ET_SET_ABILITY_ARROW_LENGTH = {
    [1] = {
        name = "__ability_seq",
        type = "py.AbilitySeq",
        lua_name = "ability_seq",
        lua_type = "py.AbilitySeq",
        desc = "Skills Seq",
        lua_desc = "Skills Seq",
    },
}

---@class EventParam.ET_SET_ABILITY_ARROW_WIDTH
---@field ability_seq py.AbilitySeq # Skills Seq

--Set the arrow/multi-segment indicator width
event.ET_SET_ABILITY_ARROW_WIDTH = {
    [1] = {
        name = "__ability_seq",
        type = "py.AbilitySeq",
        lua_name = "ability_seq",
        lua_type = "py.AbilitySeq",
        desc = "Skills Seq",
        lua_desc = "Skills Seq",
    },
}

---@class EventParam.ET_SET_ABILITY_CIRCLE_RADIUS
---@field ability_seq py.AbilitySeq # Skills Seq

--Set the radius of the circular indicator
event.ET_SET_ABILITY_CIRCLE_RADIUS = {
    [1] = {
        name = "__ability_seq",
        type = "py.AbilitySeq",
        lua_name = "ability_seq",
        lua_type = "py.AbilitySeq",
        desc = "Skills Seq",
        lua_desc = "Skills Seq",
    },
}

---@class EventParam.ET_SET_ABILITY_POINTER_TYPE
---@field ability_seq py.AbilitySeq # Skills Seq
---@field skill_pointer_type py.SkillPointerType # Skill indicator type

--Set the skill indicator type
event.ET_SET_ABILITY_POINTER_TYPE = {
    [1] = {
        name = "__ability_seq",
        type = "py.AbilitySeq",
        lua_name = "ability_seq",
        lua_type = "py.AbilitySeq",
        desc = "Skills Seq",
        lua_desc = "Skills Seq",
    },
    [2] = {
        name = "__skill_pointer_type",
        type = "py.SkillPointerType",
        lua_name = "skill_pointer_type",
        lua_type = "py.SkillPointerType",
        desc = "Skill indicator type",
        lua_desc = "Skill indicator type",
    },
}

---@class EventParam.ET_TOUCH_BEGIN
---@field touch_id integer # Touch (mouse)id
---@field pos py.Vector2 # Touch (mouse) coordinates

--Touch (mouse) to start an event
event.ET_TOUCH_BEGIN = {
    [1] = {
        name = "__touch_id",
        type = "integer",
        lua_name = "touch_id",
        lua_type = "integer",
        desc = "Touch (mouse)id",
        lua_desc = "Touch (mouse)id",
    },
    [2] = {
        name = "__pos",
        type = "py.Vector2",
        lua_name = "pos",
        lua_type = "py.Vector2",
        desc = "Touch (mouse) coordinates",
        lua_desc = "Touch (mouse) coordinates",
    },
}

---@class EventParam.ET_TOUCH_MOVE
---@field touch_id integer # Touch (mouse)id
---@field pos py.Vector2 # Touch (mouse) coordinates

--Touch (mouse) movement event
event.ET_TOUCH_MOVE = {
    [1] = {
        name = "__touch_id",
        type = "integer",
        lua_name = "touch_id",
        lua_type = "integer",
        desc = "Touch (mouse)id",
        lua_desc = "Touch (mouse)id",
    },
    [2] = {
        name = "__pos",
        type = "py.Vector2",
        lua_name = "pos",
        lua_type = "py.Vector2",
        desc = "Touch (mouse) coordinates",
        lua_desc = "Touch (mouse) coordinates",
    },
}

---@class EventParam.ET_TOUCH_END
---@field touch_id integer # Touch (mouse)id
---@field pos py.Vector2 # Touch (mouse) coordinates

--Touch (mouse) to end event
event.ET_TOUCH_END = {
    [1] = {
        name = "__touch_id",
        type = "integer",
        lua_name = "touch_id",
        lua_type = "integer",
        desc = "Touch (mouse)id",
        lua_desc = "Touch (mouse)id",
    },
    [2] = {
        name = "__pos",
        type = "py.Vector2",
        lua_name = "pos",
        lua_type = "py.Vector2",
        desc = "Touch (mouse) coordinates",
        lua_desc = "Touch (mouse) coordinates",
    },
}

---@class EventParam.ET_TOP_TOUCH_END

--The bottom touch ends the event
event.ET_TOP_TOUCH_END = {}

---@class EventParam.RANK_LIST_INFO_CHANGE

--Ranking change event
event.RANK_LIST_INFO_CHANGE = {}

---@class EventParam.ET_UNIT_ADD_ITEM
---@field unit Unit # Get the unit of the item
---@field item Item # item
---@field item_no py.ItemKey # Item number

--Unit acquisition
event.ET_UNIT_ADD_ITEM = {
    [1] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Get the unit id of the item",
        lua_desc = "Get the unit of the item",
    },
    [2] = {
        name = "__item_id",
        type = "py.ItemID",
        lua_name = "item",
        lua_type = "Item",
        desc = "Item id",
        lua_desc = "item",
    },
    [3] = {
        name = "__item_no",
        type = "py.ItemKey",
        lua_name = "item_no",
        lua_type = "py.ItemKey",
        desc = "Item number",
        lua_desc = "Item number",
    },
}

---@class EventParam.UNIT_SLOT_ITEM_CHANGED
---@field equip_slot_type py.SlotType # Slot type
---@field equip_slot_id integer # Slot ID

--The items in the unit body item grid have changed
event.UNIT_SLOT_ITEM_CHANGED = {
    [1] = {
        name = "__equip_slot_type",
        type = "py.SlotType",
        lua_name = "equip_slot_type",
        lua_type = "py.SlotType",
        desc = "Slot type",
        lua_desc = "Slot type",
    },
    [2] = {
        name = "__equip_slot_id",
        type = "integer",
        lua_name = "equip_slot_id",
        lua_type = "integer",
        desc = "Slot ID",
        lua_desc = "Slot ID",
    },
}

---@class EventParam.ET_UNIT_ADD_ITEM_FOR_COMPOSE
---@field unit Unit # Get the unit of the item
---@field item Item # item
---@field item_no py.ItemKey # Item number

--Unit addition items are used to judge the event of item composition
event.ET_UNIT_ADD_ITEM_FOR_COMPOSE = {
    [1] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Get the unit id of the item",
        lua_desc = "Get the unit of the item",
    },
    [2] = {
        name = "__item_id",
        type = "py.ItemID",
        lua_name = "item",
        lua_type = "Item",
        desc = "Item id",
        lua_desc = "item",
    },
    [3] = {
        name = "__item_no",
        type = "py.ItemKey",
        lua_name = "item_no",
        lua_type = "py.ItemKey",
        desc = "Item number",
        lua_desc = "Item number",
    },
}

---@class EventParam.ET_UNIT_ADD_ITEM_TO_BAR
---@field unit Unit # Get the unit of the item
---@field item Item # item
---@field item_no py.ItemKey # Item number

--Units get items to inventory
event.ET_UNIT_ADD_ITEM_TO_BAR = {
    [1] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Get the unit id of the item",
        lua_desc = "Get the unit of the item",
    },
    [2] = {
        name = "__item_id",
        type = "py.ItemID",
        lua_name = "item",
        lua_type = "Item",
        desc = "Item id",
        lua_desc = "item",
    },
    [3] = {
        name = "__item_no",
        type = "py.ItemKey",
        lua_name = "item_no",
        lua_type = "py.ItemKey",
        desc = "Item number",
        lua_desc = "Item number",
    },
}

---@class EventParam.ET_UNIT_ADD_ITEM_TO_PKG
---@field unit Unit # Get the unit of the item
---@field item Item # item
---@field item_no py.ItemKey # Item number

--Units get items to the backpack bar
event.ET_UNIT_ADD_ITEM_TO_PKG = {
    [1] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Get the unit id of the item",
        lua_desc = "Get the unit of the item",
    },
    [2] = {
        name = "__item_id",
        type = "py.ItemID",
        lua_name = "item",
        lua_type = "Item",
        desc = "Item id",
        lua_desc = "item",
    },
    [3] = {
        name = "__item_no",
        type = "py.ItemKey",
        lua_name = "item_no",
        lua_type = "py.ItemKey",
        desc = "Item number",
        lua_desc = "Item number",
    },
}

---@class EventParam.ET_UNIT_REMOVE_ITEM
---@field unit Unit # Lose the unit of the item
---@field item Item # item
---@field item_no py.ItemKey # Item number

--Unit lost items
event.ET_UNIT_REMOVE_ITEM = {
    [1] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Lost the unit id of the item",
        lua_desc = "Lose the unit of the item",
    },
    [2] = {
        name = "__item_id",
        type = "py.ItemID",
        lua_name = "item",
        lua_type = "Item",
        desc = "Item id",
        lua_desc = "item",
    },
    [3] = {
        name = "__item_no",
        type = "py.ItemKey",
        lua_name = "item_no",
        lua_type = "py.ItemKey",
        desc = "Item number",
        lua_desc = "Item number",
    },
}

---@class EventParam.ET_UNIT_REMOVE_ITEM_FROM_BAR
---@field unit Unit # Lose the unit of the item
---@field item Item # item
---@field item_no py.ItemKey # Item number

--Unit items leave the inventory
event.ET_UNIT_REMOVE_ITEM_FROM_BAR = {
    [1] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Lost the unit id of the item",
        lua_desc = "Lose the unit of the item",
    },
    [2] = {
        name = "__item_id",
        type = "py.ItemID",
        lua_name = "item",
        lua_type = "Item",
        desc = "Item id",
        lua_desc = "item",
    },
    [3] = {
        name = "__item_no",
        type = "py.ItemKey",
        lua_name = "item_no",
        lua_type = "py.ItemKey",
        desc = "Item number",
        lua_desc = "Item number",
    },
}

---@class EventParam.ET_UNIT_REMOVE_ITEM_FROM_PKG
---@field unit Unit # Lose the unit of the item
---@field item Item # item
---@field item_no py.ItemKey # Item number

--Unit items leave from the backpack bar
event.ET_UNIT_REMOVE_ITEM_FROM_PKG = {
    [1] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Lost the unit id of the item",
        lua_desc = "Lose the unit of the item",
    },
    [2] = {
        name = "__item_id",
        type = "py.ItemID",
        lua_name = "item",
        lua_type = "Item",
        desc = "Item id",
        lua_desc = "item",
    },
    [3] = {
        name = "__item_no",
        type = "py.ItemKey",
        lua_name = "item_no",
        lua_type = "py.ItemKey",
        desc = "Item number",
        lua_desc = "Item number",
    },
}

---@class EventParam.ET_UNIT_USE_ITEM
---@field unit Unit # The unit that uses the item
---@field item Item # item
---@field item_no py.ItemKey # Item number

--Articles for unit use
event.ET_UNIT_USE_ITEM = {
    [1] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Use the unit id of the item",
        lua_desc = "The unit that uses the item",
    },
    [2] = {
        name = "__item_id",
        type = "py.ItemID",
        lua_name = "item",
        lua_type = "Item",
        desc = "Item id",
        lua_desc = "item",
    },
    [3] = {
        name = "__item_no",
        type = "py.ItemKey",
        lua_name = "item_no",
        lua_type = "py.ItemKey",
        desc = "Item number",
        lua_desc = "Item number",
    },
}

---@class EventParam.ET_UNIT_USE_ITEM_END
---@field item_no py.ItemKey # Item number

--After the unit uses the item
event.ET_UNIT_USE_ITEM_END = {
    [1] = {
        name = "__item_no",
        type = "py.ItemKey",
        lua_name = "item_no",
        lua_type = "py.ItemKey",
        desc = "Item number",
        lua_desc = "Item number",
    },
}

---@class EventParam.ET_UNIT_START_NAV_EVENT
---@field unit Unit # unit

--Unit begins wayfinding
event.ET_UNIT_START_NAV_EVENT = {
    [1] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Unit id",
        lua_desc = "unit",
    },
}

---@class EventParam.ET_UNIT_END_NAV_EVENT
---@field unit Unit # unit

--When the unit ends pathfinding
event.ET_UNIT_END_NAV_EVENT = {
    [1] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Unit id",
        lua_desc = "unit",
    },
}

---@class EventParam.ET_UNIT_BAG_REFRESH

--Backpack refresh
event.ET_UNIT_BAG_REFRESH = {}

---@class EventParam.ET_ITEM_STACK_CHANGED
---@field unit Unit # unit
---@field item Item # item
---@field item_no py.ItemKey # Item number
---@field delta_cnt integer # Changing value

--Item level changes
event.ET_ITEM_STACK_CHANGED = {
    [1] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Unit id",
        lua_desc = "unit",
    },
    [2] = {
        name = "__item_id",
        type = "py.ItemID",
        lua_name = "item",
        lua_type = "Item",
        desc = "Item id",
        lua_desc = "item",
    },
    [3] = {
        name = "__item_no",
        type = "py.ItemKey",
        lua_name = "item_no",
        lua_type = "py.ItemKey",
        desc = "Item number",
        lua_desc = "Item number",
    },
    [4] = {
        name = "__delta_cnt",
        type = "integer",
        lua_name = "delta_cnt",
        lua_type = "integer",
        desc = "Changing value",
        lua_desc = "Changing value",
    },
}

---@class EventParam.ET_ITEM_CHARGE_CHANGED
---@field unit Unit # unit
---@field item Item # item
---@field item_no py.ItemKey # Item number
---@field delta_cnt integer # Changing value

--Item charge changes
event.ET_ITEM_CHARGE_CHANGED = {
    [1] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Unit id",
        lua_desc = "unit",
    },
    [2] = {
        name = "__item_id",
        type = "py.ItemID",
        lua_name = "item",
        lua_type = "Item",
        desc = "Item id",
        lua_desc = "item",
    },
    [3] = {
        name = "__item_no",
        type = "py.ItemKey",
        lua_name = "item_no",
        lua_type = "py.ItemKey",
        desc = "Item number",
        lua_desc = "Item number",
    },
    [4] = {
        name = "__delta_cnt",
        type = "integer",
        lua_name = "delta_cnt",
        lua_type = "integer",
        desc = "Changing value",
        lua_desc = "Changing value",
    },
}

---@class EventParam.ET_ITEM_ON_CREATE
---@field item Item # The item being created
---@field lua_table py.Table # User-defined configuration table

--Item creation
event.ET_ITEM_ON_CREATE = {
    [1] = {
        name = "__item",
        type = "py.Item",
        lua_name = "item",
        lua_type = "Item",
        desc = "The item being created",
        lua_desc = "The item being created",
    },
    [2] = {
        name = "__lua_table",
        type = "py.Table",
        lua_name = "lua_table",
        lua_type = "py.Table",
        desc = "User-defined configuration table",
        lua_desc = "User-defined configuration table",
    },
}

---@class EventParam.ET_ITEM_ON_DESTROY
---@field item Item # Destroyed articles

--Destruction of articles
event.ET_ITEM_ON_DESTROY = {
    [1] = {
        name = "__item_id",
        type = "py.ItemID",
        lua_name = "item",
        lua_type = "Item",
        desc = "Destroyed articles",
        lua_desc = "Destroyed articles",
    },
}

---@class EventParam.ET_ITEM_ENTITY_ON_DESTROY
---@field item_unit Item # Object entity
---@field item Item # item

--Physical destruction of articles
event.ET_ITEM_ENTITY_ON_DESTROY = {
    [1] = {
        name = "__item_unit_id",
        type = "py.ItemID",
        lua_name = "item_unit",
        lua_type = "Item",
        desc = "Item entity id",
        lua_desc = "Object entity",
    },
    [2] = {
        name = "__item_id",
        type = "py.ItemID",
        lua_name = "item",
        lua_type = "Item",
        desc = "Item id",
        lua_desc = "item",
    },
}

---@class EventParam.ET_ITEM_SOLD
---@field unit Unit # purchaser
---@field unit2 Unit # trafficker
---@field item Item # Items that were sold
---@field buy_unit Unit # A unit that buys goods
---@field shop_unit Unit # A unit that sells items

--Goods for sale
event.ET_ITEM_SOLD = {
    [1] = {
        name = "__unit",
        type = "py.Unit",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "purchaser",
        lua_desc = "purchaser",
    },
    [2] = {
        name = "__unit2",
        type = "py.Unit",
        lua_name = "unit2",
        lua_type = "Unit",
        desc = "trafficker",
        lua_desc = "trafficker",
    },
    [3] = {
        name = "__item",
        type = "py.Item",
        lua_name = "item",
        lua_type = "Item",
        desc = "Items that were sold",
        lua_desc = "Items that were sold",
    },
    [4] = {
        name = "__buy_unit_id",
        type = "py.UnitID",
        lua_name = "buy_unit",
        lua_type = "Unit",
        desc = "The unit id of the acquired item",
        lua_desc = "A unit that buys goods",
    },
    [5] = {
        name = "__shop_unit_id",
        type = "py.UnitID",
        lua_name = "shop_unit",
        lua_type = "Unit",
        desc = "The unit id of the item for sale",
        lua_desc = "A unit that sells items",
    },
}

---@class EventParam.ET_ITEM_BROKEN
---@field item Item # Damaged items
---@field unit Unit # Destroy item units

--vandalism
event.ET_ITEM_BROKEN = {
    [1] = {
        name = "__item",
        type = "py.Item",
        lua_name = "item",
        lua_type = "Item",
        desc = "Damaged items",
        lua_desc = "Damaged items",
    },
    [2] = {
        name = "__unit",
        type = "py.Unit",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Destroy item units",
        lua_desc = "Destroy item units",
    },
}

---@class EventParam.ET_ITEM_NAME_CHANGED
---@field item Item # Change the name of the object
---@field name string # The changed name

--Item name change
event.ET_ITEM_NAME_CHANGED = {
    [1] = {
        name = "__item",
        type = "py.Item",
        lua_name = "item",
        lua_type = "Item",
        desc = "Change the name of the object",
        lua_desc = "Change the name of the object",
    },
    [2] = {
        name = "__name",
        type = "string",
        lua_name = "name",
        lua_type = "string",
        desc = "The changed name",
        lua_desc = "The changed name",
    },
}

---@class EventParam.ET_ITEM_DESC_CHANGED
---@field item Item # Change the description of the object
---@field name string # Changed description

--vandalism
event.ET_ITEM_DESC_CHANGED = {
    [1] = {
        name = "__item",
        type = "py.Item",
        lua_name = "item",
        lua_type = "Item",
        desc = "Change the description of the object",
        lua_desc = "Change the description of the object",
    },
    [2] = {
        name = "__name",
        type = "string",
        lua_name = "name",
        lua_type = "string",
        desc = "Changed description",
        lua_desc = "Changed description",
    },
}

---@class EventParam.ET_ITEM_CREATE_ON_DEST_COLLECTED
---@field item Item # Event item
---@field destructible Destructible # Destructible objects in an event
---@field unit Unit # Collects units in destructible events
---@field ability Ability # Dexterity in gathering destructible objects

--Items are collected and created
event.ET_ITEM_CREATE_ON_DEST_COLLECTED = {
    [1] = {
        name = "__item_id",
        type = "py.Item",
        lua_name = "item",
        lua_type = "Item",
        desc = "Event item",
        lua_desc = "Event item",
    },
    [2] = {
        name = "__destructible_id",
        type = "py.Destructible",
        lua_name = "destructible",
        lua_type = "Destructible",
        desc = "Destructible objects in an event",
        lua_desc = "Destructible objects in an event",
    },
    [3] = {
        name = "__unit_id",
        type = "py.Unit",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Collects units in destructible events",
        lua_desc = "Collects units in destructible events",
    },
    [4] = {
        name = "__ability",
        type = "py.Ability",
        lua_name = "ability",
        lua_type = "Ability",
        desc = "Dexterity in gathering destructible objects",
        lua_desc = "Dexterity in gathering destructible objects",
    },
}

---@class EventParam.ET_ATTACK_MOVE_CMD
---@field unit Unit # Designated unit
---@field tar_x number # Click on the location X coordinates
---@field tar_y number # Click on the position Y coordinate

--Left button A floor
event.ET_ATTACK_MOVE_CMD = {
    [1] = {
        name = "__unit",
        type = "py.Unit",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Designated unit",
        lua_desc = "Designated unit",
    },
    [2] = {
        name = "__tar_x",
        type = "py.Fixed",
        lua_name = "tar_x",
        lua_type = "number",
        desc = "Click on the location X coordinates",
        lua_desc = "Click on the location X coordinates",
    },
    [3] = {
        name = "__tar_y",
        type = "py.Fixed",
        lua_name = "tar_y",
        lua_type = "number",
        desc = "Click on the position Y coordinate",
        lua_desc = "Click on the position Y coordinate",
    },
}

---@class EventParam.ET_SELL_ITEM_CMD
---@field shop_unit Unit # Shop unit
---@field item Item # product

--Goods for sale
event.ET_SELL_ITEM_CMD = {
    [1] = {
        name = "__shop_unit_id",
        type = "py.UnitID",
        lua_name = "shop_unit",
        lua_type = "Unit",
        desc = "Shop unit ID",
        lua_desc = "Shop unit",
    },
    [2] = {
        name = "__item_id",
        type = "py.ItemID",
        lua_name = "item",
        lua_type = "Item",
        desc = "product",
        lua_desc = "product",
    },
}

---@class EventParam.ET_AI_RELEASE_SKILL_CMD
---@field unit Unit # Designated unit
---@field ability_type py.AbilityType # Skill type
---@field ability_index py.AbilityIndex # Skill Index
---@field ability_seq py.AbilitySeq # Skills SEQ
---@field target_item py.Dict # Release skill parameter
---@field ability Ability # skill

--Release skill
event.ET_AI_RELEASE_SKILL_CMD = {
    [1] = {
        name = "__unit",
        type = "py.Unit",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Designated unit",
        lua_desc = "Designated unit",
    },
    [2] = {
        name = "__ability_type",
        type = "py.AbilityType",
        lua_name = "ability_type",
        lua_type = "py.AbilityType",
        desc = "Skill type",
        lua_desc = "Skill type",
    },
    [3] = {
        name = "__ability_index",
        type = "py.AbilityIndex",
        lua_name = "ability_index",
        lua_type = "py.AbilityIndex",
        desc = "Skill Index",
        lua_desc = "Skill Index",
    },
    [4] = {
        name = "__ability_seq",
        type = "py.AbilitySeq",
        lua_name = "ability_seq",
        lua_type = "py.AbilitySeq",
        desc = "Skills SEQ",
        lua_desc = "Skills SEQ",
    },
    [5] = {
        name = "__target_item",
        type = "py.Dict",
        lua_name = "target_item",
        lua_type = "py.Dict",
        desc = "Release skill parameter",
        lua_desc = "Release skill parameter",
    },
    [6] = {
        name = nil,
        type = nil,
        lua_name = "ability",
        lua_type = "Ability",
        lua_desc = "skill",
        lua_code = function (data)
            return data.unit:get_ability_by_seq(data.ability_seq)
        end,
    },
}

---@class EventParam.ET_PATROL_CMD
---@field unit Unit # Designated unit
---@field tar_x number # Click on the location X coordinates
---@field tar_y number # Click on the position Y coordinate

--Go the rounds
event.ET_PATROL_CMD = {
    [1] = {
        name = "__unit",
        type = "py.Unit",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Designated unit",
        lua_desc = "Designated unit",
    },
    [2] = {
        name = "__tar_x",
        type = "py.Fixed",
        lua_name = "tar_x",
        lua_type = "number",
        desc = "Click on the location X coordinates",
        lua_desc = "Click on the location X coordinates",
    },
    [3] = {
        name = "__tar_y",
        type = "py.Fixed",
        lua_name = "tar_y",
        lua_type = "number",
        desc = "Click on the position Y coordinate",
        lua_desc = "Click on the position Y coordinate",
    },
}

---@class EventParam.ET_MOVE_UNIT_TO_TARGET_CMD
---@field unit Unit # Designated unit
---@field tar_x number # Click on the location X coordinates
---@field tar_y number # Click on the position Y coordinate

--Find your way to the location
event.ET_MOVE_UNIT_TO_TARGET_CMD = {
    [1] = {
        name = "__unit",
        type = "py.Unit",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Designated unit",
        lua_desc = "Designated unit",
    },
    [2] = {
        name = "__tar_x",
        type = "py.Fixed",
        lua_name = "tar_x",
        lua_type = "number",
        desc = "Click on the location X coordinates",
        lua_desc = "Click on the location X coordinates",
    },
    [3] = {
        name = "__tar_y",
        type = "py.Fixed",
        lua_name = "tar_y",
        lua_type = "number",
        desc = "Click on the position Y coordinate",
        lua_desc = "Click on the position Y coordinate",
    },
}

---@class EventParam.ET_MOUSE_HOVER_EVENT
---@field player Player # Player
---@field unit Unit # Suspension unit
---@field item Item # Suspended goods
---@field destructible Destructible # Suspension of destructors

--Mouse hover event
event.ET_MOUSE_HOVER_EVENT = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "Player id",
        lua_desc = "Player",
    },
    [2] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Suspension unit ID",
        lua_desc = "Suspension unit",
    },
    [3] = {
        name = "__item_id",
        type = "py.ItemID",
        lua_name = "item",
        lua_type = "Item",
        desc = "Suspended item ID",
        lua_desc = "Suspended goods",
    },
    [4] = {
        name = "__destructible_id",
        type = "py.DestructibleID",
        lua_name = "destructible",
        lua_type = "Destructible",
        desc = "ID of suspended destructible",
        lua_desc = "Suspension of destructors",
    },
}

---@class EventParam.ET_ASYNC_MOUSE_HOVER_EVENT
---@field player Player # Player
---@field unit Unit # Suspension unit
---@field item Item # Suspended goods
---@field destructible Destructible # Suspension of destructors

--Asynchronous mouse hover event
event.ET_ASYNC_MOUSE_HOVER_EVENT = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "Player id",
        lua_desc = "Player",
    },
    [2] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Suspension unit ID",
        lua_desc = "Suspension unit",
    },
    [3] = {
        name = "__item_id",
        type = "py.ItemID",
        lua_name = "item",
        lua_type = "Item",
        desc = "Suspended item ID",
        lua_desc = "Suspended goods",
    },
    [4] = {
        name = "__destructible_id",
        type = "py.DestructibleID",
        lua_name = "destructible",
        lua_type = "Destructible",
        desc = "ID of suspended destructible",
        lua_desc = "Suspension of destructors",
    },
}

---@class EventParam.ET_CATCH_FRAME_FINISHED

--End of frame pursuit event
event.ET_CATCH_FRAME_FINISHED = {}

---@class EventParam.ET_MOVER_INTERRUPT

--Motor interruption
event.ET_MOVER_INTERRUPT = {}

---@class EventParam.ET_MOVER_REMOVED

--Motor removal
event.ET_MOVER_REMOVED = {}

---@class EventParam.ET_MOVER_UNIT_COLLISION

--Motor unit collision
event.ET_MOVER_UNIT_COLLISION = {}

---@class EventParam.ET_MOVER_UNIT_COLLISION_ENTER

--Motor unit collision
event.ET_MOVER_UNIT_COLLISION_ENTER = {}

---@class EventParam.ET_MOVER_UNIT_COLLISION_LEAVE

--Motor unit collision ended
event.ET_MOVER_UNIT_COLLISION_LEAVE = {}

---@class EventParam.ET_MOVER_TERRAIN_COLLISION

--Motor terrain collision
event.ET_MOVER_TERRAIN_COLLISION = {}

---@class EventParam.ET_MOVER_KNOCKUP_REACH_PEAK

--The flying machine reaches its peak
event.ET_MOVER_KNOCKUP_REACH_PEAK = {}

---@class EventParam.ET_MOVER_KNOCKUP_AIRBORNE_START

--The flycatcher starts to float
event.ET_MOVER_KNOCKUP_AIRBORNE_START = {}

---@class EventParam.ET_MOVER_KNOCKUP_AIRBORNE_END

--The flycatcher is airborne
event.ET_MOVER_KNOCKUP_AIRBORNE_END = {}

---@class EventParam.ET_CHAT_SEND_GM
---@field str1 string # Instruction string
---@field player Player # Player

--Send commands in the chat
event.ET_CHAT_SEND_GM = {
    [1] = {
        name = "__str1",
        type = "string",
        lua_name = "str1",
        lua_type = "string",
        desc = "Instruction string",
        lua_desc = "Instruction string",
    },
    [2] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "Player id",
        lua_desc = "Player",
    },
}

---@class EventParam.ET_CUSTOM_EVENT
---@field c_param_1 integer # Customize parameter 1
---@field c_param_2 integer # Customize parameter 2
---@field c_param_3 integer # Customize parameter 3
---@field c_param_4 integer # Customize Parameter 4
---@field c_param_5 integer # Customize Parameter 5

--Trigger Custom event
event.ET_CUSTOM_EVENT = {
    [1] = {
        name = "__c_param_1",
        type = "integer",
        lua_name = "c_param_1",
        lua_type = "integer",
        desc = "Customize parameter 1",
        lua_desc = "Customize parameter 1",
    },
    [2] = {
        name = "__c_param_2",
        type = "integer",
        lua_name = "c_param_2",
        lua_type = "integer",
        desc = "Customize parameter 2",
        lua_desc = "Customize parameter 2",
    },
    [3] = {
        name = "__c_param_3",
        type = "integer",
        lua_name = "c_param_3",
        lua_type = "integer",
        desc = "Customize parameter 3",
        lua_desc = "Customize parameter 3",
    },
    [4] = {
        name = "__c_param_4",
        type = "integer",
        lua_name = "c_param_4",
        lua_type = "integer",
        desc = "Customize Parameter 4",
        lua_desc = "Customize Parameter 4",
    },
    [5] = {
        name = "__c_param_5",
        type = "integer",
        lua_name = "c_param_5",
        lua_type = "integer",
        desc = "Customize Parameter 5",
        lua_desc = "Customize Parameter 5",
    },
}

---@class EventParam.ET_EVENT_CUSTOM
---@field c_param_1 integer # Event parameter
---@field c_param_dict py.Dict # Custom parameter list
---@field data table #
---@field event string #

--Custom event
event.ET_EVENT_CUSTOM = {
    [1] = {
        name = "__c_param_1",
        type = "integer",
        lua_name = "c_param_1",
        lua_type = "integer",
        desc = "Event parameter",
        lua_desc = "Event parameter",
    },
    [2] = {
        name = "__c_param_dict",
        type = "py.Dict",
        lua_name = "c_param_dict",
        lua_type = "py.Dict",
        desc = "Custom parameter list",
        lua_desc = "Custom parameter list",
    },
    [3] = {
        name = nil,
        type = nil,
        lua_name = "data",
        lua_type = "table",
        lua_desc = "",
        lua_code = function (data)
            clicli.eca.resolve(data)
            return data.data
        end,
    },
    [4] = {
        name = nil,
        type = nil,
        lua_name = "event",
        lua_type = "string",
        lua_desc = "",
        lua_code = function (data)
            clicli.eca.resolve(data)
            return data.event
        end,
    },
}

---@class EventParam.UI_VX_EVENT
---@field ui_vx_handler string # Moving-pin callback handle
---@field comp_name string # Control uid
---@field int1 integer # Dynamic id

--Interface control dynamic effect play event
event.UI_VX_EVENT = {
    [1] = {
        name = "__ui_vx_handler",
        type = "string",
        lua_name = "ui_vx_handler",
        lua_type = "string",
        desc = "Moving-pin callback handle",
        lua_desc = "Moving-pin callback handle",
    },
    [2] = {
        name = "__comp_name",
        type = "string",
        lua_name = "comp_name",
        lua_type = "string",
        desc = "Control uid",
        lua_desc = "Control uid",
    },
    [3] = {
        name = "__int1",
        type = "integer",
        lua_name = "int1",
        lua_type = "integer",
        desc = "Dynamic id",
        lua_desc = "Dynamic id",
    },
}

---@class EventParam.ET_UI_PREFAB_CREATE_EVENT
---@field player Player # Player
---@field ui_prefab string # ui module id
---@field ui_prefab_ins py.UIPrefabIns # The created instance control

--The interface module is created
event.ET_UI_PREFAB_CREATE_EVENT = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "Player ID",
        lua_desc = "Player",
    },
    [2] = {
        name = "__ui_prefab",
        type = "string",
        lua_name = "ui_prefab",
        lua_type = "string",
        desc = "ui module id",
        lua_desc = "ui module id",
    },
    [3] = {
        name = "__ui_prefab_ins",
        type = "py.UIPrefabIns",
        lua_name = "ui_prefab_ins",
        lua_type = "py.UIPrefabIns",
        desc = "The created instance control",
        lua_desc = "The created instance control",
    },
}

---@class EventParam.ET_UI_PREFAB_DEL_EVENT
---@field player Player # Player
---@field ui_prefab string # ui module id
---@field ui_prefab_ins py.UIPrefabIns # Destroyed module instance controls

--The interface module is destroyed. Procedure
event.ET_UI_PREFAB_DEL_EVENT = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "Player ID",
        lua_desc = "Player",
    },
    [2] = {
        name = "__ui_prefab",
        type = "string",
        lua_name = "ui_prefab",
        lua_type = "string",
        desc = "ui module id",
        lua_desc = "ui module id",
    },
    [3] = {
        name = "__ui_prefab_ins",
        type = "py.UIPrefabIns",
        lua_name = "ui_prefab_ins",
        lua_type = "py.UIPrefabIns",
        desc = "Destroyed module instance controls",
        lua_desc = "Destroyed module instance controls",
    },
}

---@class EventParam.ET_CHAT_BOX_RICH_TEXT_TOUCH_EVENT
---@field str1 string # Character string

--Chat box rich text click event
event.ET_CHAT_BOX_RICH_TEXT_TOUCH_EVENT = {
    [1] = {
        name = "__str1",
        type = "string",
        lua_name = "str1",
        lua_type = "string",
        desc = "Character string",
        lua_desc = "Character string",
    },
}

---@class EventParam.ROLE_INPUT_FIELD_EDIT_MSG
---@field player Player # Player
---@field msg string # Character string

--Input box controls player input
event.ROLE_INPUT_FIELD_EDIT_MSG = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "Player ID",
        lua_desc = "Player",
    },
    [2] = {
        name = "__msg",
        type = "string",
        lua_name = "msg",
        lua_type = "string",
        desc = "Character string",
        lua_desc = "Character string",
    },
}

---@class EventParam.ET_MICRO_SPEAK
---@field player Player # Player
---@field audio_channel integer # channel
---@field audio_bool boolean # Speak or not

--Phonetic speech
event.ET_MICRO_SPEAK = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "Player ID",
        lua_desc = "Player",
    },
    [2] = {
        name = "__audio_channel",
        type = "integer",
        lua_name = "audio_channel",
        lua_type = "integer",
        desc = "channel",
        lua_desc = "channel",
    },
    [3] = {
        name = "__audio_bool",
        type = "boolean",
        lua_name = "audio_bool",
        lua_type = "boolean",
        desc = "Speak or not",
        lua_desc = "Speak or not",
    },
}

---@class EventParam.ET_UNIT_3D_ACTIVE
---@field unit Unit # unit
---@field is_active boolean # Enable or not

--Send commands in the chat
event.ET_UNIT_3D_ACTIVE = {
    [1] = {
        name = "__unit_id",
        type = "py.UnitID",
        lua_name = "unit",
        lua_type = "Unit",
        desc = "Unit ID",
        lua_desc = "unit",
    },
    [2] = {
        name = "__is_active",
        type = "boolean",
        lua_name = "is_active",
        lua_type = "boolean",
        desc = "Enable or not",
        lua_desc = "Enable or not",
    },
}

---@class EventParam.ET_PHYSICS_ENTITY_ON_CREATE
---@field physics_entity py.PhysicsEntity # The component being created
---@field physics_entity_id py.PhysicsEntityKey # Component id

--Logical physical components are created
event.ET_PHYSICS_ENTITY_ON_CREATE = {
    [1] = {
        name = "__physics_entity",
        type = "py.PhysicsEntity",
        lua_name = "physics_entity",
        lua_type = "py.PhysicsEntity",
        desc = "The component being created",
        lua_desc = "The component being created",
    },
    [2] = {
        name = "__physics_entity_id",
        type = "py.PhysicsEntityKey",
        lua_name = "physics_entity_id",
        lua_type = "py.PhysicsEntityKey",
        desc = "Component id",
        lua_desc = "Component id",
    },
}

---@class EventParam.ET_PHYSICS_ENTITY_ON_ACTIVE
---@field physics_entity py.PhysicsEntity # The component that is activated
---@field physics_entity_id py.PhysicsEntityKey # Component id

--The logical physical component is activated
event.ET_PHYSICS_ENTITY_ON_ACTIVE = {
    [1] = {
        name = "__physics_entity",
        type = "py.PhysicsEntity",
        lua_name = "physics_entity",
        lua_type = "py.PhysicsEntity",
        desc = "The component that is activated",
        lua_desc = "The component that is activated",
    },
    [2] = {
        name = "__physics_entity_id",
        type = "py.PhysicsEntityKey",
        lua_name = "physics_entity_id",
        lua_type = "py.PhysicsEntityKey",
        desc = "Component id",
        lua_desc = "Component id",
    },
}

---@class EventParam.ET_PHYSICS_ENTITY_ON_DEACTIVE
---@field physics_entity py.PhysicsEntity # The component is turned off
---@field physics_entity_id py.PhysicsEntityKey # Component id

--The logical physical component is closed
event.ET_PHYSICS_ENTITY_ON_DEACTIVE = {
    [1] = {
        name = "__physics_entity",
        type = "py.PhysicsEntity",
        lua_name = "physics_entity",
        lua_type = "py.PhysicsEntity",
        desc = "The component is turned off",
        lua_desc = "The component is turned off",
    },
    [2] = {
        name = "__physics_entity_id",
        type = "py.PhysicsEntityKey",
        lua_name = "physics_entity_id",
        lua_type = "py.PhysicsEntityKey",
        desc = "Component id",
        lua_desc = "Component id",
    },
}

---@class EventParam.ET_PHYSICS_ENTITY_ON_RUNNING
---@field physics_entity py.PhysicsEntity # Running component
---@field physics_entity_id py.PhysicsEntityKey # Component id

--Logical physical components run
event.ET_PHYSICS_ENTITY_ON_RUNNING = {
    [1] = {
        name = "__physics_entity",
        type = "py.PhysicsEntity",
        lua_name = "physics_entity",
        lua_type = "py.PhysicsEntity",
        desc = "Running component",
        lua_desc = "Running component",
    },
    [2] = {
        name = "__physics_entity_id",
        type = "py.PhysicsEntityKey",
        lua_name = "physics_entity_id",
        lua_type = "py.PhysicsEntityKey",
        desc = "Component id",
        lua_desc = "Component id",
    },
}

---@class EventParam.ET_PHYSICS_ENTITY_ON_PAUSE
---@field physics_entity py.PhysicsEntity # The component that is suspended
---@field physics_entity_id py.PhysicsEntityKey # Component id

--The logical physical component is paused
event.ET_PHYSICS_ENTITY_ON_PAUSE = {
    [1] = {
        name = "__physics_entity",
        type = "py.PhysicsEntity",
        lua_name = "physics_entity",
        lua_type = "py.PhysicsEntity",
        desc = "The component that is suspended",
        lua_desc = "The component that is suspended",
    },
    [2] = {
        name = "__physics_entity_id",
        type = "py.PhysicsEntityKey",
        lua_name = "physics_entity_id",
        lua_type = "py.PhysicsEntityKey",
        desc = "Component id",
        lua_desc = "Component id",
    },
}

---@class EventParam.ET_PHYSICS_ENTITY_ON_RESET
---@field physics_entity py.PhysicsEntity # The component being reset
---@field physics_entity_id py.PhysicsEntityKey # Component id

--Reset the logical physical component
event.ET_PHYSICS_ENTITY_ON_RESET = {
    [1] = {
        name = "__physics_entity",
        type = "py.PhysicsEntity",
        lua_name = "physics_entity",
        lua_type = "py.PhysicsEntity",
        desc = "The component being reset",
        lua_desc = "The component being reset",
    },
    [2] = {
        name = "__physics_entity_id",
        type = "py.PhysicsEntityKey",
        lua_name = "physics_entity_id",
        lua_type = "py.PhysicsEntityKey",
        desc = "Component id",
        lua_desc = "Component id",
    },
}

---@class EventParam.ET_PHYSICS_ENTITY_ON_DESTROY
---@field physics_entity py.PhysicsEntity # The destroyed component
---@field physics_entity_id py.PhysicsEntityKey # Component id

--The logical physical component is destroyed
event.ET_PHYSICS_ENTITY_ON_DESTROY = {
    [1] = {
        name = "__physics_entity",
        type = "py.PhysicsEntity",
        lua_name = "physics_entity",
        lua_type = "py.PhysicsEntity",
        desc = "The destroyed component",
        lua_desc = "The destroyed component",
    },
    [2] = {
        name = "__physics_entity_id",
        type = "py.PhysicsEntityKey",
        lua_name = "physics_entity_id",
        lua_type = "py.PhysicsEntityKey",
        desc = "Component id",
        lua_desc = "Component id",
    },
}

---@class EventParam.ET_PHYSICS_ENTITY_ON_OBTAIN
---@field physics_entity py.PhysicsEntity # The component being obtained
---@field physics_entity_id py.PhysicsEntityKey # Component id

--Logical physical components are obtained
event.ET_PHYSICS_ENTITY_ON_OBTAIN = {
    [1] = {
        name = "__physics_entity",
        type = "py.PhysicsEntity",
        lua_name = "physics_entity",
        lua_type = "py.PhysicsEntity",
        desc = "The component being obtained",
        lua_desc = "The component being obtained",
    },
    [2] = {
        name = "__physics_entity_id",
        type = "py.PhysicsEntityKey",
        lua_name = "physics_entity_id",
        lua_type = "py.PhysicsEntityKey",
        desc = "Component id",
        lua_desc = "Component id",
    },
}

---@class EventParam.ET_PHYSICS_ENTITY_ON_USE
---@field physics_entity py.PhysicsEntity # The component being used
---@field physics_entity_id py.PhysicsEntityKey # Component id

--Logical physical components are used
event.ET_PHYSICS_ENTITY_ON_USE = {
    [1] = {
        name = "__physics_entity",
        type = "py.PhysicsEntity",
        lua_name = "physics_entity",
        lua_type = "py.PhysicsEntity",
        desc = "The component being used",
        lua_desc = "The component being used",
    },
    [2] = {
        name = "__physics_entity_id",
        type = "py.PhysicsEntityKey",
        lua_name = "physics_entity_id",
        lua_type = "py.PhysicsEntityKey",
        desc = "Component id",
        lua_desc = "Component id",
    },
}

---@class EventParam.ET_PHYSICS_ENTITY_ON_STOP_USE
---@field physics_entity py.PhysicsEntity # An end-of-use component
---@field physics_entity_id py.PhysicsEntityKey # Component id

--The logical physical component is used
event.ET_PHYSICS_ENTITY_ON_STOP_USE = {
    [1] = {
        name = "__physics_entity",
        type = "py.PhysicsEntity",
        lua_name = "physics_entity",
        lua_type = "py.PhysicsEntity",
        desc = "An end-of-use component",
        lua_desc = "An end-of-use component",
    },
    [2] = {
        name = "__physics_entity_id",
        type = "py.PhysicsEntityKey",
        lua_name = "physics_entity_id",
        lua_type = "py.PhysicsEntityKey",
        desc = "Component id",
        lua_desc = "Component id",
    },
}

---@class EventParam.ET_PHYSICS_ENTITY_ON_LOSE
---@field physics_entity py.PhysicsEntity # The lost component
---@field physics_entity_id py.PhysicsEntityKey # Component id

--The logical physical component is lost
event.ET_PHYSICS_ENTITY_ON_LOSE = {
    [1] = {
        name = "__physics_entity",
        type = "py.PhysicsEntity",
        lua_name = "physics_entity",
        lua_type = "py.PhysicsEntity",
        desc = "The lost component",
        lua_desc = "The lost component",
    },
    [2] = {
        name = "__physics_entity_id",
        type = "py.PhysicsEntityKey",
        lua_name = "physics_entity_id",
        lua_type = "py.PhysicsEntityKey",
        desc = "Component id",
        lua_desc = "Component id",
    },
}

---@class EventParam.ET_ROLE_STORE_ITEM_CHANGED
---@field store_key py.StoreKey # Item number
---@field store_item_type py.StoreItemType # Item type
---@field store_item_change_count integer # Number of platform item variations
---@field store_item_expire_date integer # Platform item expiration time stamp
---@field player Player # Player

--Platform item change event
event.ET_ROLE_STORE_ITEM_CHANGED = {
    [1] = {
        name = "__store_key",
        type = "py.StoreKey",
        lua_name = "store_key",
        lua_type = "py.StoreKey",
        desc = "Item number",
        lua_desc = "Item number",
    },
    [2] = {
        name = "__store_item_type",
        type = "py.StoreItemType",
        lua_name = "store_item_type",
        lua_type = "py.StoreItemType",
        desc = "Item type",
        lua_desc = "Item type",
    },
    [3] = {
        name = "__store_item_change_count",
        type = "integer",
        lua_name = "store_item_change_count",
        lua_type = "integer",
        desc = "Number of platform item variations",
        lua_desc = "Number of platform item variations",
    },
    [4] = {
        name = "__store_item_expire_date",
        type = "integer",
        lua_name = "store_item_expire_date",
        lua_type = "integer",
        desc = "Platform item expiration time stamp",
        lua_desc = "Platform item expiration time stamp",
    },
    [5] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "Player id",
        lua_desc = "Player",
    },
}

---@class EventParam.ET_ROLE_STORE_PAGE_STATE_CHANGED
---@field player Player # Player
---@field store_page_state boolean # Mall interface status

--Platform mall window change event
event.ET_ROLE_STORE_PAGE_STATE_CHANGED = {
    [1] = {
        name = "__role_id",
        type = "py.RoleID",
        lua_name = "player",
        lua_type = "Player",
        desc = "Player id",
        lua_desc = "Player",
    },
    [2] = {
        name = "__store_page_state",
        type = "boolean",
        lua_name = "store_page_state",
        lua_type = "boolean",
        desc = "Mall interface status",
        lua_desc = "Mall interface status",
    },
}

---@class EventParam.ET_LUA_CONSOLE_COMMAND
---@field str1 string # Instruction string

--LuaConsole command
event.ET_LUA_CONSOLE_COMMAND = {
    [1] = {
        name = "__str1",
        type = "string",
        lua_name = "str1",
        lua_type = "string",
        desc = "Instruction string",
        lua_desc = "Instruction string",
    },
}

---@class EventParam.ET_LUA_CONSOLE_TIPS
---@field str1 string # Instruction prefix

--The LuaConsole command is complete
event.ET_LUA_CONSOLE_TIPS = {
    [1] = {
        name = "__str1",
        type = "string",
        lua_name = "str1",
        lua_type = "string",
        desc = "Instruction prefix",
        lua_desc = "Instruction prefix",
    },
}

---@class EventParam.ET_MALL_NOTIFY_FRIEND_NEW
---@field nick_name string # Name of applicant

--Friend request event received in steam lobby
event.ET_MALL_NOTIFY_FRIEND_NEW = {
    [1] = {
        name = "__NICK_NAME__",
        type = "string",
        lua_name = "nick_name",
        lua_type = "string",
        desc = "Name of applicant",
        lua_desc = "Name of applicant",
    },
}

---@class EventParam.ET_MALL_NOTIFY_FRIEND_DELETE
---@field player_aid integer # Deleter ID

--The steam lobby received a friend deletion event
event.ET_MALL_NOTIFY_FRIEND_DELETE = {
    [1] = {
        name = "__PLAYER_AID__",
        type = "integer",
        lua_name = "player_aid",
        lua_type = "integer",
        desc = "Deleter ID",
        lua_desc = "Deleter ID",
    },
}

---@class EventParam.ET_MALL_NOTIFY_FRIEND_UPDATE
---@field online_state clicli.Const.SteamOnlineState # Friends online status
---@field player_aid integer # Friend ID

--steam Lobby friends online status change event
event.ET_MALL_NOTIFY_FRIEND_UPDATE = {
    [1] = {
        name = "__ONLINE_STATE__",
        type = "integer",
        lua_name = "online_state",
        lua_type = "clicli.Const.SteamOnlineState",
        desc = "Friends online status",
        lua_desc = "Friends online status",
    },
    [2] = {
        name = "__PLAYER_AID__",
        type = "integer",
        lua_name = "player_aid",
        lua_type = "integer",
        desc = "Friend ID",
        lua_desc = "Friend ID",
    },
}

---@class EventParam.ET_MALL_NOTIFY_TEAM_UPDATE

--Local player ranks have changed in the steam Hall
event.ET_MALL_NOTIFY_TEAM_UPDATE = {}

---@class EventParam.ET_MALL_NOTIFY_TEAM_KICK_OFF

--steam hall local players are raised in the party
event.ET_MALL_NOTIFY_TEAM_KICK_OFF = {}

---@class EventParam.ET_MALL_NOTIFY_TEAM_INVITE
---@field player_aid integer # Sender ID
---@field nick_name string # Sender name
---@field team_id integer # Team ID

--Team invitation received in steam lobby
event.ET_MALL_NOTIFY_TEAM_INVITE = {
    [1] = {
        name = "__PLAYER_AID__",
        type = "integer",
        lua_name = "player_aid",
        lua_type = "integer",
        desc = "Sender ID",
        lua_desc = "Sender ID",
    },
    [2] = {
        name = "__NICK_NAME__",
        type = "string",
        lua_name = "nick_name",
        lua_type = "string",
        desc = "Sender name",
        lua_desc = "Sender name",
    },
    [3] = {
        name = "__team_id",
        type = "integer",
        lua_name = "team_id",
        lua_type = "integer",
        desc = "Team ID",
        lua_desc = "Team ID",
    },
}

---@class EventParam.ET_MALL_NOTIFY_ENTER_LOBBY

--Team invitation received in steam lobby
event.ET_MALL_NOTIFY_ENTER_LOBBY = {}

---@class EventParam.ET_MALL_NOTIFY_START_MATCH

--steam hall starts matching
event.ET_MALL_NOTIFY_START_MATCH = {}

---@class EventParam.ET_MALL_NOTIFY_CANCEL_MATCH

--steam Lobby unmatch
event.ET_MALL_NOTIFY_CANCEL_MATCH = {}

---@class EventParam.ET_MALL_NOTIFY_RECONNECT_ARCHIVE

--The steam reconnection update archive is complete
event.ET_MALL_NOTIFY_RECONNECT_ARCHIVE = {}

---@class EventParam.ET_MALL_NOTIFY_ROOM_INFO_CHANGE

--steam local room information has changed
event.ET_MALL_NOTIFY_ROOM_INFO_CHANGE = {}

---@class EventParam.ET_MALL_NOTIFY_ROOM_INVITE
---@field room_id integer # Room number
---@field player_aid integer # Inviter ID
---@field nick_name string # Inviter name

--steam was invited to join the room
event.ET_MALL_NOTIFY_ROOM_INVITE = {
    [1] = {
        name = "__room_id",
        type = "integer",
        lua_name = "room_id",
        lua_type = "integer",
        desc = "Room number",
        lua_desc = "Room number",
    },
    [2] = {
        name = "__PLAYER_AID__",
        type = "integer",
        lua_name = "player_aid",
        lua_type = "integer",
        desc = "Inviter ID",
        lua_desc = "Inviter ID",
    },
    [3] = {
        name = "__NICK_NAME__",
        type = "string",
        lua_name = "nick_name",
        lua_type = "string",
        desc = "Inviter name",
        lua_desc = "Inviter name",
    },
}

---@class EventParam.ET_MALL_NOTIFY_ROOM_KICK_OFF

--steam was kicked out of the room
event.ET_MALL_NOTIFY_ROOM_KICK_OFF = {}

---@class EventParam.ET_MALL_NOTIFY_ROOM_BUILD

--steam was kicked out of the room
event.ET_MALL_NOTIFY_ROOM_BUILD = {}

return event
