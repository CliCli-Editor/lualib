--This file is generated by tools/genGameAPI, do not modify it manually.
---@meta

---@class py.GameAPI
GameAPI = {}

--Increases the global save value for the specified key in the steam lobby
---@param key string # Global archive key value
---@param value integer # Incremental value
function GameAPI.add_steam_global_archive_data(key, value) end

--Sets whether to render the scene
---@param is_open boolean # bool
function GameAPI.set_draw_ui(is_open) end

--Get the local game version number
---@return integer # Local game version number
function GameAPI.get_local_game_version() end

--Get the latest game version number
---@param http_data string # http data
---@return integer # Latest game version number
function GameAPI.get_latest_game_version(http_data) end

--Get the players who are billing
---@param v py.RoleID # Player
---@return py.Role # Player
function GameAPI.get_settle_ladder_role(v) end

--Get the player is new score for settling
---@param v integer # Player new score
---@return integer # Player new score
function GameAPI.get_settle_ladder_new_score(v) end

--Gets the correction value of the player match for the settlement
---@param v integer # Player score spread
---@return integer # Player score spread
function GameAPI.get_settle_ladder_diff_value(v) end

--Request a room name change
---@param room_name string # Room name
---@param lua_func function # Callback function
---@param context py.Dict # Callback parameter passing
function GameAPI.lua_request_change_room_name(room_name, lua_func, context) end

--Request server time
---@param lua_func function # Callback function
---@param context py.Dict # Callback parameter passing
function GameAPI.lua_request_message_from_server(lua_func, context) end

--Request the value of the latest leaderboard
---@param archive_key integer # Player save field
---@param lua_func function # Callback function
function GameAPI.lua_request_get_map_rank(archive_key, lua_func) end

--Request server time
---@param lua_func function # Callback function
---@param context py.Dict # Callback parameter passing
function GameAPI.lua_request_server_time(lua_func, context) end

--Request the server to get player items to use
---@param role py.Role # Player
---@param count integer # quantity
---@param no integer # Item ID
---@param lua_func function # Callback function
---@param context py.Dict # Callback parameter passing
function GameAPI.lua_request_server_role_use_item(role, count, no, lua_func, context) end

--Execute the random pool drop policy on the server
---@param role py.Role # Player
---@param pool_id integer # Random pool ID
---@param lua_func function # Callback function
---@param context py.Dict # Callback parameter passing
function GameAPI.lua_request_server_random_pool_result(role, pool_id, lua_func, context) end

--Request server to get product information
---@param role py.Role # Player
---@param goods_id string # Product ID
---@param lua_func function # Callback function
---@param context py.Dict # Callback parameter passing
function GameAPI.lua_request_server_mall_goods_info(role, goods_id, lua_func, context) end

--Request the server to obtain the mall consumption currency
---@param role py.Role # Player
---@param amount integer # quantity
---@param lua_func function # Callback function
---@param context py.Dict # Callback parameter passing
function GameAPI.lua_request_server_consume_mall_coin(role, amount, lua_func, context) end

--Request the server to purchase an item
---@param role py.Role # Player
---@param count integer # Commodity quantity
---@param no string # Product ID
---@param lua_func function # Callback function
---@param context py.Dict # Callback parameter passing
function GameAPI.lua_request_server_mall_purchase_goods(role, count, no, lua_func, context) end

--Request the server to obtain the mall dlc status
---@param role py.Role # Player
---@param goods_id string # Product ID
---@param lua_func function # Callback function
---@param context py.Dict # Callback parameter passing
function GameAPI.lua_request_server_mall_dlc_status(role, goods_id, lua_func, context) end

--steam Create Room
---@param room_name string # Room name
---@param lua_func function # Callback function
---@param context py.Dict # Callback parameter passing
---@param mode_id? integer # Game mode
---@param password? string # Room code
function GameAPI.lua_request_server_create_room(room_name, lua_func, context, mode_id, password) end

--steam requests a list of rooms
---@param lua_func function # Callback function
---@param context py.Dict # Callback parameter passing
---@param page_index string # Room pages
function GameAPI.lua_request_server_room_list_info(lua_func, context, page_index) end

--steam requests to join the room
---@param room_id integer # Room id
---@param lua_func function # Callback function
---@param context py.Dict # Callback parameter passing
---@param password string # Room code
function GameAPI.lua_request_server_join_room(room_id, lua_func, context, password) end

--steam requests room information
---@param aid integer # Player id
---@param lua_func function # Callback function
---@param context py.Dict # Callback parameter passing
function GameAPI.lua_request_server_room_info(aid, lua_func, context) end

--steam requests a room to start the game
---@param lua_func function # Callback function
---@param context py.Dict # Callback parameter passing
function GameAPI.lua_request_server_room_strat_game(lua_func, context) end

--steam invites players to join the room
---@param aid integer # Player id
---@param lua_func function # Callback function
---@param context py.Dict # Callback parameter passing
function GameAPI.lua_request_server_invite_player_join_room(aid, lua_func, context) end

--steam accepts room invitations
---@param aid integer # Player id
---@param room_id integer # Room id
---@param lua_func function # Callback function
---@param context py.Dict # Callback parameter passing
function GameAPI.lua_request_server_reply_room_invite(aid, room_id, lua_func, context) end

--steam exchange room slots
---@param slot_index integer # slot
---@param lua_func function # Callback function
---@param context py.Dict # Callback parameter passing
function GameAPI.lua_request_server_change_room_slot(slot_index, lua_func, context) end

--steam Exchange homeowners
---@param aid integer # Player id
---@param lua_func function # Callback function
---@param context py.Dict # Callback parameter passing
function GameAPI.lua_request_server_change_owner(aid, lua_func, context) end

--steam exit room
---@param aid integer # Player id
---@param lua_func function # Callback function
---@param context py.Dict # Callback parameter passing
function GameAPI.lua_request_server_exit_room(aid, lua_func, context) end

--steam kicked out of the room
---@param aid integer # Player id
---@param lua_func function # Callback function
---@param context py.Dict # Callback parameter passing
function GameAPI.lua_request_server_kick_from_room(aid, lua_func, context) end

--steam changes the location status
---@param slot_index integer # slot
---@param state integer # slot
---@param lua_func function # Callback function
---@param context py.Dict # Callback parameter passing
function GameAPI.lua_request_server_set_site_state(slot_index, state, lua_func, context) end

--steam Change the room password
---@param pass_word string # cipher
---@param lua_func function # Callback function
---@param context py.Dict # Callback parameter passing
function GameAPI.lua_request_server_change_room_password(pass_word, lua_func, context) end

--steam changes the room level
---@param level_min string # Minimum grade
---@param level_max string # Maximum grade
---@param lua_func function # Callback function
---@param context py.Dict # Callback parameter passing
function GameAPI.lua_request_server_change_room_level_limit(level_min, level_max, lua_func, context) end

--steam Check your team information
---@param lua_func function # Callback function
---@param context py.Dict # Callback parameter passing
function GameAPI.lua_request_my_team_info(lua_func, context) end

--Tractive removal
---@param force_id py.Force # Tractive effort
function GameAPI.api_destroy_force(force_id) end

--Create traction direction
---@param target_unit py.Unit # Target unit
---@param force_angle py.Fixed # Directional Angle
---@param speed py.Fixed # speed
---@param max_speed py.Fixed # Maximum speed
---@param min_speed py.Fixed # Minimum speed
---@param acc py.Fixed # acceleration
---@return integer # Tractive object
function GameAPI.create_force_direction(target_unit, force_angle, speed, max_speed, min_speed, acc) end

--Create a traction point
---@param target_unit py.Unit # Target unit
---@param force_point py.Point # Central point
---@param speed py.Fixed # speed
---@param max_speed py.Fixed # Maximum speed
---@param min_speed py.Fixed # Minimum speed
---@param acc py.Fixed # acceleration
---@return integer # Tractive object
function GameAPI.create_force_point(target_unit, force_point, speed, max_speed, min_speed, acc) end

--Create a traction target
---@param target_unit py.Unit # Target unit
---@param force_unit py.Unit # Tractive force unit
---@param speed py.Fixed # speed
---@param max_speed py.Fixed # Maximum speed
---@param min_speed py.Fixed # Minimum speed
---@param acc py.Fixed # acceleration
---@return integer # Tractive object
function GameAPI.create_force_target(target_unit, force_unit, speed, max_speed, min_speed, acc) end

--Check whether interface components exist
---@param role py.Role # Player
---@param ui_comp string # Interface component name
---@return boolean # Existence or not
function GameAPI.ui_comp_role_exist(role, ui_comp) end

--Set the percentage of ui component coordinates
---@param role py.Role # Player
---@param comp_name string # Control name
---@param x number # x
---@param y number # y
function GameAPI.set_ui_comp_pos_percent(role, comp_name, x, y) end

--Set the coordinate adaptation mode of ui components
---@param role py.Role # Player
---@param comp_name string # Control name
---@param x_mode integer # x_mode
---@param y_mode integer # y_mode
function GameAPI.set_ui_comp_pos_mode(role, comp_name, x_mode, y_mode) end

--Set the ui text color
---@param role py.Role # Player
---@param comp_name string # Control name
---@param r number # R
---@param g number # G
---@param b number # B
---@param a number # A
function GameAPI.set_ui_comp_font_color_norm(role, comp_name, r, g, b, a) end

--Set ui text in multiple languages
---@param role py.Role # Player
---@param comp_name string # Control name
---@param text0 string # text
---@param text1? string # Concatenated text 1
---@param text2? string # Concatenated text 2
---@param text3? string # Concatenated text 3
---@param text4? string # Concatenated text 4
---@param text5? string # Concatenated text 5
---@param text6? string # Concatenated text 6
---@param text7? string # Concatenated text 7
---@param text8? string # Concatenated text 8
---@param text9? string # Concatenated text 9
---@param text10? string # Concatenated text 10
function GameAPI.set_ui_comp_text_multilingual(role, comp_name, text0, text1, text2, text3, text4, text5, text6, text7, text8, text9, text10) end

--Set the time for the skill button to cast spells
---@param role py.Role # Player
---@param comp_name string # Control name
---@param release_timing integer # Casting time
function GameAPI.api_set_ability_release_timing(role, comp_name, release_timing) end

--Set skills button mouse control shortcut keys
---@param role py.Role # Player
---@param comp_name string # Control name
---@param key integer # Shortcut key
function GameAPI.api_set_ability_mouse_control_key(role, comp_name, key) end

--Set the item bar control type and slot number
---@param role py.Role # Player
---@param comp_name string # Control name
---@param unit py.Unit # unit
---@param slot_type py.SlotType # type
---@param slot_index integer # Slot id
function GameAPI.set_ui_comp_unit_slot_new(role, comp_name, unit, slot_type, slot_index) end

--Sets the object compilation model of the model control
---@param role py.Role # Player
---@param comp_name string # Control name
---@param unit_id py.UnitID # Model id
function GameAPI.set_ui_model_id_from_object_editor(role, comp_name, unit_id) end

--The model that sets the model control sets the model with the specified label in the scene
---@param role py.Role # Player
---@param comp_name string # Control name
---@param unit py.Unit # Unit object
---@param clone_effect? boolean # Inheritance effect
---@param clone_attach? boolean # Inherit the mount model
---@param clone_material? boolean # Inherited material change
---@param is_show_mount? boolean # Whether to show a mount
function GameAPI.set_ui_model_from_scene_unit_with_tag_model(role, comp_name, unit, clone_effect, clone_attach, clone_material, is_show_mount) end

--Set model control model scaling
---@param role py.Role # Player
---@param comp_name string # Control name
---@param scale number # Model scaling
function GameAPI.set_ui_model_model_scale(role, comp_name, scale) end

--[Sync] Get the current value of the slider
---@param role py.Role # Player
---@param comp_id string # slider
---@return py.Fixed # value
function GameAPI.get_slider_cur_percent_safe(role, comp_id) end

--Asynchronous Gets the current percentage position of the list
---@param role py.Role # Player
---@param comp_name string # Control uid
---@return number # percent
function GameAPI.get_list_view_percent(role, comp_name) end

--Set the reverse layout of the list
---@param role py.Role # Player
---@param comp_name string # Control uid
---@param enable boolean # Enable or disable reverse configuration
function GameAPI.set_list_view_layout_reverse(role, comp_name, enable) end

--Get ui controls through prefabricated instances
---@param prefab_ins py.UIPrefabIns # prefabricate
---@return string # Control uid
function GameAPI.get_ui_comp_by_prefab_ins(prefab_ins) end

--Stop playing the control animation
---@param role py.Role # Player
---@param comp_name string # Control uid
---@param anim_type integer # Animation type
function GameAPI.stop_eca_anim(role, comp_name, anim_type) end

--【 Asynchronous 】 Interface - Gets the index of the currently selected page of the TAB control
---@param role py.Role # Player
---@param comp_uid string # Control uid
---@return number # index
function GameAPI.get_tab_widget_current_index(role, comp_uid) end

--Interface - Set TAB control The page index is currently selected
---@param role py.Role # Player
---@param comp_uid string # Control uid
---@param index integer # index
function GameAPI.set_tab_widget_current_index(role, comp_uid, index) end

--Set the grid list landscape/portrait scroll bar image color
---@param role py.Role # Player
---@param comp_uid string # Control name
---@param direction integer # Horizontal/vertical
---@param r number # R
---@param g number # G
---@param b number # B
---@param a number # A
function GameAPI.set_ui_gridview_bar_color_norm(role, comp_uid, direction, r, g, b, a) end

--Set the grid list to enable or disable reverse layout
---@param role py.Role # Player
---@param comp_uid string # Control name
---@param enable boolean # Enable or not
function GameAPI.set_ui_gridview_horizontal_reverse_enable(role, comp_uid, enable) end

--Set the grid list to enable or disable the up-down reverse arrangement
---@param role py.Role # Player
---@param comp_uid string # Control name
---@param enable boolean # Enable or not
function GameAPI.set_ui_gridview_vertical_reverse_enable(role, comp_uid, enable) end

--Set the grid list to Enable/disable Skip hiding controls
---@param role py.Role # Player
---@param comp_uid string # Control name
---@param enable boolean # Enable or not
function GameAPI.set_ui_gridview_skip_invisible_enable(role, comp_uid, enable) end

--Set the grid list to enable or disable dropback
---@param role py.Role # Player
---@param comp_uid string # Control name
---@param enable boolean # Enable or not
function GameAPI.set_ui_gridview_bounce_enabled(role, comp_uid, enable) end

--The video control starts to play the video
---@param role py.Role # Player
---@param comp_uid string # Control uid
---@param url string # url
---@param ease_in_time? number # Fade duration
---@param ease_out_time? number # Fade duration
---@param ease_type? integer # Curve type
---@param is_loop? boolean # Loop play
function GameAPI.play_ui_video_comp(role, comp_uid, url, ease_in_time, ease_out_time, ease_type, is_loop) end

--UI playback effects
---@param role py.Role # Player
---@param comp_name string # Control uid
---@param effect_id string # Special effect id
---@param is_loop? boolean # Cyclic or not
function GameAPI.set_ui_effect_id(role, comp_name, effect_id, is_loop) end

--Sets the background color of the effects control
---@param role py.Role # Player
---@param comp_name string # Control name
---@param r number # R
---@param g number # G
---@param b number # B
---@param a number # A
function GameAPI.set_ui_effect_background_color(role, comp_name, r, g, b, a) end

--Sets the background color of the effects control
---@param role py.Role # Player
---@param comp_name string # Control name
---@param r number # R
---@param g number # G
---@param b number # B
---@param a number # A
function GameAPI.set_ui_effect_background_color_norm(role, comp_name, r, g, b, a) end

--Sets the lens view of the effects control
---@param role py.Role # Player
---@param comp_name string # Control name
---@param fov number # fov
function GameAPI.set_ui_effect_camera_fov(role, comp_name, fov) end

--Sets the lens coordinates of the effects control
---@param role py.Role # Player
---@param comp_name string # Control name
---@param x number # x
---@param y number # y
---@param z number # z
function GameAPI.set_ui_effect_camera_pos(role, comp_name, x, y, z) end

--Set the camera rotation of the effects control
---@param role py.Role # Player
---@param comp_name string # Control name
---@param pitch number # pitch
---@param roll number # roll
---@param yaw number # yaw
function GameAPI.set_ui_effect_camera_rotation(role, comp_name, pitch, roll, yaw) end

--Sets the lens mode of the model control
---@param role py.Role # Player
---@param comp_name string # Control uid
---@param camera_mod integer # Lens mode
function GameAPI.set_ui_effect_camera_mode(role, comp_name, camera_mod) end

--Set the lens focus of the effects control
---@param role py.Role # Player
---@param comp_name string # Control name
---@param x number # x
---@param y number # y
---@param z number # z
function GameAPI.set_ui_effect_focus_pos(role, comp_name, x, y, z) end

--Sets the playback speed of the effects control
---@param role py.Role # Player
---@param comp_name string # Control uid
---@param play_speed number # Playback speed
function GameAPI.set_ui_effect_play_speed(role, comp_name, play_speed) end

--Asynchronous: Gets the magic effects bound to the Magic Effects control
---@param comp_id string # Control uid
---@return py.ModifierEntity # Magic effect
function GameAPI.get_ui_comp_modifier(comp_id) end

--Set text font
---@param role py.Role # Player
---@param comp_name string # Control uid
---@param font_name string # typeface
function GameAPI.set_ui_text_font_name(role, comp_name, font_name) end

--Gets whether the mouse is hovering over the UI
---@param role py.Role # Player
function GameAPI.get_is_cursor_blocked_by_ui(role) end

--World coordinates to minimap coordinates
---@param role py.Role # Player
---@param comp_name string # Control uid
---@param x number # x
---@param y number # y
function GameAPI.get_minimap_node_pos_from_world_pos(role, comp_name, x, y) end

--Gets the x coordinate of the ui coordinate
---@param point py.FUIPoint # coordinate
function GameAPI.get_ui_point_x(point) end

--Gets the y coordinate of the ui coordinate
---@param point py.FUIPoint # coordinate
function GameAPI.get_ui_point_y(point) end

--World coordinates to minimap coordinates
---@param pos py.Point # point
---@param comp_name string # Control uid
function GameAPI.get_mini_map_node_pos_point_from_world_pos(pos, comp_name) end

--Set the minimap right-clicking routing usability
---@param comp_name string # Control uid
---@param enabled boolean # enabled
function GameAPI.set_mini_map_move_enabled(comp_name, enabled) end

--Set the minimap click range according to the transparent area of the image
---@param role py.Role # Player
---@param comp_name string # Control uid
---@param texture py.Texture # picture
function GameAPI.api_enable_mini_map_alpha_click_range(role, comp_name, texture) end

--Turn off the minimap click range based on the transparent area of the image
---@param role py.Role # Player
---@param comp_name string # Control uid
function GameAPI.api_disable_mini_map_alpha_click_range(role, comp_name) end

--Play sequence frames on the minimap
---@param world_pos py.Point # World coordinates
---@param sequence_resource py.Sequence # Sequence frame resource
---@param source_player py.Role # The player who sends the signal
---@param visible_type py.SignalVisibleType # Visible type
---@param scale? py.Fixed # Zoom
---@param offset_percent_x? py.Fixed # X direction offset percentage
---@param offset_percent_y? py.Fixed # Percentage of deviation in the Y direction
function GameAPI.create_frame_sequence_on_mini_map(world_pos, sequence_resource, source_player, visible_type, scale, offset_percent_x, offset_percent_y) end

--Creates a sequence frame animation on the unit is minimap avatar
---@param unit py.Unit # unit
---@param sequence_resource py.Sequence # Sequence frame resource
---@param is_loop boolean # Loop or not
---@param duration py.Fixed # duration
function GameAPI.create_sequence_on_unit_mini_map_icon(unit, sequence_resource, is_loop, duration) end

--Sets the unit sequence frame type of the minimap avatar
---@param unit py.Unit # unit
---@param sequence_resource py.Sequence # Sequence frame resource
---@param is_loop boolean # Loop or not
function GameAPI.set_unit_mini_map_sequence_icon(unit, sequence_resource, is_loop) end

--Sets the enemy minimap avatar for the unit is sequence frame type
---@param unit py.Unit # unit
---@param sequence_resource py.Sequence # Sequence frame resource
---@param is_loop boolean # Loop or not
function GameAPI.set_unit_enemy_mini_map_sequence_icon(unit, sequence_resource, is_loop) end

--Set the rotation of the minimap avatar
---@param role py.Role # Player
---@param comp_name py.Unit # unit
---@param rotation py.Fixed # Rotation
function GameAPI.set_mini_map_icon_rotation(role, comp_name, rotation) end

--Set the UI fog control mask size
---@param role py.Role # Player
---@param comp_uid string # Control uid
---@param m integer # M
---@param n integer # N
function GameAPI.set_ui_fog_table_size(role, comp_uid, m, n) end

--Set the UI fog control mask table
---@param role py.Role # Player
---@param comp_uid string # Control uid
---@param table py.Table # Mask form
function GameAPI.set_ui_fog_by_table(role, comp_uid, table) end

--Get the local player language
---@return string # language
function GameAPI.get_local_player_language() end

--Set the UI model control light color
---@param player py.Role # Player
---@param comp_name string # UI control
---@param r number # R
---@param g number # G
---@param b number # B
function GameAPI.set_ui_model_sun_color(player, comp_name, r, g, b) end

--Set the UI model control lighting direction
---@param player py.Role # Player
---@param comp_name string # UI control
---@param rotation number # latitude
---@param longitude number # longitude
function GameAPI.set_ui_model_sun_direction(player, comp_name, rotation, longitude) end

--Gets the active status of the player joystick
---@param role py.Role # Player
---@param comp_name string # UI control
---@return boolean # Activated or not
function GameAPI.api_get_joystick_move_state(role, comp_name) end

--Get the joystick movement direction
---@param role py.Role # Player
---@param comp_name string # UI control
---@return string # language
function GameAPI.api_get_joystick_move_direction(role, comp_name) end

--Get the force of the stick movement
---@param role py.Role # Player
---@param comp_name string # UI control
---@return string # language
function GameAPI.api_get_joystick_move_percent(role, comp_name) end

--Set up the UI World chat send channel
---@param player py.Role # Player
---@param comp_name string # UI control
---@param channel integer # channel
function GameAPI.set_ui_world_chat_box_send_channel(player, comp_name, channel) end

--Set the UI World chat receiving channel
---@param player py.Role # Player
---@param comp_name string # UI control
---@param channel integer # channel
function GameAPI.set_ui_world_chat_box_recv_channel(player, comp_name, channel) end

--Block the World Chat send channel
---@param player py.Role # Player
---@param comp_name string # UI control
---@param channel integer # channel
function GameAPI.ban_ui_world_chat_box_send_channel(player, comp_name, channel) end

--Block the World Chat receiving channel
---@param player py.Role # Player
---@param comp_name string # UI control
---@param channel integer # channel
function GameAPI.ban_ui_world_chat_box_recv_channel(player, comp_name, channel) end

--Set the image to remain full size
---@param role py.Role # Player
---@param comp_uid string # Control uid
---@param size_adaptive boolean # Keep to size
function GameAPI.set_ui_image_size_adaptive(role, comp_uid, size_adaptive) end

--Set the button nine house value in different states
---@param role py.Role # Player
---@param comp_name string # Control uid
---@param btn_status integer # Button state
---@param x_left integer # x
---@param x_right integer # y
---@param y_top integer # width
---@param y_bottom integer # height
function GameAPI.set_ui_btn_status_cap_insets(role, comp_name, btn_status, x_left, x_right, y_top, y_bottom) end

--Set the text gradient
---@param role py.Role # Player
---@param comp_uid string # Control name
---@param hex1? string # hex
---@param a1? number # A
---@param hex2? string # hex
---@param a2? number # A
---@param hex3? string # hex
---@param a3? number # A
---@param hex4? string # hex
---@param a4? number # A
---@param enable? boolean # enable
function GameAPI.set_ui_text_gradient_color(role, comp_uid, hex1, a1, hex2, a2, hex3, a3, hex4, a4, enable) end

--Adds rich text text to the input box
---@param role py.Role # Player
---@param comp_uid string # Control uid
---@param text string # Text
---@param color string # colour
---@param is_bold? boolean # Bold or not
---@param is_underline? boolean # Underline or not
---@param data? string # Callback data
function GameAPI.add_rich_text_text_to_chat_box(role, comp_uid, text, color, is_bold, is_underline, data) end

--Adds a rich text image to the input box
---@param role py.Role # Player
---@param comp_uid string # Control uid
---@param image_id py.Texture # picture
function GameAPI.add_rich_text_pic_to_chat_box(role, comp_uid, image_id) end

--Gets UI landscape resolution
---@return integer # Resolution
function GameAPI.get_ui_resolution_x() end

--Gets the UI vertical resolution
---@return integer # Resolution
function GameAPI.get_ui_resolution_y() end

--Lens Control - Sets the lens control to bind to the lens
---@param role py.Role # Player
---@param comp_uid string # Control uid
---@param camera_id py.Camera # Lens
function GameAPI.set_ui_camera_binding(role, comp_uid, camera_id) end

--Lens Controls - Set mask map
---@param role py.Role # Player
---@param comp_uid string # Control uid
---@param mask_texture integer # Picture id
function GameAPI.set_ui_camera_mask_texture(role, comp_uid, mask_texture) end

--Copy control text to the clipboard
---@param role py.Role # Player
---@param comp_uid string # Control uid
---@param index1? integer # Initial index
---@param index2? integer # End index
function GameAPI.copy_ui_text_to_clipboard(role, comp_uid, index1, index2) end

--Capture build cost
---@param entity_no py.UnitKey # Unit object ID
---@param res_key py.RoleResKey # Player attributes
---@return py.Fixed # Consumption value
function GameAPI.get_build_res_cost(entity_no, res_key) end

--Setup construction cost
---@param entity_no py.UnitKey # Unit object ID
---@param res_key py.RoleResKey # Player attributes
---@param val py.Fixed # Consumption value
function GameAPI.set_build_res_cost(entity_no, res_key, val) end

--Get build time
---@param entity_no py.UnitKey # Unit object ID
---@return py.Fixed # Construction time
function GameAPI.get_build_time(entity_no) end

--Set build time
---@param entity_no py.UnitKey # Unit object ID
---@param build_time py.Fixed # Construction time
function GameAPI.set_build_time(entity_no, build_time) end

--Capture construction progress
---@param unit py.Unit # unit
---@return py.Fixed # Construction schedule
function GameAPI.get_construction_progress(unit) end

--Set construction schedule
---@param unit py.Unit # unit
---@param progress py.Fixed # Construction schedule
function GameAPI.set_construction_progress(unit, progress) end

--Acquisition build rate
---@param unit py.Unit # unit
---@return py.Fixed # Rate of construction
function GameAPI.get_construction_factor(unit) end

--Set build rate
---@param unit py.Unit # unit
---@param factor py.Fixed # Rate of construction
function GameAPI.set_construction_factor(unit, factor) end

--Flat cancellation
---@param unit py.Unit # unit
---@param return_res? boolean # Whether to return resources
function GameAPI.cancel_construction(unit, return_res) end

--Cancel building upgrades
---@param unit py.Unit # unit
---@param return_res? boolean # Whether to return resources
function GameAPI.cancel_build_upgrade(unit, return_res) end

--Start building upgrades
---@param unit py.Unit # unit
---@param upgrade_entity_no py.UnitKey # Object ID of the target unit
---@param keep_custom_kv_tag? boolean # Whether to retain custom kv
function GameAPI.start_build_upgrade(unit, upgrade_entity_no, keep_custom_kv_tag) end

--Get a list of building upgrades
---@param unit py.Unit # unit
---@return py.Table # Scalable one-dimensional table of unit numbers
function GameAPI.get_build_upgrade_list(unit) end

--Set the building upgrade list
---@param unit py.Unit # unit
---@param lua_table py.Table # Unit number one-dimensional table
function GameAPI.set_build_upgrade_list(unit, lua_table) end

--Get building upgrade progress
---@param unit py.Unit # unit
---@return py.Fixed # schedule
function GameAPI.get_build_upgrade_progress(unit) end

--Set the building upgrade progress
---@param unit py.Unit # unit
---@param progress py.Fixed # schedule
function GameAPI.set_build_upgrade_progress(unit, progress) end

--Get building upgrade rate
---@param unit py.Unit # unit
---@return py.Fixed # speed
function GameAPI.get_build_upgrade_factor(unit) end

--Set the building upgrade rate
---@param unit py.Unit # unit
---@param factor py.Fixed # speed
function GameAPI.set_build_upgrade_factor(unit, factor) end

--Turn on the WAR3 hate system: No new commands are generated in the process of counterattack and rescue, and the enemy can be achieved by expanding the enemy range
---@param b boolean # Switch
function GameAPI.set_enable_war3_threat_group(b) end

--Enable WAR3 alert Forced return feature: After chasing enemies in alert state for more than a certain time without attack, forced to move back to the initial point (no attack during return)
---@param b boolean # Switch
function GameAPI.set_enable_war3_caution_force_return(b) end

--For details, see set_enable_war3_threat_group and set_enable_war3_caution_force_return
---@param b boolean # Switch
function GameAPI.set_enable_war3_ai_features(b) end

--Set enemy targets. Modify the target during the Imminent Target Attempt or Target Found event. Specifying the target in Forthcoming Attempt saves some performance by skipping subsequent built-in targets, while modifying the target in Discover Target does not
---@param target py.Unit # goal
function GameAPI.set_cur_ai_target(target) end

--[Performance] Limit the maximum number of traversals per cable, which improves performance. When enabled, the enemy no longer traverses all targets within the warning range, but exits the traversal directly after finding the maximum number of units, taking the current optimal target as the final target. May result in enemy units being reached that are not actually optimal (there are other units closer and higher hate levels that are not traversed). If the gameplay does not require high accuracy and the performance pressure is large, it is recommended to open. (Multiplayer games need to be synchronized)
---@param limit integer # The upper limit. If the value is less than or equal to 0, it is disabled
function GameAPI.set_target_search_limit(limit) end

--[Performance] Limits the minimum number of frames between cable and enemy, which improves performance. Once enabled, the unit needs a certain amount of time between every two complete lines, during which the unit will try to maintain the last goal (unless the last goal is invalid). May lead to the unit cable enemy update is not timely, if the gameplay on the cable enemy accuracy requirements are not high/micro weight is not high and performance pressure is large, it is recommended to open. (Multiplayer games need to be synchronized)
---@param interval integer # The number of interval frames. If the value is less than or equal to 0, it is disabled. (Game default 30 frames 1 second)
function GameAPI.set_search_target_keep_frame(interval) end

--[Performance] Simplified warning range detection, improved performance. After opening, the accuracy of the enemy will be reduced in a specific scenario (there is a large difference in the movement speed between enemy units and frequent entry and exit of the warning range). In most cases, the side effects are not obvious, and it is recommended to open according to the situation. (Multiplayer games need to be synchronized)
---@param enable boolean # Enable or not
function GameAPI.set_enable_simple_attack_sensor(enable) end

--[Performance] The unified range detection method is collision radius detection, which improves performance. Due to historical reasons, the range determination of aura and store does not consider the collision radius of the unit itself, while the determination of alert and attack range is considered the collision radius of the unit, and there are two sets of determination rules to increase the performance consumption to a certain extent. After this switch is turned on, the above range determination will all consider its own collision radius, which can simplify the implementation of CliCli internal, so that the game performance is improved. This switch is turned off by default for compatibility purposes. If this change has no side effects, you are advised to enable it. (Multiplayer games need to be synchronized)
---@param enable boolean # Enable or not
function GameAPI.set_enable_new_sensor_rule(enable) end

--[Performance] The dynamic range detection refresh rate improves performance. After opening, the game will dynamically adjust the range detection refresh frequency according to the number of units on the current field and other factors to avoid the game deadlock due to excessive calculation/frequency. Alert response in units of side effects, the immediateness of magic effect halo entry and exit determination will be slightly reduced, but if the game performance problem is more serious, it is recommended to turn on. (Multiplayer games need to be synchronized)
---@param enable boolean # Enable or not
function GameAPI.set_enable_dynamic_sensor_tick_gap(enable) end

--[Performance] Set the upper limit of the alarm range with one click. By default, there is no upper limit to the warning range, but too large a warning range will increase the performance cost, especially when the number of such units is large, performance will decrease by n^2. This interface can be used to set the upper limit of the alert range with one click, and the actual value in the game will use this value and the smaller value in the object configuration. Generally speaking, the warning range should not exceed 5000. (Multiplayer games need to be synchronized)
---@param limit py.Fixed # Value (cm)
function GameAPI.set_alarm_range_limit(limit) end

--[Performance] Limit the number of AI ticks per unit. This value is used to limit the number of tick units per frame when the number of tick units is too large to avoid game stalling. The lower the value, the fewer units allowed per frame, the better to reduce the game deadlock, but the side effect is that the unit response sensitivity will be reduced/the attack interval will be increased. The default initial value is 6000, and in general, the side effects are not obvious when the unit level is less than 1000. Try lowering the value if the game is stuck. (Multiplayer games need to be synchronized)
---@param limit integer # Value (Initial default is 6000)
function GameAPI.set_ai_tick_limit(limit) end

--[Performance] Whether to ignore the threat priority when retrieving the enemy. Disabled by default. When enabled, the target priority ranking will only consider the distance, no longer consider the threat degree of the target. After opening, the enemy performance will be greatly improved when there are a large number of potential targets in the warning range. If the map gameplay does not have strict requirements for threat priority, it is recommended to open
---@param enable boolean # Enable or not
function GameAPI.set_ai_ignore_threat_priority(enable) end

--Prevents units from picking up items
---@param unit_id py.UnitID # UnitID
---@param slot_type py.SlotType # SlotType
function GameAPI.stop_unit_pick_item(unit_id, slot_type) end

--Returns the target field of the picked item
---@param unit_id py.ItemID # ItemID
---@param slot_type py.SlotType # SlotType
---@return py.SlotType # Target field
function GameAPI.get_pick_item_slot(unit_id, slot_type) end

--Gets the skill type for a skill position in the unit
---@param unit_key py.UnitKey # Unit type
---@param abilityType py.AbilityType # Skill type
---@param abilityIndex py.AbilityIndex # Skill slot
---@return py.AbilityKey # Skill type
function GameAPI.api_get_abilityKey_by_unitkey(unit_key, abilityType, abilityIndex) end

--[Performance] Specifies whether to enable lua automatic gc logic when the frame rate is idle. Lua-gc is disabled by default and LUA_GCSTEP is performed when the frame rate is idle. When set to False, you can control lua-gc by yourself
---@param enable boolean # Enable or not
function GameAPI.set_enable_auto_lua_gc(enable) end

--The intersection of the unit group is taken
---@param unit_group1 py.UnitGroup # Unit group 1
---@param unit_group2 py.UnitGroup # Unit group 2
---@return py.UnitGroup # Unit group
function GameAPI.get_unit_group_intersect(unit_group1, unit_group2) end

--The unit group takes the difference set
---@param unit_group1 py.UnitGroup # Unit group 1
---@param unit_group2 py.UnitGroup # Unit group 2
---@return py.UnitGroup # Unit group
function GameAPI.get_unit_group_diff(unit_group1, unit_group2) end

--Set the simulation state of a single build
---@param idx py.AbilityReleaseId # Integer index value
---@param is_dry_run boolean # Whether to simulate only
function GameAPI.set_use_skill_dry_run_state(idx, is_dry_run) end

--Integer to skill type
---@param num integer # integer
---@return py.AbilityKey # Skill compilation
function GameAPI.get_ability_type_by_int(num) end

--Obtain a skill instance based on the unique ID of the skill
---@param ability_global_id integer # ID
---@return py.Ability # skill
function GameAPI.get_ability_by_ability_global_id(ability_global_id) end

--Gets a list of projectile ids in the area
---@param area py.Area # Area object
---@return py.ProjectileGroup # Item group
function GameAPI.get_projectile_group_in_area(area) end

--The group of projectiles corresponding to the projectiles type is obtained
---@param key py.ProjectileKey # Projectile type
---@return py.ProjectileGroup # Item group
function GameAPI.get_projectile_group_by_key(key) end

--Add projectiles to the projectiles group
---@param Projectile py.ProjectileEntity # projectile
---@param Projectile_group py.ProjectileGroup # Projectile set
function GameAPI.add_projectile_to_group(Projectile, Projectile_group) end

--The player who gets the projectile
---@param project py.ProjectileEntity # projectile
---@return py.Role # Player
function GameAPI.get_role_of_projectile(project) end

--Change the player the projectile belongs to
---@param projectile py.ProjectileEntity # projectile
---@param player py.Actor # Player
function GameAPI.change_projectile_owner_player(projectile, player) end

--Create an airdrop projectile group
---@return py.ProjectileGroup # Projectile set
function GameAPI.create_projectile_group() end

--Gets the number of projectile groups
---@param projectile_group py.ProjectileGroup # Projectile set
---@return integer # quantity
function GameAPI.get_projectile_group_nums(projectile_group) end

--The projectile group intersects
---@param group1 py.ProjectileGroup # Projectile Group 1
---@param group2 py.ProjectileGroup # Projectile Group 2
---@return py.ProjectileGroup # Projectile set
function GameAPI.get_projectile_group_intersection(group1, group2) end

--The projectile group takes the difference set
---@param group1 py.ProjectileGroup # Projectile Group 1
---@param group2 py.ProjectileGroup # Projectile Group 2
---@return py.ProjectileGroup # Projectile set
function GameAPI.get_projectile_group_diff(group1, group2) end

--Set decorations to appear hidden
---@param deco_id py.DecoID # Decoration ID
---@param visible boolean # Implicit or not
function GameAPI.set_deco_visible(deco_id, visible) end

--Set decorations to be hidden from the player
---@param deco_id py.DecoID # Decoration ID
---@param player py.Role # Player
---@param visible boolean # Implicit or not
function GameAPI.set_deco_visible_new(deco_id, player, visible) end

--Decorations replace model maps
---@param deco_id py.DecoID # Decoration ID
---@param material_id integer # Material id
---@param layer_id integer # layer id
---@param texture py.Texture # chartlet
function GameAPI.set_deco_texture(deco_id, material_id, layer_id, texture) end

--Create decorations
---@param point py.FVector3 # position
---@param deco_type py.DecoKey # Decorative type
---@param angle py.Fixed # Angle
---@param height_offset? py.Fixed # Altitude
---@return py.DecoID # id of the created ornament
function GameAPI.create_deco(point, deco_type, angle, height_offset) end

--Remove decorations
---@param deco_id py.DecoID # Decoration id
function GameAPI.delete_deco(deco_id) end

--Player groups intersect
---@param group1 py.RoleGroup # Player Group 1
---@param group2 py.RoleGroup # Player Group 2
---@return py.RoleGroup # Player group
function GameAPI.api_get_role_group_intersection(group1, group2) end

--The player group takes the difference set
---@param group1 py.RoleGroup # Player Group 1
---@param group2 py.RoleGroup # Player Group 2
---@return py.RoleGroup # Player group
function GameAPI.api_get_role_group_diff(group1, group2) end

--The nearest labeled unit
---@param position py.Point # position
---@param tag_idx integer # Tag ID
---@param check_alive boolean # Check for survival
---@return py.UnitID # Unit ID
function GameAPI.get_h_nearest_unit_with_quick_tag(position, tag_idx, check_alive) end

--Gets a list of tagged unit ids
---@param tag_idx integer # Tag ID
---@return py.UnitGroup # Unit group
function GameAPI.get_unit_ids_with_quick_tag(tag_idx) end

--Read the value of the server random number
---@param role py.Role # Player
---@param archive_id string # Random archive id
---@return integer # The value of a random number
function GameAPI.get_random_archive_value(role, archive_id) end

--Read the timestamp of the server random number
---@param role py.Role # Player
---@param archive_id string # Random archive id
---@return integer # timestamp
function GameAPI.get_random_archive_timestamp(role, archive_id) end

--Read the group id of the server random number
---@param role py.Role # Player
---@param archive_id string # Random archive id
---@return integer # Group id
function GameAPI.get_random_archive_group_id(role, archive_id) end

--Gets the remaining number of times per day for a specified read-only random archive
---@param role py.Role # Player
---@param group_id integer # Group id
---@return integer # Residual degree
function GameAPI.get_random_archive_daily_remain(role, group_id) end

--Gets the remaining count per office of a specified read-only random archive
---@param role py.Role # Player
---@param group_id integer # Group id
---@return integer # Residual degree
function GameAPI.get_random_archive_game_remain(role, group_id) end

--Get the current map AI random seed
---@return integer # Random seed
function GameAPI.api_get_ai_random_seed() end

--Debug - Delete draw
---@param shape_id integer # Draw id
function GameAPI.delete_debug_draw(shape_id) end

--Debug - Draw area - Circle
---@param pos py.Vector3 # coordinate
---@param shape py.Shape # roundness
---@param duration? py.Fixed # duration
---@param color? string # Draw color
---@param attach_unit? py.Unit # Connecting unit
---@return integer # Draw id
function GameAPI.debug_draw_filter_area_circular(pos, shape, duration, color, attach_unit) end

--Debug - Draw area - Sector
---@param pos py.Vector3 # coordinate
---@param shape py.Shape # sector
---@param duration? py.Fixed # duration
---@param color? string # Draw color
---@param attach_unit? py.Unit # Connecting unit
---@return integer # Draw id
function GameAPI.debug_draw_filter_area_sector(pos, shape, duration, color, attach_unit) end

--Debug - Draw area - Ring
---@param pos py.Vector3 # coordinate
---@param shape py.Shape # toroidal
---@param duration? py.Fixed # duration
---@param color? string # Draw color
---@param attach_unit? py.Unit # Connecting unit
---@return integer # Draw id
function GameAPI.debug_draw_filter_area_annular(pos, shape, duration, color, attach_unit) end

--Debug - Draw area - Rectangle
---@param pos py.Vector3 # coordinate
---@param shape py.Shape # rectangle
---@param duration? py.Fixed # duration
---@param color? string # Draw color
---@param attach_unit? py.Unit # Connecting unit
---@return integer # Draw id
function GameAPI.debug_draw_filter_area_rect(pos, shape, duration, color, attach_unit) end

--Open uimodule
---@param model_id integer # modelid
function GameAPI.open_ui_module_panel(model_id) end

--Initializes the player map
---@param role py.Role # Player
---@param table py.Table # Codex sheet
function GameAPI.init_user_card_panel(role, table) end

--Initializes the player map
---@param role py.Role # Player
---@param filter_type string # type
function GameAPI.filter_user_card_panel(role, filter_type) end

--Switch profile function
---@param enable boolean # enable
function GameAPI.api_enable_profile(enable) end

--Create unit
---@param key py.UnitKey # Unit number
---@param pos py.FVector3 # position
---@param angle py.Fixed # orientation
---@param role_or_unit py.Role # Owned player
---@param lua_table? py.Table # User-defined configuration table
---@return py.Unit # The created unit
function GameAPI.create_unit_new(key, pos, angle, role_or_unit, lua_table) end

--Creating a local unit
---@param key py.UnitKey # Unit number
---@param pos py.FVector3 # position
---@param face py.Fixed # orientation
---@return py.LocalUnit # The created unit
function GameAPI.create_local_unit(key, pos, face) end

--Create illusion
---@param clone_unit py.Unit # Replication target
---@param caller_unit py.Unit # summoner
---@param role py.Role # Player
---@param pos py.FVector3 # position
---@param angle py.Fixed # orientation
---@param clone_hp_mp? boolean # Whether to inherit life and magic
---@param clone_items? boolean # Whether to inherit goods
function GameAPI.create_illusion_new(clone_unit, caller_unit, role, pos, angle, clone_hp_mp, clone_items) end

--Get the local unit based on the unit ID
---@param unit_id py.LocalUnitID # Unit id
---@return py.LocalUnit # Local unit
function GameAPI.get_local_unit_by_id(unit_id) end

--Return the ornament id directly
---@param deco_id py.DecoID # Decoration id
---@return py.DecoID # Decoration id
function GameAPI.get_deco_by_id(deco_id) end

--Create the role top light to the unit mount contact
---@param unit py.Unit # unit
---@param socket_name string # Hanging node
---@param pos_offset_y? py.Fixed # Departure height
---@param target? py.Actor # goal-oriented
---@param target_offset_y? py.Fixed # Offset height towards target
---@param need_shadow? boolean # Whether shadow is generated
---@return py.SpotLight # Directional light source
function GameAPI.create_character_top_light_to_unit_socket(unit, socket_name, pos_offset_y, target, target_offset_y, need_shadow) end

--Local unit The first unit in a local unit group
---@param units py.LocalUnitGroup # Unit group
---@return py.LocalUnit # First unit
function GameAPI.get_first_unit_in_local_group(units) end

--Local unit The last unit in the local unit group
---@param units py.LocalUnitGroup # Unit group
---@return py.LocalUnit # Last unit
function GameAPI.get_last_unit_in_local_group(units) end

--Set the initialization shot for the next scene
---@param camera py.Camera # Lens configuration
function GameAPI.api_set_preload_cam(camera) end

--Lens depth of field function
---@param enable boolean # Depth of field switch
---@param dist number # Depth of field starting distance
---@param region number # Depth of field
---@param near_trans_region number # Near transition distance
---@param far_trans_region number # Distant transition distance
function GameAPI.set_camera_dof(enable, dist, region, near_trans_region, far_trans_region) end

--Local unit Number of units in a local unit group
---@param unit_group py.LocalUnitGroup # Unit group
---@return integer # Unit quantity
function GameAPI.get_local_unit_group_num(unit_group) end

--Example Delete a unit from a local unit group
---@param unit_group py.LocalUnitGroup # Unit group
---@param unit py.LocalUnit # unit
function GameAPI.remove_unit_in_local_group(unit_group, unit) end

--Gets all items new within the specified shape
---@param point py.Point # Area object
---@param shape py.Shape # shape
---@param sort_type? py.SortType # Sort type
---@param filter_ability? py.Ability # Screening skill
---@return py.ItemGroup # Item group
function GameAPI.get_all_items_in_shapes_new(point, shape, sort_type, filter_ability) end

--Add a unit to a local unit group
---@param unit py.LocalUnit # unit
---@param unit_group py.LocalUnitGroup # Local unit group
function GameAPI.add_unit_to_local_group(unit, unit_group) end

--Whether the local unit group exists
---@param unit_group py.LocalUnitGroup # Local unit group
---@return boolean # Existence or not
function GameAPI.local_unit_group_is_exist(unit_group) end

--Set the location of the scene ui to the scene attraction
---@param scene_node py.SceneNode # Site attraction
---@param point py.Point # point
---@param visible_dis? number # Visible distance
---@param height_offset? number # Ground lift
function GameAPI.set_scene_node_to_point(scene_node, point, visible_dis, height_offset) end

--Create a field attraction and bind the UI to the unit
---@param comp_name string # Control name
---@param player py.Role # Player
---@param unit py.Unit # unit
---@param socket_name string # Hanging contact
---@param socket_offset_follow_model_scale boolean # Mount contact offset follows model scaling
---@param visible_dis? number # Visible distance
---@return py.SceneNode # Site attraction
function GameAPI.create_scene_node_on_unit_new(comp_name, player, unit, socket_name, socket_offset_follow_model_scale, visible_dis) end

--Get the local player id
---@return string # Player id
function GameAPI.get_client_role_id() end

--Player reflow
---@param role py.Role # Player
---@return boolean # Whether it is a returning player
function GameAPI.is_returning_player(role) end

--Get the time the player last visited the Amway Wall
---@param role py.Role # Player
---@return integer # The last time the player visited the Amway Wall
function GameAPI.get_player_last_recommend_time(role) end

--Get the player platform avatar URL
---@param role py.Role # Player
---@return integer # Picture ID
function GameAPI.get_role_platform_url(role) end

--Go through magic effects to get special effects
---@param modifier_entity py.ModifierEntity # Magic effect
---@return py.List # Special effects idList
function GameAPI.refresh_get_effect_on_modifier(modifier_entity) end

--Go through the loss of magic effects
---@param modifier_entity py.ModifierEntity # Magic effect
---@return py.List # Special effects idList
function GameAPI.refresh_loss_effect_on_modifier(modifier_entity) end

--Get traversed effects
---@param effect_id string # Effect ID concatenated Str
---@return py.Sfx # Special effect entity
function GameAPI.get_effect_on_modifier(effect_id) end

--A hook model for traversing magic effects
---@param modifier_entity py.ModifierEntity # Magic effect
---@return py.List # Mount the model idList
function GameAPI.refresh_attach_model_on_modifier(modifier_entity) end

--Get the traversed model
---@param attach_model_id string # Model ID is concatenated with Str
---@return string # Model ID is concatenated with Str
function GameAPI.get_attach_model_on_modifier(attach_model_id) end

--Knapsack type to string
---@param slot_type py.SlotType # Backpack type
---@return string # Character string
function GameAPI.slot_type_to_str(slot_type) end

--Attach model entity to string
---@param attach_model_id string # Model ID is concatenated with Str
---@return string # Character string
function GameAPI.attach_model_entity_to_str(attach_model_id) end

--Play animation
---@param attach_model_id string # Model ID is concatenated with Str
---@param name string # Animation name
---@param rate? number # Playback ratio
---@param init_time? number # Start time (s)
---@param end_time? number # End time (s). A positive number -1 indicates that the end is not finished
---@param loop? boolean # Cyclic or not
---@param return_idle? boolean # Whether to return to idle after the playback is complete
function GameAPI.play_attach_model_animation(attach_model_id, name, rate, init_time, end_time, loop, return_idle) end

--Stop animation
---@param attach_model_id string # Model ID is concatenated with Str
---@param name string # Animation name
function GameAPI.stop_attach_model_animation(attach_model_id, name) end

--Gets the property auto restore interval
function GameAPI.api_get_autorec_interval() end

--Gets article name/description multilingual key
---@param data_key string # Fabric type
---@param entity_id integer # Braided object
---@param name_or_desc string # Name/Description
---@return string # Multilingual key
function GameAPI.get_object_multilingual_key(data_key, entity_id, name_or_desc) end

--Set a quick cast
---@param role py.Role # Player
---@param is_on boolean # Enable or not
function GameAPI.set_common_atk_quick_cast(role, is_on) end

--Create a unit-to-point lightning effect
---@param sfx_res_id py.SfxKey # Special effect number
---@param source_unit py.Unit # Starting unit
---@param source_socket string # Start Unit Name of the mount point
---@param target_point py.FVector3 # End point
---@param target_height py.Fixed # Terminal height
---@param duration? number # duration
---@param immediately? boolean # Whether to delete now
---@param use_sys_d_destroy_way? boolean # Effects delete the way to read table or not
---@param show_in_fog? boolean # Show in the mist
---@param blend_with_fog? boolean # Fog mixing
---@param follow_change_position? boolean # Change position with model scaling
---@param follow_change_size? boolean # Follow the model scale to change the size
---@param speed? number # Playback speed
---@param x_scale? number # X-axis scaling
---@param y_scale? number # Y-axis scaling
---@param z_scale? number # Z-axis scaling
---@return py.LinkSfx # VFX
function GameAPI.create_link_sfx_from_unit_to_point1(sfx_res_id, source_unit, source_socket, target_point, target_height, duration, immediately, use_sys_d_destroy_way, show_in_fog, blend_with_fog, follow_change_position, follow_change_size, speed, x_scale, y_scale, z_scale) end

--Create unit to unit lightning effects
---@param sfx_res_id py.SfxKey # Special effect number
---@param source_unit py.Unit # Starting unit
---@param source_socket string # Start Unit Name of the mount point
---@param target_unit py.Unit # Terminal unit
---@param target_socket string # Start Unit Name of the mount point
---@param duration? number # duration
---@param immediately? boolean # Whether to delete now
---@param use_sys_d_destroy_way? boolean # Effects delete the way to read table or not
---@param show_in_fog? boolean # Show in the mist
---@param blend_with_fog? boolean # Fog mixing
---@param follow_change_position? boolean # Change position with model scaling
---@param follow_change_size? boolean # Follow the model scale to change the size
---@param speed? number # Playback speed
---@param x_scale? number # X-axis scaling
---@param y_scale? number # Y-axis scaling
---@param z_scale? number # Z-axis scaling
---@return py.LinkSfx # VFX
function GameAPI.create_link_sfx_from_unit_to_unit1(sfx_res_id, source_unit, source_socket, target_unit, target_socket, duration, immediately, use_sys_d_destroy_way, show_in_fog, blend_with_fog, follow_change_position, follow_change_size, speed, x_scale, y_scale, z_scale) end

--Create point-to-unit lightning effects
---@param sfx_res_id py.SfxKey # Special effect number
---@param source_point py.FVector3 # Starting point
---@param source_height py.Fixed # Starting height
---@param source_unit py.Unit # Terminal unit
---@param source_socket string # Start Unit Name of the mount point
---@param duration? number # duration
---@param immediately? boolean # Whether to delete now
---@param use_sys_d_destroy_way? boolean # Effects delete the way to read table or not
---@param show_in_fog? boolean # Show in the mist
---@param blend_with_fog? boolean # Fog mixing
---@param speed? number # Playback speed
---@param x_scale? number # X-axis scaling
---@param y_scale? number # Y-axis scaling
---@param z_scale? number # Z-axis scaling
---@return py.LinkSfx # VFX
function GameAPI.create_link_sfx_from_point_to_unit1(sfx_res_id, source_point, source_height, source_unit, source_socket, duration, immediately, use_sys_d_destroy_way, show_in_fog, blend_with_fog, speed, x_scale, y_scale, z_scale) end

--Create point-to-point lightning effects
---@param sfx_res_id py.SfxKey # Special effect number
---@param source_point py.FVector3 # Starting point
---@param source_height py.Fixed # Starting height
---@param target_point py.FVector3 # End point
---@param target_height py.Fixed # Terminal height
---@param duration? number # duration
---@param immediately? boolean # Whether to delete now
---@param use_sys_d_destroy_way? boolean # Effects delete the way to read table or not
---@param show_in_fog? boolean # Show in the mist
---@param blend_with_fog? boolean # Fog mixing
---@param speed? number # Playback speed
---@param x_scale? number # X-axis scaling
---@param y_scale? number # Y-axis scaling
---@param z_scale? number # Z-axis scaling
---@return py.LinkSfx # VFX
function GameAPI.create_link_sfx_from_point_to_point1(sfx_res_id, source_point, source_height, target_point, target_height, duration, immediately, use_sys_d_destroy_way, show_in_fog, blend_with_fog, speed, x_scale, y_scale, z_scale) end

--Create effects to unit attachment points (follow rotation using enumerations)
---@param sfx_id py.SfxKey # Special effect number
---@param unit py.Unit # unit
---@param socket string # Unit mounting contact
---@param rotate_type integer # Follow rotation mode
---@param speed? number # Playback speed
---@param duration? number # duration
---@param angle? number # Angle
---@param immediately? boolean # Whether to delete now
---@param use_sys_d_destroy_way? boolean # Effects delete the way to read table or not
---@param detach? boolean # Whether to leave the unit
---@param show_in_fog? boolean # Show in the mist
---@param blend_with_fog? boolean # Fog mixing
---@param scale_x? number # X-axis scaling
---@param scale_y? number # Y-axis scaling
---@param scale_z? number # Z-axis scaling
---@param follow_change_position? boolean # Change position with model scaling
---@param follow_change_scale? boolean # Follow the model scale to change the size
---@return py.Sfx # VFX
function GameAPI.create_sfx_on_unit_3(sfx_id, unit, socket, rotate_type, speed, duration, angle, immediately, use_sys_d_destroy_way, detach, show_in_fog, blend_with_fog, scale_x, scale_y, scale_z, follow_change_position, follow_change_scale) end

--Create effects to Magic effects hook model (follow rotation using enumeration)
---@param sfx_id py.SfxKey # Special effect number
---@param unit py.ModifierEntity # Magic effect
---@param editor_model_id py.ModelKey # id of the mount model
---@param socket string # Unit mounting contact
---@param rotate_type integer # Follow rotation mode
---@param b_follow_scale boolean # Whether to scale with units
---@param speed? number # Playback speed
---@param duration? number # duration
---@param angle? number # Angle
---@param immediately? boolean # Whether to delete now
---@param use_sys_d_destroy_way? boolean # Effects delete the way to read table or not
---@param detach? boolean # Whether to leave the unit
---@param show_in_fog? boolean # Show in the mist
---@param blend_with_fog? boolean # Fog mixing
---@param scale_x? number # X-axis scaling
---@param scale_y? number # Y-axis scaling
---@param scale_z? number # Z-axis scaling
---@return py.Sfx # VFX
function GameAPI.create_sfx_on_modifier_attach_model(sfx_id, unit, editor_model_id, socket, rotate_type, b_follow_scale, speed, duration, angle, immediately, use_sys_d_destroy_way, detach, show_in_fog, blend_with_fog, scale_x, scale_y, scale_z) end

--Set the lightning zoom
---@param sfx_entity py.LinkSfx # VFX
---@param scale_x number # X-axis scaling
---@param scale_y number # Y-axis scaling
---@param scale_z number # Z-axis scaling
---@param duration? number # Transition time
function GameAPI.set_link_sfx_scale(sfx_entity, scale_x, scale_y, scale_z, duration) end

--Set the lightning animation speed
---@param sfx_entity py.LinkSfx # VFX
---@param speed number # Animation speed
function GameAPI.set_link_sfx_animation_speed(sfx_entity, speed) end

--Get the current running environment
---@return string # Current operating environment
function GameAPI.get_client_mode() end

--Set the player is priority for clicking units
---@param role py.Role # Player
---@param unit_type integer # Unit type
---@param priority integer # priority
function GameAPI.api_set_player_select_unit_priority(role, unit_type, priority) end

--Set the minimap display area (two points)
---@param role py.Role # Player
---@param position1 py.Point # Point 1
---@param position2 py.Point # Point 2
function GameAPI.set_mini_map_show_area_by_two_points(role, position1, position2) end

--Modify object material
---@param obj py.Actor # object
---@param material_id integer # Material id
function GameAPI.set_obj_material_param(obj, material_id) end

--Minimap - Set the bottom frame of the hero minimap avatar
---@param role py.Role # Player
---@param unit py.Unit # unit
---@param image_id py.Texture # Picture id
function GameAPI.api_set_hero_mini_map_frame(role, unit, image_id) end

--Bind the magic effect remaining cycle to the properties of the player interface control
---@param role py.Role # Player
---@param ui_comp string # Control uid
---@param ui_comp_attr string # Control property field
---@param modifier py.ModifierEntity # Skill entity object
function GameAPI.set_ui_comp_bind_modifier_cycle(role, ui_comp, ui_comp_attr, modifier) end

--【 Asynchronous 】 Gets the current percentage position of the local player grid list
---@param comp_name string # Control uid
---@param direction integer # Horizontal/vertical
---@return number # percent
function GameAPI.get_grid_view_percent(comp_name, direction) end

--Set the minimap following unit
---@param role py.Role # player
---@param unit py.Unit # Follower unit
---@param view_range number # Field of vision
function GameAPI.set_mini_map_follow_unit(role, unit, view_range) end

--Set the radius of view of the UI fog control
---@param role py.Role # Player
---@param comp_uid string # Control uid
---@param radius integer # Radius of visual field
function GameAPI.set_ui_fog_vision_radius(role, comp_uid, radius) end

--Set the UI fog control ambiguity
---@param role py.Role # Player
---@param comp_uid string # Control uid
---@param blur integer # fuzziness
function GameAPI.set_ui_fog_blur_radius(role, comp_uid, blur) end

--Crop node - Set the image mask of the crop node
---@param role py.Role # Player
---@param comp_uid string # Control uid
---@param stencil_texture integer # Picture id
function GameAPI.set_clipping_node_stencil_texture(role, comp_uid, stencil_texture) end

--Cutting a node - Set the node to be cut. Enable reverse cutting
---@param role py.Role # Player
---@param comp_uid string # Control uid
---@param is_inverted boolean # Whether to reverse cut
function GameAPI.set_clipping_node_inverted(role, comp_uid, is_inverted) end

--Interface - Create a canvas
---@param role py.Role # Player
---@param comp_uid string # Control uid
function GameAPI.create_layer(role, comp_uid) end

--Interface - Delete the canvas
---@param role py.Role # Player
---@param comp_uid string # Control uid
function GameAPI.del_layer(role, comp_uid) end

--Set the fog coordinates and radius of the UI fog control
---@param role py.Role # Player
---@param comp_uid string # Control uid
---@param pos_x number # Coordinate X
---@param pos_y number # Coordinate Y
---@param radius integer # Radius of visual field
function GameAPI.set_ui_fog_pos_and_radius(role, comp_uid, pos_x, pos_y, radius) end

--Set the control and radius of the UI fog control to be clicked
---@param role py.Role # Player
---@param comp_uid string # Control uid
---@param clicked_comp_uid string # uid of the clicked control
---@param radius integer # Radius of visual field
function GameAPI.set_ui_fog_clicked_comp_and_radius(role, comp_uid, clicked_comp_uid, radius) end

--Set the text stripper
---@param role py.Role # Player
---@param comp_name string # Control uid
---@param enable boolean # Switch
---@param width? integer # Degree of thickness
---@param color? string # hex
---@param alpha? number # A
function GameAPI.set_ui_text_strike_through(role, comp_name, enable, width, color, alpha) end

--Set text underline
---@param role py.Role # Player
---@param comp_name string # Control uid
---@param enable boolean # Switch
function GameAPI.set_ui_text_under_line(role, comp_name, enable) end

--Set text italics
---@param role py.Role # Player
---@param comp_name string # Control uid
---@param enable boolean # Switch
---@param radius? number # Degree of inclination
function GameAPI.set_ui_text_italics(role, comp_name, enable, radius) end

--Gets the number of times the archive remains
---@param role py.Role # Player
---@param archive_key integer # Integer archive
---@return integer # Archive residuals
function GameAPI.get_role_map_archive_limit(role, archive_key) end

--Gets the md5 value of the string
---@param original_str string # Raw string
---@return string # md5 value
function GameAPI.api_get_string_md5(original_str) end

--Generate an RSA key pair
---@return py.List # Public and private keys
function GameAPI.generate_rsa_keys() end

--Encrypt messages using a public key
---@param public_key string # Public key
---@param message string # Original message
---@return string # Encrypted message
function GameAPI.rsa_encrypt_message(public_key, message) end

--Decrypt the message using the private key
---@param private_key string # Private key
---@param encrypted_message string # Encrypted message
---@return string # The decrypted message
function GameAPI.rsa_decrypt_message(private_key, encrypted_message) end

--Resets the overall visibility of blood strips
---@param unit py.Unit # unit
---@param role? py.Role # Player
function GameAPI.reset_billboard_overall_visibility(unit, role) end
