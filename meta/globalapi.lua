--This file is generated by tools/genGameAPI, do not modify it manually.
---@meta

---@class py.GlobalAPI
GlobalAPI = {}

--Clear label
---@param actor py.Actor # Actor
function GlobalAPI.api_clear_tag(actor) end

--Empty api
function GlobalAPI.api_do_nothing() end

--Clear the custom key values
---@param actor py.Actor # Actor
function GlobalAPI.api_clear_kv(actor) end

--Check whether the Actor has a Tag
---@param actor py.Actor # Actor
---@param tag string # Tag tag
---@return boolean # Whether there is tag
function GlobalAPI.has_tag(actor, tag) end

--Determine if the Actor has kv
---@param kvbase py.Actor # Actor
---@param key string # kv
---@return boolean # Whether there is tag
function GlobalAPI.api_has_kv_any(kvbase, key) end

--Whether string A contains string B
---@param str_a string # str
---@param str_b string # str
---@return boolean # Whether to include
function GlobalAPI.is_str_include_other(str_a, str_b) end

--Enables triggers on the Actor
---@param actor py.Actor # Actor
---@param trigger_id py.TriggerID # Trigger id
---@param enabled boolean # enable
function GlobalAPI.set_actor_trigger_enabled(actor, trigger_id, enabled) end

--Triggers triggers on the Actor
---@param actor py.Actor # actor
---@param trigger_id py.TriggerID # Trigger id
function GlobalAPI.trigger_actor_trigger(actor, trigger_id) end

--Register triggers on Actor and take effect
---@param actor py.Actor # actor
---@param conf_id py.TriggerID # Trigger configuration id
---@param context py.Dict # context
---@return py.DynamicTriggerInstance # Dynamic trigger instance
function GlobalAPI.reg_actor_trigger(actor, conf_id, context) end

--Unregister the trigger on the Actor
---@param actor py.Actor # actor
---@param trigger_id py.DynamicTriggerInstance # Dynamic trigger instance
function GlobalAPI.unreg_actor_trigger(actor, trigger_id) end

--Create a sector
---@param radius py.Fixed # radius
---@param angle py.Fixed # Angle
---@param yaw number # orientation
---@return py.Shape # Sector object
function GlobalAPI.create_sector_shape(radius, angle, yaw) end

--Create a circle
---@param radius py.Fixed # radius
---@return py.Shape # Circular object
function GlobalAPI.create_circular_shape(radius) end

--Create a rectangle
---@param width py.Fixed # long
---@param length py.Fixed # wide
---@param yaw number # orientation
---@param offset_x_ratio? py.Fixed # Offset x
---@param offset_y_ratio? py.Fixed # Offset y
---@return py.Shape # Rectangular object
function GlobalAPI.create_rectangle_shape(width, length, yaw, offset_x_ratio, offset_y_ratio) end

--Create a ring
---@param small_r py.Fixed # Minor radius
---@param big_r py.Fixed # Radius of great circle
---@return py.Shape # Ring object
function GlobalAPI.create_annular_shape(small_r, big_r) end

--The coordinate value is converted to FVector3
---@param x py.Fixed # x
---@param z py.Fixed # y
---@param y? py.Fixed # z
---@return py.FVector3 # FVector3
function GlobalAPI.coord_to_point(x, z, y) end

--The three-dimensional coordinate values are converted to FVector3
---@param x py.Fixed # x
---@param y py.Fixed # y
---@param z py.Fixed # z
---@return py.FVector3 # FVector3
function GlobalAPI.float_to_vector3(x, y, z) end

--Returns X of the three-dimensional vector
---@param vector py.FVector3 # Three-dimensional vector
---@return py.Fixed # X
function GlobalAPI.get_vector3_x(vector) end

--Returns Y of the three-dimensional vector
---@param vector py.FVector3 # Three-dimensional vector
---@return py.Fixed # Y
function GlobalAPI.get_vector3_y(vector) end

--Returns Z of the three-dimensional vector
---@param vector py.FVector3 # Three-dimensional vector
---@return py.Fixed # Z
function GlobalAPI.get_vector3_z(vector) end

--The three-dimensional coordinate values are converted to FRotation
---@param x py.Fixed # x
---@param y py.Fixed # y
---@param z py.Fixed # z
---@return py.FVector3 # FVector3
function GlobalAPI.float_to_rotation(x, y, z) end

--Returns the rotated Roll
---@param vector py.FRotation # Rotation
---@return py.Fixed # X
function GlobalAPI.get_rotation_roll(vector) end

--Return the rotated YAW
---@param vector py.FRotation # Rotation
---@return py.Fixed # Y
function GlobalAPI.get_rotation_yaw(vector) end

--Return to the rotating PITCH
---@param vector py.FRotation # Rotation
---@return py.Fixed # Z
function GlobalAPI.get_rotation_pitch(vector) end

--Integer iterator with a maximum number of iterations not exceeding 2^20
---@param num integer # Number of iterations
---@return py.Int32Iterator # Python iterator
function GlobalAPI.int_iterator(num) end

--Integer iterator
---@param start integer # The count starts at start
---@param stop integer # Count until the end of stop
---@param step? integer # Step size
---@return py.Int32Iterator # Python iterator
function GlobalAPI.int_iterator2(start, stop, step) end

--Integer iterator
---@param start integer # The count starts at start
---@param stop integer # Count until the end of stop
---@param step? integer # Step size
---@return py.Int32Iterator # Python iterator
function GlobalAPI.int_iterator3(start, stop, step) end

--List index iterator
---@param l py.List # list
---@return py.Iterator # Python iterator
function GlobalAPI.list_index_iterator(l) end

--table iterator (discarded)
---@param l py.Table # TAB
---@return py.Iterator # Python iterator
function GlobalAPI.table_iterator(l) end

--get_iter_table_key_str
---@param item py.List # table iter item
---@return string # key str
function GlobalAPI.get_iter_table_key_str(item) end

--get_iter_table_key_int
---@param item py.List # table iter item
---@return integer # key int
function GlobalAPI.get_iter_table_key_int(item) end

--Int32 operation
---@param v1 integer # x
---@param op string # operator(+,-,*,/,%)
---@param v2 integer # y
---@return integer # Returned value
function GlobalAPI.int32_arithmetic_operation(v1, op, v2) end

--Int32 increments by 1
---@param int_value integer # x
---@return integer # Returned value
function GlobalAPI.int32_plus_one(int_value) end

--Int32 Takes the smaller value
---@param int_value1 integer # x1
---@param int_value2 integer # x2
---@return integer # Returned value
function GlobalAPI.int32_min(int_value1, int_value2) end

--Int32 Takes the larger value
---@param int_value1 integer # x1
---@param int_value2 integer # x2
---@return integer # Returned value
function GlobalAPI.int32_max(int_value1, int_value2) end

--The point is shifting in the direction
---@param point py.FVector3 # Initial point
---@param angle py.Fixed # Directional Angle
---@param dis py.Fixed # Offset distance
---@return py.FVector3 # Returned value
function GlobalAPI.get_point_offset_vector(point, angle, dis) end

--int64 converts the string
---@param val integer # value
---@return string # Character string
function GlobalAPI.int64_to_str(val) end

--to_str_default
---@param val py.Actor # value
---@return string # Character string
function GlobalAPI.to_str_default(val) end

--Example Delete a key-value pair
---@param kvbase py.KVBase # Key-value pair container
---@param key string # Key name
function GlobalAPI.api_remove_kv(kvbase, key) end

--Obtain the number of unit numbers in the pool
---@param pool py.UnitKeyPool # Unit numbering pool
---@return integer # Unit number quantity
function GlobalAPI.get_unit_key_pool_num(pool) end

--Distance between two points
---@param p1 py.FPoint # Target point
---@param p2 py.FPoint # Initial point
---@return py.Fixed # distance
function GlobalAPI.plane_range_between_2_point(p1, p2) end

--Integer turn point number
---@param i integer # integer
---@return py.Fixed # Fixed point number
function GlobalAPI.int32_to_fixed(i) end

--Real approximate comparison (4 decimal places)
---@param a py.Fixed # Fixed point number 1
---@param op string # comparator
---@param b py.Fixed # Fixed point number 2
---@return boolean # result
function GlobalAPI.fix32_equal_with_precision(a, op, b) end

--Fixed point number to integer
---@param f py.Fixed # Fixed point number
---@return integer # integer
function GlobalAPI.fixed_to_int32(f) end

--Skill slot to integer
---@param ability_index py.AbilityIndex # Skill slot
---@return integer # integer
function GlobalAPI.ability_index_to_int32(ability_index) end

--Fixed point number to string
---@param f py.Fixed # Fixed point number
---@return string # Character string
function GlobalAPI.fixed_to_str(f) end

--Fixed point FVector3 to string
---@param f py.FVector3 # FVector3
---@return string # Character string
function GlobalAPI.fvector3_to_str(f) end

--Fixed point FVector2 to string
---@param f py.FVector2 # FVector2
---@return string # Character string
function GlobalAPI.fvector2_to_str(f) end

--Floating-point to character string
---@param f number # Floating point number
---@param num? integer # Reserved bits
---@return string # Character string
function GlobalAPI.float_to_str(f, num) end

--Floating point Vector3 to string
---@param f py.Vector3 # Vector3
---@return string # Character string
function GlobalAPI.vector3_to_str(f) end

--Convert the string to Vector3
---@param f string # Character string
---@return py.Vector3 # Vector3
function GlobalAPI.str_to_vector3(f) end

--Floating point Vector2 to string
---@param f py.Vector2 # Vector2
---@return string # Character string
function GlobalAPI.vector2_to_str(f) end

--Shape to string
---@param f py.Shape # Shape
---@return string # Character string
function GlobalAPI.shape_to_str(f) end

--Dynamic type number to string
---@param f py.DynamicTypeMeta # Dynamic type
---@return string # Character string
function GlobalAPI.dynamic_to_str(f) end

--int32_to_str
---@param f integer # int32
---@return string # Character string
function GlobalAPI.int32_to_str(f) end

--Boolean to string
---@param f boolean # Boolean value
---@return string # Character string
function GlobalAPI.bool_to_str(f) end

--Integer to string
---@param i integer # Integer value
---@return string # Character string
function GlobalAPI.i2s(i) end

--String splicing
---@param s1 string # Character string
---@param s2 string # Character string
---@param s3 string # Character string
---@param s4 string # Character string
---@param s5 string # Character string
---@param s6 string # Character string
---@param s7 string # Character string
---@param s8 string # Character string
---@param s9 string # Character string
---@param s10 string # Character string
---@return string # Character string
function GlobalAPI.join_s(s1, s2, s3, s4, s5, s6, s7, s8, s9, s10) end

--String splicing
---@param s1 string # Character string
---@param s2 string # Character string
---@param s3 string # Character string
---@param s4 string # Character string
---@param s5 string # Character string
---@param s6 string # Character string
---@param s7 string # Character string
---@param s8 string # Character string
---@param s9 string # Character string
---@param s10 string # Character string
---@return string # Character string
function GlobalAPI.join_s_new(s1, s2, s3, s4, s5, s6, s7, s8, s9, s10) end

--Root of a root
---@param base py.Fixed # Base of a root
---@param num py.Fixed # Degree of square root
---@return py.Fixed # Calculation result
function GlobalAPI.root(base, num) end

--String substitution
---@param s1 string # Generating string
---@param old string # The replaced string
---@param new string # Replacement target string
---@param num? integer # Maximum substitution number
---@return string # Character string
function GlobalAPI.replace_str(s1, old, new, num) end

--Fixed-point number operation
---@param a py.Fixed # x
---@param o string # operator(+,-*,/)
---@param b py.Fixed # y
---@return py.Fixed # Fixed point number
function GlobalAPI.fixed_arithmetic_operation(a, o, b) end

--Three-dimensional vector operation
---@param a py.FVector3 # x
---@param o string # operator(+,-)
---@param b py.FVector3 # y
---@return py.FVector3 # The fixed point number Vector3
function GlobalAPI.vector3_arithmetic_operation(a, o, b) end

--The length of a three-dimensional vector
---@param vec3 py.FVector3 # x
---@return py.Fixed # Fixed point number
function GlobalAPI.vector3_length(vec3) end

--Three-dimensional vector normalization
---@param vec3 py.Vector3 # Three-dimensional vector
function GlobalAPI.vector3_normalize(vec3) end

--Normalized vector of a three-dimensional vector
---@param vec3 py.Vector3 # Three-dimensional vector
---@return py.Vector3 # Three-dimensional vector
function GlobalAPI.get_vector3_normalize(vec3) end

--Three dimensional vector times a scalar
---@param vec3 py.Vector3 # Three-dimensional vector
---@param scalar py.Vector3 # Scalar quantity
function GlobalAPI.vector3_multiply_scalar(vec3, scalar) end

--Three-dimensional vector to Euler Angle
---@param vec3 py.Vector3 # Three-dimensional vector
---@return py.FRotation # Euler Angle
function GlobalAPI.vector3_to_euler(vec3) end

--Obtain the vector after the three-dimensional vector is rotated about the axis
---@param vec3 py.FVector3 # Three-dimensional vector
---@param axis py.FVector3 # Axis of rotation
---@param angle py.Fixed # Rotation Angle
---@return py.FVector3 # The fixed point number Vector3
function GlobalAPI.vector3_angle_axis(vec3, axis, angle) end

--The number of fixed points increases by 1
---@param fix_value py.Fixed # x
---@return py.Fixed # Fixed point number
function GlobalAPI.fixed_plus_one(fix_value) end

--Take the minimum of two fixed points
---@param fix_value1 py.Fixed # x1
---@param fix_value2 py.Fixed # x2
---@return py.Fixed # Fixed point number
function GlobalAPI.fixed_min(fix_value1, fix_value2) end

--Take the minimum and maximum values of the two fixed points
---@param fix_value1 py.Fixed # x1
---@param fix_value2 py.Fixed # x2
---@return py.Fixed # Fixed point number
function GlobalAPI.fixed_max(fix_value1, fix_value2) end

--Angle calculation
---@param a py.Fixed # x
---@param o string # operator(+,-*,/)
---@param b py.Fixed # y
---@return py.Fixed # Fixed point number
function GlobalAPI.angle_arithmetic_operation(a, o, b) end

--Convert degrees to radians
---@param d py.Fixed # Angle
---@return py.Fixed # radian
function GlobalAPI.degree_to_radian(d) end

--sine
---@param r py.Fixed # radian
---@return py.Fixed # Fixed point number
function GlobalAPI.radian_sin(r) end

--cosine
---@param r py.Fixed # radian
---@return py.Fixed # Fixed point number
function GlobalAPI.radian_cos(r) end

--tangent
---@param r py.Fixed # radian
---@return py.Fixed # Fixed point number
function GlobalAPI.radian_tan(r) end

--arcsine
---@param r py.Fixed # Fixed point number
---@return py.Fixed # radian
function GlobalAPI.radian_asin(r) end

--Arc cosine
---@param r py.Fixed # Fixed point number
---@return py.Fixed # radian
function GlobalAPI.radian_acos(r) end

--Arc tangent
---@param r py.Fixed # Fixed point number
---@return py.Fixed # radian
function GlobalAPI.radian_atan(r) end

--Inverse tangent (Y:X)
---@param y py.Fixed # Fixed point number
---@param x py.Fixed # Fixed point number
---@return py.Fixed # radian
function GlobalAPI.radian_atan_x_y(y, x) end

--Square root
---@param x py.Fixed # Fixed point number
---@return py.Fixed # Fixed point number
function GlobalAPI.sqrt(x) end

--exponentiation
---@param f py.Fixed # Fixed point number
---@param n integer # integer
---@return py.Fixed # Fixed point number
function GlobalAPI.pow(f, n) end

--Absolute value
---@param f py.Fixed # Fixed point number
---@return py.Fixed # Fixed point number
function GlobalAPI.abs(f) end

--Absolute value
---@param number integer # integer
---@return integer # integer
function GlobalAPI.int_abs(number) end

--section
---@param x0 py.Fixed # Fixed point number
---@param x1 py.Fixed # Fixed point number
---@param x2 py.Fixed # Fixed point number
---@return py.Fixed # Fixed point number
function GlobalAPI.interval(x0, x1, x2) end

--Find the nearest quadratic number
---@param x py.Fixed # Fixed point number
---@return integer # Quadratic number
function GlobalAPI.nearest_quadratic_number(x) end

--Least integer
---@param f py.Fixed # Fixed point number
---@return integer # integer
function GlobalAPI.ceil(f) end

--Maximum integer
---@param f py.Fixed # Fixed point number
---@return integer # integer
function GlobalAPI.floor(f) end

--interpolation
---@param x_from py.Fixed # Fixed point number
---@param x_to py.Fixed # Fixed point number
---@param t py.Fixed # Fixed point number
---@return py.Fixed # Fixed point number
function GlobalAPI.interpolate(x_from, x_to, t) end

--Inverse interpolation
---@param x_from py.Fixed # Fixed point number
---@param x_to py.Fixed # Fixed point number
---@param res_val py.Fixed # Fixed point number
---@return py.Fixed # Fixed point number
function GlobalAPI.invert_interpolate(x_from, x_to, res_val) end

--Logarithm 10
---@param x py.Fixed # Fixed point number
---@return py.Fixed # Fixed point number
function GlobalAPI.log10(x) end

--logarithm
---@param x1 py.Fixed # Fixed point number
---@param x2 py.Fixed # Fixed point number
---@return py.Fixed # Fixed point number
function GlobalAPI.log(x1, x2) end

--Returns the maximum value within the group
---@param l py.List # list
---@return py.Fixed # Fixed point number
function GlobalAPI.get_max_in_list(l) end

--Returns the group minimum
---@param l py.List # list
---@return py.Fixed # Fixed point number
function GlobalAPI.get_min_in_list(l) end

--Round it up
---@param x py.Fixed # Fixed point number
---@return py.Fixed # Fixed point number
function GlobalAPI.round(x) end

--Return the plus and minus sign
---@param f py.Fixed # Fixed point number
---@return py.Fixed # Fixed point number
function GlobalAPI.sign(f) end

--Keep X decimal places
---@param x py.Fixed # Fixed point number
---@param num integer # X-place decimal
---@param b? boolean # Whether to round
---@return py.Fixed # Fixed point number
function GlobalAPI.round_dec(x, num, b) end

--Fixed point number trigonometric function operation
---@param o string # method(sin,cos,tan)
---@param a py.Fixed # Fixed point number
---@return py.Fixed # Fixed point number
function GlobalAPI.fixed_trigonometric_operation(o, a) end

--The number of players in the player group
---@param player_group py.RoleGroup # Player group
---@return integer # Number of players
function GlobalAPI.get_player_group_num(player_group) end

--Gets Actor association skills
---@param actor py.Actor # Actor
---@return py.Ability # skill
function GlobalAPI.get_related_ability(actor) end

--Add a timer for the Actor
---@param actor py.Actor # actor
---@param name string # Timer name
---@param once string # Character string
---@param interval py.Fixed # Fixed point number
---@param context py.Dict # dictionary
function GlobalAPI.add_actor_timer(actor, name, once, interval, context) end

--Turn off the Actor timer
---@param actor py.Actor # actor
---@param name string # Character string
function GlobalAPI.stop_actor_timer(actor, name) end

--Gets one of the values of FVector3
---@param point py.FVector3 # FVector3
---@param index integer # Serial number (0-2)
---@return py.Fixed # Fixed point number
function GlobalAPI.get_fixed_coord_index(point, index) end

--Clear group/array variables
---@param list1 py.List # list
function GlobalAPI.clear_group(list1) end

--Array - Deletes an array entry
---@param dict_var py.List # list var
---@param index integer # index
---@param index_forward? boolean # Index advance
function GlobalAPI.remove_list_var_item(dict_var, index, index_forward) end

--Array - Deletes an array entry
---@param dict_var py.List # list var
---@param index integer # index
---@param index_forward? boolean # Index advance
function GlobalAPI.remove_list_var_item_2(dict_var, index, index_forward) end

--Array - Whether it has an index
---@param dict_var py.List # list var
---@param key integer # key
---@return boolean # result
function GlobalAPI.dict_has_key(dict_var, key) end

--Array - Whether an element exists
---@param dict_var py.List # list var
---@param key py.DynamicTypeMeta # value
---@return boolean # result
function GlobalAPI.dict_has_value(dict_var, key) end

--Array - Whether an element exists
---@param dict_var py.List # list var
---@param key py.DynamicTypeMeta # value
---@param name string # name
---@return boolean # result
function GlobalAPI.dict_has_value_special(dict_var, key, name) end

--Assigning the value of the second list to the first list does not change the length of the first list
---@param list1 py.List # list
---@param list2 py.List # list
function GlobalAPI.set_list_with_length(list1, list2) end

--Determine if the player is in the player group
---@param role py.Role # Player
---@param group py.RoleGroup # Player group
---@return boolean # Boolean value
function GlobalAPI.judge_role_in_group(role, group) end

--Determine if the unit is alive
---@param unit? py.Unit # unit
---@return boolean # Boolean value
function GlobalAPI.is_unit_alive(unit) end

--Gets an empty unit number pool
---@return py.UnitKeyPool # Unit numbering pool
function GlobalAPI.get_empty_unit_key_pool() end

--Obtain a point in the path
---@param road_point_list py.Road # path
---@param index integer # subscript
---@return py.FPoint # point
function GlobalAPI.get_point_in_route(road_point_list, index) end

--Rotation of a point about the Y-axis
---@param point py.FPoint # point
---@param angle py.Fixed # rotate
---@return py.FPoint # point
function GlobalAPI.get_point_rotate_y(point, angle) end

--String to integer
---@param s string # Character string
---@return integer # Returned value
function GlobalAPI.str_to_int(s) end

--String to Boolean value
---@param s string # Character string
---@return boolean # Boolean value
function GlobalAPI.str_to_bool(s) end

--String number of turn points
---@param s string # Character string
---@return py.Fixed # Returned value
function GlobalAPI.str_to_fixed(s) end

--Delete substring
---@param str1 string # Original string
---@param sub_str string # substring
---@param only_one boolean # Once only
---@return string # Original string
function GlobalAPI.delete_sub_str(str1, sub_str, only_one) end

--Intercept the substring
---@param str1 string # Original string
---@param index1 integer # Left subscript
---@param index2 integer # Right subscript
---@return string # Truncated string
function GlobalAPI.extract_str(str1, index1, index2) end

--Get string length
---@param str1 string # Character string
---@return integer # String length
function GlobalAPI.length_of_str(str1) end

--Uniform case of string
---@param str1 string # Original string
---@param is_upper boolean # Capitalize or not
---@return string # Processed string
function GlobalAPI.str_to_upper_lower(str1, is_upper) end

--Substring position
---@param str1 string # Original string
---@param sub_str string # substring
---@return integer # Substring position
function GlobalAPI.pos_in_str(str1, sub_str) end

--Integers are converted to effects types
---@param integer integer # integer
---@return py.ProjectileKey # Projectile type
function GlobalAPI.api_int_to_key(integer) end

--Stop control of lua gc
function GlobalAPI.api_stop_luagc_control() end

--Converts the projectile type to an integer
---@param key py.ProjectileKey # Projectile type
---@return integer # integer
function GlobalAPI.api_key_to_int(key) end

--Unit command type to character string
---@param val py.UnitCommandType # Unit command type
---@return string # Character string
function GlobalAPI.unit_command_type_to_str(val) end

--Character string to unit command type
---@param val string # Character string
---@return py.UnitCommandType # Unit command type
function GlobalAPI.str_to_unit_command_type(val) end

--Skill release type to string
---@param val py.AbilityCastType # Skill release type
---@return string # Character string
function GlobalAPI.ability_cast_type_to_str(val) end

--String to skill release type
---@param val string # Character string
---@return py.AbilityCastType # Skill release type
function GlobalAPI.str_to_ability_cast_type(val) end

--Polygon area to string
---@param obj py.PolyArea # Polygon region
---@return string # Character string
function GlobalAPI.poly_area_to_str(obj) end

--Projectile group to string
---@param obj py.ProjectileGroup # Projectile set
---@return string # Character string
function GlobalAPI.projectile_group_to_str(obj) end

--Player relationship to string
---@param val py.RoleRelation # Player relationship
---@return string # Character string
function GlobalAPI.role_relation_to_str(val) end

--String to player relationship
---@param val string # Character string
---@return py.RoleRelation # Player relationship
function GlobalAPI.str_to_role_relation(val) end

--Unit number Pool to character string
---@param obj py.UnitKeyPool # Unit numbering pool
---@return string # Character string
function GlobalAPI.unit_key_pool_to_str(obj) end

--Unit sort to string
---@param val py.UnitType # Unit type
---@return string # Character string
function GlobalAPI.unit_type_to_str(val) end

--String to unit classification
---@param val string # Character string
---@return py.UnitType # Unit type
function GlobalAPI.str_to_unit_type(val) end

--Timer to string
---@param val py.Timer # timepiece
---@return string # Character string
function GlobalAPI.timer_to_str(val) end

--unit-to-string
---@param obj py.Unit # unit
---@return string # Character string
function GlobalAPI.unit_to_str(obj) end

--Unit group to string
---@param obj py.UnitGroup # Unit group
---@return string # Character string
function GlobalAPI.unit_group_to_str(obj) end

--Item to string
---@param obj py.Item # Item object
---@return string # Character string
function GlobalAPI.item_to_str(obj) end

--Item group to string
---@param obj py.ItemGroup # Item group
---@return string # Character string
function GlobalAPI.item_group_to_str(obj) end

--Motion machine to string
---@param obj_id py.Mover # Kinetoscope
---@return string # Character string
function GlobalAPI.mover_entity_to_str(obj_id) end

--Level to string
---@param obj py.Map # checkpoint
---@return string # Character string
function GlobalAPI.map_to_str(obj) end

--Player to string
---@param obj py.Role # Player
---@return string # Character string
function GlobalAPI.role_to_str(obj) end

--Player group turn string
---@param obj py.RoleGroup # Player group
---@return string # Character string
function GlobalAPI.role_group_to_str(obj) end

--Player status to string
---@param val py.RoleStatus # Player status
---@return string # Character string
function GlobalAPI.role_status_to_str(val) end

--String to player status
---@param val string # Character string
---@return py.RoleStatus # Player status
function GlobalAPI.str_to_role_status(val) end

--Player control to string
---@param val py.RoleType # Type of player controller
---@return string # Character string
function GlobalAPI.role_type_to_str(val) end

--String to player control
---@param val string # Character string
---@return py.RoleType # Type of player controller
function GlobalAPI.str_to_role_type(val) end

--Skill to string
---@param obj py.Ability # Skill object
---@return string # Character string
function GlobalAPI.ability_to_str(obj) end

--Skill slot type to a character string
---@param val py.AbilityType # Skill type
---@return string # Character string
function GlobalAPI.ability_type_to_str(val) end

--The character string is converted to the slot type
---@param val string # Skill type
---@return py.AbilityType # Skill type
function GlobalAPI.str_to_ability_type(val) end

--Rectangular area to string
---@param obj py.RecArea # Rectangular region
---@return string # Character string
function GlobalAPI.rect_area_to_str(obj) end

--Round area to string
---@param obj py.CirArea # Circular region
---@return string # Character string
function GlobalAPI.circle_area_to_str(obj) end

--path-to-string
---@param obj py.Road # path
---@return string # Character string
function GlobalAPI.road_to_str(obj) end

--Destructible object to object string
---@param obj py.Destructible # Destructible object
---@return string # Character string
function GlobalAPI.dest_to_str(obj) end

--Projectile to string
---@param obj py.ProjectileEntity # Projectile object
---@return string # Character string
function GlobalAPI.project_to_str(obj) end

--Magic effect turn string
---@param obj py.ModifierEntity # Magic effect object
---@return string # Character string
function GlobalAPI.modifier_entity_to_str(obj) end

--Magic effect class to string
---@param val py.ModifierType # Magic effect categories
---@return string # Character string
function GlobalAPI.modifier_type_to_str(val) end

--String to magic effect category
---@param val string # Character string
---@return py.ModifierType # Magic effect categories
function GlobalAPI.str_to_modifier_type(val) end

--Magic effects affect type to string
---@param val py.ModifierEffectType # Magic effects affect classes
---@return string # Character string
function GlobalAPI.modifier_effect_type_to_str(val) end

--String to magic effect effect type
---@param val string # Character string
---@return py.ModifierEffectType # Magic effects affect classes
function GlobalAPI.str_to_modifier_effect_type(val) end

--Camp to string
---@param obj py.Camp # Camp object
---@return string # Character string
function GlobalAPI.camp_to_str(obj) end

--Random pool to string
---@param obj py.RandomPool # Random pool
---@return string # Character string
function GlobalAPI.random_pool_to_str(obj) end

--Keyboard key to string
---@param obj py.KeyboardKey # Keyboard key
---@return string # Character string
function GlobalAPI.keyboard_key_to_str(obj) end

--String to keyboard key
---@param obj string # Character string
---@return py.KeyboardKey # Keyboard key
function GlobalAPI.str_to_keyboard_key(obj) end

--Mouse button to string
---@param obj py.MouseKey # Mouse button
---@return string # Character string
function GlobalAPI.mouse_key_to_str(obj) end

--String turn mouse button
---@param obj string # Character string
---@return py.MouseKey # Mouse button
function GlobalAPI.str_to_mouse_key(obj) end

--Mouse wheel over the string
---@param obj py.MouseWheel # Mouse wheel
---@return string # Character string
function GlobalAPI.mouse_wheel_to_str(obj) end

--String turn mouse wheel
---@param obj string # Character string
---@return py.MouseWheel # Mouse wheel
function GlobalAPI.str_to_mouse_wheel(obj) end

--Flip-flop to string
---@param obj py.DynamicTypeMeta # flip-flop
---@return string # Character string
function GlobalAPI.trigger_to_str(obj) end

--table-to-string
---@param obj py.Table # table
---@return string # Character string
function GlobalAPI.table_to_str(obj) end

--Damage type to string
---@param obj integer # Injury type
---@return string # Character string
function GlobalAPI.damage_type_to_str(obj) end

--Character string transfer damage type
---@param obj string # Character string
---@return integer # Injury type
function GlobalAPI.str_to_damage_type(obj) end

--Unit attribute type to string
---@param obj string # Attribute type
---@return string # Character string
function GlobalAPI.unit_attr_type_to_str(obj) end

--String to unit attribute type
---@param obj string # Character string
---@return string # Attribute type
function GlobalAPI.str_to_unit_attr_type(obj) end

--String to UI event
---@param obj string # Character string
---@return string # UiEvent
function GlobalAPI.str_to_ui_event(obj) end

--Control to string
---@param obj string # control
---@return string # Character string
function GlobalAPI.comp_to_str(obj) end

--Get the local language environment
---@return py.LanguageType # Language environment
function GlobalAPI.get_client_language_type() end

--Cut out
---@param obj string # Character string
---@param start integer # start
---@param end_ integer # end
---@return string # str
function GlobalAPI.string_slice(obj, start, end_) end

--negation
---@param v boolean # bool
---@return boolean # bool
function GlobalAPI.bool_not(v) end

--Get returned server time (years)
---@param v number # float
---@return integer # int
function GlobalAPI.get_year_of_server_timestamp(v) end

--Get returned server time (month)
---@param v number # float
---@return integer # int
function GlobalAPI.get_month_of_server_timestamp(v) end

--Get returned server time (day)
---@param v number # float
---@return integer # int
function GlobalAPI.get_day_of_server_timestamp(v) end

--Get returned server time (hours)
---@param v number # float
---@return integer # int
function GlobalAPI.get_hour_of_server_timestamp(v) end

--Random pool result iterator
---@param v py.Dict # Result
---@return py.Iterator # Python iterator
function GlobalAPI.iter_random_pool_result(v) end

--Obtain the execution result of the random pool on the server
---@param v integer # int
---@return integer # int
function GlobalAPI.get_random_pool_ret_code(v) end

--Gets server random pool drop affected archive slot
---@param v integer # int
---@return integer # int
function GlobalAPI.get_iter_random_pool_archive_key(v) end

--Gets the server random pool drop affected archive value
---@param v integer # int
---@return integer # int
function GlobalAPI.get_iter_random_pool_archive_increment(v) end

--lua also has an empty python table
---@return py.Dict # Dict
function GlobalAPI.lua_get_python_empty_dict() end

--Convert integers to strings
---@param i integer # integer
---@param num? integer # Reserved bits
---@return string # Character string
function GlobalAPI.int_to_string(i, num) end

--Integers are converted to model types
---@param key integer # integer
---@return py.ModelKey # Character string
function GlobalAPI.int_to_model_key(key) end

--Fixed point number to string
---@param f number # Floating point number
---@param num integer # Reserved bits
---@param rule? integer # Retention rule
function GlobalAPI.float_to_str_new(f, num, rule) end

--Get player offline save
---@param v string # str
---@return string # str
function GlobalAPI.get_role_open_archive(v) end

--Gets a generated random number error code
---@param v integer # int
---@return integer # int
function GlobalAPI.get_random_number_err_code(v) end

--The timestamp is converted to a date
---@param v integer # int
---@return string # str
function GlobalAPI.timestamp_to_str(v) end

--String to timestamp
---@param v string # str
---@return integer # int
function GlobalAPI.str_to_timestamp(v) end

--Get the current number of map reservations
---@return integer # Reservation number
function GlobalAPI.api_get_booked_number() end

--Time stamp to week
---@param v integer # timestamp
---@return integer # week
function GlobalAPI.api_timestamp_to_week(v) end

--Round off
---@param v number # Real number
---@param mode integer # Integer mode
---@return integer # The value after rounding
function GlobalAPI.floor_or_ceil(v, mode) end
