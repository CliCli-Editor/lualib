--This file is generated by tools/genGameAPI, do not modify it manually.
---@meta

---@class py.Unit
local Unit = {}

--Get the unit ID
---@return py.UnitID? # Unit ID
function Unit:api_get_id() end

--Get unit number
---@return py.UnitKey? # Unit number
function Unit:api_get_key() end

--Gets the camp id of the unit
---@return py.CampID? # Camp ID
function Unit:api_get_camp_id() end

--Gets the player ID of the unit
---@return py.RoleID? # Player ID
function Unit:api_get_role_id() end

--Gets the player the unit belongs to
---@return py.Role? # Player
function Unit:api_get_role() end

--Gets the affiliation of the unit
---@return py.Camp? # Factions
function Unit:api_get_camp() end

--Get unit type
---@return py.UnitType? # Unit type
function Unit:api_get_type() end

--Add timer
---@param time py.Fixed # Timing duration
---@param callback function # Timeout function
---@return integer? # Timer ID
function Unit:add_timer(time, callback) end

--Add period timer
---@param time py.Fixed # Timing duration
---@param callback function # Timeout function
---@return integer? # Timer ID
function Unit:add_repeat_timer(time, callback) end

--Cancel timer
---@param timer_id integer # Timer ID
function Unit:cancel_timer(timer_id) end

--Unit Removes a key-value pair
---@param k string # Key name
function Unit:api_remove_kv(k) end

--Unit survival
---@return boolean? # Unit survival
function Unit:api_is_alive() end

--Hide overhead information
---@param show boolean # Whether to hide overhead information
function Unit:api_hide_head_bar(show) end

--Whether the unit has a label
---@param tag string # tag
---@return boolean? # Whether the unit has a label
function Unit:has_tag(tag) end

--Reactivation unit
---@param position? py.Point # Reactivation position
function Unit:api_revive(position) end

--Whether the unit has been destroyed
---@return boolean? # Whether the unit has been destroyed
function Unit:api_is_destroyed() end

--Delete unit
function Unit:api_delete() end

--Forced unit death
---@param source_unit? py.Unit # Killer unit
function Unit:api_kill(source_unit) end

--Gets the path to the unit icon
---@return string? # Unit icon path
function Unit:api_get_icon() end

--Get the unit picture path
---@param pic_type string # Picture type
---@return string? # Unit picture path
function Unit:api_get_unit_pic(pic_type) end

--Gets the parent unit of the unit
---@return py.Unit? # Parent unit of a unit
function Unit:api_get_parent_unit() end

--Change the color of the unit blood bar
---@param color string # Unit blood stripe color value
function Unit:api_set_hp_color(color) end

--Turn on/off damage and assist statistics
---@param enable boolean # On
function Unit:api_switch_atk_assist_record(enable) end

--Whether the unit/point is in the range
---@param unit py.Unit # unit
---@param radius number # Radius
---@return boolean? # Whether it is in range
function Unit:api_is_in_range(unit, radius) end

--Whether the point is in range
---@param point py.Point # point
---@param radius number # Radius
---@return boolean? # Whether it is in range
function Unit:api_is_point_in_range(point, radius) end

--Set the life cycle of a unit
---@param life_time number # Life cycle
function Unit:api_set_life_cycle(life_time) end

--Suspends the life cycle of a unit
---@param pause boolean # Pause or not
function Unit:api_pause_life_cycle(pause) end

--Obtain the current life cycle of a unit
---@return py.Fixed? # Life cycle
function Unit:api_get_life_cycle() end

--Gets the total lifetime of a unit
---@return py.Fixed? # Life cycle
function Unit:api_get_total_life_cycle() end

--Set the unit attack type
---@param attack_type integer # Attack type
function Unit:api_set_attack_type(attack_type) end

--Gets the unit attack type
---@return integer? # Attack type
function Unit:api_get_atk_type() end

--Attack type judgment
---@param attack_type integer # Attack type
---@return boolean? # Attack type judgment
function Unit:api_is_attack_type(attack_type) end

--Sets the unit armor type
---@param armor_type integer # Type of armor
function Unit:api_set_armor_type(armor_type) end

--Gets the unit armor type
---@return integer? # Type of armor
function Unit:api_get_armor_type() end

--Armor type judgment
---@param armor_type integer # Type of armor
---@return boolean? # Armor type judgment
function Unit:api_is_armor_type(armor_type) end

--Gets the X-axis scaling of the unit
---@return number? # Scaled value
function Unit:api_get_x_scale() end

--Gets the Y-axis scaling of the unit
---@return number? # Scaled value
function Unit:api_get_y_scale() end

--Gets the z-axis scaling of the unit
---@return number? # Scaled value
function Unit:api_get_z_scale() end

--Get units of hate units
---@return py.Unit? # Unit of hate
function Unit:api_get_ai_battle_target_unit() end

--Gets the unit that follows the unit
---@return py.Unit? # Following unit
function Unit:api_get_ai_follow_target_unit() end

--Get attr_other
---@param key string # Attribute name
---@return py.Fixed? # Attribute value
function Unit:api_get_attr_other(key) end

--Get attr_base
---@param key string # Attribute name
---@return py.Fixed? # Attribute value
function Unit:api_get_attr_base(key) end

--Get attr_base_ratio
---@param key string # Attribute name
---@return py.Fixed? # Attribute value
function Unit:api_get_attr_base_ratio(key) end

--Get attr_bonus
---@param key string # Attribute name
---@return py.Fixed? # Attribute value
function Unit:api_get_attr_bonus(key) end

--Get attr_bonus_ratio
---@param key string # Attribute name
---@return py.Fixed? # Attribute value
function Unit:api_get_attr_bonus_ratio(key) end

--Get attr_all_ratio
---@param key string # Attribute name
---@return py.Fixed? # Attribute value
function Unit:api_get_attr_all_ratio(key) end

--Gets the unit master properties
---@return string? # Primary attribute
function Unit:api_get_main_attr() end

--Sets the value of the pure value type
---@param key string # Attribute name
---@param val py.Fixed # value
function Unit:api_set_attr(key, val) end

--Set unit attributes (Sort by attribute)
---@param key string # Attribute name
---@param val py.Fixed # value
---@param attr_element string # Attribute classification
function Unit:api_set_attr_by_attr_element(key, val, attr_element) end

--Sets the base value section of the unit property
---@param key string # Attribute name
---@param val py.Fixed # Base value
function Unit:api_set_attr_base(key, val) end

--Added unit attributes (classified by attributes)
---@param key string # Attribute name
---@param val py.Fixed # value
---@param attr_element string # Attribute classification
function Unit:api_add_attr_by_attr_element(key, val, attr_element) end

--Increases the base value of the unit attribute
---@param key string # Attribute name
---@param delta py.Fixed # Value added
function Unit:api_add_attr_base(key, delta) end

--Set the unit attribute attr_bonus
---@param key string # Attribute name
---@param val py.Fixed # Set value
function Unit:api_set_attr_bonus(key, val) end

--Added unit attribute attr_bonus
---@param key string # Attribute name
---@param delta py.Fixed # Value added
function Unit:api_add_attr_bonus(key, delta) end

--Set the unit attribute attr_bouns_ratio
---@param key string # Attribute name
---@param val py.Fixed # Set value
function Unit:api_set_attr_bonus_ratio(key, val) end

--Added the unit attribute attr_bouns_ratio
---@param key string # Attribute name
---@param delta py.Fixed # Addition ratio
function Unit:api_add_attr_bonus_ratio(key, delta) end

--Sets the ratio of the base value to the extra value of the unit property
---@param key string # Attribute name
---@param val py.Fixed # Set value
function Unit:api_set_attr_all_ratio(key, val) end

--Increased the ratio of base value and bonus value of the unit attribute
---@param key string # Attribute name
---@param delta py.Fixed # Addition ratio
function Unit:api_add_attr_all_ratio(key, delta) end

--Set the percentage to which the base value of the unit attribute is added
---@param key string # Attribute name
---@param val py.Fixed # Set value
function Unit:api_set_attr_base_ratio(key, val) end

--Increased the percentage bonus to the base value of the unit attribute
---@param key string # Attribute name
---@param delta py.Fixed # Addition ratio
function Unit:api_add_attr_base_ratio(key, delta) end

--Set unit level
---@param level integer # Lv.
function Unit:api_set_level(level) end

--Increase unit level
---@param level integer # Lv.
function Unit:api_add_level(level) end

--Gets the unit real number attribute
---@param key string # Attribute type
---@param attr string # Attribute name
---@return py.Fixed? # Real attribute value
function Unit:api_get_attr(key, attr) end

--Gets the unit real number attribute
---@param attr string # Attribute name
---@return py.Fixed? # Real attribute value
function Unit:api_get_float_attr(attr) end

--Gets the unit string property
---@param attr string # Attribute name
---@return string? # String attribute value
function Unit:api_get_str_attr(attr) end

--Sets the unit string property
---@param attr string # Attribute name
---@param value string # String value
function Unit:api_set_str_attr(attr, value) end

--Get unit level
---@return integer? # Unit level
function Unit:api_get_level() end

--Get unit health
---@return py.Fixed? # Unit blood volume
function Unit:api_get_hp() end

--Gets percentage per unit of health
---@return py.Fixed? # Percentage per unit of blood volume
function Unit:api_get_hpp() end

--Treatment unit
---@param hp_change py.Fixed # Therapeutic value
---@param jump_word? boolean # Skip or not
---@param related_ability? py.Ability # Relevance skill
---@param source_unit? py.Unit # Source unit
---@param harm_text_enum? string # Hop enumeration
---@param jump_word_track? integer # Skip trace
---@param pos_socket? string # Hanging contact
function Unit:api_heal(hp_change, jump_word, related_ability, source_unit, harm_text_enum, jump_word_track, pos_socket) end

--Get output damage statistics
---@return py.Fixed? # Output damage statistics
function Unit:api_get_dmg_statistics() end

--Clear output damage statistics
function Unit:api_clear_dmg_statistics() end

--Add experience, add value is positive
---@param exp py.Fixed # EXP
function Unit:api_add_exp(exp) end

--Setup experience
---@param exp py.Fixed # EXP
function Unit:api_set_exp(exp) end

--Gets the unit is current experience and returns -1 if it reaches the top level
---@return integer? # Current experience value of the unit
function Unit:api_get_exp() end

--Gets the experience required for the current upgrade, and returns -1 if the top level is reached
---@return integer? # Experience required for the current upgrade
function Unit:api_get_upgrade_exp() end

--Unit Removes a key-value pair
---@param tag string # TAG
function Unit:api_add_tag(tag) end

--Unit Removes a key-value pair
---@param tag string # TAG
function Unit:api_remove_tag(tag) end

--Set whether to reclaim a unit when it is deleted
---@param recycle? boolean # Recycle or not
function Unit:api_set_recycle_on_remove(recycle) end

--Set the name of the unit
---@param name string # name
function Unit:api_set_name(name) end

--Get unit name
---@return string? # Unit name
function Unit:api_get_name() end

--Set the unit daytime view
---@param value number # FOV
function Unit:api_set_unit_day_vision(value) end

--Get unit daytime vision
---@return py.Fixed? # Daytime visual field
function Unit:api_get_unit_day_vision() end

--Set unit night view
---@param value number # FOV
function Unit:api_set_unit_night_vision(value) end

--Get unit night vision
---@return py.Fixed? # Night vision
function Unit:api_get_unit_night_vision() end

--Set up a unit alert
---@param value number # Warning range
function Unit:api_set_unit_alarm_range(value) end

--Get a unit alert
---@return py.Fixed? # Warning range
function Unit:api_get_unit_alarm_range() end

--Set up units to cancel the perimeter
---@param value number # de-alert
function Unit:api_set_unit_cancel_alarm_range(value) end

--Get units to cancel alert range
---@return py.Fixed? # de-alert
function Unit:api_get_unit_cancel_alarm_range() end

--Gets the number of inventory units
---@return integer? # quantity
function Unit:api_get_unit_bar_cnt() end

--Gets the number of packs per unit
---@return integer? # quantity
function Unit:api_get_unit_pkg_cnt() end

--Obtains the unit dynamic collision radius
---@return py.Fixed? # Dynamic collision radius
function Unit:api_get_unit_collision_radius() end

--Gain unit kill experience
---@return integer? # EXP
function Unit:api_get_unit_reward_exp() end

--Gets player stats when units are killed
---@param res_key py.RoleResKey # Player attribute resource
---@return py.Fixed? # EXP
function Unit:api_get_unit_reward_res(res_key) end

--Sets unit kill experience
---@param res_value py.Fixed # EXP
function Unit:api_set_unit_reward_exp(res_value) end

--Sets player attributes for units killed
---@param res_key py.RoleResKey # Player attribute resource
---@param res_value py.Fixed # EXP
function Unit:api_set_unit_reward_res(res_key, res_value) end

--Gets the unit is shield value
---@param shield_type integer # Shield type
---@return integer? # Shield Value
function Unit:api_get_unit_shield_value(shield_type) end

--Set the unit is avatar
---@param icon py.Texture # picture
function Unit:api_set_unit_icon(icon) end

--Gets the unit master properties
---@return string? # Stats
function Unit:api_get_unit_main_attr() end

--Unit stop
function Unit:api_stop_move() end

--The unit is transmitted to the specified coordinates
---@param point py.FVector3 # Target coordinate
function Unit:api_transmit(point) end

--The unit is forced to pass to the specified coordinates
---@param pos py.FVector3 # Target coordinate
function Unit:api_force_transmit(pos) end

--The unit is forced to pass to the specified coordinates
---@param pos py.FVector3 # Target coordinate
---@param interpolation? boolean # Whether smooth or not
function Unit:api_force_transmit_new(pos, interpolation) end

--Unit orientation
---@param face_dir py.FVector3 # orientation
---@param speed_effect? boolean # Whether it is affected by the turn speed
function Unit:api_set_face_dir(face_dir, speed_effect) end

--The unit sets the orientation Angle
---@param face_angle py.Fixed # Orientation Angle
---@param turn_time_ms? integer # Turn time milliseconds
function Unit:api_set_face_angle(face_angle, turn_time_ms) end

--The unit sets the orientation Angle
---@param face_angle py.Fixed # Orientation Angle
---@param turn_type? integer # Animation rotation type
function Unit:api_set_face_angle_inner_usage(face_angle, turn_type) end

--Whether the unit can transmit to the target point
---@param pos py.FVector3 # Target point
---@return boolean? # Whether the unit can transmit to the target point
function Unit:api_can_teleport_to(pos) end

--Gets the unit is nearest passable point near the target point
---@return py.FVector3? # Nearest passable point
function Unit:api_find_nearest_valid_position() end

--Get unit location
---@return py.FVector3? # Unit position
function Unit:api_get_position() end

--Fetch unit orientation
---@return py.FVector3? # Unit orientation
function Unit:api_get_face_dir() end

--Get unit oriented Angle
---@return py.Fixed? # Unit-oriented Angle
function Unit:get_face_angle() end

--Set the unit turn speed
---@param turn_speed py.Fixed # Turn speed
function Unit:api_set_turn_speed(turn_speed) end

--Gain unit turn speed
---@return py.Fixed? # Turn speed
function Unit:api_get_turn_speed() end

--Whether the unit is moving
---@return boolean? # Is it moving?
function Unit:api_is_moving() end

--Gets whether the unit calculates a collision type
---@param collision_layer integer # Collision mask
---@return boolean? # Enable or not
function Unit:api_get_move_collision(collision_layer) end

--Set the movement type of the unit to ground
---@param land_limitation? boolean # Land restriction
---@param item_limitation? boolean # Object restriction
---@param water_limitation? boolean # Marine limitation
function Unit:set_move_channel_land(land_limitation, item_limitation, water_limitation) end

--Set the movement type of the unit to air
---@param air_limitation? boolean # Air restriction
function Unit:set_move_channel_air(air_limitation) end

--Gets the pathfinding distance of the unit from point to point
---@param point_start py.Unit # unit
---@param point_end py.Point # Initial point
function Unit:get_unit_path_length_between_points(point_start, point_end) end

--Play animation
---@param name string # Animation name
---@param rate? number # Playback ratio
---@param init_time? number # Start time (s)
---@param end_time? number # End time (s). A positive number -1 indicates that the end is not finished
---@param loop? boolean # Cyclic or not
---@param return_idle? boolean # Whether to return to idle after the playback is complete
---@param transition_time? number # Transition time (s), where negative values are used as global defaults
---@param force_play? boolean # Even in death
function Unit:api_play_animation(name, rate, init_time, end_time, loop, return_idle, transition_time, force_play) end

--Play animation inside
---@param name string # Animation name
---@param turn_type? number # Playback ratio
function Unit:api_play_animation_inner_usage(name, turn_type) end

--Set the inside of the animation graph
---@param animation_graph_path string # Animated graph path
function Unit:api_set_animation_graph_inner_usage(animation_graph_path) end

--Stop animation
---@param name string # Animation name
function Unit:api_stop_animation(name) end

--Stop the animation that is currently playing
function Unit:api_stop_cur_animation() end

--Set animation speed
---@param speed py.Fixed # speed
function Unit:api_set_animation_speed(speed) end

--Unit play effect
---@param socket_name string # Attached node name
---@param sfx_res_id py.SfxKey # Special effect number
---@param keep_time py.Fixed # Duration, unit: second
---@param scale? number # Zoom ratio
---@param inherit_pos? boolean # Whether to follow the unit position
---@param inherit_rotate? boolean # Whether to follow the unit rotation
---@param inherit_scale? boolean # Follow scale or not
---@param role? py.Role # Affiliated unit
---@param visible_type? py.SfxVisibleType # Visibility rule
---@param rotation? number # Initial rotation Angle system
function Unit:api_play_sfx(socket_name, sfx_res_id, keep_time, scale, inherit_pos, inherit_rotate, inherit_scale, role, visible_type, rotation) end

--Play special effects in the unit hanging point
---@param socket_name string # Attached node name
---@param sfx_id py.SfxKey # Special effect number
---@param keep_time py.Fixed # Duration, unit: second
---@param scale? number # Zoom ratio
---@param inherit_rotate? boolean # Whether to follow the unit rotation
---@param inherit_scale? boolean # Follow scale or not
---@param role? py.Role # Owned player
---@param visible_type? py.SfxVisibleType # Visibility rule
function Unit:api_unit_play_sfx_on_socket(socket_name, sfx_id, keep_time, scale, inherit_rotate, inherit_scale, role, visible_type) end

--Play effects on units and return effects entities
---@param socket_name string # Attached node name
---@param sfx_res_id py.SfxKey # Special effect number
---@param keep_time py.Fixed # Duration, unit: second
---@param scale? number # Zoom ratio
---@param inherit_pos? boolean # Whether to follow the unit position
---@param inherit_rotate? boolean # Whether to follow the unit rotation
---@param inherit_scale? boolean # Follow scale or not
---@param role? py.Role # Affiliated unit
---@param visible_type? py.SfxVisibleType # Visibility rule
---@param rotation? number # Initial rotation Angle system
---@return py.Sfx? # VFX
function Unit:api_play_sfx_with_return(socket_name, sfx_res_id, keep_time, scale, inherit_pos, inherit_rotate, inherit_scale, role, visible_type, rotation) end

--Unit replacement plays animation
---@param target_ani string # Target animation name
---@param source_ani string # Original animation name
function Unit:api_change_animation(target_ani, source_ani) end

--Cancel unit replacement to play animation
---@param target_ani string # Target animation name
---@param source_ani string # Original animation name
function Unit:api_cancel_change_animation(target_ani, source_ani) end

--Cancel all replacement units to play animation
---@param source_ani string # Original animation name
function Unit:api_clear_change_animation(source_ani) end

--Unit replacement model
---@param target_model py.ModelKey # Target model number
---@param source_model py.ModelKey # Original model number
function Unit:api_change_model(target_model, source_model) end

--Cancel the unit replacement model
---@param target_model py.ModelKey # Target model number
---@param source_model py.ModelKey # Original model number
function Unit:api_cancel_change_model(target_model, source_model) end

--Cancel the unit all replacement model
---@param source_model py.ModelKey # Original model number
function Unit:api_clear_change_model(source_model) end

--Unit replacement model
---@param target_model py.ModelKey # Target model number
function Unit:api_replace_model(target_model) end

--Cancel the unit replacement model
---@param target_model py.ModelKey # Target model name
function Unit:api_cancel_replace_model(target_model) end

--Display blood bar countdown
---@param left_time py.Fixed # Countdown time, in seconds
function Unit:api_show_health_bar_count_down(left_time) end

--Acquisition unit model
---@return py.ModelKey? # Model number
function Unit:api_get_model() end

--Gets the unit original model
---@return py.ModelKey? # Model number
function Unit:api_get_source_model() end

--Displays unit overhead text
---@param text string # Display information
---@param second py.Fixed # Duration, in seconds
---@param localize? integer # Multilingual environment
function Unit:api_show_text(text, second, localize) end

--Change of unit title
---@param title_str string # Title
---@param localize? boolean # Multilingual transformation
function Unit:api_set_title(title_str, localize) end

--Sets unit title visibility
---@param visible boolean # Show or not
function Unit:api_set_title_visible(visible) end

--Hide display unit name, this API does not take effect for units without overhead UI, each time hide count +1, each time display count -1, count zero display unit name
---@param visible boolean # Show or not
function Unit:api_set_name_visible(visible) end

--Hide display unit name, this API does not take effect for units without overhead UI, each time hide count +1, each time display count -1, count zero display unit name
---@param visible boolean # Show or not
function Unit:api_set_bar_name_visible(visible) end

--Set blood bar to display name
---@param name string # Name
function Unit:api_set_bar_name(name) end

--Set blood bar display name scaling
---@param scale number # Zoom
function Unit:set_bar_name_scale(scale) end

--Set blood bar to display name font
---@param font_name string # Font name
function Unit:api_set_bar_name_font_type(font_name) end

--Set blood bar to display name font size
---@param size integer # Type size
function Unit:api_set_bar_name_font_size(size) end

--Hide display unit overhead text, each hide count +1, each display count -1, count zero display unit overhead text
---@param visible boolean # Show or not
function Unit:api_set_bar_text_visible(visible) end

--Set overhead text zoom
---@param scale number # Zoom
function Unit:api_set_bar_text_scale(scale) end

--Set the overhead text type
---@param bar_text_type integer # type
function Unit:api_set_bar_text_type(bar_text_type) end

--Set the overhead text font
---@param font_type string # typeface
function Unit:api_set_bar_text_font_type(font_type) end

--Set the overhead text size
---@param font_size integer # Type size
function Unit:api_set_bar_text_font_size(font_size) end

--Set the blood bar name display style
---@param t integer # For details, see **HeadBarShowNameType**
function Unit:api_set_bar_name_show_type(t) end

--Hide display unit blood bar. This API does not work for units without overhead UI. Each time you hide count +1, each time you display count -1, and the count returns to zero to display unit blood bar
---@param visible boolean # Show or not
function Unit:api_set_hp_bar_visible(visible) end

--Set the unit blood bar display style. This API does not take effect for units without overhead UI
---@param t integer # For the display style, see **HeadBarShowType**
function Unit:api_set_hp_bar_show_type(t) end

--Set the unit blood bar style. This API does not take effect for units without overhead UI
---@param t integer # Blood stripe pattern
function Unit:api_set_hp_bar_type(t) end

--Binding UI controls
---@param ui_comp py.WorldUINode # UI control
---@param socket_name string # Hanging point (Make sure that the model has the hanging point, the hanging point can be viewed in the model properties, the specific hanging point type see **ModelSocket**)
function Unit:api_add_ui_comp(ui_comp, socket_name) end

--Modify the unit title font size
---@param font_size integer # Type size
function Unit:api_change_title_font_size(font_size) end

--Modified unit title scaling
---@param scale number # Zoom ratio
function Unit:api_change_title_scale(scale) end

--Change the font of the unit title
---@param font_name string # typeface
function Unit:api_change_title_font_type(font_name) end

--Modify the unit title style
---@param style_type integer # Title style
function Unit:api_change_title_type(style_type) end

--Changed the background opacity of the unit title
---@param opacity number # opacity
function Unit:api_set_title_bg_opacity(opacity) end

--Modified unit title background scaling
---@param scale number # Zoom
function Unit:api_set_title_bg_scale(scale) end

--Modified unit blood bar scale visibility
---@param visible boolean # visibility
function Unit:api_set_blood_scale_visible(visible) end

--Change the offset of the unit title
---@param offset py.Vector2 # Position deviation
function Unit:api_set_title_bar_pos_offset(offset) end

--Change the offset of the unit blood bar
---@param offset py.Vector2 # Position deviation
function Unit:api_set_hp_bar_pos_offset(offset) end

--Example Change the location offset of a unit name
---@param offset py.Vector2 # Position deviation
function Unit:api_set_name_bar_pos_offset(offset) end

--Modify the unit text position offset
---@param offset py.Vector2 # Position deviation
function Unit:api_set_text_bar_pos_offset(offset) end

--Change the offset of the unit countdown position
---@param offset py.Vector2 # Position deviation
function Unit:api_set_countdown_bar_pos_offset(offset) end

--Unit elevation
---@param y py.Fixed # Raise height
---@param dt py.Fixed # time
function Unit:api_raise_height(y, dt) end

--Get unit height
---@return py.Fixed? # Model height
function Unit:api_get_height() end

--Set unit scaling
---@param scale number # Zoom
---@param duration? number # Transition time
function Unit:api_set_scale(scale, duration) end

--Set unit triaxial scaling
---@param scale_x number # x zoom
---@param scale_y number # y zoom
---@param scale_z number # z zoom
---@param duration? number # Transition time
function Unit:api_set_unit_scale(scale_x, scale_y, scale_z, duration) end

--Get unit scaling
---@return py.Fixed? # Get scale
function Unit:api_get_scale() end

--Gets unit model scaling
---@return py.Fixed? # Get scale
function Unit:api_get_model_scale() end

--Modified the style of the unit blood bar
---@param blood_bar_type integer # Blood stripe pattern
function Unit:api_set_blood_bar_type(blood_bar_type) end

--Modified the unit blood bar display mode
---@param blood_bar_show_type integer # Blood bar display mode
function Unit:api_set_blood_bar_show_type(blood_bar_show_type) end

--Open shadow
---@param r? py.Fixed # r
---@param g? py.Fixed # g
---@param b? py.Fixed # b
---@param a? py.Fixed # a
---@param interval? py.Fixed # interval
---@param duration? py.Fixed # duration
---@param start? py.Fixed # start
---@param end_? py.Fixed # end
---@param use_raw_texture? boolean # Use origin texture
function Unit:api_start_ghost(r, g, b, a, interval, duration, start, end_, use_raw_texture) end

--Close shadow
---@param destroy_immediately? boolean # Immediate destruction
function Unit:api_stop_ghost(destroy_immediately) end

--Initial dissolution effect
---@param dissolve_time py.Fixed # Solution time
---@param sink_dis py.Fixed # Sinking distance
function Unit:api_start_dissolve(dissolve_time, sink_dis) end

--Dissolving effect
function Unit:api_stop_dissolve() end

--Set the shadow color
---@param r py.Fixed # r
---@param g py.Fixed # g
---@param b py.Fixed # b
---@param a py.Fixed # a
function Unit:api_set_ghost_color(r, g, b, a) end

--Set the shadow time
---@param interval py.Fixed # interval
---@param duration py.Fixed # duration
---@param start py.Fixed # start
---@param end_ py.Fixed # end
function Unit:api_set_ghost_time(interval, duration, start, end_) end

--Play music to the player relationship of the unit
---@param camp_target py.RoleRelation # Player relationship
---@param sid py.AudioKey # Track number
---@param loop boolean # Cyclic or not
function Unit:api_play_sound_by_unit_for_role_relation(camp_target, sid, loop) end

--Set whether XRay is enabled
---@param value boolean # Boolean value
function Unit:api_set_Xray_is_open(value) end

--Sets whether the unit stealth is translucent when detected
---@param value boolean # Boolean value
function Unit:api_set_transparent_when_invisible(value) end

--Set the unit minimap avatar
---@param icon py.Texture # picture
function Unit:api_set_mini_map_icon(icon) end

--Set enemy unit minimap avatars
---@param icon py.Texture # picture
function Unit:api_set_enemy_mini_map_icon(icon) end

--Sets the visibility of the unit selection box
---@param value boolean # Boolean value
function Unit:api_set_unit_select_effect_visible(value) end

--Switch Onmyoji model IDLE to see if the camera is on
---@param role py.Role # Player
---@param value boolean # Boolean value
function Unit:api_active_gm1_look_at_camera(role, value) end

--Set the unit disc shadow switch
---@param is_open boolean # Boolean value
function Unit:api_set_disk_shadow_open(is_open) end

--Sets the shadow size of the unit disk
---@param shadow_size number # size
function Unit:api_set_unit_disk_shadow_size(shadow_size) end

--Unit adds the effect of the specified number
---@param modifier_key py.ModifierKey # Effect number
---@param from_unit? py.Unit # Source unit object
---@param from_ability? py.Ability # Relevance skill
---@param time? py.Fixed # duration
---@param cycle_time? py.Fixed # Cycle period
---@param stack_count? integer # Effect layer number
---@param lua_table? py.Table # User-defined configuration table
---@return py.ModifierEntity? # Magic effect
function Unit:api_add_modifier(modifier_key, from_unit, from_ability, time, cycle_time, stack_count, lua_table) end

--Gets the number of effect layers specified on the unit
---@param modifier_key py.ModifierKey # Effect number
---@return integer? # Effect layer number
function Unit:api_get_modifier_stack_count(modifier_key) end

--Whether a unit has a specified number of effects
---@param modifier_key py.ModifierKey # Effect number
---@return boolean? # Whether the unit has a specified number effect
function Unit:api_has_modifier(modifier_key) end

--Whether the unit has the effect of the specified label
---@param tag string # tag
---@return boolean? # Whether the unit has the effect of the specified label
function Unit:api_has_modifier_with_tag(tag) end

--Gets the i th effect instance with the specified number on the unit
---@param add_index integer # Effect position
---@param modifier_key py.ModifierKey # Effect number
function Unit:api_get_modifier(add_index, modifier_key) end

--Gets the number of I-th effects on the unit with the specified number
---@param modifier_key py.ModifierKey # Effect number
function Unit:api_get_modifier_count(modifier_key) end

--Removes the Target modifier instance on the target unit
---@param tar_modifier py.ModifierEntity # Effect number
function Unit:api_remove_modifier_instance(tar_modifier) end

--Removes all instances of the Target modifier type on the target unit
---@param modifier_key py.ModifierKey # Effect number
function Unit:api_remove_modifier_type(modifier_key) end

--Whether a unit has a specified class of effects
---@param modifier_effect_type py.ModifierEffectType # Magic effect type
---@return boolean? # Whether a unit has a specified type of magic effect
function Unit:api_has_modifier_type(modifier_effect_type) end

--Removes magic effects for the unit specified impact type
---@param effect_type py.ModifierEffectType # Effect influence type
function Unit:api_delete_all_modifiers_by_effect_type(effect_type) end

--Gain all magic effects on units
---@return py.ModifierEntity? # Magic effect
function Unit:api_get_all_modifiers() end

--Unit addition skill
---@param ability_type py.AbilityType # Skill type
---@param ability_id py.AbilityKey # Skill number
---@param ability_index? py.AbilityIndex # Skill slot number
---@param ability_level? integer # Skill level
---@param lua_table? py.Table # User-defined configuration table
---@return py.Ability? # skill
function Unit:api_add_ability(ability_type, ability_id, ability_index, ability_level, lua_table) end

--Unit Removes skills based on slot
---@param ability_type integer # Skill type
---@param ability_index integer # Skill slot
function Unit:api_remove_ability_by_index(ability_type, ability_index) end

--Removes all skills of a type that are the specified skill ID
---@param ability_type integer # Skill type
---@param ability_id py.AbilityKey # Skill ID
function Unit:api_remove_abilities_in_type(ability_type, ability_id) end

--Unit sets skill level.
---@param modify integer # Modification mode
---@param ability_type py.AbilityType # Skill type
---@param ability_index py.AbilityIndex # Skill slot
---@param level integer # Skill level
function Unit:api_set_ability_level(modify, ability_type, ability_index, level) end

--Unit learning skill
---@param ability_key py.AbilityKey # Skill type
function Unit:api_unit_learn_ability(ability_key) end

--Gain the hero is skill points
---@return integer? # Skill Points
function Unit:api_get_ability_point() end

--Sets the hero is skill points
---@param ability_point integer # Skill Points
function Unit:api_set_ability_point(ability_point) end

--Increases the hero is skill points
---@param value integer # Skill Points
function Unit:api_add_ability_point(value) end

--Obtain skills through the skill slot
---@param ability_type py.AbilityType # Skill type
---@param ability_index py.AbilityIndex # Skill slot
---@return py.Ability? # Skill object
function Unit:api_get_ability(ability_type, ability_index) end

--Obtain a skill by adding the skill type and skill ID
---@param ability_type py.AbilityType # Skill type
---@param ability_id py.AbilityKey # Skill number
---@return py.Ability? # Skill object
function Unit:api_get_ability_by_type(ability_type, ability_id) end

--Get a list of certain types of skills
---@param ability_type py.AbilityType # Skill type
---@return py.Ability? # Skill object
function Unit:api_get_abilities_by_type(ability_type) end

--Whether there are skills corresponding to the skill type
---@param ability_id py.AbilityKey # Skill type
---@return boolean? # Whether there are skills corresponding to the skill type
function Unit:api_check_has_ability_type(ability_id) end

--Gets a list of unit skills
---@return py.Ability? # Skill object
function Unit:api_get_all_abilities_can_show() end

--Trade skills based on pit position
---@param ability_1_type py.AbilityType # Skill type
---@param ability_1_index py.AbilityIndex # Skill slot
---@param ability_2_type py.AbilityType # Skill type
---@param ability_2_index py.AbilityIndex # Skill slot
function Unit:api_switch_ability_by_index(ability_1_type, ability_1_index, ability_2_type, ability_2_index) end

--Exchange skills
---@param ability_1 py.Ability # skill
---@param ability_2 py.Ability # skill
function Unit:api_switch_ability(ability_1, ability_2) end

--Unit disabled skills.
---@param ability_type py.AbilityType # Skill type
---@param ability_index py.AbilityIndex # Skill slot
function Unit:api_disable_ability(ability_type, ability_index) end

--Unit unban skills.
---@param ability_type py.AbilityType # Skill type
---@param ability_index py.AbilityIndex # Skill slot
function Unit:api_enable_ability(ability_type, ability_index) end

--Stop all unit skills
function Unit:api_stop_all_abilities() end

--Whether the unit has a skill that is being released
---@return boolean? # Whether there are skills that are being released
function Unit:api_unit_has_running_ability() end

--Returns the value of the string attribute for the slot skill specified by the unit entity
---@param ability_type py.AbilityType # Skill type
---@param ability_index py.AbilityIndex # Skill slot
---@param prop string # Attribute name
---@return string? # character
function Unit:api_get_ability_str_attr_value(ability_type, ability_index, prop) end

--Obtain a skill object based on the skill number
---@param seq py.AbilitySeq # Skill sequence number
---@return py.Ability? # Skill object
function Unit:api_get_ability_by_seq(seq) end

--Apply state to the unit
---@param state_id integer # Status ID
function Unit:api_add_state(state_id) end

--Unstate the unit
---@param state_id integer # Status ID
function Unit:api_remove_state(state_id) end

--Whether in combat mode
---@return boolean? # Whether in combat mode
function Unit:api_is_in_battle_state() end

--Whether the unit is in a certain state
---@param state_bit integer # status
---@return boolean? # Whether the unit is in a certain state
function Unit:api_has_state(state_bit) end

--Units cast abilities
---@param ability_type integer # Skill type
---@param ability_index integer # Skill slot
function Unit:api_release_ability_by_index(ability_type, ability_index) end

--Unit cast ability with the ability to release target locations
---@param ability_type integer # Skill type
---@param ability_index integer # Skill pit
---@param postion py.Point # Skill target location
function Unit:api_release_ability_at_position(ability_type, ability_index, postion) end

--Issue build order (target point)
---@param build_key py.UnitKey # Building type
---@param point py.Point # Target position
function Unit:api_create_building_on_point(build_key, point) end

--Issue build orders (coordinates)
---@param build_key py.UnitKey # Building type
---@param pos_x py.Fixed # Coordinate X
---@param pos_z py.Fixed # Coordinate Z
function Unit:api_create_building_on_position(build_key, pos_x, pos_z) end

--Whether the unit owns the item
---@param item py.Item # item
---@return boolean? # Whether the unit owns the item
function Unit:api_has_item(item) end

--Whether the unit owns specific numbered items
---@param item_no py.ItemKey # Item number
---@return boolean? # Whether the unit owns specific numbered items
function Unit:api_has_item_key(item_no) end

--Add an item name to the unit
---@param item_no py.ItemKey # Item number
---@param slot_type? py.SlotType # Slot type
---@return py.Item? # Creates an item entity
function Unit:api_add_item(item_no, slot_type) end

--Delete the item name for the unit
---@param item_key py.ItemKey # Item number
---@param num? integer # quantity
function Unit:api_delete_item(item_key, num) end

--Units discard item entities into the scene
---@param item py.Item # item
---@param pos py.FPoint # point
---@param stack_cnt integer # quantity
function Unit:api_drop_item(item, pos, stack_cnt) end

--Unit removes item entities
---@param stack_cnt integer # quantity
---@param item py.Item # item
function Unit:api_remove_item(stack_cnt, item) end

--Get items from the unit backpack slot
---@param slot_type py.SlotType # Backpack slot
---@param slot_idx integer # Lattice subscript
---@return py.Item? # Item object
function Unit:api_get_item_by_slot(slot_type, slot_idx) end

--Moving items
---@param item py.Item # item
---@param slot_type py.SlotType # Backpack slot
---@param slot_idx integer # Lattice subscript
function Unit:api_shift_item(item, slot_type, slot_idx) end

--Moving items
---@param item py.Item # item
---@param slot_type py.SlotType # Backpack slot
---@param slot_idx? integer # Lattice subscript
---@param is_force_shift? boolean # Whether the occupied grid is transferred
function Unit:api_shift_item_new(item, slot_type, slot_idx, is_force_shift) end

--All items on the unit
---@return py.ItemGroup? # Item group
function Unit:api_get_all_item_pids() end

--Sets the number of cells in the unit inventory
---@param cnt integer # number
function Unit:api_set_unit_bar_cnt(cnt) end

--Sets the number of cells in the unit backpack bar
---@param cnt integer # number
function Unit:api_set_unit_pkg_cnt(cnt) end

--Units have the number of items of the specified type
---@param item_type py.ItemKey # Item number
---@return integer? # quantity
function Unit:api_get_num_of_item_type(item_type) end

--Gets the type of item held by the unit
---@param slot_type py.SlotType # Slot type
---@param slot_idx integer # Integer subscript
---@return py.ItemKey? # Item number
function Unit:api_get_item_type_by_slot(slot_type, slot_idx) end

--Unit is shop
---@return boolean? # Unit is shop
function Unit:api_is_shop() end

--Get store unit range
---@return py.Fixed? # Shop area
function Unit:api_get_shop_range() end

--Add items to the store
---@param tab_name py.TabName # TAB
---@param item_no py.ItemKey # Item number
function Unit:api_add_shop_item(tab_name, item_no) end

--Gets the list of items on a TAB in the store
---@param tab_idx py.TabIdx # TAB id
---@return py.List? # Item number
function Unit:api_get_shop_item_list(tab_idx) end

--Get the recovery time of store items
---@param tab_idx py.TabIdx # TAB id
---@param item_no py.ItemKey # Item number
function Unit:api_get_shop_item_cd(tab_idx, item_no) end

--Gets the inventory recovery interval for store items
---@param tab_idx py.TabIdx # TAB id
---@param item_num integer # Item N
---@return py.Fixed? # Recovery interval
function Unit:api_get_shop_item_default_cd(tab_idx, item_num) end

--Gets the remaining recovery time for store items
---@param tab_idx py.TabIdx # TAB id
---@param item_num integer # Item N
---@return py.Fixed? # Recovery interval
function Unit:api_get_shop_item_residual_cd(tab_idx, item_num) end

--Gets the number of store tabs
---@return integer? # Number of tabs
function Unit:api_get_shop_tab_cnt() end

--Get the page signature for the store
---@param tab_idx py.TabIdx # TAB id
---@return string? # Page signature
function Unit:api_get_shop_tab_name(tab_idx) end

--Gets the type of the NTH item on the specified TAB of the store
---@param tab_idx py.TabIdx # TAB id
---@param item_idx integer # Item number
---@return py.ItemKey? # Item type
function Unit:api_get_shop_tab_item_type(tab_idx, item_idx) end

--Add unit items to the store
---@param tab_name py.TabName # TAB
---@param entity_no py.UnitKey # Unit number
function Unit:api_add_shop_unit(tab_name, entity_no) end

--Remove store items items
---@param tab_name py.TabName # TAB
---@param item_no py.ItemKey # Item number
function Unit:api_remove_shop_item(tab_name, item_no) end

--Remove store unit items
---@param tab_name py.TabName # TAB
---@param entity_no py.UnitKey # Unit number
function Unit:api_remove_shop_unit(tab_name, entity_no) end

--Set item inventory
---@param tab_name py.TabName # TAB
---@param item_no py.ItemKey # Item number
---@param cnt integer # inventory
function Unit:api_set_shop_item_stock(tab_name, item_no, cnt) end

--Set unit inventory
---@param tab_name py.TabName # TAB
---@param entity_no py.UnitKey # Unit number
---@param cnt integer # inventory
function Unit:api_set_shop_unit_stock(tab_name, entity_no, cnt) end

--Set shop switch
---@param is_shop boolean # Switch
function Unit:api_set_is_shop(is_shop) end

--Unit purchase
---@param shop_unit py.Unit # Shop
---@param tab_idx py.TabIdx # TAB id
---@param item_no py.ItemKey # Item number
---@param item_num? integer # Purchase quantity
function Unit:api_buy_item_with_tab_name(shop_unit, tab_idx, item_no, item_num) end

--Unit purchase unit
---@param shop_unit py.Unit # Shop
---@param tab_name py.TabName # TAB
---@param entity_no py.UnitKey # Unit number
function Unit:api_buy_unit_with_tab_name(shop_unit, tab_name, entity_no) end

--Unit sales
---@param shop_unit py.Unit # Shop
---@param item py.Item # property
function Unit:api_sell_item(shop_unit, item) end

--Set store goals
---@param target_unit py.Unit # goal
function Unit:api_set_shop_target(target_unit) end

--Get unit store item inventory
---@param tab_idx py.TabIdx # TAB id
---@param item_no py.ItemKey # Item number
---@return integer? # Commodity inventory
function Unit:api_get_shop_item_stock(tab_idx, item_no) end

--Get unit store unit inventory
---@param tab_name py.TabName # TAB
---@param entity_no py.UnitKey # Unit number
---@return integer? # Commodity inventory
function Unit:api_get_shop_unit_stock(tab_name, entity_no) end

--Get unit store unit price
---@param tab_name py.TabName # TAB
---@param entity_no py.UnitKey # Unit number
---@return py.Fixed? # Selling price of goods
function Unit:api_get_shop_item_price(tab_name, entity_no) end

--Whether the player can purchase items from the store
---@param role py.Role # Player
---@return boolean? # Whether to buy
function Unit:api_shop_check_camp(role) end

--Technological upgrading
---@param tech_no py.TechKey # Technology number
function Unit:api_upgrade_tech(tech_no) end

--Get technology list
---@return py.List? # Technology number
function Unit:api_get_tech_list() end

--Get technology list
---@return py.List? # Technology number
function Unit:api_get_affect_techs() end

--Whether the acquisition technology meets the preconditions
---@param tech_no py.TechKey # Technology number
---@return py.TechKey? # Technology number
function Unit:api_check_tech_precondition(tech_no) end

--Additive technology
---@param tech_no py.TechKey # Technology number
function Unit:api_add_tech(tech_no) end

--Erasure technology
---@param tech_no py.TechKey # Technology number
function Unit:api_remove_tech(tech_no) end

--Issue an order
---@param command py.UnitCommand # command
---@param enqueue? boolean # Queue or not
---@param load_ai_directly? boolean # Whether to load ai directly
function Unit:api_release_command(command, enqueue, load_ai_directly) end

--Unit - Sets the default jump state
---@param behavior py.UnitBehavior # Default jump state
function Unit:api_set_default_switch_behavior(behavior) end

--Set the unit build schedule
---@param progress py.Fixed # Construction schedule
---@param is_percent? boolean # Percentage or not
function Unit:api_set_construction_progress(progress, is_percent) end

--Set the upgrade progress of the unit
---@param progress py.Fixed # Upgrade progress
---@param is_percent? boolean # Percentage or not
function Unit:api_set_upgrade_progress(progress, is_percent) end

--Set whether to exit the following unit
---@param exit_follow_on_succ boolean # Whether to quit
function Unit:api_set_ai_exit_follow_on_succ_once(exit_follow_on_succ) end

--Set whether the unit sleeps
---@param is_sleeping boolean # dormancy
function Unit:api_set_is_sleeping(is_sleeping) end

--Gets whether a unit sleeps
---@return boolean? # dormancy
function Unit:api_get_is_sleeping() end

--Gets whether the unit is in the cache pool
---@return boolean? # value
function Unit:api_get_is_in_pool() end

--Unit transformation
---@param entity_no py.UnitKey # New object ID
---@param inherit_composite_attr? boolean # Whether to inherit compound attributes
---@param inherit_unit_attr? boolean # Whether to inherit the unit attribute
---@param inherit_kv? boolean # Whether to inherit kv
---@param inherit_hero_ability? boolean # Whether to inherit hero skills
---@param inherit_common_ability? boolean # Whether to inherit common skills
---@param inherit_passive_ability? boolean # Whether to inherit hidden skills
function Unit:api_unit_transformation(entity_no, inherit_composite_attr, inherit_unit_attr, inherit_kv, inherit_hero_ability, inherit_common_ability, inherit_passive_ability) end

--Unit - Queue reset
function Unit:api_queue_reset() end

--Toggle master attribute
---@param main_attr string # Attribute name
function Unit:api_switch_main_attr(main_attr) end

--Enable the unit attribute cheat check
function Unit:api_open_attr_cheating_detected() end

--Gets the localization name of the unit property
---@param attr_key string # Attribute index
---@return string? # Attribute localization name
function Unit:api_get_attr_name(attr_key) end

--Sets the experience value in the event
---@param val py.Fixed # EXP
function Unit:api_set_changed_exp_in_event(val) end

--Gets the skill type of a skill bit of the unit type
---@param abilityType py.AbilityType # Skill type
---@param abilityIndex py.AbilityIndex # Skill slot
---@return py.AbilityKey? # Skill type
function Unit:api_get_abilityKey_by_type_and_index(abilityType, abilityIndex) end

--Gets unit health recovery per tick
function Unit:api_get_hprec_pertick() end

--Sets whether the unit is flying field of view
---@param is_flying_vision boolean # Boolean value
function Unit:api_set_unit_flying_vision(is_flying_vision) end

--Set the animation move base speed. The base speed for running and walking is changed at the same time. If you want to distinguish between running and walking, you need to set the base speed for walking separately (api_set_anim_walk_speed).
---@param base_speed py.Fixed # Animation movement speed
function Unit:api_set_base_speed(base_speed) end

--Set the animation moving base speed (Walk only)
---@param speed py.Fixed # Animation movement speed
function Unit:api_set_anim_walk_speed(speed) end

--Determine the movement type of the unit
---@param move_type integer # Movement type
---@return boolean? # Indicates whether the movement type is this
function Unit:api_is_move_type(move_type) end

--Sets whether to block other units
---@param is_on boolean # Block or not
function Unit:api_set_block_others(is_on) end

--Open lock move
---@param angle_or_target number # Angle
---@param turn_time_ms? number # Turn time
function Unit:api_set_lock_yaw(angle_or_target, turn_time_ms) end

--End lock move
function Unit:api_set_unlock_yaw() end

--Set the rocker base direction
---@param facing number # Base direction
function Unit:set_joystick_base_direction(facing) end

--Set the joystick input
---@param input_x number # InputX
---@param input_y number # InputY
function Unit:set_joystick_input(input_x, input_y) end

--Straight movement
---@param target_pos py.Point # Target point
function Unit:directional_move_to_pos(target_pos) end

--Set the upper limit of pathfinding cost
---@param step_bound integer # Upper step limit
function Unit:set_path_finding_step_bound(step_bound) end

--Unit setting specifies the label model
---@param tag string # tag
---@param model_id py.ModelKey # Target model number
function Unit:set_model_by_tag(tag, model_id) end

--Unit delete setting specifies the label model
---@param tag string # tag
function Unit:remove_model_by_tag(tag) end

--Alternate model map
---@param model py.ModelKey # Target model number
---@param material integer # Material id
---@param layer integer # layer id
---@param texture py.Texture # chartlet
function Unit:change_model_texture(model, material, layer, texture) end

--Units are prohibited from pasting the ground
---@param is_forbid_aligned_terrain boolean # Whether the ground is prohibited
function Unit:api_set_forbid_aligned_terrain(is_forbid_aligned_terrain) end

--Open wind field
function Unit:api_start_windforce() end

--Set the shadow color
---@param r py.Fixed # r
---@param g py.Fixed # g
---@param b py.Fixed # b
---@param a py.Fixed # a
function Unit:api_set_ghost_color_norm(r, g, b, a) end

--Set the shadow color (HEX)
---@param color string # hex
---@param a py.Fixed # a
function Unit:api_set_ghost_color_hex(color, a) end

--Minimap - Sets unit minimap avatar visibility
---@param value boolean # Visible or not
function Unit:api_set_unit_is_mini_map_show(value) end

--Sets the name of the unit animation state
---@param anim_state_name string # Status name
function Unit:api_set_unit_anim_state_name(anim_state_name) end

--Sets the stroke color of the unit
---@param color_r number # R
---@param color_g number # G
---@param color_b number # B
function Unit:set_unit_outlined_color(color_r, color_g, color_b) end

--Set the stroke color of the unit (HEX)
---@param color string # R
function Unit:set_unit_outlined_color_hex(color) end

--Switch unit stroke effect
---@param flag boolean # Switch
function Unit:set_unit_outlined_enable(flag) end

--Play the upper body animation
---@param anim_name string # Animation name
---@param speed? number # speed
---@param repeat_? boolean # Cyclic or not
---@param begin_t? number # Start time ratio (0-1)
---@param end_t? number # End time ratio (0-1)
---@param ratio? number # Fusion ratio (0-1)
---@param transition_time? number # Transition time (s), where negative values are used as global defaults
function Unit:play_upper_body_anim(anim_name, speed, repeat_, begin_t, end_t, ratio, transition_time) end

--Custom bone layering
---@param root_bone string # Radicular skeleton
---@param upper_body_bone string # Upper body skeleton
---@param head_bone string # Cephalic skeleton
function Unit:set_bone_filter_config(root_bone, upper_body_bone, head_bone) end

--Set the stroke thickness of the unit outer outline
---@param width number # width
---@param role? py.Role # Role
function Unit:set_unit_outside_outline_width(width, role) end

--Sets the stroke color for the outer outline of the unit
---@param color_r number # R
---@param color_g number # G
---@param color_b number # B
---@param role? py.Role # Role
function Unit:set_unit_outside_outline_color(color_r, color_g, color_b, role) end

--Sets whether the unit outer contour stroke is turned on
---@param enabled boolean # Enable
---@param role? py.Role # Role
function Unit:set_unit_outside_outlined_enable(enabled, role) end

--Apply state to the unit
---@param state_id integer # Status ID
function Unit:api_add_multi_state(state_id) end

--Unstate the unit
---@param state_id integer # Status ID
function Unit:api_remove_multi_state(state_id) end

--Gets the unit attack interval
---@return py.Fixed? # Attack interval
function Unit:api_get_unit_attack_interval() end

--Gets attacks per second
---@return py.Fixed? # Number of attacks
function Unit:api_get_unit_attack_count_per_second() end

--Gain general attack skills
---@return py.Ability? # Normal Attack
function Unit:api_get_common_atk_ability() end

--Set the maximum value of the unit simple roll dice
---@param dice_max_value integer # Maximum value
function Unit:api_set_simple_atk_dice_max_value(dice_max_value) end

--Get the maximum value of the unit easy roll dice
---@return integer? # Dice maximum
function Unit:api_get_simple_atk_dice_max_value() end

--Set the maximum value of the unit simple roll dice
---@param dice_count integer # Maximum value
function Unit:api_set_simple_atk_dice_count(dice_count) end

--Get the number of simple dice per unit
---@return integer? # Dice maximum
function Unit:api_get_simple_atk_dice_count() end

--Gets the ability that the unit is releasing
---@return py.Ability? # skill
function Unit:api_get_cur_record_ability() end

--Suspend the CD of all skills of the unit
function Unit:api_pause_all_ability_cd() end

--Restores all unit skills to CD
function Unit:api_resume_all_ability_cd() end

--Removes all abilities from units
function Unit:api_clear_all_abilities() end

--Gets the remaining space in the unit field
---@param slot_type py.SlotType # Backpack slot
---@return integer? # integer
function Unit:api_get_slot_capacity(slot_type) end

--Unit - Sets the default jump command
---@param command py.UnitCommand # Default jump command
function Unit:api_set_default_switch_command(command) end

--Unit - Jumps to the default command or state
function Unit:api_load_default_ai() end

--Unit. - Unit calling for help
---@param source_unit py.Unit # Attack target
---@param seek_range number # Search area
function Unit:api_trigger_rescue(source_unit, seek_range) end

--Unit - Sets the distress type of the unit
---@param v py.ERescueSeekerType # value
function Unit:api_set_rescue_seeker_type(v) end

--Unit - Sets the unit rescue type
---@param v py.ERescuerType # value
function Unit:api_set_rescuer_type(v) end

--Unit - Set the unit distress distance
---@param v number # value
function Unit:api_set_rescue_seeker_distance(v) end

--Unit - Set the unit distress interval
---@param v number # value
function Unit:api_set_rescue_seeker_interval(v) end

--Unit - Set unit to return after rescue
---@param v boolean # value
function Unit:api_set_rescue_finish_return(v) end

--Unit - Gets the unit distress type
---@return py.ERescueSeekerType? # value
function Unit:api_get_rescue_seeker_type() end

--Unit - Get the unit rescue type
---@return py.ERescuerType? # value
function Unit:api_get_rescuer_type() end

--Unit - Get the unit distress distance
---@return number? # value
function Unit:api_get_rescue_seeker_distance() end

--Unit - Get the unit distress interval
---@return number? # value
function Unit:api_get_rescue_seeker_interval() end

--Unit - Get unit rescue and return
---@return boolean? # value
function Unit:api_get_rescue_finish_return() end

--Unit - Gets whether the unit is being rescued
---@return boolean? # value
function Unit:api_get_is_rescuing() end

--Unit - Gets whether the unit is returning after rescue
---@return boolean? # value
function Unit:api_get_is_rescue_returning() end

--Unit - Attempt to trigger AI update
function Unit:api_try_update_ai() end

--Unit - Execute the next command
function Unit:api_do_next_command() end

--Unit - Gets whether the command queue is empty
---@return boolean? # value
function Unit:api_is_command_queue_empty() end

--Unit - Set maintenance target unit
---@param repair_target py.Unit # Maintenance target unit
function Unit:api_set_repair_target_unit(repair_target) end

--Unit - Set maintenance skills
---@param ability py.Ability # Maintenance skill
function Unit:api_set_repair_ability(ability) end
