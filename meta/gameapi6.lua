--This file is generated by tools/genGameAPI, do not modify it manually.
---@meta

---@class py.GameAPI
GameAPI = {}

--Gets the destructible number MODIFIER_ENTITY key pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.ModifierEntity # Key value
function GameAPI.get_destructible_key_modifier_entity_kv(destructible_key, key) end

--Get the technology number MODIFIER_ENTITY key and value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.ModifierEntity # Key value
function GameAPI.get_tech_key_modifier_entity_kv(tech_key, key) end

--Get the image MODIFIER_ENTITY key pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.ModifierEntity # Key value
function GameAPI.get_icon_id_modifier_entity_kv(icon_id, key) end

--Obtain the logical physical component type MODIFIER_ENTITY key and value pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.ModifierEntity # Key value
function GameAPI.get_physics_entity_key_modifier_entity_kv(physics_entity_key, key) end

--Get the unit number MODIFIER_TYPE key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.ModifierType # Key value
function GameAPI.get_unit_key_modifier_type_kv(unit_key, key) end

--Gets item number MODIFIER_TYPE key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.ModifierType # Key value
function GameAPI.get_item_key_modifier_type_kv(item_key, key) end

--Get Skill number MODIFIER_TYPE key-value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.ModifierType # Key value
function GameAPI.get_ability_key_modifier_type_kv(ability_key, key) end

--Gets Magic effect special effect number MODIFIER_TYPE key-value pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.ModifierType # Key value
function GameAPI.get_modifier_key_modifier_type_kv(modifier_key, key) end

--Gets the special effect number MODIFIER_TYPE key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.ModifierType # Key value
function GameAPI.get_projectile_key_modifier_type_kv(projectile_key, key) end

--Gets destructible number MODIFIER_TYPE key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.ModifierType # Key value
function GameAPI.get_destructible_key_modifier_type_kv(destructible_key, key) end

--Gets the Technology number MODIFIER_TYPE key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.ModifierType # Key value
function GameAPI.get_tech_key_modifier_type_kv(tech_key, key) end

--Get the image MODIFIER_TYPE key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.ModifierType # Key value
function GameAPI.get_icon_id_modifier_type_kv(icon_id, key) end

--Get the logical physical component type MODIFIER_TYPE key-value pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.ModifierType # Key value
function GameAPI.get_physics_entity_key_modifier_type_kv(physics_entity_key, key) end

--Get the key pair with the unit number MODIFIER_EFFECT_TYPE
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.ModifierEffectType # Key value
function GameAPI.get_unit_key_modifier_effect_type_kv(unit_key, key) end

--Get item number MODIFIER_EFFECT_TYPE key pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.ModifierEffectType # Key value
function GameAPI.get_item_key_modifier_effect_type_kv(item_key, key) end

--Get the skill number MODIFIER_EFFECT_TYPE key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.ModifierEffectType # Key value
function GameAPI.get_ability_key_modifier_effect_type_kv(ability_key, key) end

--Get Magic effect number MODIFIER_EFFECT_TYPE key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.ModifierEffectType # Key value
function GameAPI.get_modifier_key_modifier_effect_type_kv(modifier_key, key) end

--Get the special effect number MODIFIER_EFFECT_TYPE key pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.ModifierEffectType # Key value
function GameAPI.get_projectile_key_modifier_effect_type_kv(projectile_key, key) end

--Get the destructible number MODIFIER_EFFECT_TYPE key pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.ModifierEffectType # Key value
function GameAPI.get_destructible_key_modifier_effect_type_kv(destructible_key, key) end

--Get the technology number MODIFIER_EFFECT_TYPE key pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.ModifierEffectType # Key value
function GameAPI.get_tech_key_modifier_effect_type_kv(tech_key, key) end

--Get the image MODIFIER_EFFECT_TYPE key pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.ModifierEffectType # Key value
function GameAPI.get_icon_id_modifier_effect_type_kv(icon_id, key) end

--Get the logical physical component type MODIFIER_EFFECT_TYPE key pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.ModifierEffectType # Key value
function GameAPI.get_physics_entity_key_modifier_effect_type_kv(physics_entity_key, key) end

--Gets Unit Number MODIFIER key pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.ModifierKey # Key value
function GameAPI.get_unit_key_modifier_kv(unit_key, key) end

--Get Item Number MODIFIER key pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.ModifierKey # Key value
function GameAPI.get_item_key_modifier_kv(item_key, key) end

--Get Skill Number MODIFIER Key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.ModifierKey # Key value
function GameAPI.get_ability_key_modifier_kv(ability_key, key) end

--Get Magic Effects MODIFIER Key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.ModifierKey # Key value
function GameAPI.get_modifier_key_modifier_kv(modifier_key, key) end

--Get Effect Number MODIFIER key pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.ModifierKey # Key value
function GameAPI.get_projectile_key_modifier_kv(projectile_key, key) end

--Gets Destructible Number MODIFIER key pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.ModifierKey # Key value
function GameAPI.get_destructible_key_modifier_kv(destructible_key, key) end

--Get Tech Number MODIFIER Key pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.ModifierKey # Key value
function GameAPI.get_tech_key_modifier_kv(tech_key, key) end

--Gets the Image MODIFIER key pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.ModifierKey # Key value
function GameAPI.get_icon_id_modifier_kv(icon_id, key) end

--Gets the logical Physical Component Type MODIFIER key pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.ModifierKey # Key value
function GameAPI.get_physics_entity_key_modifier_kv(physics_entity_key, key) end

--Gets the unit number PROJECTILE key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.ProjectileKey # Key value
function GameAPI.get_unit_key_projectile_kv(unit_key, key) end

--Gets the item number PROJECTILE key pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.ProjectileKey # Key value
function GameAPI.get_item_key_projectile_kv(item_key, key) end

--Gets the skill number PROJECTILE key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.ProjectileKey # Key value
function GameAPI.get_ability_key_projectile_kv(ability_key, key) end

--Gets the Magic effect number PROJECTILE key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.ProjectileKey # Key value
function GameAPI.get_modifier_key_projectile_kv(modifier_key, key) end

--Gets the effects number PROJECTILE key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.ProjectileKey # Key value
function GameAPI.get_projectile_key_projectile_kv(projectile_key, key) end

--Gets the destructible number PROJECTILE key pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.ProjectileKey # Key value
function GameAPI.get_destructible_key_projectile_kv(destructible_key, key) end

--Gets the tech number PROJECTILE key value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.ProjectileKey # Key value
function GameAPI.get_tech_key_projectile_kv(tech_key, key) end

--Gets the image PROJECTILE key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.ProjectileKey # Key value
function GameAPI.get_icon_id_projectile_kv(icon_id, key) end

--Gets the logical physical component type PROJECTILE key-value pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.ProjectileKey # Key value
function GameAPI.get_physics_entity_key_projectile_kv(physics_entity_key, key) end

--Obtain the unit number PROJECTILE_ENTITY key value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.ProjectileEntity # Key value
function GameAPI.get_unit_key_projectile_entity_kv(unit_key, key) end

--Obtain Item Number PROJECTILE_ENTITY key value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.ProjectileEntity # Key value
function GameAPI.get_item_key_projectile_entity_kv(item_key, key) end

--Obtain the skill number PROJECTILE_ENTITY key value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.ProjectileEntity # Key value
function GameAPI.get_ability_key_projectile_entity_kv(ability_key, key) end

--Obtain the PROJECTILE_ENTITY key value pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.ProjectileEntity # Key value
function GameAPI.get_modifier_key_projectile_entity_kv(modifier_key, key) end

--Obtain the PROJECTILE_ENTITY key value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.ProjectileEntity # Key value
function GameAPI.get_projectile_key_projectile_entity_kv(projectile_key, key) end

--Obtain the PROJECTILE_ENTITY key value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.ProjectileEntity # Key value
function GameAPI.get_destructible_key_projectile_entity_kv(destructible_key, key) end

--Obtain the technology number PROJECTILE_ENTITY key value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.ProjectileEntity # Key value
function GameAPI.get_tech_key_projectile_entity_kv(tech_key, key) end

--Obtain the PROJECTILE_ENTITY key value pair in the image
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.ProjectileEntity # Key value
function GameAPI.get_icon_id_projectile_entity_kv(icon_id, key) end

--Obtain the PROJECTILE_ENTITY key value pair of logical physical component type
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.ProjectileEntity # Key value
function GameAPI.get_physics_entity_key_projectile_entity_kv(physics_entity_key, key) end

--Obtain the PROJECTILE_GROUP key value pair in unit number
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.ProjectileGroup # Key value
function GameAPI.get_unit_key_projectile_group_kv(unit_key, key) end

--Obtain Item Number PROJECTILE_GROUP key value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.ProjectileGroup # Key value
function GameAPI.get_item_key_projectile_group_kv(item_key, key) end

--Obtain the skill number PROJECTILE_GROUP key value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.ProjectileGroup # Key value
function GameAPI.get_ability_key_projectile_group_kv(ability_key, key) end

--Obtain the PROJECTILE_GROUP key value pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.ProjectileGroup # Key value
function GameAPI.get_modifier_key_projectile_group_kv(modifier_key, key) end

--Obtain the PROJECTILE_GROUP key value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.ProjectileGroup # Key value
function GameAPI.get_projectile_key_projectile_group_kv(projectile_key, key) end

--Obtain the PROJECTILE_GROUP key value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.ProjectileGroup # Key value
function GameAPI.get_destructible_key_projectile_group_kv(destructible_key, key) end

--Obtain the technology ID PROJECTILE_GROUP key value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.ProjectileGroup # Key value
function GameAPI.get_tech_key_projectile_group_kv(tech_key, key) end

--Obtain the PROJECTILE_GROUP key value pair in the image
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.ProjectileGroup # Key value
function GameAPI.get_icon_id_projectile_group_kv(icon_id, key) end

--Obtain the PROJECTILE_GROUP key value pair of logical physical component type
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.ProjectileGroup # Key value
function GameAPI.get_physics_entity_key_projectile_group_kv(physics_entity_key, key) end

--Get the unit number DESTRUCTIBLE_ENTITY key pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.Destructible # Key value
function GameAPI.get_unit_key_destructible_entity_kv(unit_key, key) end

--Gets the item number DESTRUCTIBLE_ENTITY key pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.Destructible # Key value
function GameAPI.get_item_key_destructible_entity_kv(item_key, key) end

--Get skill number DESTRUCTIBLE_ENTITY key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.Destructible # Key value
function GameAPI.get_ability_key_destructible_entity_kv(ability_key, key) end

--Get magic effect number DESTRUCTIBLE_ENTITY key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.Destructible # Key value
function GameAPI.get_modifier_key_destructible_entity_kv(modifier_key, key) end

--Get the special effect number DESTRUCTIBLE_ENTITY key pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.Destructible # Key value
function GameAPI.get_projectile_key_destructible_entity_kv(projectile_key, key) end

--Gets the DESTRUCTIBLE_ENTITY key pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.Destructible # Key value
function GameAPI.get_destructible_key_destructible_entity_kv(destructible_key, key) end

--Get the technology number DESTRUCTIBLE_ENTITY key pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.Destructible # Key value
function GameAPI.get_tech_key_destructible_entity_kv(tech_key, key) end

--Get the image DESTRUCTIBLE_ENTITY key pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.Destructible # Key value
function GameAPI.get_icon_id_destructible_entity_kv(icon_id, key) end

--Gets the DESTRUCTIBLE_ENTITY key pair of the logical physical component type
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.Destructible # Key value
function GameAPI.get_physics_entity_key_destructible_entity_kv(physics_entity_key, key) end

--Gets the DESTRUCTIBLE_NAME key pair with the unit number
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.DestructibleKey # Key value
function GameAPI.get_unit_key_destructible_name_kv(unit_key, key) end

--Get the item number DESTRUCTIBLE_NAME key value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.DestructibleKey # Key value
function GameAPI.get_item_key_destructible_name_kv(item_key, key) end

--Get skill number DESTRUCTIBLE_NAME key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.DestructibleKey # Key value
function GameAPI.get_ability_key_destructible_name_kv(ability_key, key) end

--Get the DESTRUCTIBLE_NAME key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.DestructibleKey # Key value
function GameAPI.get_modifier_key_destructible_name_kv(modifier_key, key) end

--Get the DESTRUCTIBLE_NAME keyvalue pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.DestructibleKey # Key value
function GameAPI.get_projectile_key_destructible_name_kv(projectile_key, key) end

--Gets the DESTRUCTIBLE_NAME key value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.DestructibleKey # Key value
function GameAPI.get_destructible_key_destructible_name_kv(destructible_key, key) end

--Get the DESTRUCTIBLE_NAME key value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.DestructibleKey # Key value
function GameAPI.get_tech_key_destructible_name_kv(tech_key, key) end

--Get the DESTRUCTIBLE_NAME key-value pair for the picture
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.DestructibleKey # Key value
function GameAPI.get_icon_id_destructible_name_kv(icon_id, key) end

--Gets the DESTRUCTIBLE_NAME key pair of the logical physical component type
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.DestructibleKey # Key value
function GameAPI.get_physics_entity_key_destructible_name_kv(physics_entity_key, key) end

--Obtain the unit number SOUND_ENTITY key pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.SoundEntity # Key value
function GameAPI.get_unit_key_sound_entity_kv(unit_key, key) end

--Gets the item number SOUND_ENTITY key value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.SoundEntity # Key value
function GameAPI.get_item_key_sound_entity_kv(item_key, key) end

--Obtain the skill number SOUND_ENTITY key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.SoundEntity # Key value
function GameAPI.get_ability_key_sound_entity_kv(ability_key, key) end

--Gets the Magic effect number SOUND_ENTITY key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.SoundEntity # Key value
function GameAPI.get_modifier_key_sound_entity_kv(modifier_key, key) end

--Gets the special effect number SOUND_ENTITY key pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.SoundEntity # Key value
function GameAPI.get_projectile_key_sound_entity_kv(projectile_key, key) end

--Gets the destructible number SOUND_ENTITY key value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.SoundEntity # Key value
function GameAPI.get_destructible_key_sound_entity_kv(destructible_key, key) end

--Obtain the technology number SOUND_ENTITY key pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.SoundEntity # Key value
function GameAPI.get_tech_key_sound_entity_kv(tech_key, key) end

--Obtain an image SOUND_ENTITY key pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.SoundEntity # Key value
function GameAPI.get_icon_id_sound_entity_kv(icon_id, key) end

--Obtain the logical physical component type SOUND_ENTITY key pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.SoundEntity # Key value
function GameAPI.get_physics_entity_key_sound_entity_kv(physics_entity_key, key) end

--Obtain the unit number AUDIO_KEY key pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.AudioKey # Key value
function GameAPI.get_unit_key_audio_key_kv(unit_key, key) end

--Gets the item number AUDIO_KEY key pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.AudioKey # Key value
function GameAPI.get_item_key_audio_key_kv(item_key, key) end

--Obtain the skill number AUDIO_KEY key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.AudioKey # Key value
function GameAPI.get_ability_key_audio_key_kv(ability_key, key) end

--Gets the Magic Effects number AUDIO_KEY key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.AudioKey # Key value
function GameAPI.get_modifier_key_audio_key_kv(modifier_key, key) end

--Gets the special effect number AUDIO_KEY key pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.AudioKey # Key value
function GameAPI.get_projectile_key_audio_key_kv(projectile_key, key) end

--Gets the destructible number AUDIO_KEY key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.AudioKey # Key value
function GameAPI.get_destructible_key_audio_key_kv(destructible_key, key) end

--Obtain the technology number AUDIO_KEY key pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.AudioKey # Key value
function GameAPI.get_tech_key_audio_key_kv(tech_key, key) end

--Get the image AUDIO_KEY key pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.AudioKey # Key value
function GameAPI.get_icon_id_audio_key_kv(icon_id, key) end

--Obtain the logical physical component type AUDIO_KEY key pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.AudioKey # Key value
function GameAPI.get_physics_entity_key_audio_key_kv(physics_entity_key, key) end

--Gets the unit number GAME_MODE key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.GameMode # Key value
function GameAPI.get_unit_key_game_mode_kv(unit_key, key) end

--Gets item number GAME_MODE key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.GameMode # Key value
function GameAPI.get_item_key_game_mode_kv(item_key, key) end

--Gets the skill number GAME_MODE key-value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.GameMode # Key value
function GameAPI.get_ability_key_game_mode_kv(ability_key, key) end

--Get the Magic effect number GAME_MODE key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.GameMode # Key value
function GameAPI.get_modifier_key_game_mode_kv(modifier_key, key) end

--Gets the special effect number GAME_MODE key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.GameMode # Key value
function GameAPI.get_projectile_key_game_mode_kv(projectile_key, key) end

--Gets the destructible number GAME_MODE key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.GameMode # Key value
function GameAPI.get_destructible_key_game_mode_kv(destructible_key, key) end

--Gets the technology number GAME_MODE key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.GameMode # Key value
function GameAPI.get_tech_key_game_mode_kv(tech_key, key) end

--Gets the image GAME_MODE key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.GameMode # Key value
function GameAPI.get_icon_id_game_mode_kv(icon_id, key) end

--Gets the GAME_MODE key-value pair of the logical physical component type
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.GameMode # Key value
function GameAPI.get_physics_entity_key_game_mode_kv(physics_entity_key, key) end

--Gets the unit number PLAYER key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.Role # Key value
function GameAPI.get_unit_key_player_kv(unit_key, key) end

--Gets the item number PLAYER key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.Role # Key value
function GameAPI.get_item_key_player_kv(item_key, key) end

--Gets the skill number PLAYER key-value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.Role # Key value
function GameAPI.get_ability_key_player_kv(ability_key, key) end

--Gets the Magic effect number PLAYER key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.Role # Key value
function GameAPI.get_modifier_key_player_kv(modifier_key, key) end

--Gets the effects number PLAYER key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.Role # Key value
function GameAPI.get_projectile_key_player_kv(projectile_key, key) end

--Gets the destructible number PLAYER key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.Role # Key value
function GameAPI.get_destructible_key_player_kv(destructible_key, key) end

--Gets the Technology number PLAYER key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.Role # Key value
function GameAPI.get_tech_key_player_kv(tech_key, key) end

--Gets the image PLAYER key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.Role # Key value
function GameAPI.get_icon_id_player_kv(icon_id, key) end

--Gets the PLAYER key-value pair of the logical physical component type
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.Role # Key value
function GameAPI.get_physics_entity_key_player_kv(physics_entity_key, key) end

--Gets the PLAYER_GROUP key pair with the unit number
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.RoleGroup # Key value
function GameAPI.get_unit_key_player_group_kv(unit_key, key) end

--Gets the item number PLAYER_GROUP key value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.RoleGroup # Key value
function GameAPI.get_item_key_player_group_kv(item_key, key) end

--Get the skill number PLAYER_GROUP key value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.RoleGroup # Key value
function GameAPI.get_ability_key_player_group_kv(ability_key, key) end

--Get the Magic effects number PLAYER_GROUP key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.RoleGroup # Key value
function GameAPI.get_modifier_key_player_group_kv(modifier_key, key) end

--Gets the effects number PLAYER_GROUP key pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.RoleGroup # Key value
function GameAPI.get_projectile_key_player_group_kv(projectile_key, key) end

--Gets the destructible number PLAYER_GROUP key value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.RoleGroup # Key value
function GameAPI.get_destructible_key_player_group_kv(destructible_key, key) end

--Gets the technology number PLAYER_GROUP key value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.RoleGroup # Key value
function GameAPI.get_tech_key_player_group_kv(tech_key, key) end

--Get the picture PLAYER_GROUP key pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.RoleGroup # Key value
function GameAPI.get_icon_id_player_group_kv(icon_id, key) end

--Get the logical physical component type PLAYER_GROUP key value pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.RoleGroup # Key value
function GameAPI.get_physics_entity_key_player_group_kv(physics_entity_key, key) end

--Obtain the unit number ROLE_RES_KEY key pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.RoleResKey # Key value
function GameAPI.get_unit_key_role_res_key_kv(unit_key, key) end

--Get the item number ROLE_RES_KEY key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.RoleResKey # Key value
function GameAPI.get_item_key_role_res_key_kv(item_key, key) end

--Obtain the skill number ROLE_RES_KEY key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.RoleResKey # Key value
function GameAPI.get_ability_key_role_res_key_kv(ability_key, key) end

--Get the Magic effect number ROLE_RES_KEY key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.RoleResKey # Key value
function GameAPI.get_modifier_key_role_res_key_kv(modifier_key, key) end

--Obtain the special effect ID ROLE_RES_KEY key pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.RoleResKey # Key value
function GameAPI.get_projectile_key_role_res_key_kv(projectile_key, key) end

--Get the destructible number ROLE_RES_KEY key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.RoleResKey # Key value
function GameAPI.get_destructible_key_role_res_key_kv(destructible_key, key) end

--Obtain the technology ID ROLE_RES_KEY key pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.RoleResKey # Key value
function GameAPI.get_tech_key_role_res_key_kv(tech_key, key) end

--Get the image ROLE_RES_KEY key pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.RoleResKey # Key value
function GameAPI.get_icon_id_role_res_key_kv(icon_id, key) end

--Obtain a logical physical component type ROLE_RES_KEY key pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.RoleResKey # Key value
function GameAPI.get_physics_entity_key_role_res_key_kv(physics_entity_key, key) end

--Obtain the unit number ROLE_STATUS key pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.RoleStatus # Key value
function GameAPI.get_unit_key_role_status_kv(unit_key, key) end

--Get the item number ROLE_STATUS key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.RoleStatus # Key value
function GameAPI.get_item_key_role_status_kv(item_key, key) end

--Obtain the skill ID ROLE_STATUS key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.RoleStatus # Key value
function GameAPI.get_ability_key_role_status_kv(ability_key, key) end

--Get the Magic effect number ROLE_STATUS key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.RoleStatus # Key value
function GameAPI.get_modifier_key_role_status_kv(modifier_key, key) end

--Get the special effect number ROLE_STATUS key pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.RoleStatus # Key value
function GameAPI.get_projectile_key_role_status_kv(projectile_key, key) end

--Gets the destructible number ROLE_STATUS key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.RoleStatus # Key value
function GameAPI.get_destructible_key_role_status_kv(destructible_key, key) end

--Obtain the technology ID ROLE_STATUS key pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.RoleStatus # Key value
function GameAPI.get_tech_key_role_status_kv(tech_key, key) end

--Get the image ROLE_STATUS key pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.RoleStatus # Key value
function GameAPI.get_icon_id_role_status_kv(icon_id, key) end

--Obtain the ROLE_STATUS key pair of the logical physical component type
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.RoleStatus # Key value
function GameAPI.get_physics_entity_key_role_status_kv(physics_entity_key, key) end

--Gets the unit number ROLE_TYPE key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.RoleType # Key value
function GameAPI.get_unit_key_role_type_kv(unit_key, key) end

--Gets the item number ROLE_TYPE key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.RoleType # Key value
function GameAPI.get_item_key_role_type_kv(item_key, key) end

--Gets the skill number ROLE_TYPE key-value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.RoleType # Key value
function GameAPI.get_ability_key_role_type_kv(ability_key, key) end

--Gets Magic effect number ROLE_TYPE key-value pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.RoleType # Key value
function GameAPI.get_modifier_key_role_type_kv(modifier_key, key) end

--Gets the special effect number ROLE_TYPE key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.RoleType # Key value
function GameAPI.get_projectile_key_role_type_kv(projectile_key, key) end

--Gets the destructible number ROLE_TYPE key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.RoleType # Key value
function GameAPI.get_destructible_key_role_type_kv(destructible_key, key) end

--Gets the technology number ROLE_TYPE key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.RoleType # Key value
function GameAPI.get_tech_key_role_type_kv(tech_key, key) end

--Gets the image ROLE_TYPE key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.RoleType # Key value
function GameAPI.get_icon_id_role_type_kv(icon_id, key) end

--Gets the logic-physical component type ROLE_TYPE key-value pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.RoleType # Key value
function GameAPI.get_physics_entity_key_role_type_kv(physics_entity_key, key) end

--Get the unit number ROLE_RELATION key pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.RoleRelation # Key value
function GameAPI.get_unit_key_role_relation_kv(unit_key, key) end

--Gets the item number ROLE_RELATION key value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.RoleRelation # Key value
function GameAPI.get_item_key_role_relation_kv(item_key, key) end

--Get the skill ID ROLE_RELATION key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.RoleRelation # Key value
function GameAPI.get_ability_key_role_relation_kv(ability_key, key) end

--Gets the magic effect number ROLE_RELATION key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.RoleRelation # Key value
function GameAPI.get_modifier_key_role_relation_kv(modifier_key, key) end

--Get the special effect number ROLE_RELATION key and value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.RoleRelation # Key value
function GameAPI.get_projectile_key_role_relation_kv(projectile_key, key) end

--Gets the destructible number ROLE_RELATION key value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.RoleRelation # Key value
function GameAPI.get_destructible_key_role_relation_kv(destructible_key, key) end

--Get the technology number ROLE_RELATION key and value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.RoleRelation # Key value
function GameAPI.get_tech_key_role_relation_kv(tech_key, key) end

--Get the image ROLE_RELATION key and value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.RoleRelation # Key value
function GameAPI.get_icon_id_role_relation_kv(icon_id, key) end

--Get the ROLE_RELATION key pair of the logical physical component type
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.RoleRelation # Key value
function GameAPI.get_physics_entity_key_role_relation_kv(physics_entity_key, key) end

--Gets the unit number TEAM key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.Camp # Key value
function GameAPI.get_unit_key_team_kv(unit_key, key) end

--Gets the item number TEAM key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.Camp # Key value
function GameAPI.get_item_key_team_kv(item_key, key) end

--Gets the skill number TEAM key-value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.Camp # Key value
function GameAPI.get_ability_key_team_kv(ability_key, key) end

--Get Magic effect number TEAM key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.Camp # Key value
function GameAPI.get_modifier_key_team_kv(modifier_key, key) end

--Gets the effects number TEAM key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.Camp # Key value
function GameAPI.get_projectile_key_team_kv(projectile_key, key) end

--Gets the destructible number TEAM key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.Camp # Key value
function GameAPI.get_destructible_key_team_kv(destructible_key, key) end

--Gets the technology number TEAM key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.Camp # Key value
function GameAPI.get_tech_key_team_kv(tech_key, key) end

--Gets the image TEAM key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.Camp # Key value
function GameAPI.get_icon_id_team_kv(icon_id, key) end

--Gets the logical physical component type TEAM key-value pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.Camp # Key value
function GameAPI.get_physics_entity_key_team_kv(physics_entity_key, key) end

--Gets the unit number POINT key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.FPoint # Key value
function GameAPI.get_unit_key_point_kv(unit_key, key) end

--Gets the item number POINT key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.FPoint # Key value
function GameAPI.get_item_key_point_kv(item_key, key) end

--Obtain the skill number POINT key-value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.FPoint # Key value
function GameAPI.get_ability_key_point_kv(ability_key, key) end

--Get Magic effect number POINT key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.FPoint # Key value
function GameAPI.get_modifier_key_point_kv(modifier_key, key) end

--Gets the effect number POINT key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.FPoint # Key value
function GameAPI.get_projectile_key_point_kv(projectile_key, key) end

--Gets the destructible number POINT key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.FPoint # Key value
function GameAPI.get_destructible_key_point_kv(destructible_key, key) end

--Gets the technology number POINT key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.FPoint # Key value
function GameAPI.get_tech_key_point_kv(tech_key, key) end

--Gets the image POINT key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.FPoint # Key value
function GameAPI.get_icon_id_point_kv(icon_id, key) end

--Obtain the POINT key pair of the logical physical component type
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.FPoint # Key value
function GameAPI.get_physics_entity_key_point_kv(physics_entity_key, key) end

--Gets the unit number VECTOR3 key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.FVector3 # Key value
function GameAPI.get_unit_key_vector3_kv(unit_key, key) end

--Gets the item number VECTOR3 key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.FVector3 # Key value
function GameAPI.get_item_key_vector3_kv(item_key, key) end

--Gets the skill number VECTOR3 key-value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.FVector3 # Key value
function GameAPI.get_ability_key_vector3_kv(ability_key, key) end

--Get the Magic Effects VECTOR3 key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.FVector3 # Key value
function GameAPI.get_modifier_key_vector3_kv(modifier_key, key) end

--Gets the special effect number VECTOR3 key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.FVector3 # Key value
function GameAPI.get_projectile_key_vector3_kv(projectile_key, key) end

--Gets the destructible number VECTOR3 key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.FVector3 # Key value
function GameAPI.get_destructible_key_vector3_kv(destructible_key, key) end

--Gets the technology number VECTOR3 key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.FVector3 # Key value
function GameAPI.get_tech_key_vector3_kv(tech_key, key) end

--Gets the image VECTOR3 key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.FVector3 # Key value
function GameAPI.get_icon_id_vector3_kv(icon_id, key) end

--Gets the VECTOR3 key-value pair of the logical physical component type
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.FVector3 # Key value
function GameAPI.get_physics_entity_key_vector3_kv(physics_entity_key, key) end

--Get the ROTATION key pair by unit number
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.FRotation # Key value
function GameAPI.get_unit_key_rotation_kv(unit_key, key) end

--Gets the item number ROTATION key pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.FRotation # Key value
function GameAPI.get_item_key_rotation_kv(item_key, key) end

--Obtain the key pair of the skill number ROTATION
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.FRotation # Key value
function GameAPI.get_ability_key_rotation_kv(ability_key, key) end

--Gets the Magic effect number ROTATION key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.FRotation # Key value
function GameAPI.get_modifier_key_rotation_kv(modifier_key, key) end

--Gets the special effect number ROTATION key pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.FRotation # Key value
function GameAPI.get_projectile_key_rotation_kv(projectile_key, key) end

--Gets the rotatable key pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.FRotation # Key value
function GameAPI.get_destructible_key_rotation_kv(destructible_key, key) end

--Gets the technology number ROTATION key pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.FRotation # Key value
function GameAPI.get_tech_key_rotation_kv(tech_key, key) end

--Gets the image ROTATION key pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.FRotation # Key value
function GameAPI.get_icon_id_rotation_kv(icon_id, key) end

--Obtain the key pair for logical physical component type ROTATION
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.FRotation # Key value
function GameAPI.get_physics_entity_key_rotation_kv(physics_entity_key, key) end

--Get the key pair POINT_LIST
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.Road # Key value
function GameAPI.get_unit_key_point_list_kv(unit_key, key) end

--Gets the item number POINT_LIST key pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.Road # Key value
function GameAPI.get_item_key_point_list_kv(item_key, key) end

--Obtain skill number POINT_LIST key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.Road # Key value
function GameAPI.get_ability_key_point_list_kv(ability_key, key) end

--Gets Magic effect number POINT_LIST key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.Road # Key value
function GameAPI.get_modifier_key_point_list_kv(modifier_key, key) end

--Gets the special effect number POINT_LIST key pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.Road # Key value
function GameAPI.get_projectile_key_point_list_kv(projectile_key, key) end

--Gets destructible number POINT_LIST key pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.Road # Key value
function GameAPI.get_destructible_key_point_list_kv(destructible_key, key) end

--Gets the technology number POINT_LIST key pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.Road # Key value
function GameAPI.get_tech_key_point_list_kv(tech_key, key) end

--Gets the picture POINT_LIST key pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.Road # Key value
function GameAPI.get_icon_id_point_list_kv(icon_id, key) end

--Obtain the logical physical component type POINT_LIST key pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.Road # Key value
function GameAPI.get_physics_entity_key_point_list_kv(physics_entity_key, key) end

--Gets the unit number RECTANGLE key pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.RecArea # Key value
function GameAPI.get_unit_key_rectangle_kv(unit_key, key) end

--Gets the item number RECTANGLE key pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.RecArea # Key value
function GameAPI.get_item_key_rectangle_kv(item_key, key) end

--Gets the skill number RECTANGLE key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.RecArea # Key value
function GameAPI.get_ability_key_rectangle_kv(ability_key, key) end

--Gets the Magic effect number RECTANGLE key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.RecArea # Key value
function GameAPI.get_modifier_key_rectangle_kv(modifier_key, key) end

--Gets the effect number RECTANGLE key pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.RecArea # Key value
function GameAPI.get_projectile_key_rectangle_kv(projectile_key, key) end

--Gets the destructible number RECTANGLE key pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.RecArea # Key value
function GameAPI.get_destructible_key_rectangle_kv(destructible_key, key) end

--Gets the technology number RECTANGLE key pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.RecArea # Key value
function GameAPI.get_tech_key_rectangle_kv(tech_key, key) end

--Gets the image RECTANGLE key pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.RecArea # Key value
function GameAPI.get_icon_id_rectangle_kv(icon_id, key) end

--Gets the logical physical component type RECTANGLE key pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.RecArea # Key value
function GameAPI.get_physics_entity_key_rectangle_kv(physics_entity_key, key) end

--Gets a key pair with the unit number ROUND_AREA
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.CirArea # Key value
function GameAPI.get_unit_key_round_area_kv(unit_key, key) end

--Gets the item number ROUND_AREA key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.CirArea # Key value
function GameAPI.get_item_key_round_area_kv(item_key, key) end

--Obtain the skill ID ROUND_AREA key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.CirArea # Key value
function GameAPI.get_ability_key_round_area_kv(ability_key, key) end

--Gets the Magic Effects number ROUND_AREA key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.CirArea # Key value
function GameAPI.get_modifier_key_round_area_kv(modifier_key, key) end

--Gets the special effect number ROUND_AREA key pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.CirArea # Key value
function GameAPI.get_projectile_key_round_area_kv(projectile_key, key) end

--Gets the destructible number ROUND_AREA key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.CirArea # Key value
function GameAPI.get_destructible_key_round_area_kv(destructible_key, key) end

--Gets the technology ID ROUND_AREA key pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.CirArea # Key value
function GameAPI.get_tech_key_round_area_kv(tech_key, key) end

--Gets the image ROUND_AREA key pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.CirArea # Key value
function GameAPI.get_icon_id_round_area_kv(icon_id, key) end

--Obtain the ROUND_AREA key pair of the logical physical component type
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.CirArea # Key value
function GameAPI.get_physics_entity_key_round_area_kv(physics_entity_key, key) end

--Gets the unit number POLYGON key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.PolyArea # Key value
function GameAPI.get_unit_key_polygon_kv(unit_key, key) end

--Gets item number POLYGON key pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.PolyArea # Key value
function GameAPI.get_item_key_polygon_kv(item_key, key) end

--Gets skill number POLYGON key-value pairs
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.PolyArea # Key value
function GameAPI.get_ability_key_polygon_kv(ability_key, key) end

--Get Magic effect number POLYGON key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.PolyArea # Key value
function GameAPI.get_modifier_key_polygon_kv(modifier_key, key) end

--Gets the effect number POLYGON key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.PolyArea # Key value
function GameAPI.get_projectile_key_polygon_kv(projectile_key, key) end

--Gets the destructible number POLYGON key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.PolyArea # Key value
function GameAPI.get_destructible_key_polygon_kv(destructible_key, key) end

--Gets the technology number POLYGON key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.PolyArea # Key value
function GameAPI.get_tech_key_polygon_kv(tech_key, key) end

--Get image POLYGON key pairs
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.PolyArea # Key value
function GameAPI.get_icon_id_polygon_kv(icon_id, key) end

--Gets a POLYGON key-value pair of the logical physical component type
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.PolyArea # Key value
function GameAPI.get_physics_entity_key_polygon_kv(physics_entity_key, key) end

--Gets the unit number CAMERA key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.Camera # Key value
function GameAPI.get_unit_key_camera_kv(unit_key, key) end

--Gets the item number CAMERA keyvalue pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.Camera # Key value
function GameAPI.get_item_key_camera_kv(item_key, key) end

--Gets the skill number CAMERA key-value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.Camera # Key value
function GameAPI.get_ability_key_camera_kv(ability_key, key) end

--Gets Magic effect number CAMERA key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.Camera # Key value
function GameAPI.get_modifier_key_camera_kv(modifier_key, key) end

--Gets the effect number CAMERA keyvalue pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.Camera # Key value
function GameAPI.get_projectile_key_camera_kv(projectile_key, key) end

--Gets the destructible number CAMERA key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.Camera # Key value
function GameAPI.get_destructible_key_camera_kv(destructible_key, key) end

--Gets the technology number CAMERA keyvalue pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.Camera # Key value
function GameAPI.get_tech_key_camera_kv(tech_key, key) end

--Gets the image CAMERA key pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.Camera # Key value
function GameAPI.get_icon_id_camera_kv(icon_id, key) end

--Gets the logic-physical component type CAMERA key-value pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.Camera # Key value
function GameAPI.get_physics_entity_key_camera_kv(physics_entity_key, key) end

--Gets the unit number CAMLINE key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.CamlineID # Key value
function GameAPI.get_unit_key_camline_kv(unit_key, key) end

--Gets item number CAMLINE key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.CamlineID # Key value
function GameAPI.get_item_key_camline_kv(item_key, key) end

--Gets the skill number CAMLINE key-value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.CamlineID # Key value
function GameAPI.get_ability_key_camline_kv(ability_key, key) end

--Gets the Magic effect number CAMLINE key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.CamlineID # Key value
function GameAPI.get_modifier_key_camline_kv(modifier_key, key) end

--Gets the effects number CAMLINE key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.CamlineID # Key value
function GameAPI.get_projectile_key_camline_kv(projectile_key, key) end

--Gets the destructible number CAMLINE key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.CamlineID # Key value
function GameAPI.get_destructible_key_camline_kv(destructible_key, key) end

--Gets the technology number CAMLINE key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.CamlineID # Key value
function GameAPI.get_tech_key_camline_kv(tech_key, key) end

--Gets the image CAMLINE key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.CamlineID # Key value
function GameAPI.get_icon_id_camline_kv(icon_id, key) end

--Gets the logical physical component type CAMLINE key-value pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.CamlineID # Key value
function GameAPI.get_physics_entity_key_camline_kv(physics_entity_key, key) end

--Obtains the key pair POINT_LIGHT
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.PointLight # Key value
function GameAPI.get_unit_key_point_light_kv(unit_key, key) end

--Gets the item number POINT_LIGHT key pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.PointLight # Key value
function GameAPI.get_item_key_point_light_kv(item_key, key) end

--Obtain skill number POINT_LIGHT key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.PointLight # Key value
function GameAPI.get_ability_key_point_light_kv(ability_key, key) end

--Gets Magic effect number POINT_LIGHT key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.PointLight # Key value
function GameAPI.get_modifier_key_point_light_kv(modifier_key, key) end

--Gets the special effect number POINT_LIGHT key pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.PointLight # Key value
function GameAPI.get_projectile_key_point_light_kv(projectile_key, key) end

--Gets destructible number POINT_LIGHT key pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.PointLight # Key value
function GameAPI.get_destructible_key_point_light_kv(destructible_key, key) end

--Obtain technology number POINT_LIGHT key pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.PointLight # Key value
function GameAPI.get_tech_key_point_light_kv(tech_key, key) end

--Gets the picture POINT_LIGHT key pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.PointLight # Key value
function GameAPI.get_icon_id_point_light_kv(icon_id, key) end

--Obtain logical physical component type POINT_LIGHT key pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.PointLight # Key value
function GameAPI.get_physics_entity_key_point_light_kv(physics_entity_key, key) end

--Gets the unit number SPOT_LIGHT key pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.SpotLight # Key value
function GameAPI.get_unit_key_spot_light_kv(unit_key, key) end

--Gets the item number SPOT_LIGHT key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.SpotLight # Key value
function GameAPI.get_item_key_spot_light_kv(item_key, key) end

--Gets the skill number SPOT_LIGHT key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.SpotLight # Key value
function GameAPI.get_ability_key_spot_light_kv(ability_key, key) end

--Get Magic effect number SPOT_LIGHT key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.SpotLight # Key value
function GameAPI.get_modifier_key_spot_light_kv(modifier_key, key) end

--Gets the special effect number SPOT_LIGHT key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.SpotLight # Key value
function GameAPI.get_projectile_key_spot_light_kv(projectile_key, key) end

--Gets the destructible number SPOT_LIGHT key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.SpotLight # Key value
function GameAPI.get_destructible_key_spot_light_kv(destructible_key, key) end

--Gets the technology number SPOT_LIGHT key pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.SpotLight # Key value
function GameAPI.get_tech_key_spot_light_kv(tech_key, key) end

--Gets the image SPOT_LIGHT key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.SpotLight # Key value
function GameAPI.get_icon_id_spot_light_kv(icon_id, key) end

--Gets the SPOT_LIGHT key pair of the logical physical component type
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.SpotLight # Key value
function GameAPI.get_physics_entity_key_spot_light_kv(physics_entity_key, key) end

--Gets the unit number FOG key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.Fog # Key value
function GameAPI.get_unit_key_fog_kv(unit_key, key) end

--Gets the item number FOG key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.Fog # Key value
function GameAPI.get_item_key_fog_kv(item_key, key) end

--Gets the skill number FOG key-value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.Fog # Key value
function GameAPI.get_ability_key_fog_kv(ability_key, key) end

--Get the Magic effect number FOG key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.Fog # Key value
function GameAPI.get_modifier_key_fog_kv(modifier_key, key) end

--Gets the effects number FOG key pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.Fog # Key value
function GameAPI.get_projectile_key_fog_kv(projectile_key, key) end

--Gets the destructible number FOG key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.Fog # Key value
function GameAPI.get_destructible_key_fog_kv(destructible_key, key) end

--Gets the Technology number FOG key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.Fog # Key value
function GameAPI.get_tech_key_fog_kv(tech_key, key) end

--Get the picture FOG key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.Fog # Key value
function GameAPI.get_icon_id_fog_kv(icon_id, key) end

--Gets the logical physical component type FOG key-value pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.Fog # Key value
function GameAPI.get_physics_entity_key_fog_kv(physics_entity_key, key) end

--Obtain the SCENE_SOUND key and value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.SceneSound # Key value
function GameAPI.get_unit_key_scene_sound_kv(unit_key, key) end

--Gets the item number SCENE_SOUND key and value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.SceneSound # Key value
function GameAPI.get_item_key_scene_sound_kv(item_key, key) end

--Obtain the SCENE_SOUND key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.SceneSound # Key value
function GameAPI.get_ability_key_scene_sound_kv(ability_key, key) end

--Gets the Magic Effects number SCENE_SOUND key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.SceneSound # Key value
function GameAPI.get_modifier_key_scene_sound_kv(modifier_key, key) end

--Get the special effect number SCENE_SOUND key pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.SceneSound # Key value
function GameAPI.get_projectile_key_scene_sound_kv(projectile_key, key) end

--Gets the destructible number SCENE_SOUND key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.SceneSound # Key value
function GameAPI.get_destructible_key_scene_sound_kv(destructible_key, key) end

--Obtain the SCENE_SOUND key and value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.SceneSound # Key value
function GameAPI.get_tech_key_scene_sound_kv(tech_key, key) end

--Get the image SCENE_SOUND key pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.SceneSound # Key value
function GameAPI.get_icon_id_scene_sound_kv(icon_id, key) end

--Obtain the SCENE_SOUND key and value pair of the logical physical component
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.SceneSound # Key value
function GameAPI.get_physics_entity_key_scene_sound_kv(physics_entity_key, key) end

--Gets the unit number MODEL key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.ModelKey # Key value
function GameAPI.get_unit_key_model_kv(unit_key, key) end

--Gets the item number MODEL key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.ModelKey # Key value
function GameAPI.get_item_key_model_kv(item_key, key) end

--Gets the skill number MODEL key-value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.ModelKey # Key value
function GameAPI.get_ability_key_model_kv(ability_key, key) end

--Gets the Magic effect number MODEL key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.ModelKey # Key value
function GameAPI.get_modifier_key_model_kv(modifier_key, key) end

--Gets the effect number MODEL key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.ModelKey # Key value
function GameAPI.get_projectile_key_model_kv(projectile_key, key) end

--Gets the destructible number MODEL key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.ModelKey # Key value
function GameAPI.get_destructible_key_model_kv(destructible_key, key) end

--Gets the technology number MODEL key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.ModelKey # Key value
function GameAPI.get_tech_key_model_kv(tech_key, key) end

--Gets the image MODEL key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.ModelKey # Key value
function GameAPI.get_icon_id_model_kv(icon_id, key) end

--Gets the logical physical component type MODEL key-value pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.ModelKey # Key value
function GameAPI.get_physics_entity_key_model_kv(physics_entity_key, key) end

--Obtain the unit number SFX_ENTITY key pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.Sfx # Key value
function GameAPI.get_unit_key_sfx_entity_kv(unit_key, key) end

--Gets the item number SFX_ENTITY key pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.Sfx # Key value
function GameAPI.get_item_key_sfx_entity_kv(item_key, key) end

--Obtain the skill number SFX_ENTITY key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.Sfx # Key value
function GameAPI.get_ability_key_sfx_entity_kv(ability_key, key) end

--Get Magic effect number SFX_ENTITY key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.Sfx # Key value
function GameAPI.get_modifier_key_sfx_entity_kv(modifier_key, key) end

--Gets the special effect number SFX_ENTITY key pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.Sfx # Key value
function GameAPI.get_projectile_key_sfx_entity_kv(projectile_key, key) end

--Gets the destructible number SFX_ENTITY key pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.Sfx # Key value
function GameAPI.get_destructible_key_sfx_entity_kv(destructible_key, key) end

--Obtain the technology number SFX_ENTITY key pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.Sfx # Key value
function GameAPI.get_tech_key_sfx_entity_kv(tech_key, key) end

--Get an image SFX_ENTITY key pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.Sfx # Key value
function GameAPI.get_icon_id_sfx_entity_kv(icon_id, key) end

--Obtain the SFX_ENTITY key pair of the logical physical component type
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.Sfx # Key value
function GameAPI.get_physics_entity_key_sfx_entity_kv(physics_entity_key, key) end

--Get the unit number SFX_KEY key pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.SfxKey # Key value
function GameAPI.get_unit_key_sfx_key_kv(unit_key, key) end

--Gets the item number SFX_KEY key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.SfxKey # Key value
function GameAPI.get_item_key_sfx_key_kv(item_key, key) end

--Obtain the skill number SFX_KEY key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.SfxKey # Key value
function GameAPI.get_ability_key_sfx_key_kv(ability_key, key) end

--Gets the Magic Effects number SFX_KEY key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.SfxKey # Key value
function GameAPI.get_modifier_key_sfx_key_kv(modifier_key, key) end

--Gets the special effect number SFX_KEY key pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.SfxKey # Key value
function GameAPI.get_projectile_key_sfx_key_kv(projectile_key, key) end

--Gets the destructible number SFX_KEY key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.SfxKey # Key value
function GameAPI.get_destructible_key_sfx_key_kv(destructible_key, key) end

--Obtain the technology number SFX_KEY key pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.SfxKey # Key value
function GameAPI.get_tech_key_sfx_key_kv(tech_key, key) end

--Gets the image SFX_KEY key pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.SfxKey # Key value
function GameAPI.get_icon_id_sfx_key_kv(icon_id, key) end

--Obtain the SFX_KEY key pair of the logical physical component type
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.SfxKey # Key value
function GameAPI.get_physics_entity_key_sfx_key_kv(physics_entity_key, key) end

--Get the unit number LINK_SFX_ENTITY key pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.LinkSfx # Key value
function GameAPI.get_unit_key_link_sfx_entity_kv(unit_key, key) end

--Gets the item number LINK_SFX_ENTITY key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.LinkSfx # Key value
function GameAPI.get_item_key_link_sfx_entity_kv(item_key, key) end

--Obtain the skill number LINK_SFX_ENTITY key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.LinkSfx # Key value
function GameAPI.get_ability_key_link_sfx_entity_kv(ability_key, key) end

--Gets the magic effect number LINK_SFX_ENTITY key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.LinkSfx # Key value
function GameAPI.get_modifier_key_link_sfx_entity_kv(modifier_key, key) end

--Gets the special effect number LINK_SFX_ENTITY key pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.LinkSfx # Key value
function GameAPI.get_projectile_key_link_sfx_entity_kv(projectile_key, key) end

--Gets the destructible number LINK_SFX_ENTITY key value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.LinkSfx # Key value
function GameAPI.get_destructible_key_link_sfx_entity_kv(destructible_key, key) end

--Obtain the technology number LINK_SFX_ENTITY key pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.LinkSfx # Key value
function GameAPI.get_tech_key_link_sfx_entity_kv(tech_key, key) end

--Get an image LINK_SFX_ENTITY key pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.LinkSfx # Key value
function GameAPI.get_icon_id_link_sfx_entity_kv(icon_id, key) end

--Obtain the LINK_SFX_ENTITY key pair of the logical physical component type
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.LinkSfx # Key value
function GameAPI.get_physics_entity_key_link_sfx_entity_kv(physics_entity_key, key) end

--Obtain the LINK_SFX_KEY key pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.LinkSfxKey # Key value
function GameAPI.get_unit_key_link_sfx_key_kv(unit_key, key) end

--Gets item number LINK_SFX_KEY key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.LinkSfxKey # Key value
function GameAPI.get_item_key_link_sfx_key_kv(item_key, key) end

--Obtain the skill number LINK_SFX_KEY key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.LinkSfxKey # Key value
function GameAPI.get_ability_key_link_sfx_key_kv(ability_key, key) end

--Gets the Magic Effects number LINK_SFX_KEY key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.LinkSfxKey # Key value
function GameAPI.get_modifier_key_link_sfx_key_kv(modifier_key, key) end

--Get the special effect number LINK_SFX_KEY key pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.LinkSfxKey # Key value
function GameAPI.get_projectile_key_link_sfx_key_kv(projectile_key, key) end

--Gets the destructible number LINK_SFX_KEY key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.LinkSfxKey # Key value
function GameAPI.get_destructible_key_link_sfx_key_kv(destructible_key, key) end

--Obtain the technology number LINK_SFX_KEY key pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.LinkSfxKey # Key value
function GameAPI.get_tech_key_link_sfx_key_kv(tech_key, key) end

--Get the image LINK_SFX_KEY key pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.LinkSfxKey # Key value
function GameAPI.get_icon_id_link_sfx_key_kv(icon_id, key) end

--Obtain the LINK_SFX_KEY key pair of the logical physical component type
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.LinkSfxKey # Key value
function GameAPI.get_physics_entity_key_link_sfx_key_kv(physics_entity_key, key) end

--Get the unit number CURSOR_KEY key pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.CursorKey # Key value
function GameAPI.get_unit_key_cursor_key_kv(unit_key, key) end

--Gets the item number CURSOR_KEY key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.CursorKey # Key value
function GameAPI.get_item_key_cursor_key_kv(item_key, key) end

--Get the skill number CURSOR_KEY key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.CursorKey # Key value
function GameAPI.get_ability_key_cursor_key_kv(ability_key, key) end

--Gets the Magic effect number CURSOR_KEY key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.CursorKey # Key value
function GameAPI.get_modifier_key_cursor_key_kv(modifier_key, key) end

--Gets the special effect number CURSOR_KEY key pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.CursorKey # Key value
function GameAPI.get_projectile_key_cursor_key_kv(projectile_key, key) end

--Gets the destructible number CURSOR_KEY key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.CursorKey # Key value
function GameAPI.get_destructible_key_cursor_key_kv(destructible_key, key) end

--Get the technology number CURSOR_KEY key pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.CursorKey # Key value
function GameAPI.get_tech_key_cursor_key_kv(tech_key, key) end

--Gets the image CURSOR_KEY key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.CursorKey # Key value
function GameAPI.get_icon_id_cursor_key_kv(icon_id, key) end

--Obtain the logical physical component type CURSOR_KEY key pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.CursorKey # Key value
function GameAPI.get_physics_entity_key_cursor_key_kv(physics_entity_key, key) end

--Gets the unit number ANGLE key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.Fixed # Key value
function GameAPI.get_unit_key_angle_kv(unit_key, key) end

--Gets the item number ANGLE key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.Fixed # Key value
function GameAPI.get_item_key_angle_kv(item_key, key) end

--Gets the skill number ANGLE key-value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.Fixed # Key value
function GameAPI.get_ability_key_angle_kv(ability_key, key) end

--Gets the Magic effect number ANGLE key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.Fixed # Key value
function GameAPI.get_modifier_key_angle_kv(modifier_key, key) end

--Gets the effect number ANGLE key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.Fixed # Key value
function GameAPI.get_projectile_key_angle_kv(projectile_key, key) end

--Gets the destructible number ANGLE key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.Fixed # Key value
function GameAPI.get_destructible_key_angle_kv(destructible_key, key) end

--Gets the technology number ANGLE key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.Fixed # Key value
function GameAPI.get_tech_key_angle_kv(tech_key, key) end

--Gets the image ANGLE key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.Fixed # Key value
function GameAPI.get_icon_id_angle_kv(icon_id, key) end

--Gets a key-value pair of the logical physical component type ANGLE
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.Fixed # Key value
function GameAPI.get_physics_entity_key_angle_kv(physics_entity_key, key) end

--Gets the unit number TEXTURE key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.Texture # Key value
function GameAPI.get_unit_key_texture_kv(unit_key, key) end

--Gets the item number TEXTURE key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.Texture # Key value
function GameAPI.get_item_key_texture_kv(item_key, key) end

--Gets the skill number TEXTURE key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.Texture # Key value
function GameAPI.get_ability_key_texture_kv(ability_key, key) end

--Get the TEXTURE key pair for the Magic effect number
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.Texture # Key value
function GameAPI.get_modifier_key_texture_kv(modifier_key, key) end

--Gets the TEXTURE keyvalue pair for the effect number
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.Texture # Key value
function GameAPI.get_projectile_key_texture_kv(projectile_key, key) end

--Gets the destructible number TEXTURE key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.Texture # Key value
function GameAPI.get_destructible_key_texture_kv(destructible_key, key) end

--Gets the technology number TEXTURE key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.Texture # Key value
function GameAPI.get_tech_key_texture_kv(tech_key, key) end

--Gets the image TEXTURE key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.Texture # Key value
function GameAPI.get_icon_id_texture_kv(icon_id, key) end

--Gets the TEXTURE key-value pair of the logical physical component type
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.Texture # Key value
function GameAPI.get_physics_entity_key_texture_kv(physics_entity_key, key) end

--Get the unit number SEQUENCE key pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.Sequence # Key value
function GameAPI.get_unit_key_sequence_kv(unit_key, key) end

--Gets the item Number SEQUENCE key pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.Sequence # Key value
function GameAPI.get_item_key_sequence_kv(item_key, key) end

--Obtain a skill number SEQUENCE key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.Sequence # Key value
function GameAPI.get_ability_key_sequence_kv(ability_key, key) end

--Get Magic Effects SEQUENCE key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.Sequence # Key value
function GameAPI.get_modifier_key_sequence_kv(modifier_key, key) end

--Gets the special effect number SEQUENCE key pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.Sequence # Key value
function GameAPI.get_projectile_key_sequence_kv(projectile_key, key) end

--Gets a destructible number SEQUENCE key pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.Sequence # Key value
function GameAPI.get_destructible_key_sequence_kv(destructible_key, key) end

--Gets the Technology number SEQUENCE key pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.Sequence # Key value
function GameAPI.get_tech_key_sequence_kv(tech_key, key) end

--Get a picture SEQUENCE key pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.Sequence # Key value
function GameAPI.get_icon_id_sequence_kv(icon_id, key) end

--Obtain a key pair of the logical physical component type SEQUENCE
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.Sequence # Key value
function GameAPI.get_physics_entity_key_sequence_kv(physics_entity_key, key) end

--Obtain the key pair of PHYSICS_OBJECT, the unit number
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.PhysicsObject # Key value
function GameAPI.get_unit_key_physics_object_kv(unit_key, key) end

--Obtain the key pair of PHYSICS_OBJECT
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.PhysicsObject # Key value
function GameAPI.get_item_key_physics_object_kv(item_key, key) end

--Obtain the skill number PHYSICS_OBJECT
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.PhysicsObject # Key value
function GameAPI.get_ability_key_physics_object_kv(ability_key, key) end

--Get the magic effect number PHYSICS_OBJECT key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.PhysicsObject # Key value
function GameAPI.get_modifier_key_physics_object_kv(modifier_key, key) end

--Obtain the key pair of PHYSICS_OBJECT
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.PhysicsObject # Key value
function GameAPI.get_projectile_key_physics_object_kv(projectile_key, key) end

--Get the destructible number PHYSICS_OBJECT key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.PhysicsObject # Key value
function GameAPI.get_destructible_key_physics_object_kv(destructible_key, key) end

--Obtain the key pair of PHYSICS_OBJECT, the technology number
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.PhysicsObject # Key value
function GameAPI.get_tech_key_physics_object_kv(tech_key, key) end

--Obtain the PHYSICS_OBJECT key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.PhysicsObject # Key value
function GameAPI.get_icon_id_physics_object_kv(icon_id, key) end

--Obtain the key pair of PHYSICS_OBJECT of the logical physical component
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.PhysicsObject # Key value
function GameAPI.get_physics_entity_key_physics_object_kv(physics_entity_key, key) end

--Obtain the unit number PHYSICS_ENTITY key pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.PhysicsEntity # Key value
function GameAPI.get_unit_key_physics_entity_kv(unit_key, key) end

--Obtain the item number PHYSICS_ENTITY key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.PhysicsEntity # Key value
function GameAPI.get_item_key_physics_entity_kv(item_key, key) end

--Obtain the skill number PHYSICS_ENTITY key and value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.PhysicsEntity # Key value
function GameAPI.get_ability_key_physics_entity_kv(ability_key, key) end

--Get the magic effect number PHYSICS_ENTITY key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.PhysicsEntity # Key value
function GameAPI.get_modifier_key_physics_entity_kv(modifier_key, key) end

--Obtain the PHYSICS_ENTITY key and value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.PhysicsEntity # Key value
function GameAPI.get_projectile_key_physics_entity_kv(projectile_key, key) end

--Get the destructible number PHYSICS_ENTITY key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.PhysicsEntity # Key value
function GameAPI.get_destructible_key_physics_entity_kv(destructible_key, key) end

--Obtain the technology number PHYSICS_ENTITY key pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.PhysicsEntity # Key value
function GameAPI.get_tech_key_physics_entity_kv(tech_key, key) end

--Obtain the image PHYSICS_ENTITY key pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.PhysicsEntity # Key value
function GameAPI.get_icon_id_physics_entity_kv(icon_id, key) end

--Obtain the PHYSICS_ENTITY key-value pair of the logical physical component
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.PhysicsEntity # Key value
function GameAPI.get_physics_entity_key_physics_entity_kv(physics_entity_key, key) end

--Obtain the unit number PHYSICS_OBJECT_KEY key pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.PhysicsObjectKey # Key value
function GameAPI.get_unit_key_physics_object_key_kv(unit_key, key) end

--Obtain the object number PHYSICS_OBJECT_KEY key pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.PhysicsObjectKey # Key value
function GameAPI.get_item_key_physics_object_key_kv(item_key, key) end

--Obtain the skill number PHYSICS_OBJECT_KEY
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.PhysicsObjectKey # Key value
function GameAPI.get_ability_key_physics_object_key_kv(ability_key, key) end

--Obtain the magic effect ID PHYSICS_OBJECT_KEY key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.PhysicsObjectKey # Key value
function GameAPI.get_modifier_key_physics_object_key_kv(modifier_key, key) end

--Obtain the key pair of PHYSICS_OBJECT_KEY
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.PhysicsObjectKey # Key value
function GameAPI.get_projectile_key_physics_object_key_kv(projectile_key, key) end

--Obtain the destructible ID PHYSICS_OBJECT_KEY key pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.PhysicsObjectKey # Key value
function GameAPI.get_destructible_key_physics_object_key_kv(destructible_key, key) end

--Obtain the key pair of PHYSICS_OBJECT_KEY with the technology number
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.PhysicsObjectKey # Key value
function GameAPI.get_tech_key_physics_object_key_kv(tech_key, key) end

--Obtain the PHYSICS_OBJECT_KEY key pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.PhysicsObjectKey # Key value
function GameAPI.get_icon_id_physics_object_key_kv(icon_id, key) end

--Obtain the physical component type PHYSICS_OBJECT_KEY key pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.PhysicsObjectKey # Key value
function GameAPI.get_physics_entity_key_physics_object_key_kv(physics_entity_key, key) end

--Obtain the key pair of PHYSICS_ENTITY_KEY. The unit number is physics_entity_key
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.PhysicsEntityKey # Key value
function GameAPI.get_unit_key_physics_entity_key_kv(unit_key, key) end

--Obtain the key pair of PHYSICS_ENTITY_KEY
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.PhysicsEntityKey # Key value
function GameAPI.get_item_key_physics_entity_key_kv(item_key, key) end

--Obtain the skill number PHYSICS_ENTITY_KEY
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.PhysicsEntityKey # Key value
function GameAPI.get_ability_key_physics_entity_key_kv(ability_key, key) end

--Get the magic effect number PHYSICS_ENTITY_KEY key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.PhysicsEntityKey # Key value
function GameAPI.get_modifier_key_physics_entity_key_kv(modifier_key, key) end

--Obtain the key pair of PHYSICS_ENTITY_KEY
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.PhysicsEntityKey # Key value
function GameAPI.get_projectile_key_physics_entity_key_kv(projectile_key, key) end

--Obtain the destructible number PHYSICS_ENTITY_KEY key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.PhysicsEntityKey # Key value
function GameAPI.get_destructible_key_physics_entity_key_kv(destructible_key, key) end

--Obtain the key pair of PHYSICS_ENTITY_KEY
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.PhysicsEntityKey # Key value
function GameAPI.get_tech_key_physics_entity_key_kv(tech_key, key) end

--Obtain the PHYSICS_ENTITY_KEY key pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.PhysicsEntityKey # Key value
function GameAPI.get_icon_id_physics_entity_key_kv(icon_id, key) end

--Obtain the key pair of PHYSICS_ENTITY_KEY of the logical physical component
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.PhysicsEntityKey # Key value
function GameAPI.get_physics_entity_key_physics_entity_key_kv(physics_entity_key, key) end

--Gets the RIGID_BODY key pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.RigidBody # Key value
function GameAPI.get_unit_key_rigid_body_kv(unit_key, key) end

--Gets the item number RIGID_BODY key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.RigidBody # Key value
function GameAPI.get_item_key_rigid_body_kv(item_key, key) end

--Gets the skill number RIGID_BODY key value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.RigidBody # Key value
function GameAPI.get_ability_key_rigid_body_kv(ability_key, key) end

--Gets the Magic effect number RIGID_BODY key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.RigidBody # Key value
function GameAPI.get_modifier_key_rigid_body_kv(modifier_key, key) end

--Gets the special effect number RIGID_BODY key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.RigidBody # Key value
function GameAPI.get_projectile_key_rigid_body_kv(projectile_key, key) end

--Gets the destructible number RIGID_BODY key value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.RigidBody # Key value
function GameAPI.get_destructible_key_rigid_body_kv(destructible_key, key) end

--Gets the technology number RIGID_BODY key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.RigidBody # Key value
function GameAPI.get_tech_key_rigid_body_kv(tech_key, key) end

--Gets the RIGID_BODY key-value pair for the picture
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.RigidBody # Key value
function GameAPI.get_icon_id_rigid_body_kv(icon_id, key) end

--Obtain the RIGID_BODY key pair of the logical physical component type
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.RigidBody # Key value
function GameAPI.get_physics_entity_key_rigid_body_kv(physics_entity_key, key) end

--Obtain the RIGID_BODY_GROUP key pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.RigidBodyGroup # Key value
function GameAPI.get_unit_key_rigid_body_group_kv(unit_key, key) end

--Gets the item number RIGID_BODY_GROUP key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.RigidBodyGroup # Key value
function GameAPI.get_item_key_rigid_body_group_kv(item_key, key) end

--Obtain the skill RIGID_BODY_GROUP key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.RigidBodyGroup # Key value
function GameAPI.get_ability_key_rigid_body_group_kv(ability_key, key) end

--Get the Magic effect number RIGID_BODY_GROUP key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.RigidBodyGroup # Key value
function GameAPI.get_modifier_key_rigid_body_group_kv(modifier_key, key) end

--Get the special effect number RIGID_BODY_GROUP key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.RigidBodyGroup # Key value
function GameAPI.get_projectile_key_rigid_body_group_kv(projectile_key, key) end

--Gets the destructible number RIGID_BODY_GROUP key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.RigidBodyGroup # Key value
function GameAPI.get_destructible_key_rigid_body_group_kv(destructible_key, key) end

--Get the technology number RIGID_BODY_GROUP key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.RigidBodyGroup # Key value
function GameAPI.get_tech_key_rigid_body_group_kv(tech_key, key) end

--Obtain the image RIGID_BODY_GROUP key pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.RigidBodyGroup # Key value
function GameAPI.get_icon_id_rigid_body_group_kv(icon_id, key) end

--Obtain the RIGID_BODY_GROUP key pair of the logical physical component type
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.RigidBodyGroup # Key value
function GameAPI.get_physics_entity_key_rigid_body_group_kv(physics_entity_key, key) end

--Gets the unit number COLLIDER key and value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.Collider # Key value
function GameAPI.get_unit_key_collider_kv(unit_key, key) end

--Gets the item number COLLIDER key and value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.Collider # Key value
function GameAPI.get_item_key_collider_kv(item_key, key) end

--Gets the skill number COLLIDER key and value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.Collider # Key value
function GameAPI.get_ability_key_collider_kv(ability_key, key) end

--Get the Magic Effects COLLIDER key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.Collider # Key value
function GameAPI.get_modifier_key_collider_kv(modifier_key, key) end

--Gets the effects number COLLIDER key and value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.Collider # Key value
function GameAPI.get_projectile_key_collider_kv(projectile_key, key) end

--Gets the destructible number COLLIDER key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.Collider # Key value
function GameAPI.get_destructible_key_collider_kv(destructible_key, key) end

--Gets the Technology number COLLIDER key and value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.Collider # Key value
function GameAPI.get_tech_key_collider_kv(tech_key, key) end

--Gets the image COLLIDER key and value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.Collider # Key value
function GameAPI.get_icon_id_collider_kv(icon_id, key) end

--Gets the logical physical component type COLLIDER key-value pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.Collider # Key value
function GameAPI.get_physics_entity_key_collider_kv(physics_entity_key, key) end

--Gets the unit number JOINT key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.Joint # Key value
function GameAPI.get_unit_key_joint_kv(unit_key, key) end

--Gets the item number JOINT key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.Joint # Key value
function GameAPI.get_item_key_joint_kv(item_key, key) end

--Gets the skill number JOINT key-value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.Joint # Key value
function GameAPI.get_ability_key_joint_kv(ability_key, key) end

--Gets the Magic Effect number JOINT Key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.Joint # Key value
function GameAPI.get_modifier_key_joint_kv(modifier_key, key) end

--Gets the special effect number JOINT key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.Joint # Key value
function GameAPI.get_projectile_key_joint_kv(projectile_key, key) end

--Gets the destructible number JOINT key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.Joint # Key value
function GameAPI.get_destructible_key_joint_kv(destructible_key, key) end

--Gets the technology number JOINT key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.Joint # Key value
function GameAPI.get_tech_key_joint_kv(tech_key, key) end

--Gets an image JOINT key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.Joint # Key value
function GameAPI.get_icon_id_joint_kv(icon_id, key) end

--Gets the logical physical component type JOINT key-value pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.Joint # Key value
function GameAPI.get_physics_entity_key_joint_kv(physics_entity_key, key) end

--Gets the unit number REACTION key pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.Reaction # Key value
function GameAPI.get_unit_key_reaction_kv(unit_key, key) end

--Gets the item number REACTION key pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.Reaction # Key value
function GameAPI.get_item_key_reaction_kv(item_key, key) end

--Gets the skill number REACTION key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.Reaction # Key value
function GameAPI.get_ability_key_reaction_kv(ability_key, key) end

--Get the Magic effect number REACTION key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.Reaction # Key value
function GameAPI.get_modifier_key_reaction_kv(modifier_key, key) end

--Get the special effect number REACTION key pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.Reaction # Key value
function GameAPI.get_projectile_key_reaction_kv(projectile_key, key) end

--Gets the destructible number REACTION key pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.Reaction # Key value
function GameAPI.get_destructible_key_reaction_kv(destructible_key, key) end

--Get the technology number REACTION key pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.Reaction # Key value
function GameAPI.get_tech_key_reaction_kv(tech_key, key) end

--Get the image REACTION key pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.Reaction # Key value
function GameAPI.get_icon_id_reaction_kv(icon_id, key) end

--Gets the REACTION key pair of the logical physical component type
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.Reaction # Key value
function GameAPI.get_physics_entity_key_reaction_kv(physics_entity_key, key) end

--Obtain the unit number, REACTION_GROUP key value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.ReactionGroup # Key value
function GameAPI.get_unit_key_reaction_group_kv(unit_key, key) end

--Obtain the item number, REACTION_GROUP key value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.ReactionGroup # Key value
function GameAPI.get_item_key_reaction_group_kv(item_key, key) end

--Obtain the skill number, or _group, key value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.ReactionGroup # Key value
function GameAPI.get_ability_key_reaction_group_kv(ability_key, key) end

--Get Magic effect effect number, REACTION_GROUP key value pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.ReactionGroup # Key value
function GameAPI.get_modifier_key_reaction_group_kv(modifier_key, key) end

--Obtain the special effect number, REACTION_GROUP key value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.ReactionGroup # Key value
function GameAPI.get_projectile_key_reaction_group_kv(projectile_key, key) end

--Obtain the destructible number, REACTION_GROUP key value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.ReactionGroup # Key value
function GameAPI.get_destructible_key_reaction_group_kv(destructible_key, key) end

--Obtain the technology number, REACTION_GROUP key value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.ReactionGroup # Key value
function GameAPI.get_tech_key_reaction_group_kv(tech_key, key) end

--Obtain the picture, or _group key value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.ReactionGroup # Key value
function GameAPI.get_icon_id_reaction_group_kv(icon_id, key) end

--Obtain the logical physical component type, REACTION_GROUP key value pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.ReactionGroup # Key value
function GameAPI.get_physics_entity_key_reaction_group_kv(physics_entity_key, key) end

--Gets the DYNAMIC_TRIGGER_INSTANCE key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.DynamicTriggerInstance # Key value
function GameAPI.get_unit_key_dynamic_trigger_instance_kv(unit_key, key) end

--Gets the item number DYNAMIC_TRIGGER_INSTANCE key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.DynamicTriggerInstance # Key value
function GameAPI.get_item_key_dynamic_trigger_instance_kv(item_key, key) end

--Obtain the skill number DYNAMIC_TRIGGER_INSTANCE key-value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.DynamicTriggerInstance # Key value
function GameAPI.get_ability_key_dynamic_trigger_instance_kv(ability_key, key) end

--Gets Magic effect number DYNAMIC_TRIGGER_INSTANCE key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.DynamicTriggerInstance # Key value
function GameAPI.get_modifier_key_dynamic_trigger_instance_kv(modifier_key, key) end

--Gets the special effect number DYNAMIC_TRIGGER_INSTANCE key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.DynamicTriggerInstance # Key value
function GameAPI.get_projectile_key_dynamic_trigger_instance_kv(projectile_key, key) end

--Gets the destructible number DYNAMIC_TRIGGER_INSTANCE key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.DynamicTriggerInstance # Key value
function GameAPI.get_destructible_key_dynamic_trigger_instance_kv(destructible_key, key) end

--Gets the technology number DYNAMIC_TRIGGER_INSTANCE key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.DynamicTriggerInstance # Key value
function GameAPI.get_tech_key_dynamic_trigger_instance_kv(tech_key, key) end

--Gets the image DYNAMIC_TRIGGER_INSTANCE key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.DynamicTriggerInstance # Key value
function GameAPI.get_icon_id_dynamic_trigger_instance_kv(icon_id, key) end

--Obtain the DYNAMIC_TRIGGER_INSTANCE key pair of the logical physical component type
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.DynamicTriggerInstance # Key value
function GameAPI.get_physics_entity_key_dynamic_trigger_instance_kv(physics_entity_key, key) end

--Gets the unit number TABLE key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.Table # Key value
function GameAPI.get_unit_key_table_kv(unit_key, key) end

--Gets the item number TABLE key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.Table # Key value
function GameAPI.get_item_key_table_kv(item_key, key) end

--Gets the skill number TABLE key-value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.Table # Key value
function GameAPI.get_ability_key_table_kv(ability_key, key) end

--Get the Magic effect number TABLE key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.Table # Key value
function GameAPI.get_modifier_key_table_kv(modifier_key, key) end

--Gets the special effect number TABLE key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.Table # Key value
function GameAPI.get_projectile_key_table_kv(projectile_key, key) end

--Gets the destructible number TABLE key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.Table # Key value
function GameAPI.get_destructible_key_table_kv(destructible_key, key) end

--Gets the technology number TABLE key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.Table # Key value
function GameAPI.get_tech_key_table_kv(tech_key, key) end

--Gets the image TABLE key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.Table # Key value
function GameAPI.get_icon_id_table_kv(icon_id, key) end

--Obtain the TABLE key-value pair of the logical physical component type
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.Table # Key value
function GameAPI.get_physics_entity_key_table_kv(physics_entity_key, key) end

--Gets the unit number RANDOM_POOL key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.RandomPool # Key value
function GameAPI.get_unit_key_random_pool_kv(unit_key, key) end

--Gets the item number RANDOM_POOL key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.RandomPool # Key value
function GameAPI.get_item_key_random_pool_kv(item_key, key) end

--Gets the skill number RANDOM_POOL key-value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.RandomPool # Key value
function GameAPI.get_ability_key_random_pool_kv(ability_key, key) end

--Gets the Magic effect number RANDOM_POOL key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.RandomPool # Key value
function GameAPI.get_modifier_key_random_pool_kv(modifier_key, key) end

--Get the effect number RANDOM_POOL key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.RandomPool # Key value
function GameAPI.get_projectile_key_random_pool_kv(projectile_key, key) end

--Gets the destructible number RANDOM_POOL key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.RandomPool # Key value
function GameAPI.get_destructible_key_random_pool_kv(destructible_key, key) end

--Get the technology number RANDOM_POOL key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.RandomPool # Key value
function GameAPI.get_tech_key_random_pool_kv(tech_key, key) end

--Get a picture RANDOM_POOL key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.RandomPool # Key value
function GameAPI.get_icon_id_random_pool_kv(icon_id, key) end

--Gets a logic-physical component type RANDOM_POOL key-value pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.RandomPool # Key value
function GameAPI.get_physics_entity_key_random_pool_kv(physics_entity_key, key) end

--Obtain the SCENE_UI key pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.SceneNode # Key value
function GameAPI.get_unit_key_scene_ui_kv(unit_key, key) end

--Gets the item number SCENE_UI key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.SceneNode # Key value
function GameAPI.get_item_key_scene_ui_kv(item_key, key) end

--Obtain the SCENE_UI key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.SceneNode # Key value
function GameAPI.get_ability_key_scene_ui_kv(ability_key, key) end

--Gets the Magic Effects number SCENE_UI key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.SceneNode # Key value
function GameAPI.get_modifier_key_scene_ui_kv(modifier_key, key) end

--Get the special effect number SCENE_UI key pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.SceneNode # Key value
function GameAPI.get_projectile_key_scene_ui_kv(projectile_key, key) end

--Gets the destructible number SCENE_UI key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.SceneNode # Key value
function GameAPI.get_destructible_key_scene_ui_kv(destructible_key, key) end

--Get the technology number SCENE_UI key pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.SceneNode # Key value
function GameAPI.get_tech_key_scene_ui_kv(tech_key, key) end

--Gets the image SCENE_UI key pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.SceneNode # Key value
function GameAPI.get_icon_id_scene_ui_kv(icon_id, key) end

--Obtain the key pair SCENE_UI of the logical physical component
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.SceneNode # Key value
function GameAPI.get_physics_entity_key_scene_ui_kv(physics_entity_key, key) end

--Gets the unit number DAMAGE_TYPE key and value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_unit_key_damage_type_kv(unit_key, key) end

--Gets the item number DAMAGE_TYPE key pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_item_key_damage_type_kv(item_key, key) end

--Gets the skill number DAMAGE_TYPE key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_ability_key_damage_type_kv(ability_key, key) end

--Get the Magic effect number DAMAGE_TYPE key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_modifier_key_damage_type_kv(modifier_key, key) end

--Gets the special effect number DAMAGE_TYPE key pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_projectile_key_damage_type_kv(projectile_key, key) end

--Gets the destructible number DAMAGE_TYPE key pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_destructible_key_damage_type_kv(destructible_key, key) end

--Gets the technology number DAMAGE_TYPE key pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_tech_key_damage_type_kv(tech_key, key) end

--Get the image DAMAGE_TYPE key pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_icon_id_damage_type_kv(icon_id, key) end

--Obtain the DAMAGE_TYPE key pair of the logical physical component type
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_physics_entity_key_damage_type_kv(physics_entity_key, key) end

--Gets the key pair with the unit number HARM_TEXT_TYPE_NEW
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_unit_key_harm_text_type_new_kv(unit_key, key) end

--Gets the item number HARM_TEXT_TYPE_NEW key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_item_key_harm_text_type_new_kv(item_key, key) end

--Gets the skill number HARM_TEXT_TYPE_NEW key-value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_ability_key_harm_text_type_new_kv(ability_key, key) end

--Gets the Magic Effects number HARM_TEXT_TYPE_NEW key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_modifier_key_harm_text_type_new_kv(modifier_key, key) end

--Gets the effect number HARM_TEXT_TYPE_NEW key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_projectile_key_harm_text_type_new_kv(projectile_key, key) end

--Gets the destructible number HARM_TEXT_TYPE_NEW key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_destructible_key_harm_text_type_new_kv(destructible_key, key) end

--Gets the technology number HARM_TEXT_TYPE_NEW key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_tech_key_harm_text_type_new_kv(tech_key, key) end

--Gets the image HARM_TEXT_TYPE_NEW key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return string # Key value
function GameAPI.get_icon_id_harm_text_type_new_kv(icon_id, key) end

--Gets the key pair of logical physical component type HARM_TEXT_TYPE_NEW
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return string # Key value
function GameAPI.get_physics_entity_key_harm_text_type_new_kv(physics_entity_key, key) end

--Gets the unit number FONT_TYPE key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_unit_key_font_type_kv(unit_key, key) end

--Gets the item number FONT_TYPE key pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_item_key_font_type_kv(item_key, key) end

--Gets the skill number FONT_TYPE key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_ability_key_font_type_kv(ability_key, key) end

--Gets the Magic effect number FONT_TYPE key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_modifier_key_font_type_kv(modifier_key, key) end

--Gets the special effect number FONT_TYPE key pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_projectile_key_font_type_kv(projectile_key, key) end

--Gets the destructible number FONT_TYPE key pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_destructible_key_font_type_kv(destructible_key, key) end

--Gets the technology number FONT_TYPE key pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_tech_key_font_type_kv(tech_key, key) end

--Gets the image FONT_TYPE key pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return string # Key value
function GameAPI.get_icon_id_font_type_kv(icon_id, key) end

--Gets the logical physical component type FONT_TYPE key pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return string # Key value
function GameAPI.get_physics_entity_key_font_type_kv(physics_entity_key, key) end

--Gets the JUMP_WORD_TRACK key pair with the unit number
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_unit_key_jump_word_track_kv(unit_key, key) end

--Gets the item number JUMP_WORD_TRACK key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_item_key_jump_word_track_kv(item_key, key) end

--Obtain the skill number JUMP_WORD_TRACK key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_ability_key_jump_word_track_kv(ability_key, key) end

--Get the Magic effect number JUMP_WORD_TRACK key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_modifier_key_jump_word_track_kv(modifier_key, key) end

--Gets the special effect number JUMP_WORD_TRACK key pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_projectile_key_jump_word_track_kv(projectile_key, key) end

--Gets the destructible number JUMP_WORD_TRACK key pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_destructible_key_jump_word_track_kv(destructible_key, key) end

--Gets the technology number JUMP_WORD_TRACK key pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_tech_key_jump_word_track_kv(tech_key, key) end

--Gets the image JUMP_WORD_TRACK key pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_icon_id_jump_word_track_kv(icon_id, key) end

--Gets the logic-physical component type JUMP_WORD_TRACK key-value pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_physics_entity_key_jump_word_track_kv(physics_entity_key, key) end

--Get the NEW_TIMER key pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.Timer # Key value
function GameAPI.get_unit_key_new_timer_kv(unit_key, key) end

--Gets the item number NEW_TIMER key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.Timer # Key value
function GameAPI.get_item_key_new_timer_kv(item_key, key) end

--Get the skill number NEW_TIMER key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.Timer # Key value
function GameAPI.get_ability_key_new_timer_kv(ability_key, key) end

--Get Magic effect number NEW_TIMER key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.Timer # Key value
function GameAPI.get_modifier_key_new_timer_kv(modifier_key, key) end

--Gets the special effect number NEW_TIMER key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.Timer # Key value
function GameAPI.get_projectile_key_new_timer_kv(projectile_key, key) end

--Gets the destructible number NEW_TIMER key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.Timer # Key value
function GameAPI.get_destructible_key_new_timer_kv(destructible_key, key) end

--Get the technology number NEW_TIMER key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.Timer # Key value
function GameAPI.get_tech_key_new_timer_kv(tech_key, key) end

--Get the picture NEW_TIMER key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.Timer # Key value
function GameAPI.get_icon_id_new_timer_kv(icon_id, key) end

--Obtain the NEW_TIMER key pair of the logical physical component type
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.Timer # Key value
function GameAPI.get_physics_entity_key_new_timer_kv(physics_entity_key, key) end

--Get the unit number TECH_KEY key pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.TechKey # Key value
function GameAPI.get_unit_key_tech_key_kv(unit_key, key) end

--Get item number TECH_KEY key pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.TechKey # Key value
function GameAPI.get_item_key_tech_key_kv(item_key, key) end

--Obtain the skill number TECH_KEY key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.TechKey # Key value
function GameAPI.get_ability_key_tech_key_kv(ability_key, key) end

--Get the Magic effect number TECH_KEY key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.TechKey # Key value
function GameAPI.get_modifier_key_tech_key_kv(modifier_key, key) end

--Get the special effect number TECH_KEY key pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.TechKey # Key value
function GameAPI.get_projectile_key_tech_key_kv(projectile_key, key) end

--Gets the destructible number TECH_KEY key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.TechKey # Key value
function GameAPI.get_destructible_key_tech_key_kv(destructible_key, key) end

--Get the technology number TECH_KEY key pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.TechKey # Key value
function GameAPI.get_tech_key_tech_key_kv(tech_key, key) end

--Gets the image TECH_KEY key pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.TechKey # Key value
function GameAPI.get_icon_id_tech_key_kv(icon_id, key) end

--Obtain the logical physical component type TECH_KEY key pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.TechKey # Key value
function GameAPI.get_physics_entity_key_tech_key_kv(physics_entity_key, key) end

--Get the unit number STORE_KEY key pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.StoreKey # Key value
function GameAPI.get_unit_key_store_key_kv(unit_key, key) end

--Gets the item number STORE_KEY key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.StoreKey # Key value
function GameAPI.get_item_key_store_key_kv(item_key, key) end

--Obtain a skill number STORE_KEY key-value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.StoreKey # Key value
function GameAPI.get_ability_key_store_key_kv(ability_key, key) end

--Get the Magic effect number STORE_KEY key-value pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.StoreKey # Key value
function GameAPI.get_modifier_key_store_key_kv(modifier_key, key) end

--Get the special effect number STORE_KEY key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.StoreKey # Key value
function GameAPI.get_projectile_key_store_key_kv(projectile_key, key) end

--Gets the destructible number STORE_KEY key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.StoreKey # Key value
function GameAPI.get_destructible_key_store_key_kv(destructible_key, key) end

--Get the technology number STORE_KEY key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.StoreKey # Key value
function GameAPI.get_tech_key_store_key_kv(tech_key, key) end

--Get the image STORE_KEY key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.StoreKey # Key value
function GameAPI.get_icon_id_store_key_kv(icon_id, key) end

--Obtain the logical physical component type STORE_KEY key pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.StoreKey # Key value
function GameAPI.get_physics_entity_key_store_key_kv(physics_entity_key, key) end

--Obtain the unit number KEYBOARD_KEY key pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.KeyboardKey # Key value
function GameAPI.get_unit_key_keyboard_key_kv(unit_key, key) end

--Obtain item number KEYBOARD_KEY key pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.KeyboardKey # Key value
function GameAPI.get_item_key_keyboard_key_kv(item_key, key) end

--Obtain the skill number KEYBOARD_KEY key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.KeyboardKey # Key value
function GameAPI.get_ability_key_keyboard_key_kv(ability_key, key) end

--Gets Magic Effects special effect number KEYBOARD_KEY key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.KeyboardKey # Key value
function GameAPI.get_modifier_key_keyboard_key_kv(modifier_key, key) end

--Obtain the special effect ID KEYBOARD_KEY key pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.KeyboardKey # Key value
function GameAPI.get_projectile_key_keyboard_key_kv(projectile_key, key) end

--Gets the destructible number KEYBOARD_KEY key pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.KeyboardKey # Key value
function GameAPI.get_destructible_key_keyboard_key_kv(destructible_key, key) end

--Obtain the technology ID KEYBOARD_KEY key pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.KeyboardKey # Key value
function GameAPI.get_tech_key_keyboard_key_kv(tech_key, key) end

--Obtain the image KEYBOARD_KEY key pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.KeyboardKey # Key value
function GameAPI.get_icon_id_keyboard_key_kv(icon_id, key) end

--Obtain the logical physical component type KEYBOARD_KEY key pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.KeyboardKey # Key value
function GameAPI.get_physics_entity_key_keyboard_key_kv(physics_entity_key, key) end

--Get the unit number FUNC_KEYBOARD_KEY key pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.FuncKeyboardKey # Key value
function GameAPI.get_unit_key_func_keyboard_key_kv(unit_key, key) end

--Gets the item number FUNC_KEYBOARD_KEY key pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.FuncKeyboardKey # Key value
function GameAPI.get_item_key_func_keyboard_key_kv(item_key, key) end

--Obtain the skill number FUNC_KEYBOARD_KEY key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.FuncKeyboardKey # Key value
function GameAPI.get_ability_key_func_keyboard_key_kv(ability_key, key) end

--Gets the magic effect number FUNC_KEYBOARD_KEY key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.FuncKeyboardKey # Key value
function GameAPI.get_modifier_key_func_keyboard_key_kv(modifier_key, key) end

--Gets the special effect number FUNC_KEYBOARD_KEY key pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.FuncKeyboardKey # Key value
function GameAPI.get_projectile_key_func_keyboard_key_kv(projectile_key, key) end

--Gets the destructible number FUNC_KEYBOARD_KEY key pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.FuncKeyboardKey # Key value
function GameAPI.get_destructible_key_func_keyboard_key_kv(destructible_key, key) end

--Obtain the technology number FUNC_KEYBOARD_KEY key pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.FuncKeyboardKey # Key value
function GameAPI.get_tech_key_func_keyboard_key_kv(tech_key, key) end

--Get an image FUNC_KEYBOARD_KEY key pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.FuncKeyboardKey # Key value
function GameAPI.get_icon_id_func_keyboard_key_kv(icon_id, key) end

--Obtain a key pair of the logical physical component FUNC_KEYBOARD_KEY
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.FuncKeyboardKey # Key value
function GameAPI.get_physics_entity_key_func_keyboard_key_kv(physics_entity_key, key) end

--Gets the unit number MOUSE_KEY key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.MouseKey # Key value
function GameAPI.get_unit_key_mouse_key_kv(unit_key, key) end

--Gets the item number MOUSE_KEY key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.MouseKey # Key value
function GameAPI.get_item_key_mouse_key_kv(item_key, key) end

--Gets the skill number MOUSE_KEY key-value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.MouseKey # Key value
function GameAPI.get_ability_key_mouse_key_kv(ability_key, key) end

--Get Magic effect number MOUSE_KEY key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.MouseKey # Key value
function GameAPI.get_modifier_key_mouse_key_kv(modifier_key, key) end

--Gets the MOUSE_KEY key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.MouseKey # Key value
function GameAPI.get_projectile_key_mouse_key_kv(projectile_key, key) end

--Gets the destructible number MOUSE_KEY key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.MouseKey # Key value
function GameAPI.get_destructible_key_mouse_key_kv(destructible_key, key) end

--Gets the technology number MOUSE_KEY key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.MouseKey # Key value
function GameAPI.get_tech_key_mouse_key_kv(tech_key, key) end

--Gets the image MOUSE_KEY key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.MouseKey # Key value
function GameAPI.get_icon_id_mouse_key_kv(icon_id, key) end

--Gets the MOUSE_KEY key-value pair of the logical physical component type
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.MouseKey # Key value
function GameAPI.get_physics_entity_key_mouse_key_kv(physics_entity_key, key) end

--Gets the unit number MOUSE_WHEEL key value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.MouseWheel # Key value
function GameAPI.get_unit_key_mouse_wheel_kv(unit_key, key) end

--Gets the item number MOUSE_WHEEL key value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.MouseWheel # Key value
function GameAPI.get_item_key_mouse_wheel_kv(item_key, key) end

--Gets the skill number MOUSE_WHEEL key value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.MouseWheel # Key value
function GameAPI.get_ability_key_mouse_wheel_kv(ability_key, key) end

--Gets Magic effect number MOUSE_WHEEL key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.MouseWheel # Key value
function GameAPI.get_modifier_key_mouse_wheel_kv(modifier_key, key) end

--Gets the MOUSE_WHEEL key value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.MouseWheel # Key value
function GameAPI.get_projectile_key_mouse_wheel_kv(projectile_key, key) end

--Gets the destructible number MOUSE_WHEEL key value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.MouseWheel # Key value
function GameAPI.get_destructible_key_mouse_wheel_kv(destructible_key, key) end

--Gets the technology number MOUSE_WHEEL key value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.MouseWheel # Key value
function GameAPI.get_tech_key_mouse_wheel_kv(tech_key, key) end

--Gets an image MOUSE_WHEEL key pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.MouseWheel # Key value
function GameAPI.get_icon_id_mouse_wheel_kv(icon_id, key) end

--Gets a MOUSE_WHEEL key pair of the logical physical component type
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.MouseWheel # Key value
function GameAPI.get_physics_entity_key_mouse_wheel_kv(physics_entity_key, key) end

--Gets the unit number POST_EFFECT key pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.PostEffect # Key value
function GameAPI.get_unit_key_post_effect_kv(unit_key, key) end

--Gets the item number POST_EFFECT key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.PostEffect # Key value
function GameAPI.get_item_key_post_effect_kv(item_key, key) end

--Gets the skill number POST_EFFECT key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.PostEffect # Key value
function GameAPI.get_ability_key_post_effect_kv(ability_key, key) end

--Get Magic effect number POST_EFFECT key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.PostEffect # Key value
function GameAPI.get_modifier_key_post_effect_kv(modifier_key, key) end

--Gets the special effect number POST_EFFECT key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.PostEffect # Key value
function GameAPI.get_projectile_key_post_effect_kv(projectile_key, key) end

--Gets the destructible number POST_EFFECT key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.PostEffect # Key value
function GameAPI.get_destructible_key_post_effect_kv(destructible_key, key) end

--Gets the technology number POST_EFFECT key pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.PostEffect # Key value
function GameAPI.get_tech_key_post_effect_kv(tech_key, key) end

--Gets the image POST_EFFECT key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.PostEffect # Key value
function GameAPI.get_icon_id_post_effect_kv(icon_id, key) end

--Obtain the POST_EFFECT key pair of the logical physical component type
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.PostEffect # Key value
function GameAPI.get_physics_entity_key_post_effect_kv(physics_entity_key, key) end

--Gets the unit number UNIT_TYPE key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.UnitType # Key value
function GameAPI.get_unit_key_unit_type_kv(unit_key, key) end

--Gets item number UNIT_TYPE key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.UnitType # Key value
function GameAPI.get_item_key_unit_type_kv(item_key, key) end

--Gets the skill number UNIT_TYPE key-value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.UnitType # Key value
function GameAPI.get_ability_key_unit_type_kv(ability_key, key) end

--Gets Magic effect number UNIT_TYPE key-value pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.UnitType # Key value
function GameAPI.get_modifier_key_unit_type_kv(modifier_key, key) end

--Gets the special effect number UNIT_TYPE key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.UnitType # Key value
function GameAPI.get_projectile_key_unit_type_kv(projectile_key, key) end

--Gets the destructible number UNIT_TYPE key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.UnitType # Key value
function GameAPI.get_destructible_key_unit_type_kv(destructible_key, key) end

--Gets technology number UNIT_TYPE key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.UnitType # Key value
function GameAPI.get_tech_key_unit_type_kv(tech_key, key) end

--Gets image UNIT_TYPE key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.UnitType # Key value
function GameAPI.get_icon_id_unit_type_kv(icon_id, key) end

--Gets the logical physical component type UNIT_TYPE key-value pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.UnitType # Key value
function GameAPI.get_physics_entity_key_unit_type_kv(physics_entity_key, key) end

--Gets the unit number UNIT_COMMAND_TYPE key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.UnitCommandType # Key value
function GameAPI.get_unit_key_unit_command_type_kv(unit_key, key) end

--Gets the item number UNIT_COMMAND_TYPE key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.UnitCommandType # Key value
function GameAPI.get_item_key_unit_command_type_kv(item_key, key) end

--Gets the skill number UNIT_COMMAND_TYPE key-value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.UnitCommandType # Key value
function GameAPI.get_ability_key_unit_command_type_kv(ability_key, key) end

--Gets the Magic effect number UNIT_COMMAND_TYPE key-value pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.UnitCommandType # Key value
function GameAPI.get_modifier_key_unit_command_type_kv(modifier_key, key) end

--Gets the special effect number UNIT_COMMAND_TYPE key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.UnitCommandType # Key value
function GameAPI.get_projectile_key_unit_command_type_kv(projectile_key, key) end

--Gets the destructible number UNIT_COMMAND_TYPE key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.UnitCommandType # Key value
function GameAPI.get_destructible_key_unit_command_type_kv(destructible_key, key) end

--Gets the technology number UNIT_COMMAND_TYPE key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.UnitCommandType # Key value
function GameAPI.get_tech_key_unit_command_type_kv(tech_key, key) end

--Gets the image UNIT_COMMAND_TYPE key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.UnitCommandType # Key value
function GameAPI.get_icon_id_unit_command_type_kv(icon_id, key) end

--Gets the UNIT_COMMAND_TYPE key-value pair of the logical physical component type
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.UnitCommandType # Key value
function GameAPI.get_physics_entity_key_unit_command_type_kv(physics_entity_key, key) end

--Gets the unit number MINI_MAP_COLOR_TYPE key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.MiniMapColorType # Key value
function GameAPI.get_unit_key_mini_map_color_type_kv(unit_key, key) end

--Gets item number MINI_MAP_COLOR_TYPE key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.MiniMapColorType # Key value
function GameAPI.get_item_key_mini_map_color_type_kv(item_key, key) end

--Get the skill number MINI_MAP_COLOR_TYPE key-value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.MiniMapColorType # Key value
function GameAPI.get_ability_key_mini_map_color_type_kv(ability_key, key) end

--Gets the Magic effect number MINI_MAP_COLOR_TYPE key-value pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.MiniMapColorType # Key value
function GameAPI.get_modifier_key_mini_map_color_type_kv(modifier_key, key) end

--Gets the special effect number MINI_MAP_COLOR_TYPE key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.MiniMapColorType # Key value
function GameAPI.get_projectile_key_mini_map_color_type_kv(projectile_key, key) end

--Gets destructible number MINI_MAP_COLOR_TYPE key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.MiniMapColorType # Key value
function GameAPI.get_destructible_key_mini_map_color_type_kv(destructible_key, key) end

--Gets the technology number MINI_MAP_COLOR_TYPE key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.MiniMapColorType # Key value
function GameAPI.get_tech_key_mini_map_color_type_kv(tech_key, key) end

--Gets the picture MINI_MAP_COLOR_TYPE key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.MiniMapColorType # Key value
function GameAPI.get_icon_id_mini_map_color_type_kv(icon_id, key) end

--Gets the logical physical component type MINI_MAP_COLOR_TYPE key-value pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.MiniMapColorType # Key value
function GameAPI.get_physics_entity_key_mini_map_color_type_kv(physics_entity_key, key) end

--Get the UNIT_BEHAVIOR key pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.UnitBehavior # Key value
function GameAPI.get_unit_key_unit_behavior_kv(unit_key, key) end

--Gets the item number UNIT_BEHAVIOR key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.UnitBehavior # Key value
function GameAPI.get_item_key_unit_behavior_kv(item_key, key) end

--Get the skill number UNIT_BEHAVIOR key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.UnitBehavior # Key value
function GameAPI.get_ability_key_unit_behavior_kv(ability_key, key) end

--Get the Magic effect number UNIT_BEHAVIOR key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.UnitBehavior # Key value
function GameAPI.get_modifier_key_unit_behavior_kv(modifier_key, key) end

--Gets the special effect number UNIT_BEHAVIOR key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.UnitBehavior # Key value
function GameAPI.get_projectile_key_unit_behavior_kv(projectile_key, key) end

--Gets the destructible number UNIT_BEHAVIOR key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.UnitBehavior # Key value
function GameAPI.get_destructible_key_unit_behavior_kv(destructible_key, key) end

--Get the technology number UNIT_BEHAVIOR key pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.UnitBehavior # Key value
function GameAPI.get_tech_key_unit_behavior_kv(tech_key, key) end

--Gets the UNIT_BEHAVIOR key-value pair of the picture
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.UnitBehavior # Key value
function GameAPI.get_icon_id_unit_behavior_kv(icon_id, key) end

--Gets the UNIT_BEHAVIOR key pair of the logical physical component type
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.UnitBehavior # Key value
function GameAPI.get_physics_entity_key_unit_behavior_kv(physics_entity_key, key) end

--Get the key pair CURVED_PATH
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.CurvedPath # Key value
function GameAPI.get_unit_key_curved_path_kv(unit_key, key) end

--Gets the item number CURVED_PATH key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.CurvedPath # Key value
function GameAPI.get_item_key_curved_path_kv(item_key, key) end

--Obtain the skill number CURVED_PATH key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.CurvedPath # Key value
function GameAPI.get_ability_key_curved_path_kv(ability_key, key) end

--Gets the Magic effect number CURVED_PATH key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.CurvedPath # Key value
function GameAPI.get_modifier_key_curved_path_kv(modifier_key, key) end

--Gets the special effect number CURVED_PATH key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.CurvedPath # Key value
function GameAPI.get_projectile_key_curved_path_kv(projectile_key, key) end

--Gets the destructible number CURVED_PATH key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.CurvedPath # Key value
function GameAPI.get_destructible_key_curved_path_kv(destructible_key, key) end

--Gets the technology number CURVED_PATH key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.CurvedPath # Key value
function GameAPI.get_tech_key_curved_path_kv(tech_key, key) end

--Gets the image CURVED_PATH key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.CurvedPath # Key value
function GameAPI.get_icon_id_curved_path_kv(icon_id, key) end

--Obtain a key pair of the logical physical component type CURVED_PATH
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.CurvedPath # Key value
function GameAPI.get_physics_entity_key_curved_path_kv(physics_entity_key, key) end

--Get the unit number CURVED_PATH_3D key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.CurvedPath3D # Key value
function GameAPI.get_unit_key_curved_path_3d_kv(unit_key, key) end

--Gets the item number CURVED_PATH_3D key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.CurvedPath3D # Key value
function GameAPI.get_item_key_curved_path_3d_kv(item_key, key) end

--Get the skill number CURVED_PATH_3D key value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.CurvedPath3D # Key value
function GameAPI.get_ability_key_curved_path_3d_kv(ability_key, key) end

--Get the Magic effect number CURVED_PATH_3D key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.CurvedPath3D # Key value
function GameAPI.get_modifier_key_curved_path_3d_kv(modifier_key, key) end

--Gets the special effect number CURVED_PATH_3D key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.CurvedPath3D # Key value
function GameAPI.get_projectile_key_curved_path_3d_kv(projectile_key, key) end

--Gets the destructible number CURVED_PATH_3D key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.CurvedPath3D # Key value
function GameAPI.get_destructible_key_curved_path_3d_kv(destructible_key, key) end

--Gets the technology number CURVED_PATH_3D key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.CurvedPath3D # Key value
function GameAPI.get_tech_key_curved_path_3d_kv(tech_key, key) end

--Get the image CURVED_PATH_3D key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.CurvedPath3D # Key value
function GameAPI.get_icon_id_curved_path_3d_kv(icon_id, key) end

--Obtain a logical physical component type CURVED_PATH_3D key and value pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.CurvedPath3D # Key value
function GameAPI.get_physics_entity_key_curved_path_3d_kv(physics_entity_key, key) end

--Sets an item in the COIN_CURRENCY array
---@param l py.List # list
---@param i integer # subscript
---@param v py.COIN_CURRENCY # value
function GameAPI.set_coin_currency_list_value(l, i, v) end

--Generates an array of n COIN_CURRENCY values of v
---@param n integer # Length
---@param v? py.COIN_CURRENCY # value
---@return py.List # list
function GameAPI.get_coin_currency_n_list(n, v) end

--Gets an item in the MAP array
---@param l py.List # list
---@param i integer # subscript
---@return py.Map # value
function GameAPI.get_map_list_value(l, i) end

--Sets an item in the MAP array
---@param l py.List # list
---@param i integer # subscript
---@param v py.Map # value
function GameAPI.set_map_list_value(l, i, v) end

--Generates an array of n maps with the value v
---@param n integer # Length
---@param v? py.Map # value
---@return py.List # list
function GameAPI.get_map_n_list(n, v) end

--Gets an item in the UI_EQUIP_SLOT_USE_TYPE array
---@param l py.List # list
---@param i integer # subscript
---@return integer # value
function GameAPI.get_ui_equip_slot_use_type_list_value(l, i) end

--Set an item in the UI_EQUIP_SLOT_USE_TYPE array
---@param l py.List # list
---@param i integer # subscript
---@param v integer # value
function GameAPI.set_ui_equip_slot_use_type_list_value(l, i, v) end

--Generates an array of n UI_EQUIP_SLOT_USE_TYPE values of v
---@param n integer # Length
---@param v? integer # value
---@return py.List # list
function GameAPI.get_ui_equip_slot_use_type_n_list(n, v) end

--Gets an item in the UI_EQUIP_SLOT_DRAG_TYPE array
---@param l py.List # list
---@param i integer # subscript
---@return integer # value
function GameAPI.get_ui_equip_slot_drag_type_list_value(l, i) end

--Set an item in the UI_EQUIP_SLOT_DRAG_TYPE array
---@param l py.List # list
---@param i integer # subscript
---@param v integer # value
function GameAPI.set_ui_equip_slot_drag_type_list_value(l, i, v) end

--Generates an array of n UI_EQUIP_SLOT_DRAG_TYPE values of v
---@param n integer # Length
---@param v? integer # value
---@return py.List # list
function GameAPI.get_ui_equip_slot_drag_type_n_list(n, v) end

--Gets an item in the LIVE2D array
---@param l py.List # list
---@param i integer # subscript
---@return py.Live2dKey # value
function GameAPI.get_live2d_list_value(l, i) end

--Sets an item in the LIVE2D array
---@param l py.List # list
---@param i integer # subscript
---@param v py.Live2dKey # value
function GameAPI.set_live2d_list_value(l, i, v) end

--Generates an array of n LIVE2D values of v
---@param n integer # Length
---@param v? py.Live2dKey # value
---@return py.List # list
function GameAPI.get_live2d_n_list(n, v) end

--Gets an item in the UI_TEXT_OVER_LENGTH_HANDLING_TYPE array
---@param l py.List # list
---@param i integer # subscript
---@return integer # value
function GameAPI.get_ui_text_over_length_handling_type_list_value(l, i) end

--Set an item in the UI_TEXT_OVER_LENGTH_HANDLING_TYPE array
---@param l py.List # list
---@param i integer # subscript
---@param v integer # value
function GameAPI.set_ui_text_over_length_handling_type_list_value(l, i, v) end

--Generates n UI_TEXT_OVER_LENGTH_HANDLING_TYPE arrays with values of v
---@param n integer # Length
---@param v? integer # value
---@return py.List # list
function GameAPI.get_ui_text_over_length_handling_type_n_list(n, v) end

--Gets an item in the UI_LAYOUT_CLIPPING_TYPE array
---@param l py.List # list
---@param i integer # subscript
---@return integer # value
function GameAPI.get_ui_layout_clipping_type_list_value(l, i) end

--Sets an item in the UI_LAYOUT_CLIPPING_TYPE array
---@param l py.List # list
---@param i integer # subscript
---@param v integer # value
function GameAPI.set_ui_layout_clipping_type_list_value(l, i, v) end

--Generates n UI_LAYOUT_CLIPPING_TYPE arrays of value v
---@param n integer # Length
---@param v? integer # value
---@return py.List # list
function GameAPI.get_ui_layout_clipping_type_n_list(n, v) end

--Gets an item in the UI_GRIDVIEW_TYPE array
---@param l py.List # list
---@param i integer # subscript
---@return integer # value
function GameAPI.get_ui_gridview_type_list_value(l, i) end

--Sets an item in the UI_GRIDVIEW_TYPE array
---@param l py.List # list
---@param i integer # subscript
---@param v integer # value
function GameAPI.set_ui_gridview_type_list_value(l, i, v) end

--Generates n UI_GRIDVIEW_TYPE arrays of value v
---@param n integer # Length
---@param v? integer # value
---@return py.List # list
function GameAPI.get_ui_gridview_type_n_list(n, v) end

--Gets an item in the UI_GRIDVIEW_BAR_TYPE array
---@param l py.List # list
---@param i integer # subscript
---@return integer # value
function GameAPI.get_ui_gridview_bar_type_list_value(l, i) end

--Sets an item in the UI_GRIDVIEW_BAR_TYPE array
---@param l py.List # list
---@param i integer # subscript
---@param v integer # value
function GameAPI.set_ui_gridview_bar_type_list_value(l, i, v) end

--Generates n UI_GRIDVIEW_BAR_TYPE arrays of value v
---@param n integer # Length
---@param v? integer # value
---@return py.List # list
function GameAPI.get_ui_gridview_bar_type_n_list(n, v) end

--Gets an entry in the UI_EFFECT_CAMERA_MODE array
---@param l py.List # list
---@param i integer # subscript
---@return integer # value
function GameAPI.get_ui_effect_camera_mode_list_value(l, i) end

--Set an item in the UI_EFFECT_CAMERA_MODE array
---@param l py.List # list
---@param i integer # subscript
---@param v integer # value
function GameAPI.set_ui_effect_camera_mode_list_value(l, i, v) end

--Generates an array of n UI_EFFECT_CAMERA_MODE with the value v
---@param n integer # Length
---@param v? integer # value
---@return py.List # list
function GameAPI.get_ui_effect_camera_mode_n_list(n, v) end

--Gets an item in the UI_POS_ADAPT_MODE array
---@param l py.List # list
---@param i integer # subscript
---@return integer # value
function GameAPI.get_ui_pos_adapt_mode_list_value(l, i) end

--Sets an item in the UI_POS_ADAPT_MODE array
---@param l py.List # list
---@param i integer # subscript
---@param v integer # value
function GameAPI.set_ui_pos_adapt_mode_list_value(l, i, v) end

--Generates n UI_POS_ADAPT_MODE arrays with value v
---@param n integer # Length
---@param v? integer # value
---@return py.List # list
function GameAPI.get_ui_pos_adapt_mode_n_list(n, v) end

--Gets an item in the GOODS_KEY array
---@param l py.List # list
---@param i integer # subscript
---@return py.GoodsKey # value
function GameAPI.get_goods_key_list_value(l, i) end

--Sets an item in the GOODS_KEY array
---@param l py.List # list
---@param i integer # subscript
---@param v py.GoodsKey # value
function GameAPI.set_goods_key_list_value(l, i, v) end

--Generates n GOODS_KEY arrays of value v
---@param n integer # Length
---@param v? py.GoodsKey # value
---@return py.List # list
function GameAPI.get_goods_key_n_list(n, v) end

--Gets an item in the UI_CHAT_SEND_CHANNEL array
---@param l py.List # list
---@param i integer # subscript
---@return integer # value
function GameAPI.get_ui_chat_send_channel_list_value(l, i) end

--Sets an item in the UI_CHAT_SEND_CHANNEL array
---@param l py.List # list
---@param i integer # subscript
---@param v integer # value
function GameAPI.set_ui_chat_send_channel_list_value(l, i, v) end

--Generates n UI_CHAT_SEND_CHANNEL arrays with value v
---@param n integer # Length
---@param v? integer # value
---@return py.List # list
function GameAPI.get_ui_chat_send_channel_n_list(n, v) end

--Gets an item in the UI_CHAT_RECV_CHANNEL array
---@param l py.List # list
---@param i integer # subscript
---@return integer # value
function GameAPI.get_ui_chat_recv_channel_list_value(l, i) end

--Sets an item in the UI_CHAT_RECV_CHANNEL array
---@param l py.List # list
---@param i integer # subscript
---@param v integer # value
function GameAPI.set_ui_chat_recv_channel_list_value(l, i, v) end

--Generates n UI_CHAT_RECV_CHANNEL arrays of value v
---@param n integer # Length
---@param v? integer # value
---@return py.List # list
function GameAPI.get_ui_chat_recv_channel_n_list(n, v) end

--Gets an item in the ATTACH_MODEL_ENTITY array
---@param l py.List # list
---@param i integer # subscript
---@return py.AttachModelEntity # value
function GameAPI.get_attach_model_entity_list_value(l, i) end

--Sets an item in the ATTACH_MODEL_ENTITY array
---@param l py.List # list
---@param i integer # subscript
---@param v py.AttachModelEntity # value
function GameAPI.set_attach_model_entity_list_value(l, i, v) end

--Generate n ATTACH_MODEL_ENTITY arrays of value v
---@param n integer # Length
---@param v? py.AttachModelEntity # value
---@return py.List # list
function GameAPI.get_attach_model_entity_n_list(n, v) end

--The default library adds UI_GRIDVIEW_TYPE key-value pairs
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_unit_key_ui_gridview_type_kv(item_key, key, value) end

--The default library adds UI_GRIDVIEW_BAR_TYPE key-value pairs
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_unit_key_ui_gridview_bar_type_kv(item_key, key, value) end

--The default library adds a UI_EFFECT_CAMERA_MODE key pair
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_unit_key_ui_effect_camera_mode_kv(item_key, key, value) end

--Add a UI_EQUIP_SLOT_USE_TYPE key and value pair to the default library
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_unit_key_ui_equip_slot_use_type_kv(item_key, key, value) end

--Add a UI_EQUIP_SLOT_DRAG_TYPE key and value pair to the default library
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_unit_key_ui_equip_slot_drag_type_kv(item_key, key, value) end

--The default library adds UI_LAYOUT_CLIPPING_TYPE key-value pair
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_unit_key_ui_layout_clipping_type_kv(item_key, key, value) end

--Add UI_TEXT_OVER_LENGTH_HANDLING_TYPE key-value pairs to the default library
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_unit_key_ui_text_over_length_handling_type_kv(item_key, key, value) end

--The default library adds UI_POS_ADAPT_MODE key-value pairs
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_unit_key_ui_pos_adapt_mode_kv(item_key, key, value) end

--The default library adds UI_CHAT_SEND_CHANNEL key-value pairs
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_unit_key_ui_chat_send_channel_kv(item_key, key, value) end

--The default library adds UI_CHAT_RECV_CHANNEL key-value pairs
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_unit_key_ui_chat_recv_channel_kv(item_key, key, value) end

--The default library adds UI_ANIM_PLAY_MODE key-value pairs
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_unit_key_ui_anim_play_mode_kv(item_key, key, value) end

--The default library adds a UI_TEXT_FONT_NAME key-value pair
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_unit_key_ui_text_font_name_kv(item_key, key, value) end

--The default library adds UI_ECA_ANIM_TYPE key-value pairs
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_unit_key_ui_eca_anim_type_kv(item_key, key, value) end

--Add LOCAL_UNIT_GROUP key-value pairs to the default library
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_unit_key_local_unit_group_kv(item_key, key, value) end

--Add DAMAGE_ATTACK_TYPE key-value pair to the default library
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_unit_key_damage_attack_type_kv(item_key, key, value) end

--Add DAMAGE_ARMOR_TYPE key-value pairs to the default library
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_unit_key_damage_armor_type_kv(item_key, key, value) end

--The default library adds an ITEM_STACK_TYPE key-value pair
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_unit_key_item_stack_type_kv(item_key, key, value) end

--The default library adds the ABILITY_RELEASE_ID key-value pair
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_unit_key_ability_release_id_kv(item_key, key, value) end

--The SLOT_TYPE key pair is added to the default library
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_unit_key_slot_type_kv(item_key, key, value) end

--The default library adds UI_POINT key-value pairs
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_unit_key_ui_point_kv(item_key, key, value) end

--The default library adds ATTACH_MODEL_ENTITY key-value pairs
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_unit_key_attach_model_entity_kv(item_key, key, value) end

--Default libraries add LIVE2D key-value pairs
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_unit_key_live2d_kv(item_key, key, value) end

--The default library adds a SPINE key-value pair
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_unit_key_spine_kv(item_key, key, value) end

--The default library adds a FORCE_ENTITY key-value pair
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_unit_key_force_entity_kv(item_key, key, value) end

--The default library adds GOODS_KEY key-value pairs
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_unit_key_goods_key_kv(item_key, key, value) end

--The default library adds a MOUSE_KEY_WITHOUT_MIDDLE key-value pair
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_unit_key_mouse_key_without_middle_kv(item_key, key, value) end

--The default library adds MAP key-value pairs
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_unit_key_map_kv(item_key, key, value) end

--Adds a UNIT_GROUP_COMMAND_TYPE key-value pair to the default library
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_unit_key_unit_group_command_type_kv(item_key, key, value) end

--Add RESCUE_SEEKER_TYPE key-value pair to the preset library
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_unit_key_rescue_seeker_type_kv(item_key, key, value) end

--Add RESCUER_TYPE key-value pair to preset library
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_unit_key_rescuer_type_kv(item_key, key, value) end

--The default library adds STORE_ITEM_TYPE key-value pairs
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_unit_key_store_item_type_kv(item_key, key, value) end

--Default libraries add SITE_STATE key-value pairs
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_unit_key_site_state_kv(item_key, key, value) end

--The default library adds a COIN_CURRENCY key-value pair
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_unit_key_coin_currency_kv(item_key, key, value) end

--The default library adds UI_GRIDVIEW_TYPE key-value pairs
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_item_key_ui_gridview_type_kv(item_key, key, value) end

--The default library adds UI_GRIDVIEW_BAR_TYPE key-value pairs
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_item_key_ui_gridview_bar_type_kv(item_key, key, value) end

--The default library adds a UI_EFFECT_CAMERA_MODE key pair
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_item_key_ui_effect_camera_mode_kv(item_key, key, value) end

--Add a UI_EQUIP_SLOT_USE_TYPE key and value pair to the default library
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_item_key_ui_equip_slot_use_type_kv(item_key, key, value) end

--Add a UI_EQUIP_SLOT_DRAG_TYPE key and value pair to the default library
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_item_key_ui_equip_slot_drag_type_kv(item_key, key, value) end

--The default library adds UI_LAYOUT_CLIPPING_TYPE key-value pair
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_item_key_ui_layout_clipping_type_kv(item_key, key, value) end

--Add UI_TEXT_OVER_LENGTH_HANDLING_TYPE key-value pairs to the default library
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_item_key_ui_text_over_length_handling_type_kv(item_key, key, value) end

--The default library adds UI_POS_ADAPT_MODE key-value pairs
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_item_key_ui_pos_adapt_mode_kv(item_key, key, value) end

--The default library adds UI_CHAT_SEND_CHANNEL key-value pairs
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_item_key_ui_chat_send_channel_kv(item_key, key, value) end

--The default library adds UI_CHAT_RECV_CHANNEL key-value pairs
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_item_key_ui_chat_recv_channel_kv(item_key, key, value) end

--The default library adds UI_ANIM_PLAY_MODE key-value pairs
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_item_key_ui_anim_play_mode_kv(item_key, key, value) end

--The default library adds a UI_TEXT_FONT_NAME key-value pair
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_item_key_ui_text_font_name_kv(item_key, key, value) end

--The default library adds UI_ECA_ANIM_TYPE key-value pairs
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_item_key_ui_eca_anim_type_kv(item_key, key, value) end

--Add LOCAL_UNIT_GROUP key-value pairs to the default library
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_item_key_local_unit_group_kv(item_key, key, value) end

--Add DAMAGE_ATTACK_TYPE key-value pair to the default library
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_item_key_damage_attack_type_kv(item_key, key, value) end

--Add DAMAGE_ARMOR_TYPE key-value pairs to the default library
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_item_key_damage_armor_type_kv(item_key, key, value) end

--The default library adds an ITEM_STACK_TYPE key-value pair
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_item_key_item_stack_type_kv(item_key, key, value) end

--The default library adds the ABILITY_RELEASE_ID key-value pair
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_item_key_ability_release_id_kv(item_key, key, value) end

--The SLOT_TYPE key pair is added to the default library
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_item_key_slot_type_kv(item_key, key, value) end

--The default library adds UI_POINT key-value pairs
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_item_key_ui_point_kv(item_key, key, value) end

--The default library adds ATTACH_MODEL_ENTITY key-value pairs
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_item_key_attach_model_entity_kv(item_key, key, value) end

--Default libraries add LIVE2D key-value pairs
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_item_key_live2d_kv(item_key, key, value) end

--The default library adds a SPINE key-value pair
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_item_key_spine_kv(item_key, key, value) end

--The default library adds a FORCE_ENTITY key-value pair
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_item_key_force_entity_kv(item_key, key, value) end

--The default library adds GOODS_KEY key-value pairs
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_item_key_goods_key_kv(item_key, key, value) end

--The default library adds a MOUSE_KEY_WITHOUT_MIDDLE key-value pair
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_item_key_mouse_key_without_middle_kv(item_key, key, value) end

--The default library adds MAP key-value pairs
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_item_key_map_kv(item_key, key, value) end

--Adds a UNIT_GROUP_COMMAND_TYPE key-value pair to the default library
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_item_key_unit_group_command_type_kv(item_key, key, value) end

--Add RESCUE_SEEKER_TYPE key-value pair to the preset library
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_item_key_rescue_seeker_type_kv(item_key, key, value) end

--Add RESCUER_TYPE key-value pair to preset library
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_item_key_rescuer_type_kv(item_key, key, value) end

--The default library adds STORE_ITEM_TYPE key-value pairs
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_item_key_store_item_type_kv(item_key, key, value) end

--Default libraries add SITE_STATE key-value pairs
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_item_key_site_state_kv(item_key, key, value) end

--The default library adds a COIN_CURRENCY key-value pair
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_item_key_coin_currency_kv(item_key, key, value) end

--The default library adds UI_GRIDVIEW_TYPE key-value pairs
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_ability_key_ui_gridview_type_kv(item_key, key, value) end

--The default library adds UI_GRIDVIEW_BAR_TYPE key-value pairs
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_ability_key_ui_gridview_bar_type_kv(item_key, key, value) end

--The default library adds a UI_EFFECT_CAMERA_MODE key pair
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_ability_key_ui_effect_camera_mode_kv(item_key, key, value) end

--Add a UI_EQUIP_SLOT_USE_TYPE key and value pair to the default library
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_ability_key_ui_equip_slot_use_type_kv(item_key, key, value) end

--Add a UI_EQUIP_SLOT_DRAG_TYPE key and value pair to the default library
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_ability_key_ui_equip_slot_drag_type_kv(item_key, key, value) end

--The default library adds UI_LAYOUT_CLIPPING_TYPE key-value pair
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_ability_key_ui_layout_clipping_type_kv(item_key, key, value) end

--Add UI_TEXT_OVER_LENGTH_HANDLING_TYPE key-value pairs to the default library
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_ability_key_ui_text_over_length_handling_type_kv(item_key, key, value) end

--The default library adds UI_POS_ADAPT_MODE key-value pairs
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_ability_key_ui_pos_adapt_mode_kv(item_key, key, value) end

--The default library adds UI_CHAT_SEND_CHANNEL key-value pairs
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_ability_key_ui_chat_send_channel_kv(item_key, key, value) end

--The default library adds UI_CHAT_RECV_CHANNEL key-value pairs
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_ability_key_ui_chat_recv_channel_kv(item_key, key, value) end

--The default library adds UI_ANIM_PLAY_MODE key-value pairs
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_ability_key_ui_anim_play_mode_kv(item_key, key, value) end

--The default library adds a UI_TEXT_FONT_NAME key-value pair
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_ability_key_ui_text_font_name_kv(item_key, key, value) end

--The default library adds UI_ECA_ANIM_TYPE key-value pairs
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_ability_key_ui_eca_anim_type_kv(item_key, key, value) end

--Add LOCAL_UNIT_GROUP key-value pairs to the default library
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_ability_key_local_unit_group_kv(item_key, key, value) end

--Add DAMAGE_ATTACK_TYPE key-value pair to the default library
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_ability_key_damage_attack_type_kv(item_key, key, value) end

--Add DAMAGE_ARMOR_TYPE key-value pairs to the default library
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_ability_key_damage_armor_type_kv(item_key, key, value) end

--The default library adds an ITEM_STACK_TYPE key-value pair
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_ability_key_item_stack_type_kv(item_key, key, value) end

--The default library adds the ABILITY_RELEASE_ID key-value pair
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_ability_key_ability_release_id_kv(item_key, key, value) end

--The SLOT_TYPE key pair is added to the default library
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_ability_key_slot_type_kv(item_key, key, value) end

--The default library adds UI_POINT key-value pairs
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_ability_key_ui_point_kv(item_key, key, value) end

--The default library adds ATTACH_MODEL_ENTITY key-value pairs
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_ability_key_attach_model_entity_kv(item_key, key, value) end

--Default libraries add LIVE2D key-value pairs
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_ability_key_live2d_kv(item_key, key, value) end

--The default library adds a SPINE key-value pair
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_ability_key_spine_kv(item_key, key, value) end

--The default library adds a FORCE_ENTITY key-value pair
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_ability_key_force_entity_kv(item_key, key, value) end

--The default library adds GOODS_KEY key-value pairs
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_ability_key_goods_key_kv(item_key, key, value) end

--The default library adds a MOUSE_KEY_WITHOUT_MIDDLE key-value pair
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_ability_key_mouse_key_without_middle_kv(item_key, key, value) end

--The default library adds MAP key-value pairs
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_ability_key_map_kv(item_key, key, value) end

--Adds a UNIT_GROUP_COMMAND_TYPE key-value pair to the default library
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_ability_key_unit_group_command_type_kv(item_key, key, value) end

--Add RESCUE_SEEKER_TYPE key-value pair to the preset library
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_ability_key_rescue_seeker_type_kv(item_key, key, value) end

--Add RESCUER_TYPE key-value pair to preset library
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_ability_key_rescuer_type_kv(item_key, key, value) end

--The default library adds STORE_ITEM_TYPE key-value pairs
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_ability_key_store_item_type_kv(item_key, key, value) end

--Default libraries add SITE_STATE key-value pairs
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_ability_key_site_state_kv(item_key, key, value) end

--The default library adds a COIN_CURRENCY key-value pair
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_ability_key_coin_currency_kv(item_key, key, value) end

--A hook model for traversing magic effects
---@param modifier_entity py.ModifierEntity # Magic effect
---@param model_key py.ModelKey # Model type
---@param color string # colour
---@param exp number # exponent
---@param strength number # intensity
function GameAPI.set_attach_model_fresnel(modifier_entity, model_key, color, exp, strength) end

--Gets the number of item groups
---@param item_group py.ItemGroup # Item group
---@return integer # Item group quantity
function GameAPI.api_get_item_group_length(item_group) end

--Get the item type number
---@param item_key py.ItemKey # Item number
---@return py.ItemKey # Item number
function GameAPI.api_get_item_type_id(item_key) end

--Gets the stack type of the item type
---@param item_key py.ItemKey # Item number
---@return py.ItemStackType # Item number
function GameAPI.api_get_item_stack_type_id(item_key) end

--Item groups intersect
---@param group1 py.ItemGroup # Item group 1
---@param group2 py.ItemGroup # Item Group 2
---@return py.ItemGroup # Item group
function GameAPI.api_get_item_group_intersection(group1, group2) end

--Item group takes difference set
---@param group1 py.ItemGroup # Item group 1
---@param group2 py.ItemGroup # Item Group 2
---@return py.ItemGroup # Item group
function GameAPI.api_get_item_group_diff(group1, group2) end

--Swap items according to slot
---@param unit py.Unit # unit
---@param slot_type_1 py.SlotType # Item slot type
---@param slot_id_1 integer # Slot ID
---@param slot_type_2 py.SlotType # Item slot type
---@param slot_id_2 integer # Slot ID
function GameAPI.api_switch_unit_item_slot_by_slot_id(unit, slot_type_1, slot_id_1, slot_type_2, slot_id_2) end

--barter
---@param item1 py.Item # item
---@param item2 py.Item # item
function GameAPI.api_switch_item_slot(item1, item2) end

--Sets whether in-game item names are displayed permanently
---@param permanent_show boolean # Display resident or not
function GameAPI.set_item_name_permanent_show_config(permanent_show) end

--Call the screenshot function in Lua
---@param path string # Relative path under LocalData
---@param file_name string # filename
---@param width? integer # Picture width
---@param height? integer # Picture height
function GameAPI.screenshot_func_for_lua(path, file_name, width, height) end

--Disable all ECA global triggers
function GameAPI.disable_all_eca_triggers() end

--The motor lost track of the target
---@param mover_id py.Mover # Kinetoscope
function GameAPI.mover_miss_target(mover_id) end

--A motion device for obtaining projectiles
---@param projectile py.ProjectileEntity # Projectile object
---@return py.Mover # Kinetoscope
function GameAPI.get_projectile_mover(projectile) end

--Gets the motor associated projectile
---@param mover_id py.Mover # Kinetoscope
---@return py.ProjectileEntity # Associated projectile
function GameAPI.get_mover_relate_projectile(mover_id) end

--Custom move
---@param pos py.FVector3 # position
---@param take_static_collision boolean # Consider non-terrain static blocking
---@param take_dynamic_collision boolean # Considered dynamic blocking
---@return py.UnitCommand # Unit command
function GameAPI.create_unit_command_customized_move_to_pos(pos, take_static_collision, take_dynamic_collision) end

--Move to three-dimensional coordinates
---@param pos py.FVector3 # position
---@param nav_range? py.Fixed # Pathfinding range
---@return py.UnitCommand # Unit command
function GameAPI.create_unit_command_move_to_pos_3D(pos, nav_range) end

--Hold to three dimensional coordinates
---@param pos py.FVector3 # position
---@return py.UnitCommand # Unit command
function GameAPI.create_unit_command_hold_3D(pos) end

--Attack target point
---@param point py.Point # Release point
---@return py.UnitCommand # Unit command
function GameAPI.create_unit_command_attack_point(point) end

--Go the rounds
---@param pos py.Unit # Target point
---@return py.UnitCommand # Unit command
function GameAPI.create_unit_command_patrol(pos) end

--Issue an order
---@param group py.UnitGroup # Unit group
---@param command py.UnitCommand # command
function GameAPI.api_release_group_command(group, command) end

--Move
---@param pos py.FVector3 # position
---@param nav_range? py.Fixed # Pathfinding range
---@param organization? boolean # Formation or not
---@return py.UnitCommand # Unit command
function GameAPI.create_unit_group_command_move_to_pos(pos, nav_range, organization) end

--stop
---@return py.UnitCommand # Unit command
function GameAPI.create_unit_group_command_stop() end

--Null status
---@return py.UnitCommand # Unit command
function GameAPI.create_unit_group_command_empty() end

--garrison
---@param pos py.FVector3 # position
---@return py.UnitCommand # Unit command
function GameAPI.create_unit_group_command_hold(pos) end

--Attack movement
---@param pos py.FVector3 # position
---@param nav_range? py.Fixed # Pathfinding range
---@param organization? boolean # Formation or not
---@return py.UnitCommand # Unit command
function GameAPI.create_unit_group_command_attack_move(pos, nav_range, organization) end

--Attack
---@param target py.Actor # goal
---@param nav_range? py.Fixed # Pathfinding range
---@return py.UnitCommand # Unit command
function GameAPI.create_unit_group_command_attack_target(target, nav_range) end

--Path movement
---@param road py.Road # path
---@param patrol_mode integer # Moving mode
---@param can_attack boolean # Active attack or not
---@param start_from_nearest? boolean # Whether to start nearby
---@param back_to_nearest? boolean # Whether to return nearby
---@return py.UnitCommand # Unit command
function GameAPI.create_unit_group_command_move_along_road(road, patrol_mode, can_attack, start_from_nearest, back_to_nearest) end

--Follow
---@param target py.Unit # goal
---@param refresh_interval? py.Fixed # interval
---@param near_offset? py.Fixed # Following distance
---@param far_offset? py.Fixed # Refollowing distance
---@param follow_angle? py.Fixed # Following Angle
---@param follow_dead_target? boolean # Follow the death target
---@return py.UnitCommand # Unit command
function GameAPI.create_unit_group_command_follow(target, refresh_interval, near_offset, far_offset, follow_angle, follow_dead_target) end

--Move to a random location
---@param area py.Area # region
---@param r? py.Fixed # Pathfinding range
---@return py.UnitCommand # Unit command
function GameAPI.create_unit_group_command_move_to_random_pos(area, r) end

--The attack moves to a random location
---@param area py.Area # region
---@param r? py.Fixed # Pathfinding range
---@return py.UnitCommand # Unit command
function GameAPI.create_unit_group_command_attack_move_random_pos(area, r) end

--Attack target point
---@param point py.Point # Release point
---@return py.UnitCommand # Unit command
function GameAPI.create_unit_group_command_attack_point(point) end

--Go the rounds
---@param point py.Point # Target point
---@return py.UnitCommand # Unit command
function GameAPI.create_unit_group_command_patrol(point) end

--Special effect switch
---@param role py.Role # Player
---@param tag integer # Special effects tag
---@param switch boolean # Switch
function GameAPI.set_player_sfx_switch_by_tag(role, tag, switch) end

--Create effects to the point
---@param sfx_id py.SfxKey # Special effect number
---@param point py.Point # point
---@param face_angle number # Angle oriented
---@param speed number # Playback speed
---@param height number # Altitude
---@param duration number # duration
---@param immediately? boolean # Whether to delete now
---@param use_sys_d_destroy_way? boolean # Effects delete the way to read table or not
---@param show_in_fog? boolean # Show in the mist
---@param blend_with_fog? boolean # Fog mixing
---@param scale_x? number # X-axis scaling
---@param scale_y? number # Y-axis scaling
---@param scale_z? number # Z-axis scaling
---@return py.Sfx # VFX
function GameAPI.create_sfx_on_point_new(sfx_id, point, face_angle, speed, height, duration, immediately, use_sys_d_destroy_way, show_in_fog, blend_with_fog, scale_x, scale_y, scale_z) end

--Create effects to unit attachment points (follow rotation using enumerations)
---@param sfx_id py.SfxKey # Special effect number
---@param unit py.Unit # unit
---@param socket string # Unit mounting contact
---@param rotate_type integer # Follow rotation mode
---@param b_follow_scale boolean # Whether to scale with units
---@param speed? number # Playback speed
---@param duration? number # duration
---@param angle? number # Angle
---@param immediately? boolean # Whether to delete now
---@param use_sys_d_destroy_way? boolean # Effects delete the way to read table or not
---@param detach? boolean # Whether to leave the unit
---@param show_in_fog? boolean # Show in the mist
---@param blend_with_fog? boolean # Fog mixing
---@param scale_x? number # X-axis scaling
---@param scale_y? number # Y-axis scaling
---@param scale_z? number # Z-axis scaling
---@return py.Sfx # VFX
function GameAPI.create_sfx_on_unit_new_new(sfx_id, unit, socket, rotate_type, b_follow_scale, speed, duration, angle, immediately, use_sys_d_destroy_way, detach, show_in_fog, blend_with_fog, scale_x, scale_y, scale_z) end

--Create effects to Magic effects hook model (follow rotation using enumeration)
---@param sfx_id py.SfxKey # Special effect number
---@param unit py.ModifierEntity # Magic effect
---@param editor_model_id py.ModelKey # id of the mount model
---@param socket string # Unit mounting contact
---@param rotate_type integer # Follow rotation mode
---@param b_follow_scale boolean # Whether to scale with units
---@param speed? number # Playback speed
---@param duration? number # duration
---@param angle? number # Angle
---@param immediately? boolean # Whether to delete now
---@param use_sys_d_destroy_way? boolean # Effects delete the way to read table or not
---@param detach? boolean # Whether to leave the unit
---@param show_in_fog? boolean # Show in the mist
---@param blend_with_fog? boolean # Fog mixing
---@param scale_x? number # X-axis scaling
---@param scale_y? number # Y-axis scaling
---@param scale_z? number # Z-axis scaling
---@return py.Sfx # VFX
function GameAPI.create_sfx_on_modifier_attach_model(sfx_id, unit, editor_model_id, socket, rotate_type, b_follow_scale, speed, duration, angle, immediately, use_sys_d_destroy_way, detach, show_in_fog, blend_with_fog, scale_x, scale_y, scale_z) end

--Set the effect color (HEX)
---@param sfx_entity py.Sfx # VFX
---@param color string # hex
---@param w number # w
function GameAPI.set_sfx_color_hex(sfx_entity, color, w) end

--tag the points
---@param fixvec3 py.Point # point
---@param tag string # tag
function GameAPI.add_point_tag(fixvec3, tag) end

--Untag the point
---@param fixvec3 py.Point # point
---@param tag string # tag
function GameAPI.remove_point_tag(fixvec3, tag) end

--Obtains the corresponding point from the tag
---@param tag string # tag
---@return py.List # list
function GameAPI.get_points_by_tag(tag) end

--Whether a region owns a tag
---@param area py.Area # region
---@param tag string # tag
---@return boolean # Boolean value
function GameAPI.if_area_has_tag(area, tag) end

--Reset the center point and radius of the circle area
---@param area py.CirArea # Circular region
---@param center_point py.Point # Central point
---@param radius py.Fixed # radius
function GameAPI.api_reset_cir_area(area, center_point, radius) end

--Reset the start and end of the rectangular area
---@param area py.RecArea # Rectangular region
---@param point_begin py.Point # Initial point
---@param point_end py.Point # End point
function GameAPI.api_reset_rect_two_point(area, point_begin, point_end) end

--Gets the current map version id
---@return py.MapId # Map version id
function GameAPI.get_map_id() end

--Gets the current uppass env
---@return py.UppassEnv # uppass env
function GameAPI.get_uppass_env() end

--Perform a memory garbage collection to free up memory. It will cause the game to be short, it is recommended to call in the time when the scene can receive the delay
function GameAPI.api_collect_garbage() end

--Get current level
---@return py.Map # Current level
function GameAPI.get_current_level() end

--Create terrain presets
---@param point py.Point # point
---@param level_id_str py.Map # Level ID
---@param has_light? boolean # Carry lights or not
---@param has_decoration? boolean # Whether to carry decorations
---@param has_fog? boolean # Whether to carry fog effect
---@param has_projectile? boolean # Whether to carry projectiles
---@param has_item? boolean # Whether to bring goods
---@param has_destructible? boolean # Whether to carry destructible material
---@param has_collision? boolean # Carry or not collision
---@param rotate? integer # Rotation Angle
function GameAPI.load_sub_scene(point, level_id_str, has_light, has_decoration, has_fog, has_projectile, has_item, has_destructible, has_collision, rotate) end

--Gets the string archive value of the specified key for the current map
---@param key string # The specified global archive key value
---@return string # String global archive value
function GameAPI.get_global_map_str_archive(key) end

--Gets the suffix id of the NTH player nickname for the personal save field specified by the player
---@param archive_key integer # Player save field
---@param num integer # n Place
---@return string # Suffix id
function GameAPI.get_archive_rank_player_tag(archive_key, num) end

--Gets the aid of the player who is ranked in the leaderboard
---@param archive_key integer # Integer archive
---@param num integer # Ranking
---@return string # Player aid
function GameAPI.get_aid_by_rank_info(archive_key, num) end

--Obtain the version of the local engine
---@return integer # Version of the local engine
function GameAPI.get_local_engine_version() end

--Obtain the latest engine version
---@param http_data string # http data
---@return integer # Latest engine version number
function GameAPI.get_latest_engine_version(http_data) end

--Get the local map version number
---@return string # Local map version number
function GameAPI.get_local_map_id() end

--Get the latest map version number
---@param http_data string # http data
---@return string # Latest map version number
function GameAPI.get_latest_map_id(http_data) end

--Gets the logical frame rate
---@return integer # Logical frame rate
function GameAPI.api_get_logic_fps() end

--Upload the buried data
---@param role py.Role # Player
---@param op_key string # Buried Key
---@param op_cnt integer # frequency
function GameAPI.api_upload_user_tracking_data(role, op_key, op_cnt) end

--Record user-defined logs for locating unsynchronization
---@param log string # Log content
---@return boolean # The return value is always True
function GameAPI.add_detail_log(log) end

--Enable or disable unsynchronized detailed logs. It is disabled by default. This is the main switch, after turning off this other setting interface will not take effect, but the performance is the best.
---@param enable? boolean # Enable or not
function GameAPI.api_set_enable_detail_snapshot(enable) end

--Sets the level of stack record detail for some logs.
---@param level? integer # Lv.
function GameAPI.api_set_snapshot_traceback_level(level) end

--The timer asynchronous detection log was enabled or disabled. It is disabled by default. When turned on, it can detect where more ECA timers have been created, but timer inconsistency does not necessarily mean that the actual game content is out of sync (for example, it is safe to only make presentation changes in timer callbacks).
---@param enable? boolean # Enable or not
function GameAPI.api_set_enable_timer_snapshot(enable) end

--Enable or disable UI unsynchronization detection logs. It is disabled by default. After this function is enabled, all UI creation statistics are collected. Inconsistencies in UI creation can lead to inconsistencies in UI sequence numbers, which can lead to inconsistencies in UI component/component to string results, and inconsistencies in UI-related events [controls that trigger events], which can lead to logic asynchronism if the game uses related values in gameplay logic. If you are sure that it will not cause unsynchronization, you can choose to turn off this switch
---@param enable? boolean # Enable or not
function GameAPI.api_set_enable_ui_snapshot(enable) end

--Enable or disable ECA asynchronous detection logs. Disabled by default, high overhead. Some safe apis can be filtered by parameters to prevent false positives, such as creating special effects, UI operations, and so on
---@param enable boolean # Enable or not
---@param filter_mode? integer # Filter mode, default 1 excluded mode (no api specified in filter_set) or 0 included mode (only api specified in filter_set)
---@param filter_set? py.Table # Filter collections, default {"client_only", "client_possible"}. You can pass in the API you want to exclude/include (depending on the previous parameter), For example, {"client_only", "client_possible", "GameAPI:print_to_dialog, "GameAPI:get_function_return_value"}. client_only and client_possible are officially confirmed safe/secure API sets that will not affect the core logic of the game even if the number of calls is inconsistent, and can usually be added to the reject set to avoid false positives
---@return string # Open result
function GameAPI.api_set_enable_eca_snapshot(enable, filter_mode, filter_set) end

--Set the level of unsynchronized detailed logs. The more detailed it is, the more convenient it is to locate the point where the unsynchronization occurs, but the performance consumption increases
---@param tag integer # mask is used to control which logs are enabled. 0xFFFFFFFF All logs are enabled. By default, 16+32 logs are enabled. Meaning of each bit >> 1: tick, 2: collision detection, 4: pathfinding callback, 8: pathfinding coordinate update, 16: health change, 32: coordinate transient
function GameAPI.api_set_detail_snapshot_enable_tag(tag) end

--Set playback rate
---@param scale number # Playback rate
function GameAPI.api_set_time_scale(scale) end

--Bind rocker unit
---@param role py.Role # Player
---@param comp_name string # Joystick control ID
---@param unit py.Unit # Binding unit
function GameAPI.set_joystick_target(role, comp_name, unit) end

--Set the player is priority for clicking units
---@param role py.Role # Player
---@param unit_type integer # Unit type
---@param priority integer # priority
function GameAPI.api_set_player_select_unit_priority(role, unit_type, priority) end

--Set the local camera focus position
---@param position py.Vector3 # position
function GameAPI.set_local_camera_focus_position(position) end

--Sets the blinking effect of an object
---@param log_obj py.Actor # object
---@param interval? number # interval
---@param time? number # time
---@param color_r? integer # R
---@param color_g? integer # G
---@param color_b? integer # B
---@param alpha? number # alpha
---@param exp? number # exp
---@param exp2? number # exp2
function GameAPI.api_set_obj_twinkle_parameters(log_obj, interval, time, color_r, color_g, color_b, alpha, exp, exp2) end

--Gets the Fresnel index of the object
---@param log_obj py.Actor # object
---@return py.Fixed # exponent
function GameAPI.api_get_obj_fresnel_exp(log_obj) end

--Gets the Fresnel strength of the object
---@param log_obj py.Actor # object
---@return py.Fixed # intensity
function GameAPI.api_get_obj_fresnel_color_strength(log_obj) end

--Open the fog display on the minimap
---@param role py.Role # Player
---@param enable integer # Display mode
---@param specify_mini_map? string # Specified mini-map
function GameAPI.enable_player_mini_map_fog_img(role, enable, specify_mini_map) end

--Set the minimap display area (two points)
---@param role py.Role # Player
---@param position1 py.Point # Point 1
---@param position2 py.Point # Point 2
function GameAPI.set_mini_map_show_area_by_two_points(role, position1, position2) end

--Only local player jumpers are displayed
---@param is_show boolean # Enable or not
function GameAPI.only_show_local_player_jump_word(is_show) end

--Set the global visibility of blood bars
---@param enable boolean # Enable or not
function GameAPI.set_global_visibility_of_billboard(enable) end

--Gets the texture type of the specified point
---@param position py.Point # point
---@return integer # Texture type
function GameAPI.get_point_texture(position) end

--Modify object material
---@param obj py.Actor # object
---@param material_id integer # Material id
function GameAPI.set_obj_material_param(obj, material_id) end

--Set whether the mouse is visible
---@param visible boolean # Visible or not
function GameAPI.set_mouse_cursor_visible(visible) end

--Mini map mask transparency
---@param role py.Role # Player
---@param alpha number # transparency
---@param specify_mini_map? string # Specified mini-map
function GameAPI.set_mini_map_alpha(role, alpha, specify_mini_map) end

--Small map mask color
---@param role py.Role # Player
---@param colorR integer # R
---@param colorG integer # G
---@param colorB integer # B
---@param colorA integer # A
---@param specify_mini_map? string # Specified mini-map
function GameAPI.set_mini_map_color_int(role, colorR, colorG, colorB, colorA, specify_mini_map) end

--Small map mask color
---@param role py.Role # Player
---@param rgb_hex string # rgb
---@param alpha number # a
---@param specify_mini_map? string # Specified mini-map
function GameAPI.set_mini_map_color_str(role, rgb_hex, alpha, specify_mini_map) end

--Minimap - Set the bottom frame of the hero minimap avatar
---@param role py.Role # Player
---@param unit py.Unit # unit
---@param image_id py.Texture # Picture id
function GameAPI.api_set_hero_mini_map_frame(role, unit, image_id) end

--Integer to unit type
---@param int_num integer # integer
---@return py.UnitType # Unit type
function GameAPI.int_transform_unit_type(int_num) end

--Integer transprojectile type
---@param int_num integer # integer
---@return py.ProjectileKey # Projectile type
function GameAPI.int_transform_projectile_type(int_num) end

--Integer transfer item type
---@param int_num integer # integer
---@return py.ItemKey # Item type
function GameAPI.int_transform_item_type(int_num) end

--Integer to magic effect type
---@param int_num integer # integer
---@return py.ModifierType # Magic effect type
function GameAPI.int_transform_modifier_type(int_num) end

--Integer to skill type
---@param int_num integer # integer
---@return py.AbilityKey # Skill type
function GameAPI.int_transform_ability_type(int_num) end

--Integer to technology type
---@param int_num integer # integer
---@return py.TechKey # Science and technology type
function GameAPI.int_transform_tech_type(int_num) end

--Integer to destructible type
---@param int_num integer # integer
---@return py.DestructibleKey # Destructible type
function GameAPI.int_transform_destruct_type(int_num) end

--Integer to sound type
---@param int_num integer # integer
---@return py.AudioKey # Sound type
function GameAPI.int_transform_sound_type(int_num) end

--Get team id
---@return integer # Team id
function GameAPI.steam_get_team_id() end

--Get a player id
---@return integer # Player id
function GameAPI.steam_get_player_id() end

--Get the local player avatar url
---@return string # Avatar url
function GameAPI.steam_get_player_head_icon_url() end

--Get team status
---@return integer # Team status
function GameAPI.steam_get_team_state() end

--Get whether hall level
---@return boolean # bool
function GameAPI.get_is_steam_lobby() end

--Get player status
---@return integer # Player status
function GameAPI.steam_get_player_state() end

--Get the name of the local player
---@return string # Player name
function GameAPI.steam_get_player_nickname() end

--Get items from local players' backpacks
---@param role py.Role # Player
---@return py.Table # Goods list
function GameAPI.steam_get_player_storm_items(role) end

--Set the ui component picture (picture type)
---@param role py.Role # Player
---@param comp_name string # Control name
---@param image_id py.Texture # picture
function GameAPI.set_ui_comp_image_with_icon_steam(role, comp_name, image_id) end

--Get the player is steam country
---@return py.COIN_CURRENCY # steam currency
function GameAPI.get_steam_player_currency() end

--Get the price of the player is goods in the corresponding country
---@param goods_id string # Product ID
---@return number # Price
function GameAPI.get_steam_goods_price(goods_id) end

--Sets the global save value for the specified key in the steam lobby
---@param key string # Global archive key value
---@param value py.Actor # Set value
function GameAPI.set_steam_global_archive_data(key, value) end

--Increases the global save value for the specified key in the steam lobby
---@param key string # Global archive key value
---@param value integer # Incremental value
function GameAPI.add_steam_global_archive_data(key, value) end

--Request for purchase
---@param player py.Role # Player
---@param goods_id string # Item ID
function GameAPI.request_buy_mall_coin(player, goods_id) end

--Sets whether to render the scene
---@param is_open boolean # bool
function GameAPI.set_draw_ui(is_open) end

--Get the local game version number
---@return integer # Local game version number
function GameAPI.get_local_game_version() end

--Get the latest game version number
---@param http_data string # http data
---@return integer # Latest game version number
function GameAPI.get_latest_game_version(http_data) end

--Get the players who are billing
---@param v py.RoleID # Player
---@return py.Role # Player
function GameAPI.get_settle_ladder_role(v) end

--Get the player is new score for settling
---@param v integer # Player new score
---@return integer # Player new score
function GameAPI.get_settle_ladder_new_score(v) end

--Gets the correction value of the player match for the settlement
---@param v integer # Player score spread
---@return integer # Player score spread
function GameAPI.get_settle_ladder_diff_value(v) end

--Request a room name change
---@param room_name string # Room name
---@param lua_func function # Callback function
---@param context py.Dict # Callback parameter passing
function GameAPI.lua_request_change_room_name(room_name, lua_func, context) end

--Request server time
---@param lua_func function # Callback function
---@param context py.Dict # Callback parameter passing
function GameAPI.lua_request_message_from_server(lua_func, context) end

--Request the value of the latest leaderboard
---@param archive_key integer # Player save field
---@param lua_func function # Callback function
function GameAPI.lua_request_get_map_rank(archive_key, lua_func) end

--Request server time
---@param lua_func function # Callback function
---@param context py.Dict # Callback parameter passing
function GameAPI.lua_request_server_time(lua_func, context) end

--Request the server to get player items to use
---@param role py.Role # Player
---@param count integer # quantity
---@param no integer # Item ID
---@param lua_func function # Callback function
---@param context py.Dict # Callback parameter passing
function GameAPI.lua_request_server_role_use_item(role, count, no, lua_func, context) end

--Execute the random pool drop policy on the server
---@param role py.Role # Player
---@param pool_id integer # Random pool ID
---@param lua_func function # Callback function
---@param context py.Dict # Callback parameter passing
function GameAPI.lua_request_server_random_pool_result(role, pool_id, lua_func, context) end

--Request server to get product information
---@param role py.Role # Player
---@param goods_id string # Product ID
---@param lua_func function # Callback function
---@param context py.Dict # Callback parameter passing
function GameAPI.lua_request_server_mall_goods_info(role, goods_id, lua_func, context) end

--Request the server to obtain the mall consumption currency
---@param role py.Role # Player
---@param amount integer # quantity
---@param lua_func function # Callback function
---@param context py.Dict # Callback parameter passing
function GameAPI.lua_request_server_consume_mall_coin(role, amount, lua_func, context) end

--Request the server to purchase an item
---@param role py.Role # Player
---@param count integer # Commodity quantity
---@param no string # Product ID
---@param lua_func function # Callback function
---@param context py.Dict # Callback parameter passing
function GameAPI.lua_request_server_mall_purchase_goods(role, count, no, lua_func, context) end

--Request the server to obtain the mall dlc status
---@param role py.Role # Player
---@param goods_id string # Product ID
---@param lua_func function # Callback function
---@param context py.Dict # Callback parameter passing
function GameAPI.lua_request_server_mall_dlc_status(role, goods_id, lua_func, context) end

--steam Create Room
---@param room_name string # Room name
---@param lua_func function # Callback function
---@param context py.Dict # Callback parameter passing
---@param mode_id? integer # Game mode
---@param password? string # Room code
function GameAPI.lua_request_server_create_room(room_name, lua_func, context, mode_id, password) end

--steam requests a list of rooms
---@param lua_func function # Callback function
---@param context py.Dict # Callback parameter passing
---@param page_index string # Room pages
function GameAPI.lua_request_server_room_list_info(lua_func, context, page_index) end

--steam requests to join the room
---@param room_id integer # Room id
---@param lua_func function # Callback function
---@param context py.Dict # Callback parameter passing
---@param password string # Room code
function GameAPI.lua_request_server_join_room(room_id, lua_func, context, password) end

--steam requests room information
---@param aid integer # Player id
---@param lua_func function # Callback function
---@param context py.Dict # Callback parameter passing
function GameAPI.lua_request_server_room_info(aid, lua_func, context) end

--steam requests a room to start the game
---@param lua_func function # Callback function
---@param context py.Dict # Callback parameter passing
function GameAPI.lua_request_server_room_strat_game(lua_func, context) end

--steam invites players to join the room
---@param aid integer # Player id
---@param lua_func function # Callback function
---@param context py.Dict # Callback parameter passing
function GameAPI.lua_request_server_invite_player_join_room(aid, lua_func, context) end

--steam accepts room invitations
---@param aid integer # Player id
---@param room_id integer # Room id
---@param lua_func function # Callback function
---@param context py.Dict # Callback parameter passing
function GameAPI.lua_request_server_reply_room_invite(aid, room_id, lua_func, context) end

--steam exchange room slots
---@param slot_index integer # slot
---@param lua_func function # Callback function
---@param context py.Dict # Callback parameter passing
function GameAPI.lua_request_server_change_room_slot(slot_index, lua_func, context) end

--steam Exchange homeowners
---@param aid integer # Player id
---@param lua_func function # Callback function
---@param context py.Dict # Callback parameter passing
function GameAPI.lua_request_server_change_owner(aid, lua_func, context) end

--steam exit room
---@param aid integer # Player id
---@param lua_func function # Callback function
---@param context py.Dict # Callback parameter passing
function GameAPI.lua_request_server_exit_room(aid, lua_func, context) end

--steam kicked out of the room
---@param aid integer # Player id
---@param lua_func function # Callback function
---@param context py.Dict # Callback parameter passing
function GameAPI.lua_request_server_kick_from_room(aid, lua_func, context) end

--steam changes the location status
---@param slot_index integer # slot
---@param state integer # slot
---@param lua_func function # Callback function
---@param context py.Dict # Callback parameter passing
function GameAPI.lua_request_server_set_site_state(slot_index, state, lua_func, context) end

--steam Change the room password
---@param pass_word string # cipher
---@param lua_func function # Callback function
---@param context py.Dict # Callback parameter passing
function GameAPI.lua_request_server_change_room_password(pass_word, lua_func, context) end

--steam changes the room level
---@param level_min string # Minimum grade
---@param level_max string # Maximum grade
---@param lua_func function # Callback function
---@param context py.Dict # Callback parameter passing
function GameAPI.lua_request_server_change_room_level_limit(level_min, level_max, lua_func, context) end

--steam Check your team information
---@param lua_func function # Callback function
---@param context py.Dict # Callback parameter passing
function GameAPI.lua_request_my_team_info(lua_func, context) end

--Tractive removal
---@param force_id py.Force # Tractive effort
function GameAPI.api_destroy_force(force_id) end

--Create traction direction
---@param target_unit py.Unit # Target unit
---@param force_angle py.Fixed # Directional Angle
---@param speed py.Fixed # speed
---@param max_speed py.Fixed # Maximum speed
---@param min_speed py.Fixed # Minimum speed
---@param acc py.Fixed # acceleration
---@return integer # Tractive object
function GameAPI.create_force_direction(target_unit, force_angle, speed, max_speed, min_speed, acc) end

--Create a traction point
---@param target_unit py.Unit # Target unit
---@param force_point py.Point # Central point
---@param speed py.Fixed # speed
---@param max_speed py.Fixed # Maximum speed
---@param min_speed py.Fixed # Minimum speed
---@param acc py.Fixed # acceleration
---@return integer # Tractive object
function GameAPI.create_force_point(target_unit, force_point, speed, max_speed, min_speed, acc) end

--Create a traction target
---@param target_unit py.Unit # Target unit
---@param force_unit py.Unit # Tractive force unit
---@param speed py.Fixed # speed
---@param max_speed py.Fixed # Maximum speed
---@param min_speed py.Fixed # Minimum speed
---@param acc py.Fixed # acceleration
---@return integer # Tractive object
function GameAPI.create_force_target(target_unit, force_unit, speed, max_speed, min_speed, acc) end

--Set image Color (hex)
---@param role py.Role # Player
---@param comp_uid string # Control name
---@param color string # hex
---@param a number # A
function GameAPI.set_ui_image_color_hex(role, comp_uid, color, a) end

--[Asynchronous] Get the color of the picture
---@param comp_uid string # Control name
---@return string # Image color hex value
function GameAPI.get_ui_image_color(comp_uid) end

--Check whether interface components exist
---@param role py.Role # Player
---@param ui_comp string # Interface component name
---@return boolean # Existence or not
function GameAPI.ui_comp_role_exist(role, ui_comp) end

--Set the percentage of ui component coordinates
---@param role py.Role # Player
---@param comp_name string # Control name
---@param x number # x
---@param y number # y
function GameAPI.set_ui_comp_pos_percent(role, comp_name, x, y) end

--Set the coordinate adaptation mode of ui components
---@param role py.Role # Player
---@param comp_name string # Control name
---@param x_mode integer # x_mode
---@param y_mode integer # y_mode
function GameAPI.set_ui_comp_pos_mode(role, comp_name, x_mode, y_mode) end

--Set the ui text color
---@param role py.Role # Player
---@param comp_name string # Control name
---@param r number # R
---@param g number # G
---@param b number # B
---@param a number # A
function GameAPI.set_ui_comp_font_color_norm(role, comp_name, r, g, b, a) end

--Set ui text color (HEX)
---@param role py.Role # Player
---@param comp_name string # Control name
---@param color string # hex
---@param a number # A
function GameAPI.set_ui_comp_font_color_hex(role, comp_name, color, a) end

--[Asynchronous] Gets ui text color
---@param comp_uid string # Control name
---@return string # Color hex value
function GameAPI.get_ui_comp_font_color(comp_uid) end

--Set ui text in multiple languages
---@param role py.Role # Player
---@param comp_name string # Control name
---@param text0 string # text
---@param text1? string # Concatenated text 1
---@param text2? string # Concatenated text 2
---@param text3? string # Concatenated text 3
---@param text4? string # Concatenated text 4
---@param text5? string # Concatenated text 5
---@param text6? string # Concatenated text 6
---@param text7? string # Concatenated text 7
---@param text8? string # Concatenated text 8
---@param text9? string # Concatenated text 9
---@param text10? string # Concatenated text 10
function GameAPI.set_ui_comp_text_multilingual(role, comp_name, text0, text1, text2, text3, text4, text5, text6, text7, text8, text9, text10) end

--New playback UI control timeline animation
---@param role py.Role # Player
---@param anim_id py.UIAnimKey # UI animation
---@param start_frame? integer # Start frame
---@param end_frame? integer # End frame
---@param speed? number # Playback speed
---@param play_mode? integer # Play mode
function GameAPI.play_ui_comp_anim_new(role, anim_id, start_frame, end_frame, speed, play_mode) end

--Set the time for the skill button to cast spells
---@param role py.Role # Player
---@param comp_name string # Control name
---@param release_timing integer # Casting time
function GameAPI.api_set_ability_release_timing(role, comp_name, release_timing) end

--Set skills button mouse control shortcut keys
---@param role py.Role # Player
---@param comp_name string # Control name
---@param key integer # Shortcut key
function GameAPI.api_set_ability_mouse_control_key(role, comp_name, key) end

--Asynchronous: Get control transparency
---@param comp_name string # Control name
---@return number # transparency
function GameAPI.get_ui_comp_opacity(comp_name) end

--Set the item bar control type and slot number
---@param role py.Role # Player
---@param comp_name string # Control name
---@param unit py.Unit # unit
---@param slot_type py.SlotType # type
---@param slot_index integer # Slot id
function GameAPI.set_ui_comp_unit_slot_new(role, comp_name, unit, slot_type, slot_index) end

--Sets the object compilation model of the model control
---@param role py.Role # Player
---@param comp_name string # Control name
---@param unit_id py.UnitID # Model id
function GameAPI.set_ui_model_id_from_object_editor(role, comp_name, unit_id) end

--The model that sets the model control sets the model with the specified label in the scene
---@param role py.Role # Player
---@param comp_name string # Control name
---@param unit py.Unit # Unit object
---@param clone_effect? boolean # Inheritance effect
---@param clone_attach? boolean # Inherit the mount model
---@param clone_material? boolean # Inherited material change
---@param is_show_mount? boolean # Whether to show a mount
function GameAPI.set_ui_model_from_scene_unit_with_tag_model(role, comp_name, unit, clone_effect, clone_attach, clone_material, is_show_mount) end

--Set model control model scaling
---@param role py.Role # Player
---@param comp_name string # Control name
---@param scale number # Model scaling
function GameAPI.set_ui_model_model_scale(role, comp_name, scale) end

--Set the UI model control unit
---@param role py.Role # Player
---@param comp_name string # Control name
---@param model_unit py.Unit # unit
---@param clone_effect? boolean # Inheritance effect
---@param clone_attach? boolean # Inherit the mount model
---@param clone_material? boolean # Inherited material change
function GameAPI.set_ui_model_unit(role, comp_name, model_unit, clone_effect, clone_attach, clone_material) end

--Play magic effects to the model controls
---@param modifier_key py.ModifierKey # Magic effect type
---@param modifier_state integer # Playback enumeration
---@param role py.Role # Player
---@param comp_name string # Control name
function GameAPI.set_modifier_on_ui_model(modifier_key, modifier_state, role, comp_name) end

--Play spine animation
---@param role py.Role # Player
---@param uid string # Control uid
---@param fx_id py.Spine # Control dynamic project id
---@param ani_name string # nomenclature
---@param loop? boolean # Loop
function GameAPI.play_ui_spine(role, uid, fx_id, ani_name, loop) end

--[Sync] Get the current value of the slider
---@param role py.Role # Player
---@param comp_id string # slider
---@return py.Fixed # value
function GameAPI.get_slider_cur_percent_safe(role, comp_id) end

--Bind the magic effect remaining cycle to the properties of the player interface control
---@param role py.Role # Player
---@param ui_comp string # Control uid
---@param ui_comp_attr string # Control property field
---@param modifier py.ModifierEntity # Skill entity object
function GameAPI.set_ui_comp_bind_modifier_cycle(role, ui_comp, ui_comp_attr, modifier) end

--Asynchronous Gets the current percentage position of the list
---@param role py.Role # Player
---@param comp_name string # Control uid
---@return number # percent
function GameAPI.get_list_view_percent(role, comp_name) end

--Set the reverse layout of the list
---@param role py.Role # Player
---@param comp_name string # Control uid
---@param enable boolean # Enable or disable reverse configuration
function GameAPI.set_list_view_layout_reverse(role, comp_name, enable) end

--Get ui controls through prefabricated instances
---@param prefab_ins py.UIPrefabIns # prefabricate
---@return string # Control uid
function GameAPI.get_ui_comp_by_prefab_ins(prefab_ins) end

--Stop playing the control animation
---@param role py.Role # Player
---@param comp_name string # Control uid
---@param anim_type integer # Animation type
function GameAPI.stop_eca_anim(role, comp_name, anim_type) end

--Set how to use items
---@param role py.Role # Player
---@param comp_uid string # Control uid
---@param use_operation integer # Mode of operation
function GameAPI.set_equip_slot_use_operation(role, comp_uid, use_operation) end

--Set how to drag and drop items
---@param role py.Role # Player
---@param comp_uid string # Control uid
---@param drag_operation integer # Mode of operation
function GameAPI.set_equip_slot_drag_operation(role, comp_uid, drag_operation) end

--【 Asynchronous 】 Gets the index of the current image of the rotograph
---@param role py.Role # Player
---@param comp_uid string # Control uid
---@return integer # Index value
function GameAPI.get_page_view_current_index(role, comp_uid) end

--【 Asynchronous 】 To get the rotograph click the image index
---@param role py.Role # Player
---@param comp_uid string # Control uid
---@return integer # Index value
function GameAPI.get_page_view_click_index(role, comp_uid) end

--Gets the current checked status of the check box
---@param role py.Role # Player
---@param comp_name string # Control uid
---@return boolean # Currently selected
function GameAPI.get_checkbox_selected(role, comp_name) end

--Set the current check box status
---@param role py.Role # Player
---@param comp_name string # Control uid
---@param is_selected boolean # Selected state
function GameAPI.set_checkbox_selected(role, comp_name, is_selected) end

--【 Asynchronous 】 Interface - Gets the index of the currently selected page of the TAB control
---@param role py.Role # Player
---@param comp_uid string # Control uid
---@return number # index
function GameAPI.get_tab_widget_current_index(role, comp_uid) end

--Interface - Set TAB control The page index is currently selected
---@param role py.Role # Player
---@param comp_uid string # Control uid
---@param index integer # index
function GameAPI.set_tab_widget_current_index(role, comp_uid, index) end

--Asynchronous Interface - Gets the control path
---@param role py.Role # Player
---@param comp_uid string # Control uid
---@return string # path
function GameAPI.get_ui_comp_path(role, comp_uid) end

--live2d controls play animations
---@param role py.Role # Player
---@param comp_uid string # Control uid
---@param motion_name string # Animation name
---@param ith? integer # Serial number
---@param priority? integer # priority
---@param loop? boolean # Whether to continue the previous play
function GameAPI.play_live2d_anim(role, comp_uid, motion_name, ith, priority, loop) end

--The live2d control stops playing the animation
---@param role py.Role # Player
---@param comp_uid string # Control uid
---@param motion_name string # Animation name
---@param ith integer # Serial number
function GameAPI.stop_live2d_anim(role, comp_uid, motion_name, ith) end

--live2d setup model
---@param role py.Role # Player
---@param comp_uid string # Control uid
---@param model_id py.Live2d # live2d resources
function GameAPI.set_live2d_model_id(role, comp_uid, model_id) end

--live2d sets the expression
---@param role py.Role # Player
---@param comp_uid string # Control uid
---@param expression string # Expression name
function GameAPI.set_live2d_expression(role, comp_uid, expression) end

--live2d sets the background color
---@param role py.Role # Player
---@param comp_name string # Control name
---@param r number # R
---@param g number # G
---@param b number # B
---@param a number # A
function GameAPI.set_live2d_background_color(role, comp_name, r, g, b, a) end

--Screen - Deletes a screen event
---@param comp_uid string # Control uid
---@param event_type integer # Control event type
---@param name string # Custom event name
function GameAPI.del_ui_comp_event(comp_uid, event_type, name) end

--Set the layout to clipping or not
---@param role py.Role # Player
---@param comp_uid string # Control uid
---@param clip_enabled boolean # Cut or not
function GameAPI.set_layout_clipping_enable(role, comp_uid, clip_enabled) end

--Sets whether the input field is available
---@param role py.Role # Player
---@param comp_uid string # Control uid
---@param enable boolean # Availability or not
function GameAPI.set_input_field_enable(role, comp_uid, enable) end

--Set the layout clipping mode
---@param role py.Role # Player
---@param comp_uid string # Control uid
---@param clipping_type integer # Crop mode
---@param image_id? integer # Picture id
---@param color? string # colour
---@param alpha? integer # opacity
function GameAPI.set_layout_clipping_type(role, comp_uid, clipping_type, image_id, color, alpha) end

--Set the text hyperbox processing mode
---@param role py.Role # Player
---@param comp_uid string # Control uid
---@param over_pattern py.DynamicTypeMeta # Hyperframe processing type
---@param font_min_size? integer # Minimum size
function GameAPI.set_text_over_length_handling_type(role, comp_uid, over_pattern, font_min_size) end

--Set the grid list layout
---@param role py.Role # Player
---@param comp_uid string # Control uid
---@param layout_type integer # Layout mode
function GameAPI.set_ui_gridview_type(role, comp_uid, layout_type) end

--Set the number of rows in the grid list
---@param role py.Role # Player
---@param comp_uid string # Control uid
---@param row_count integer # Line number
---@param column_count integer # Number of columns
function GameAPI.set_ui_gridview_count(role, comp_uid, row_count, column_count) end

--Sets the width and height of the grid list cells
---@param role py.Role # Player
---@param comp_uid string # Control uid
---@param width number # wide
---@param height number # high
function GameAPI.set_ui_gridview_size(role, comp_uid, width, height) end

--Set the grid list margin
---@param role py.Role # Player
---@param comp_uid string # Control uid
---@param top number # Up.
---@param bottom number # Under the
---@param left number # The left
---@param right number # right
function GameAPI.set_ui_gridview_margin(role, comp_uid, top, bottom, left, right) end

--Set the grid list cell spacing
---@param role py.Role # Player
---@param comp_uid string # Control uid
---@param width number # Landscape orientation
---@param height number # portrait
function GameAPI.set_ui_gridview_space(role, comp_uid, width, height) end

--Set the grid list alignment
---@param role py.Role # Player
---@param comp_uid string # Control uid
---@param align_type integer # Alignment mode
function GameAPI.set_ui_gridview_align(role, comp_uid, align_type) end

--Adds a control to the grid list at the specified location
---@param role py.Role # Player
---@param comp_uid string # Control uid
---@param grid_uid string # Grid list uid
---@param child_index integer # Location index
function GameAPI.insert_ui_gridview_comp(role, comp_uid, grid_uid, child_index) end

--Set the grid list to enable/disable scrolling
---@param role py.Role # Player
---@param comp_uid string # Control uid
---@param enable boolean # Enable or not
function GameAPI.set_ui_gridview_scroll(role, comp_uid, enable) end

--Set mesh list Enable/Disable size change with content
---@param role py.Role # Player
---@param comp_uid string # Control uid
---@param enable boolean # Enable or not
function GameAPI.set_ui_gridview_size_adaptive(role, comp_uid, enable) end

--Clear the UI control picture
---@param role py.Role # Player
---@param comp_name string # Control name
function GameAPI.clear_ui_comp_image(role, comp_name) end

--Set the grid list to enable/disable scroll bars
---@param role py.Role # Player
---@param comp_uid string # Control uid
---@param enable boolean # Enable or not
function GameAPI.set_ui_gridview_bar_enable(role, comp_uid, enable) end

--Set the percentage of horizontal/vertical jumps in the grid list
---@param role py.Role # Player
---@param comp_uid string # Control uid
---@param direction integer # Horizontal/vertical
---@param ratio number # percent
function GameAPI.set_ui_gridview_bar_percent(role, comp_uid, direction, ratio) end

--Set the mesh list horizontal/vertical scroll bar thickness
---@param role py.Role # Player
---@param comp_uid string # Control uid
---@param direction integer # Horizontal/vertical
---@param thick number # Degree of thickness
function GameAPI.set_ui_gridview_bar_thick(role, comp_uid, direction, thick) end

--Set the grid list horizontal/vertical scroll bar margins
---@param role py.Role # Player
---@param comp_uid string # Control name
---@param direction integer # Horizontal/vertical
---@param top number # Up.
---@param bottom number # Under the
---@param left number # The left
---@param right number # right
function GameAPI.set_ui_gridview_bar_margin(role, comp_uid, direction, top, bottom, left, right) end

--Set the grid list landscape/portrait scroll bar image
---@param role py.Role # Player
---@param comp_uid string # Control name
---@param direction integer # Horizontal/vertical
---@param image integer # picture
function GameAPI.set_ui_gridview_bar_image(role, comp_uid, direction, image) end

--Set the grid list landscape/portrait scroll bar image color
---@param role py.Role # Player
---@param comp_uid string # Control name
---@param direction integer # Horizontal/vertical
---@param r number # R
---@param g number # G
---@param b number # B
---@param a number # A
function GameAPI.set_ui_gridview_bar_color(role, comp_uid, direction, r, g, b, a) end

--Set the grid list landscape/portrait scroll bar image color
---@param role py.Role # Player
---@param comp_uid string # Control name
---@param direction integer # Horizontal/vertical
---@param r number # R
---@param g number # G
---@param b number # B
---@param a number # A
function GameAPI.set_ui_gridview_bar_color_norm(role, comp_uid, direction, r, g, b, a) end

--Set the grid list horizontal/vertical scroll bar nine palace switch
---@param role py.Role # Player
---@param comp_uid string # Control name
---@param direction integer # Horizontal/vertical
---@param enable boolean # Enable or not
function GameAPI.set_ui_gridview_bar_scale_9_enable(role, comp_uid, direction, enable) end

--Set the grid list horizontal/vertical scroll bar nine house values
---@param role py.Role # Player
---@param comp_name string # Control uid
---@param direction integer # Horizontal/vertical
---@param x_left integer # x
---@param x_right integer # y
---@param y_top integer # width
---@param y_bottom integer # height
function GameAPI.set_ui_gridview_bar_cap_insets(role, comp_name, direction, x_left, x_right, y_top, y_bottom) end

--Set the grid list to enable or disable reverse layout
---@param role py.Role # Player
---@param comp_uid string # Control name
---@param enable boolean # Enable or not
function GameAPI.set_ui_gridview_horizontal_reverse_enable(role, comp_uid, enable) end

--Set the grid list to enable or disable the up-down reverse arrangement
---@param role py.Role # Player
---@param comp_uid string # Control name
---@param enable boolean # Enable or not
function GameAPI.set_ui_gridview_vertical_reverse_enable(role, comp_uid, enable) end
