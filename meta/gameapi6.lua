--This file is generated by tools/genGameAPI, do not modify it manually.
---@meta

---@class py.GameAPI
GameAPI = {}

--Gets the destructible number MODIFIER_ENTITY key pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.ModifierEntity # Key value
function GameAPI.get_destructible_key_modifier_entity_kv(destructible_key, key) end

--Get the technology number MODIFIER_ENTITY key and value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.ModifierEntity # Key value
function GameAPI.get_tech_key_modifier_entity_kv(tech_key, key) end

--Get the image MODIFIER_ENTITY key pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.ModifierEntity # Key value
function GameAPI.get_icon_id_modifier_entity_kv(icon_id, key) end

--Obtain the logical physical component type MODIFIER_ENTITY key and value pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.ModifierEntity # Key value
function GameAPI.get_physics_entity_key_modifier_entity_kv(physics_entity_key, key) end

--Get the unit number MODIFIER_TYPE key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.ModifierType # Key value
function GameAPI.get_unit_key_modifier_type_kv(unit_key, key) end

--Gets item number MODIFIER_TYPE key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.ModifierType # Key value
function GameAPI.get_item_key_modifier_type_kv(item_key, key) end

--Get Skill number MODIFIER_TYPE key-value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.ModifierType # Key value
function GameAPI.get_ability_key_modifier_type_kv(ability_key, key) end

--Gets Magic effect special effect number MODIFIER_TYPE key-value pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.ModifierType # Key value
function GameAPI.get_modifier_key_modifier_type_kv(modifier_key, key) end

--Gets the special effect number MODIFIER_TYPE key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.ModifierType # Key value
function GameAPI.get_projectile_key_modifier_type_kv(projectile_key, key) end

--Gets destructible number MODIFIER_TYPE key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.ModifierType # Key value
function GameAPI.get_destructible_key_modifier_type_kv(destructible_key, key) end

--Gets the Technology number MODIFIER_TYPE key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.ModifierType # Key value
function GameAPI.get_tech_key_modifier_type_kv(tech_key, key) end

--Get the image MODIFIER_TYPE key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.ModifierType # Key value
function GameAPI.get_icon_id_modifier_type_kv(icon_id, key) end

--Get the logical physical component type MODIFIER_TYPE key-value pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.ModifierType # Key value
function GameAPI.get_physics_entity_key_modifier_type_kv(physics_entity_key, key) end

--Get the key pair with the unit number MODIFIER_EFFECT_TYPE
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.ModifierEffectType # Key value
function GameAPI.get_unit_key_modifier_effect_type_kv(unit_key, key) end

--Get item number MODIFIER_EFFECT_TYPE key pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.ModifierEffectType # Key value
function GameAPI.get_item_key_modifier_effect_type_kv(item_key, key) end

--Get the skill number MODIFIER_EFFECT_TYPE key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.ModifierEffectType # Key value
function GameAPI.get_ability_key_modifier_effect_type_kv(ability_key, key) end

--Get Magic effect number MODIFIER_EFFECT_TYPE key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.ModifierEffectType # Key value
function GameAPI.get_modifier_key_modifier_effect_type_kv(modifier_key, key) end

--Get the special effect number MODIFIER_EFFECT_TYPE key pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.ModifierEffectType # Key value
function GameAPI.get_projectile_key_modifier_effect_type_kv(projectile_key, key) end

--Get the destructible number MODIFIER_EFFECT_TYPE key pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.ModifierEffectType # Key value
function GameAPI.get_destructible_key_modifier_effect_type_kv(destructible_key, key) end

--Get the technology number MODIFIER_EFFECT_TYPE key pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.ModifierEffectType # Key value
function GameAPI.get_tech_key_modifier_effect_type_kv(tech_key, key) end

--Get the image MODIFIER_EFFECT_TYPE key pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.ModifierEffectType # Key value
function GameAPI.get_icon_id_modifier_effect_type_kv(icon_id, key) end

--Get the logical physical component type MODIFIER_EFFECT_TYPE key pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.ModifierEffectType # Key value
function GameAPI.get_physics_entity_key_modifier_effect_type_kv(physics_entity_key, key) end

--Gets Unit Number MODIFIER key pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.ModifierKey # Key value
function GameAPI.get_unit_key_modifier_kv(unit_key, key) end

--Get Item Number MODIFIER key pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.ModifierKey # Key value
function GameAPI.get_item_key_modifier_kv(item_key, key) end

--Get Skill Number MODIFIER Key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.ModifierKey # Key value
function GameAPI.get_ability_key_modifier_kv(ability_key, key) end

--Get Magic Effects MODIFIER Key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.ModifierKey # Key value
function GameAPI.get_modifier_key_modifier_kv(modifier_key, key) end

--Get Effect Number MODIFIER key pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.ModifierKey # Key value
function GameAPI.get_projectile_key_modifier_kv(projectile_key, key) end

--Gets Destructible Number MODIFIER key pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.ModifierKey # Key value
function GameAPI.get_destructible_key_modifier_kv(destructible_key, key) end

--Get Tech Number MODIFIER Key pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.ModifierKey # Key value
function GameAPI.get_tech_key_modifier_kv(tech_key, key) end

--Gets the Image MODIFIER key pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.ModifierKey # Key value
function GameAPI.get_icon_id_modifier_kv(icon_id, key) end

--Gets the logical Physical Component Type MODIFIER key pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.ModifierKey # Key value
function GameAPI.get_physics_entity_key_modifier_kv(physics_entity_key, key) end

--Gets the unit number PROJECTILE key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.ProjectileKey # Key value
function GameAPI.get_unit_key_projectile_kv(unit_key, key) end

--Gets the item number PROJECTILE key pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.ProjectileKey # Key value
function GameAPI.get_item_key_projectile_kv(item_key, key) end

--Gets the skill number PROJECTILE key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.ProjectileKey # Key value
function GameAPI.get_ability_key_projectile_kv(ability_key, key) end

--Gets the Magic effect number PROJECTILE key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.ProjectileKey # Key value
function GameAPI.get_modifier_key_projectile_kv(modifier_key, key) end

--Gets the effects number PROJECTILE key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.ProjectileKey # Key value
function GameAPI.get_projectile_key_projectile_kv(projectile_key, key) end

--Gets the destructible number PROJECTILE key pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.ProjectileKey # Key value
function GameAPI.get_destructible_key_projectile_kv(destructible_key, key) end

--Gets the tech number PROJECTILE key value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.ProjectileKey # Key value
function GameAPI.get_tech_key_projectile_kv(tech_key, key) end

--Gets the image PROJECTILE key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.ProjectileKey # Key value
function GameAPI.get_icon_id_projectile_kv(icon_id, key) end

--Gets the logical physical component type PROJECTILE key-value pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.ProjectileKey # Key value
function GameAPI.get_physics_entity_key_projectile_kv(physics_entity_key, key) end

--Obtain the unit number PROJECTILE_ENTITY key value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.ProjectileEntity # Key value
function GameAPI.get_unit_key_projectile_entity_kv(unit_key, key) end

--Obtain Item Number PROJECTILE_ENTITY key value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.ProjectileEntity # Key value
function GameAPI.get_item_key_projectile_entity_kv(item_key, key) end

--Obtain the skill number PROJECTILE_ENTITY key value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.ProjectileEntity # Key value
function GameAPI.get_ability_key_projectile_entity_kv(ability_key, key) end

--Obtain the PROJECTILE_ENTITY key value pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.ProjectileEntity # Key value
function GameAPI.get_modifier_key_projectile_entity_kv(modifier_key, key) end

--Obtain the PROJECTILE_ENTITY key value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.ProjectileEntity # Key value
function GameAPI.get_projectile_key_projectile_entity_kv(projectile_key, key) end

--Obtain the PROJECTILE_ENTITY key value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.ProjectileEntity # Key value
function GameAPI.get_destructible_key_projectile_entity_kv(destructible_key, key) end

--Obtain the technology number PROJECTILE_ENTITY key value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.ProjectileEntity # Key value
function GameAPI.get_tech_key_projectile_entity_kv(tech_key, key) end

--Obtain the PROJECTILE_ENTITY key value pair in the image
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.ProjectileEntity # Key value
function GameAPI.get_icon_id_projectile_entity_kv(icon_id, key) end

--Obtain the PROJECTILE_ENTITY key value pair of logical physical component type
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.ProjectileEntity # Key value
function GameAPI.get_physics_entity_key_projectile_entity_kv(physics_entity_key, key) end

--Obtain the PROJECTILE_GROUP key value pair in unit number
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.ProjectileGroup # Key value
function GameAPI.get_unit_key_projectile_group_kv(unit_key, key) end

--Obtain Item Number PROJECTILE_GROUP key value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.ProjectileGroup # Key value
function GameAPI.get_item_key_projectile_group_kv(item_key, key) end

--Obtain the skill number PROJECTILE_GROUP key value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.ProjectileGroup # Key value
function GameAPI.get_ability_key_projectile_group_kv(ability_key, key) end

--Obtain the PROJECTILE_GROUP key value pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.ProjectileGroup # Key value
function GameAPI.get_modifier_key_projectile_group_kv(modifier_key, key) end

--Obtain the PROJECTILE_GROUP key value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.ProjectileGroup # Key value
function GameAPI.get_projectile_key_projectile_group_kv(projectile_key, key) end

--Obtain the PROJECTILE_GROUP key value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.ProjectileGroup # Key value
function GameAPI.get_destructible_key_projectile_group_kv(destructible_key, key) end

--Obtain the technology ID PROJECTILE_GROUP key value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.ProjectileGroup # Key value
function GameAPI.get_tech_key_projectile_group_kv(tech_key, key) end

--Obtain the PROJECTILE_GROUP key value pair in the image
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.ProjectileGroup # Key value
function GameAPI.get_icon_id_projectile_group_kv(icon_id, key) end

--Obtain the PROJECTILE_GROUP key value pair of logical physical component type
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.ProjectileGroup # Key value
function GameAPI.get_physics_entity_key_projectile_group_kv(physics_entity_key, key) end

--Get the unit number DESTRUCTIBLE_ENTITY key pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.Destructible # Key value
function GameAPI.get_unit_key_destructible_entity_kv(unit_key, key) end

--Gets the item number DESTRUCTIBLE_ENTITY key pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.Destructible # Key value
function GameAPI.get_item_key_destructible_entity_kv(item_key, key) end

--Get skill number DESTRUCTIBLE_ENTITY key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.Destructible # Key value
function GameAPI.get_ability_key_destructible_entity_kv(ability_key, key) end

--Get magic effect number DESTRUCTIBLE_ENTITY key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.Destructible # Key value
function GameAPI.get_modifier_key_destructible_entity_kv(modifier_key, key) end

--Get the special effect number DESTRUCTIBLE_ENTITY key pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.Destructible # Key value
function GameAPI.get_projectile_key_destructible_entity_kv(projectile_key, key) end

--Gets the DESTRUCTIBLE_ENTITY key pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.Destructible # Key value
function GameAPI.get_destructible_key_destructible_entity_kv(destructible_key, key) end

--Get the technology number DESTRUCTIBLE_ENTITY key pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.Destructible # Key value
function GameAPI.get_tech_key_destructible_entity_kv(tech_key, key) end

--Get the image DESTRUCTIBLE_ENTITY key pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.Destructible # Key value
function GameAPI.get_icon_id_destructible_entity_kv(icon_id, key) end

--Gets the DESTRUCTIBLE_ENTITY key pair of the logical physical component type
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.Destructible # Key value
function GameAPI.get_physics_entity_key_destructible_entity_kv(physics_entity_key, key) end

--Gets the DESTRUCTIBLE_NAME key pair with the unit number
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.DestructibleKey # Key value
function GameAPI.get_unit_key_destructible_name_kv(unit_key, key) end

--Get the item number DESTRUCTIBLE_NAME key value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.DestructibleKey # Key value
function GameAPI.get_item_key_destructible_name_kv(item_key, key) end

--Get skill number DESTRUCTIBLE_NAME key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.DestructibleKey # Key value
function GameAPI.get_ability_key_destructible_name_kv(ability_key, key) end

--Get the DESTRUCTIBLE_NAME key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.DestructibleKey # Key value
function GameAPI.get_modifier_key_destructible_name_kv(modifier_key, key) end

--Get the DESTRUCTIBLE_NAME keyvalue pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.DestructibleKey # Key value
function GameAPI.get_projectile_key_destructible_name_kv(projectile_key, key) end

--Gets the DESTRUCTIBLE_NAME key value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.DestructibleKey # Key value
function GameAPI.get_destructible_key_destructible_name_kv(destructible_key, key) end

--Get the DESTRUCTIBLE_NAME key value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.DestructibleKey # Key value
function GameAPI.get_tech_key_destructible_name_kv(tech_key, key) end

--Get the DESTRUCTIBLE_NAME key-value pair for the picture
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.DestructibleKey # Key value
function GameAPI.get_icon_id_destructible_name_kv(icon_id, key) end

--Gets the DESTRUCTIBLE_NAME key pair of the logical physical component type
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.DestructibleKey # Key value
function GameAPI.get_physics_entity_key_destructible_name_kv(physics_entity_key, key) end

--Obtain the unit number SOUND_ENTITY key pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.SoundEntity # Key value
function GameAPI.get_unit_key_sound_entity_kv(unit_key, key) end

--Gets the item number SOUND_ENTITY key value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.SoundEntity # Key value
function GameAPI.get_item_key_sound_entity_kv(item_key, key) end

--Obtain the skill number SOUND_ENTITY key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.SoundEntity # Key value
function GameAPI.get_ability_key_sound_entity_kv(ability_key, key) end

--Gets the Magic effect number SOUND_ENTITY key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.SoundEntity # Key value
function GameAPI.get_modifier_key_sound_entity_kv(modifier_key, key) end

--Gets the special effect number SOUND_ENTITY key pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.SoundEntity # Key value
function GameAPI.get_projectile_key_sound_entity_kv(projectile_key, key) end

--Gets the destructible number SOUND_ENTITY key value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.SoundEntity # Key value
function GameAPI.get_destructible_key_sound_entity_kv(destructible_key, key) end

--Obtain the technology number SOUND_ENTITY key pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.SoundEntity # Key value
function GameAPI.get_tech_key_sound_entity_kv(tech_key, key) end

--Obtain an image SOUND_ENTITY key pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.SoundEntity # Key value
function GameAPI.get_icon_id_sound_entity_kv(icon_id, key) end

--Obtain the logical physical component type SOUND_ENTITY key pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.SoundEntity # Key value
function GameAPI.get_physics_entity_key_sound_entity_kv(physics_entity_key, key) end

--Obtain the unit number AUDIO_KEY key pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.AudioKey # Key value
function GameAPI.get_unit_key_audio_key_kv(unit_key, key) end

--Gets the item number AUDIO_KEY key pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.AudioKey # Key value
function GameAPI.get_item_key_audio_key_kv(item_key, key) end

--Obtain the skill number AUDIO_KEY key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.AudioKey # Key value
function GameAPI.get_ability_key_audio_key_kv(ability_key, key) end

--Gets the Magic Effects number AUDIO_KEY key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.AudioKey # Key value
function GameAPI.get_modifier_key_audio_key_kv(modifier_key, key) end

--Gets the special effect number AUDIO_KEY key pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.AudioKey # Key value
function GameAPI.get_projectile_key_audio_key_kv(projectile_key, key) end

--Gets the destructible number AUDIO_KEY key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.AudioKey # Key value
function GameAPI.get_destructible_key_audio_key_kv(destructible_key, key) end

--Obtain the technology number AUDIO_KEY key pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.AudioKey # Key value
function GameAPI.get_tech_key_audio_key_kv(tech_key, key) end

--Get the image AUDIO_KEY key pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.AudioKey # Key value
function GameAPI.get_icon_id_audio_key_kv(icon_id, key) end

--Obtain the logical physical component type AUDIO_KEY key pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.AudioKey # Key value
function GameAPI.get_physics_entity_key_audio_key_kv(physics_entity_key, key) end

--Gets the unit number GAME_MODE key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.GameMode # Key value
function GameAPI.get_unit_key_game_mode_kv(unit_key, key) end

--Gets item number GAME_MODE key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.GameMode # Key value
function GameAPI.get_item_key_game_mode_kv(item_key, key) end

--Gets the skill number GAME_MODE key-value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.GameMode # Key value
function GameAPI.get_ability_key_game_mode_kv(ability_key, key) end

--Get the Magic effect number GAME_MODE key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.GameMode # Key value
function GameAPI.get_modifier_key_game_mode_kv(modifier_key, key) end

--Gets the special effect number GAME_MODE key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.GameMode # Key value
function GameAPI.get_projectile_key_game_mode_kv(projectile_key, key) end

--Gets the destructible number GAME_MODE key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.GameMode # Key value
function GameAPI.get_destructible_key_game_mode_kv(destructible_key, key) end

--Gets the technology number GAME_MODE key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.GameMode # Key value
function GameAPI.get_tech_key_game_mode_kv(tech_key, key) end

--Gets the image GAME_MODE key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.GameMode # Key value
function GameAPI.get_icon_id_game_mode_kv(icon_id, key) end

--Gets the GAME_MODE key-value pair of the logical physical component type
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.GameMode # Key value
function GameAPI.get_physics_entity_key_game_mode_kv(physics_entity_key, key) end

--Gets the unit number PLAYER key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.Role # Key value
function GameAPI.get_unit_key_player_kv(unit_key, key) end

--Gets the item number PLAYER key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.Role # Key value
function GameAPI.get_item_key_player_kv(item_key, key) end

--Gets the skill number PLAYER key-value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.Role # Key value
function GameAPI.get_ability_key_player_kv(ability_key, key) end

--Gets the Magic effect number PLAYER key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.Role # Key value
function GameAPI.get_modifier_key_player_kv(modifier_key, key) end

--Gets the effects number PLAYER key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.Role # Key value
function GameAPI.get_projectile_key_player_kv(projectile_key, key) end

--Gets the destructible number PLAYER key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.Role # Key value
function GameAPI.get_destructible_key_player_kv(destructible_key, key) end

--Gets the Technology number PLAYER key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.Role # Key value
function GameAPI.get_tech_key_player_kv(tech_key, key) end

--Gets the image PLAYER key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.Role # Key value
function GameAPI.get_icon_id_player_kv(icon_id, key) end

--Gets the PLAYER key-value pair of the logical physical component type
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.Role # Key value
function GameAPI.get_physics_entity_key_player_kv(physics_entity_key, key) end

--Gets the PLAYER_GROUP key pair with the unit number
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.RoleGroup # Key value
function GameAPI.get_unit_key_player_group_kv(unit_key, key) end

--Gets the item number PLAYER_GROUP key value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.RoleGroup # Key value
function GameAPI.get_item_key_player_group_kv(item_key, key) end

--Get the skill number PLAYER_GROUP key value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.RoleGroup # Key value
function GameAPI.get_ability_key_player_group_kv(ability_key, key) end

--Get the Magic effects number PLAYER_GROUP key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.RoleGroup # Key value
function GameAPI.get_modifier_key_player_group_kv(modifier_key, key) end

--Gets the effects number PLAYER_GROUP key pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.RoleGroup # Key value
function GameAPI.get_projectile_key_player_group_kv(projectile_key, key) end

--Gets the destructible number PLAYER_GROUP key value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.RoleGroup # Key value
function GameAPI.get_destructible_key_player_group_kv(destructible_key, key) end

--Gets the technology number PLAYER_GROUP key value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.RoleGroup # Key value
function GameAPI.get_tech_key_player_group_kv(tech_key, key) end

--Get the picture PLAYER_GROUP key pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.RoleGroup # Key value
function GameAPI.get_icon_id_player_group_kv(icon_id, key) end

--Get the logical physical component type PLAYER_GROUP key value pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.RoleGroup # Key value
function GameAPI.get_physics_entity_key_player_group_kv(physics_entity_key, key) end

--Obtain the unit number ROLE_RES_KEY key pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.RoleResKey # Key value
function GameAPI.get_unit_key_role_res_key_kv(unit_key, key) end

--Get the item number ROLE_RES_KEY key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.RoleResKey # Key value
function GameAPI.get_item_key_role_res_key_kv(item_key, key) end

--Obtain the skill number ROLE_RES_KEY key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.RoleResKey # Key value
function GameAPI.get_ability_key_role_res_key_kv(ability_key, key) end

--Get the Magic effect number ROLE_RES_KEY key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.RoleResKey # Key value
function GameAPI.get_modifier_key_role_res_key_kv(modifier_key, key) end

--Obtain the special effect ID ROLE_RES_KEY key pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.RoleResKey # Key value
function GameAPI.get_projectile_key_role_res_key_kv(projectile_key, key) end

--Get the destructible number ROLE_RES_KEY key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.RoleResKey # Key value
function GameAPI.get_destructible_key_role_res_key_kv(destructible_key, key) end

--Obtain the technology ID ROLE_RES_KEY key pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.RoleResKey # Key value
function GameAPI.get_tech_key_role_res_key_kv(tech_key, key) end

--Get the image ROLE_RES_KEY key pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.RoleResKey # Key value
function GameAPI.get_icon_id_role_res_key_kv(icon_id, key) end

--Obtain a logical physical component type ROLE_RES_KEY key pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.RoleResKey # Key value
function GameAPI.get_physics_entity_key_role_res_key_kv(physics_entity_key, key) end

--Obtain the unit number ROLE_STATUS key pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.RoleStatus # Key value
function GameAPI.get_unit_key_role_status_kv(unit_key, key) end

--Get the item number ROLE_STATUS key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.RoleStatus # Key value
function GameAPI.get_item_key_role_status_kv(item_key, key) end

--Obtain the skill ID ROLE_STATUS key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.RoleStatus # Key value
function GameAPI.get_ability_key_role_status_kv(ability_key, key) end

--Get the Magic effect number ROLE_STATUS key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.RoleStatus # Key value
function GameAPI.get_modifier_key_role_status_kv(modifier_key, key) end

--Get the special effect number ROLE_STATUS key pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.RoleStatus # Key value
function GameAPI.get_projectile_key_role_status_kv(projectile_key, key) end

--Gets the destructible number ROLE_STATUS key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.RoleStatus # Key value
function GameAPI.get_destructible_key_role_status_kv(destructible_key, key) end

--Obtain the technology ID ROLE_STATUS key pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.RoleStatus # Key value
function GameAPI.get_tech_key_role_status_kv(tech_key, key) end

--Get the image ROLE_STATUS key pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.RoleStatus # Key value
function GameAPI.get_icon_id_role_status_kv(icon_id, key) end

--Obtain the ROLE_STATUS key pair of the logical physical component type
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.RoleStatus # Key value
function GameAPI.get_physics_entity_key_role_status_kv(physics_entity_key, key) end

--Gets the unit number ROLE_TYPE key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.RoleType # Key value
function GameAPI.get_unit_key_role_type_kv(unit_key, key) end

--Gets the item number ROLE_TYPE key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.RoleType # Key value
function GameAPI.get_item_key_role_type_kv(item_key, key) end

--Gets the skill number ROLE_TYPE key-value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.RoleType # Key value
function GameAPI.get_ability_key_role_type_kv(ability_key, key) end

--Gets Magic effect number ROLE_TYPE key-value pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.RoleType # Key value
function GameAPI.get_modifier_key_role_type_kv(modifier_key, key) end

--Gets the special effect number ROLE_TYPE key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.RoleType # Key value
function GameAPI.get_projectile_key_role_type_kv(projectile_key, key) end

--Gets the destructible number ROLE_TYPE key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.RoleType # Key value
function GameAPI.get_destructible_key_role_type_kv(destructible_key, key) end

--Gets the technology number ROLE_TYPE key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.RoleType # Key value
function GameAPI.get_tech_key_role_type_kv(tech_key, key) end

--Gets the image ROLE_TYPE key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.RoleType # Key value
function GameAPI.get_icon_id_role_type_kv(icon_id, key) end

--Gets the logic-physical component type ROLE_TYPE key-value pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.RoleType # Key value
function GameAPI.get_physics_entity_key_role_type_kv(physics_entity_key, key) end

--Get the unit number ROLE_RELATION key pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.RoleRelation # Key value
function GameAPI.get_unit_key_role_relation_kv(unit_key, key) end

--Gets the item number ROLE_RELATION key value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.RoleRelation # Key value
function GameAPI.get_item_key_role_relation_kv(item_key, key) end

--Get the skill ID ROLE_RELATION key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.RoleRelation # Key value
function GameAPI.get_ability_key_role_relation_kv(ability_key, key) end

--Gets the magic effect number ROLE_RELATION key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.RoleRelation # Key value
function GameAPI.get_modifier_key_role_relation_kv(modifier_key, key) end

--Get the special effect number ROLE_RELATION key and value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.RoleRelation # Key value
function GameAPI.get_projectile_key_role_relation_kv(projectile_key, key) end

--Gets the destructible number ROLE_RELATION key value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.RoleRelation # Key value
function GameAPI.get_destructible_key_role_relation_kv(destructible_key, key) end

--Get the technology number ROLE_RELATION key and value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.RoleRelation # Key value
function GameAPI.get_tech_key_role_relation_kv(tech_key, key) end

--Get the image ROLE_RELATION key and value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.RoleRelation # Key value
function GameAPI.get_icon_id_role_relation_kv(icon_id, key) end

--Get the ROLE_RELATION key pair of the logical physical component type
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.RoleRelation # Key value
function GameAPI.get_physics_entity_key_role_relation_kv(physics_entity_key, key) end

--Gets the unit number TEAM key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.Camp # Key value
function GameAPI.get_unit_key_team_kv(unit_key, key) end

--Gets the item number TEAM key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.Camp # Key value
function GameAPI.get_item_key_team_kv(item_key, key) end

--Gets the skill number TEAM key-value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.Camp # Key value
function GameAPI.get_ability_key_team_kv(ability_key, key) end

--Get Magic effect number TEAM key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.Camp # Key value
function GameAPI.get_modifier_key_team_kv(modifier_key, key) end

--Gets the effects number TEAM key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.Camp # Key value
function GameAPI.get_projectile_key_team_kv(projectile_key, key) end

--Gets the destructible number TEAM key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.Camp # Key value
function GameAPI.get_destructible_key_team_kv(destructible_key, key) end

--Gets the technology number TEAM key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.Camp # Key value
function GameAPI.get_tech_key_team_kv(tech_key, key) end

--Gets the image TEAM key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.Camp # Key value
function GameAPI.get_icon_id_team_kv(icon_id, key) end

--Gets the logical physical component type TEAM key-value pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.Camp # Key value
function GameAPI.get_physics_entity_key_team_kv(physics_entity_key, key) end

--Gets the unit number POINT key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.FPoint # Key value
function GameAPI.get_unit_key_point_kv(unit_key, key) end

--Gets the item number POINT key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.FPoint # Key value
function GameAPI.get_item_key_point_kv(item_key, key) end

--Obtain the skill number POINT key-value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.FPoint # Key value
function GameAPI.get_ability_key_point_kv(ability_key, key) end

--Get Magic effect number POINT key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.FPoint # Key value
function GameAPI.get_modifier_key_point_kv(modifier_key, key) end

--Gets the effect number POINT key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.FPoint # Key value
function GameAPI.get_projectile_key_point_kv(projectile_key, key) end

--Gets the destructible number POINT key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.FPoint # Key value
function GameAPI.get_destructible_key_point_kv(destructible_key, key) end

--Gets the technology number POINT key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.FPoint # Key value
function GameAPI.get_tech_key_point_kv(tech_key, key) end

--Gets the image POINT key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.FPoint # Key value
function GameAPI.get_icon_id_point_kv(icon_id, key) end

--Obtain the POINT key pair of the logical physical component type
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.FPoint # Key value
function GameAPI.get_physics_entity_key_point_kv(physics_entity_key, key) end

--Gets the unit number VECTOR3 key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.FVector3 # Key value
function GameAPI.get_unit_key_vector3_kv(unit_key, key) end

--Gets the item number VECTOR3 key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.FVector3 # Key value
function GameAPI.get_item_key_vector3_kv(item_key, key) end

--Gets the skill number VECTOR3 key-value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.FVector3 # Key value
function GameAPI.get_ability_key_vector3_kv(ability_key, key) end

--Get the Magic Effects VECTOR3 key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.FVector3 # Key value
function GameAPI.get_modifier_key_vector3_kv(modifier_key, key) end

--Gets the special effect number VECTOR3 key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.FVector3 # Key value
function GameAPI.get_projectile_key_vector3_kv(projectile_key, key) end

--Gets the destructible number VECTOR3 key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.FVector3 # Key value
function GameAPI.get_destructible_key_vector3_kv(destructible_key, key) end

--Gets the technology number VECTOR3 key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.FVector3 # Key value
function GameAPI.get_tech_key_vector3_kv(tech_key, key) end

--Gets the image VECTOR3 key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.FVector3 # Key value
function GameAPI.get_icon_id_vector3_kv(icon_id, key) end

--Gets the VECTOR3 key-value pair of the logical physical component type
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.FVector3 # Key value
function GameAPI.get_physics_entity_key_vector3_kv(physics_entity_key, key) end

--Get the ROTATION key pair by unit number
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.FRotation # Key value
function GameAPI.get_unit_key_rotation_kv(unit_key, key) end

--Gets the item number ROTATION key pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.FRotation # Key value
function GameAPI.get_item_key_rotation_kv(item_key, key) end

--Obtain the key pair of the skill number ROTATION
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.FRotation # Key value
function GameAPI.get_ability_key_rotation_kv(ability_key, key) end

--Gets the Magic effect number ROTATION key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.FRotation # Key value
function GameAPI.get_modifier_key_rotation_kv(modifier_key, key) end

--Gets the special effect number ROTATION key pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.FRotation # Key value
function GameAPI.get_projectile_key_rotation_kv(projectile_key, key) end

--Gets the rotatable key pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.FRotation # Key value
function GameAPI.get_destructible_key_rotation_kv(destructible_key, key) end

--Gets the technology number ROTATION key pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.FRotation # Key value
function GameAPI.get_tech_key_rotation_kv(tech_key, key) end

--Gets the image ROTATION key pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.FRotation # Key value
function GameAPI.get_icon_id_rotation_kv(icon_id, key) end

--Obtain the key pair for logical physical component type ROTATION
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.FRotation # Key value
function GameAPI.get_physics_entity_key_rotation_kv(physics_entity_key, key) end

--Get the key pair POINT_LIST
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.Road # Key value
function GameAPI.get_unit_key_point_list_kv(unit_key, key) end

--Gets the item number POINT_LIST key pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.Road # Key value
function GameAPI.get_item_key_point_list_kv(item_key, key) end

--Obtain skill number POINT_LIST key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.Road # Key value
function GameAPI.get_ability_key_point_list_kv(ability_key, key) end

--Gets Magic effect number POINT_LIST key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.Road # Key value
function GameAPI.get_modifier_key_point_list_kv(modifier_key, key) end

--Gets the special effect number POINT_LIST key pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.Road # Key value
function GameAPI.get_projectile_key_point_list_kv(projectile_key, key) end

--Gets destructible number POINT_LIST key pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.Road # Key value
function GameAPI.get_destructible_key_point_list_kv(destructible_key, key) end

--Gets the technology number POINT_LIST key pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.Road # Key value
function GameAPI.get_tech_key_point_list_kv(tech_key, key) end

--Gets the picture POINT_LIST key pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.Road # Key value
function GameAPI.get_icon_id_point_list_kv(icon_id, key) end

--Obtain the logical physical component type POINT_LIST key pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.Road # Key value
function GameAPI.get_physics_entity_key_point_list_kv(physics_entity_key, key) end

--Gets the unit number RECTANGLE key pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.RecArea # Key value
function GameAPI.get_unit_key_rectangle_kv(unit_key, key) end

--Gets the item number RECTANGLE key pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.RecArea # Key value
function GameAPI.get_item_key_rectangle_kv(item_key, key) end

--Gets the skill number RECTANGLE key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.RecArea # Key value
function GameAPI.get_ability_key_rectangle_kv(ability_key, key) end

--Gets the Magic effect number RECTANGLE key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.RecArea # Key value
function GameAPI.get_modifier_key_rectangle_kv(modifier_key, key) end

--Gets the effect number RECTANGLE key pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.RecArea # Key value
function GameAPI.get_projectile_key_rectangle_kv(projectile_key, key) end

--Gets the destructible number RECTANGLE key pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.RecArea # Key value
function GameAPI.get_destructible_key_rectangle_kv(destructible_key, key) end

--Gets the technology number RECTANGLE key pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.RecArea # Key value
function GameAPI.get_tech_key_rectangle_kv(tech_key, key) end

--Gets the image RECTANGLE key pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.RecArea # Key value
function GameAPI.get_icon_id_rectangle_kv(icon_id, key) end

--Gets the logical physical component type RECTANGLE key pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.RecArea # Key value
function GameAPI.get_physics_entity_key_rectangle_kv(physics_entity_key, key) end

--Gets a key pair with the unit number ROUND_AREA
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.CirArea # Key value
function GameAPI.get_unit_key_round_area_kv(unit_key, key) end

--Gets the item number ROUND_AREA key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.CirArea # Key value
function GameAPI.get_item_key_round_area_kv(item_key, key) end

--Obtain the skill ID ROUND_AREA key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.CirArea # Key value
function GameAPI.get_ability_key_round_area_kv(ability_key, key) end

--Gets the Magic Effects number ROUND_AREA key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.CirArea # Key value
function GameAPI.get_modifier_key_round_area_kv(modifier_key, key) end

--Gets the special effect number ROUND_AREA key pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.CirArea # Key value
function GameAPI.get_projectile_key_round_area_kv(projectile_key, key) end

--Gets the destructible number ROUND_AREA key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.CirArea # Key value
function GameAPI.get_destructible_key_round_area_kv(destructible_key, key) end

--Gets the technology ID ROUND_AREA key pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.CirArea # Key value
function GameAPI.get_tech_key_round_area_kv(tech_key, key) end

--Gets the image ROUND_AREA key pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.CirArea # Key value
function GameAPI.get_icon_id_round_area_kv(icon_id, key) end

--Obtain the ROUND_AREA key pair of the logical physical component type
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.CirArea # Key value
function GameAPI.get_physics_entity_key_round_area_kv(physics_entity_key, key) end

--Gets the unit number POLYGON key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.PolyArea # Key value
function GameAPI.get_unit_key_polygon_kv(unit_key, key) end

--Gets item number POLYGON key pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.PolyArea # Key value
function GameAPI.get_item_key_polygon_kv(item_key, key) end

--Gets skill number POLYGON key-value pairs
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.PolyArea # Key value
function GameAPI.get_ability_key_polygon_kv(ability_key, key) end

--Get Magic effect number POLYGON key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.PolyArea # Key value
function GameAPI.get_modifier_key_polygon_kv(modifier_key, key) end

--Gets the effect number POLYGON key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.PolyArea # Key value
function GameAPI.get_projectile_key_polygon_kv(projectile_key, key) end

--Gets the destructible number POLYGON key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.PolyArea # Key value
function GameAPI.get_destructible_key_polygon_kv(destructible_key, key) end

--Gets the technology number POLYGON key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.PolyArea # Key value
function GameAPI.get_tech_key_polygon_kv(tech_key, key) end

--Get image POLYGON key pairs
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.PolyArea # Key value
function GameAPI.get_icon_id_polygon_kv(icon_id, key) end

--Gets a POLYGON key-value pair of the logical physical component type
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.PolyArea # Key value
function GameAPI.get_physics_entity_key_polygon_kv(physics_entity_key, key) end

--Gets the unit number CAMERA key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.Camera # Key value
function GameAPI.get_unit_key_camera_kv(unit_key, key) end

--Gets the item number CAMERA keyvalue pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.Camera # Key value
function GameAPI.get_item_key_camera_kv(item_key, key) end

--Gets the skill number CAMERA key-value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.Camera # Key value
function GameAPI.get_ability_key_camera_kv(ability_key, key) end

--Gets Magic effect number CAMERA key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.Camera # Key value
function GameAPI.get_modifier_key_camera_kv(modifier_key, key) end

--Gets the effect number CAMERA keyvalue pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.Camera # Key value
function GameAPI.get_projectile_key_camera_kv(projectile_key, key) end

--Gets the destructible number CAMERA key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.Camera # Key value
function GameAPI.get_destructible_key_camera_kv(destructible_key, key) end

--Gets the technology number CAMERA keyvalue pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.Camera # Key value
function GameAPI.get_tech_key_camera_kv(tech_key, key) end

--Gets the image CAMERA key pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.Camera # Key value
function GameAPI.get_icon_id_camera_kv(icon_id, key) end

--Gets the logic-physical component type CAMERA key-value pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.Camera # Key value
function GameAPI.get_physics_entity_key_camera_kv(physics_entity_key, key) end

--Gets the unit number CAMLINE key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.CamlineID # Key value
function GameAPI.get_unit_key_camline_kv(unit_key, key) end

--Gets item number CAMLINE key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.CamlineID # Key value
function GameAPI.get_item_key_camline_kv(item_key, key) end

--Gets the skill number CAMLINE key-value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.CamlineID # Key value
function GameAPI.get_ability_key_camline_kv(ability_key, key) end

--Gets the Magic effect number CAMLINE key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.CamlineID # Key value
function GameAPI.get_modifier_key_camline_kv(modifier_key, key) end

--Gets the effects number CAMLINE key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.CamlineID # Key value
function GameAPI.get_projectile_key_camline_kv(projectile_key, key) end

--Gets the destructible number CAMLINE key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.CamlineID # Key value
function GameAPI.get_destructible_key_camline_kv(destructible_key, key) end

--Gets the technology number CAMLINE key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.CamlineID # Key value
function GameAPI.get_tech_key_camline_kv(tech_key, key) end

--Gets the image CAMLINE key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.CamlineID # Key value
function GameAPI.get_icon_id_camline_kv(icon_id, key) end

--Gets the logical physical component type CAMLINE key-value pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.CamlineID # Key value
function GameAPI.get_physics_entity_key_camline_kv(physics_entity_key, key) end

--Obtains the key pair POINT_LIGHT
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.PointLight # Key value
function GameAPI.get_unit_key_point_light_kv(unit_key, key) end

--Gets the item number POINT_LIGHT key pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.PointLight # Key value
function GameAPI.get_item_key_point_light_kv(item_key, key) end

--Obtain skill number POINT_LIGHT key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.PointLight # Key value
function GameAPI.get_ability_key_point_light_kv(ability_key, key) end

--Gets Magic effect number POINT_LIGHT key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.PointLight # Key value
function GameAPI.get_modifier_key_point_light_kv(modifier_key, key) end

--Gets the special effect number POINT_LIGHT key pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.PointLight # Key value
function GameAPI.get_projectile_key_point_light_kv(projectile_key, key) end

--Gets destructible number POINT_LIGHT key pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.PointLight # Key value
function GameAPI.get_destructible_key_point_light_kv(destructible_key, key) end

--Obtain technology number POINT_LIGHT key pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.PointLight # Key value
function GameAPI.get_tech_key_point_light_kv(tech_key, key) end

--Gets the picture POINT_LIGHT key pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.PointLight # Key value
function GameAPI.get_icon_id_point_light_kv(icon_id, key) end

--Obtain logical physical component type POINT_LIGHT key pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.PointLight # Key value
function GameAPI.get_physics_entity_key_point_light_kv(physics_entity_key, key) end

--Gets the unit number SPOT_LIGHT key pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.SpotLight # Key value
function GameAPI.get_unit_key_spot_light_kv(unit_key, key) end

--Gets the item number SPOT_LIGHT key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.SpotLight # Key value
function GameAPI.get_item_key_spot_light_kv(item_key, key) end

--Gets the skill number SPOT_LIGHT key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.SpotLight # Key value
function GameAPI.get_ability_key_spot_light_kv(ability_key, key) end

--Get Magic effect number SPOT_LIGHT key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.SpotLight # Key value
function GameAPI.get_modifier_key_spot_light_kv(modifier_key, key) end

--Gets the special effect number SPOT_LIGHT key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.SpotLight # Key value
function GameAPI.get_projectile_key_spot_light_kv(projectile_key, key) end

--Gets the destructible number SPOT_LIGHT key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.SpotLight # Key value
function GameAPI.get_destructible_key_spot_light_kv(destructible_key, key) end

--Gets the technology number SPOT_LIGHT key pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.SpotLight # Key value
function GameAPI.get_tech_key_spot_light_kv(tech_key, key) end

--Gets the image SPOT_LIGHT key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.SpotLight # Key value
function GameAPI.get_icon_id_spot_light_kv(icon_id, key) end

--Gets the SPOT_LIGHT key pair of the logical physical component type
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.SpotLight # Key value
function GameAPI.get_physics_entity_key_spot_light_kv(physics_entity_key, key) end

--Gets the unit number FOG key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.Fog # Key value
function GameAPI.get_unit_key_fog_kv(unit_key, key) end

--Gets the item number FOG key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.Fog # Key value
function GameAPI.get_item_key_fog_kv(item_key, key) end

--Gets the skill number FOG key-value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.Fog # Key value
function GameAPI.get_ability_key_fog_kv(ability_key, key) end

--Get the Magic effect number FOG key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.Fog # Key value
function GameAPI.get_modifier_key_fog_kv(modifier_key, key) end

--Gets the effects number FOG key pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.Fog # Key value
function GameAPI.get_projectile_key_fog_kv(projectile_key, key) end

--Gets the destructible number FOG key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.Fog # Key value
function GameAPI.get_destructible_key_fog_kv(destructible_key, key) end

--Gets the Technology number FOG key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.Fog # Key value
function GameAPI.get_tech_key_fog_kv(tech_key, key) end

--Get the picture FOG key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.Fog # Key value
function GameAPI.get_icon_id_fog_kv(icon_id, key) end

--Gets the logical physical component type FOG key-value pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.Fog # Key value
function GameAPI.get_physics_entity_key_fog_kv(physics_entity_key, key) end

--Obtain the SCENE_SOUND key and value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.SceneSound # Key value
function GameAPI.get_unit_key_scene_sound_kv(unit_key, key) end

--Gets the item number SCENE_SOUND key and value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.SceneSound # Key value
function GameAPI.get_item_key_scene_sound_kv(item_key, key) end

--Obtain the SCENE_SOUND key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.SceneSound # Key value
function GameAPI.get_ability_key_scene_sound_kv(ability_key, key) end

--Gets the Magic Effects number SCENE_SOUND key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.SceneSound # Key value
function GameAPI.get_modifier_key_scene_sound_kv(modifier_key, key) end

--Get the special effect number SCENE_SOUND key pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.SceneSound # Key value
function GameAPI.get_projectile_key_scene_sound_kv(projectile_key, key) end

--Gets the destructible number SCENE_SOUND key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.SceneSound # Key value
function GameAPI.get_destructible_key_scene_sound_kv(destructible_key, key) end

--Obtain the SCENE_SOUND key and value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.SceneSound # Key value
function GameAPI.get_tech_key_scene_sound_kv(tech_key, key) end

--Get the image SCENE_SOUND key pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.SceneSound # Key value
function GameAPI.get_icon_id_scene_sound_kv(icon_id, key) end

--Obtain the SCENE_SOUND key and value pair of the logical physical component
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.SceneSound # Key value
function GameAPI.get_physics_entity_key_scene_sound_kv(physics_entity_key, key) end

--Gets the unit number MODEL key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.ModelKey # Key value
function GameAPI.get_unit_key_model_kv(unit_key, key) end

--Gets the item number MODEL key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.ModelKey # Key value
function GameAPI.get_item_key_model_kv(item_key, key) end

--Gets the skill number MODEL key-value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.ModelKey # Key value
function GameAPI.get_ability_key_model_kv(ability_key, key) end

--Gets the Magic effect number MODEL key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.ModelKey # Key value
function GameAPI.get_modifier_key_model_kv(modifier_key, key) end

--Gets the effect number MODEL key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.ModelKey # Key value
function GameAPI.get_projectile_key_model_kv(projectile_key, key) end

--Gets the destructible number MODEL key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.ModelKey # Key value
function GameAPI.get_destructible_key_model_kv(destructible_key, key) end

--Gets the technology number MODEL key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.ModelKey # Key value
function GameAPI.get_tech_key_model_kv(tech_key, key) end

--Gets the image MODEL key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.ModelKey # Key value
function GameAPI.get_icon_id_model_kv(icon_id, key) end

--Gets the logical physical component type MODEL key-value pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.ModelKey # Key value
function GameAPI.get_physics_entity_key_model_kv(physics_entity_key, key) end

--Gets the unit number LIVE2D key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.Live2dKey # Key value
function GameAPI.get_unit_key_live2d_kv(unit_key, key) end

--Get item number LIVE2D key value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.Live2dKey # Key value
function GameAPI.get_item_key_live2d_kv(item_key, key) end

--Get skill number LIVE2D key value pairs
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.Live2dKey # Key value
function GameAPI.get_ability_key_live2d_kv(ability_key, key) end

--Get Magic Effects number LIVE2D key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.Live2dKey # Key value
function GameAPI.get_modifier_key_live2d_kv(modifier_key, key) end

--Get the LIVE2D key-value pair with the effect number
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.Live2dKey # Key value
function GameAPI.get_projectile_key_live2d_kv(projectile_key, key) end

--Gets the destructible number LIVE2D key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.Live2dKey # Key value
function GameAPI.get_destructible_key_live2d_kv(destructible_key, key) end

--Get Tech number LIVE2D key value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.Live2dKey # Key value
function GameAPI.get_tech_key_live2d_kv(tech_key, key) end

--Get the image LIVE2D key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.Live2dKey # Key value
function GameAPI.get_icon_id_live2d_kv(icon_id, key) end

--Gets the logical physical component type LIVE2D key-value pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.Live2dKey # Key value
function GameAPI.get_physics_entity_key_live2d_kv(physics_entity_key, key) end

--Obtain the unit number SFX_ENTITY key pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.Sfx # Key value
function GameAPI.get_unit_key_sfx_entity_kv(unit_key, key) end

--Gets the item number SFX_ENTITY key pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.Sfx # Key value
function GameAPI.get_item_key_sfx_entity_kv(item_key, key) end

--Obtain the skill number SFX_ENTITY key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.Sfx # Key value
function GameAPI.get_ability_key_sfx_entity_kv(ability_key, key) end

--Get Magic effect number SFX_ENTITY key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.Sfx # Key value
function GameAPI.get_modifier_key_sfx_entity_kv(modifier_key, key) end

--Gets the special effect number SFX_ENTITY key pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.Sfx # Key value
function GameAPI.get_projectile_key_sfx_entity_kv(projectile_key, key) end

--Gets the destructible number SFX_ENTITY key pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.Sfx # Key value
function GameAPI.get_destructible_key_sfx_entity_kv(destructible_key, key) end

--Obtain the technology number SFX_ENTITY key pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.Sfx # Key value
function GameAPI.get_tech_key_sfx_entity_kv(tech_key, key) end

--Get an image SFX_ENTITY key pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.Sfx # Key value
function GameAPI.get_icon_id_sfx_entity_kv(icon_id, key) end

--Obtain the SFX_ENTITY key pair of the logical physical component type
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.Sfx # Key value
function GameAPI.get_physics_entity_key_sfx_entity_kv(physics_entity_key, key) end

--Get the unit number SFX_KEY key pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.SfxKey # Key value
function GameAPI.get_unit_key_sfx_key_kv(unit_key, key) end

--Gets the item number SFX_KEY key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.SfxKey # Key value
function GameAPI.get_item_key_sfx_key_kv(item_key, key) end

--Obtain the skill number SFX_KEY key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.SfxKey # Key value
function GameAPI.get_ability_key_sfx_key_kv(ability_key, key) end

--Gets the Magic Effects number SFX_KEY key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.SfxKey # Key value
function GameAPI.get_modifier_key_sfx_key_kv(modifier_key, key) end

--Gets the special effect number SFX_KEY key pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.SfxKey # Key value
function GameAPI.get_projectile_key_sfx_key_kv(projectile_key, key) end

--Gets the destructible number SFX_KEY key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.SfxKey # Key value
function GameAPI.get_destructible_key_sfx_key_kv(destructible_key, key) end

--Obtain the technology number SFX_KEY key pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.SfxKey # Key value
function GameAPI.get_tech_key_sfx_key_kv(tech_key, key) end

--Gets the image SFX_KEY key pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.SfxKey # Key value
function GameAPI.get_icon_id_sfx_key_kv(icon_id, key) end

--Obtain the SFX_KEY key pair of the logical physical component type
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.SfxKey # Key value
function GameAPI.get_physics_entity_key_sfx_key_kv(physics_entity_key, key) end

--Get the unit number LINK_SFX_ENTITY key pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.LinkSfx # Key value
function GameAPI.get_unit_key_link_sfx_entity_kv(unit_key, key) end

--Gets the item number LINK_SFX_ENTITY key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.LinkSfx # Key value
function GameAPI.get_item_key_link_sfx_entity_kv(item_key, key) end

--Obtain the skill number LINK_SFX_ENTITY key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.LinkSfx # Key value
function GameAPI.get_ability_key_link_sfx_entity_kv(ability_key, key) end

--Gets the magic effect number LINK_SFX_ENTITY key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.LinkSfx # Key value
function GameAPI.get_modifier_key_link_sfx_entity_kv(modifier_key, key) end

--Gets the special effect number LINK_SFX_ENTITY key pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.LinkSfx # Key value
function GameAPI.get_projectile_key_link_sfx_entity_kv(projectile_key, key) end

--Gets the destructible number LINK_SFX_ENTITY key value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.LinkSfx # Key value
function GameAPI.get_destructible_key_link_sfx_entity_kv(destructible_key, key) end

--Obtain the technology number LINK_SFX_ENTITY key pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.LinkSfx # Key value
function GameAPI.get_tech_key_link_sfx_entity_kv(tech_key, key) end

--Get an image LINK_SFX_ENTITY key pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.LinkSfx # Key value
function GameAPI.get_icon_id_link_sfx_entity_kv(icon_id, key) end

--Obtain the LINK_SFX_ENTITY key pair of the logical physical component type
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.LinkSfx # Key value
function GameAPI.get_physics_entity_key_link_sfx_entity_kv(physics_entity_key, key) end

--Obtain the LINK_SFX_KEY key pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.LinkSfxKey # Key value
function GameAPI.get_unit_key_link_sfx_key_kv(unit_key, key) end

--Gets item number LINK_SFX_KEY key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.LinkSfxKey # Key value
function GameAPI.get_item_key_link_sfx_key_kv(item_key, key) end

--Obtain the skill number LINK_SFX_KEY key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.LinkSfxKey # Key value
function GameAPI.get_ability_key_link_sfx_key_kv(ability_key, key) end

--Gets the Magic Effects number LINK_SFX_KEY key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.LinkSfxKey # Key value
function GameAPI.get_modifier_key_link_sfx_key_kv(modifier_key, key) end

--Get the special effect number LINK_SFX_KEY key pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.LinkSfxKey # Key value
function GameAPI.get_projectile_key_link_sfx_key_kv(projectile_key, key) end

--Gets the destructible number LINK_SFX_KEY key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.LinkSfxKey # Key value
function GameAPI.get_destructible_key_link_sfx_key_kv(destructible_key, key) end

--Obtain the technology number LINK_SFX_KEY key pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.LinkSfxKey # Key value
function GameAPI.get_tech_key_link_sfx_key_kv(tech_key, key) end

--Get the image LINK_SFX_KEY key pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.LinkSfxKey # Key value
function GameAPI.get_icon_id_link_sfx_key_kv(icon_id, key) end

--Obtain the LINK_SFX_KEY key pair of the logical physical component type
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.LinkSfxKey # Key value
function GameAPI.get_physics_entity_key_link_sfx_key_kv(physics_entity_key, key) end

--Get the unit number CURSOR_KEY key pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.CursorKey # Key value
function GameAPI.get_unit_key_cursor_key_kv(unit_key, key) end

--Gets the item number CURSOR_KEY key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.CursorKey # Key value
function GameAPI.get_item_key_cursor_key_kv(item_key, key) end

--Get the skill number CURSOR_KEY key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.CursorKey # Key value
function GameAPI.get_ability_key_cursor_key_kv(ability_key, key) end

--Gets the Magic effect number CURSOR_KEY key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.CursorKey # Key value
function GameAPI.get_modifier_key_cursor_key_kv(modifier_key, key) end

--Gets the special effect number CURSOR_KEY key pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.CursorKey # Key value
function GameAPI.get_projectile_key_cursor_key_kv(projectile_key, key) end

--Gets the destructible number CURSOR_KEY key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.CursorKey # Key value
function GameAPI.get_destructible_key_cursor_key_kv(destructible_key, key) end

--Get the technology number CURSOR_KEY key pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.CursorKey # Key value
function GameAPI.get_tech_key_cursor_key_kv(tech_key, key) end

--Gets the image CURSOR_KEY key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.CursorKey # Key value
function GameAPI.get_icon_id_cursor_key_kv(icon_id, key) end

--Obtain the logical physical component type CURSOR_KEY key pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.CursorKey # Key value
function GameAPI.get_physics_entity_key_cursor_key_kv(physics_entity_key, key) end

--Gets the unit number ANGLE key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.Fixed # Key value
function GameAPI.get_unit_key_angle_kv(unit_key, key) end

--Gets the item number ANGLE key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.Fixed # Key value
function GameAPI.get_item_key_angle_kv(item_key, key) end

--Gets the skill number ANGLE key-value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.Fixed # Key value
function GameAPI.get_ability_key_angle_kv(ability_key, key) end

--Gets the Magic effect number ANGLE key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.Fixed # Key value
function GameAPI.get_modifier_key_angle_kv(modifier_key, key) end

--Gets the effect number ANGLE key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.Fixed # Key value
function GameAPI.get_projectile_key_angle_kv(projectile_key, key) end

--Gets the destructible number ANGLE key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.Fixed # Key value
function GameAPI.get_destructible_key_angle_kv(destructible_key, key) end

--Gets the technology number ANGLE key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.Fixed # Key value
function GameAPI.get_tech_key_angle_kv(tech_key, key) end

--Gets the image ANGLE key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.Fixed # Key value
function GameAPI.get_icon_id_angle_kv(icon_id, key) end

--Gets a key-value pair of the logical physical component type ANGLE
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.Fixed # Key value
function GameAPI.get_physics_entity_key_angle_kv(physics_entity_key, key) end

--Gets the unit number TEXTURE key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.Texture # Key value
function GameAPI.get_unit_key_texture_kv(unit_key, key) end

--Gets the item number TEXTURE key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.Texture # Key value
function GameAPI.get_item_key_texture_kv(item_key, key) end

--Gets the skill number TEXTURE key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.Texture # Key value
function GameAPI.get_ability_key_texture_kv(ability_key, key) end

--Get the TEXTURE key pair for the Magic effect number
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.Texture # Key value
function GameAPI.get_modifier_key_texture_kv(modifier_key, key) end

--Gets the TEXTURE keyvalue pair for the effect number
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.Texture # Key value
function GameAPI.get_projectile_key_texture_kv(projectile_key, key) end

--Gets the destructible number TEXTURE key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.Texture # Key value
function GameAPI.get_destructible_key_texture_kv(destructible_key, key) end

--Gets the technology number TEXTURE key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.Texture # Key value
function GameAPI.get_tech_key_texture_kv(tech_key, key) end

--Gets the image TEXTURE key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.Texture # Key value
function GameAPI.get_icon_id_texture_kv(icon_id, key) end

--Gets the TEXTURE key-value pair of the logical physical component type
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.Texture # Key value
function GameAPI.get_physics_entity_key_texture_kv(physics_entity_key, key) end

--Get the unit number SEQUENCE key pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.Sequence # Key value
function GameAPI.get_unit_key_sequence_kv(unit_key, key) end

--Gets the item Number SEQUENCE key pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.Sequence # Key value
function GameAPI.get_item_key_sequence_kv(item_key, key) end

--Obtain a skill number SEQUENCE key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.Sequence # Key value
function GameAPI.get_ability_key_sequence_kv(ability_key, key) end

--Get Magic Effects SEQUENCE key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.Sequence # Key value
function GameAPI.get_modifier_key_sequence_kv(modifier_key, key) end

--Gets the special effect number SEQUENCE key pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.Sequence # Key value
function GameAPI.get_projectile_key_sequence_kv(projectile_key, key) end

--Gets a destructible number SEQUENCE key pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.Sequence # Key value
function GameAPI.get_destructible_key_sequence_kv(destructible_key, key) end

--Gets the Technology number SEQUENCE key pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.Sequence # Key value
function GameAPI.get_tech_key_sequence_kv(tech_key, key) end

--Get a picture SEQUENCE key pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.Sequence # Key value
function GameAPI.get_icon_id_sequence_kv(icon_id, key) end

--Obtain a key pair of the logical physical component type SEQUENCE
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.Sequence # Key value
function GameAPI.get_physics_entity_key_sequence_kv(physics_entity_key, key) end

--Gets the unit number SPINE key pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.Spine # Key value
function GameAPI.get_unit_key_spine_kv(unit_key, key) end

--Gets the item number SPINE key value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.Spine # Key value
function GameAPI.get_item_key_spine_kv(item_key, key) end

--Gets the skill number SPINE key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.Spine # Key value
function GameAPI.get_ability_key_spine_kv(ability_key, key) end

--Gets the SPINE key pair for the Magic effects number
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.Spine # Key value
function GameAPI.get_modifier_key_spine_kv(modifier_key, key) end

--Gets the special effect number SPINE key pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.Spine # Key value
function GameAPI.get_projectile_key_spine_kv(projectile_key, key) end

--Gets the destructible number SPINE key pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.Spine # Key value
function GameAPI.get_destructible_key_spine_kv(destructible_key, key) end

--Gets the technology number SPINE key pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.Spine # Key value
function GameAPI.get_tech_key_spine_kv(tech_key, key) end

--Gets the image SPINE key pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.Spine # Key value
function GameAPI.get_icon_id_spine_kv(icon_id, key) end

--Gets the SPINE key pair of the logical physical component type
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.Spine # Key value
function GameAPI.get_physics_entity_key_spine_kv(physics_entity_key, key) end

--Obtain the key pair of PHYSICS_OBJECT, the unit number
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.PhysicsObject # Key value
function GameAPI.get_unit_key_physics_object_kv(unit_key, key) end

--Obtain the key pair of PHYSICS_OBJECT
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.PhysicsObject # Key value
function GameAPI.get_item_key_physics_object_kv(item_key, key) end

--Obtain the skill number PHYSICS_OBJECT
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.PhysicsObject # Key value
function GameAPI.get_ability_key_physics_object_kv(ability_key, key) end

--Get the magic effect number PHYSICS_OBJECT key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.PhysicsObject # Key value
function GameAPI.get_modifier_key_physics_object_kv(modifier_key, key) end

--Obtain the key pair of PHYSICS_OBJECT
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.PhysicsObject # Key value
function GameAPI.get_projectile_key_physics_object_kv(projectile_key, key) end

--Get the destructible number PHYSICS_OBJECT key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.PhysicsObject # Key value
function GameAPI.get_destructible_key_physics_object_kv(destructible_key, key) end

--Obtain the key pair of PHYSICS_OBJECT, the technology number
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.PhysicsObject # Key value
function GameAPI.get_tech_key_physics_object_kv(tech_key, key) end

--Obtain the PHYSICS_OBJECT key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.PhysicsObject # Key value
function GameAPI.get_icon_id_physics_object_kv(icon_id, key) end

--Obtain the key pair of PHYSICS_OBJECT of the logical physical component
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.PhysicsObject # Key value
function GameAPI.get_physics_entity_key_physics_object_kv(physics_entity_key, key) end

--Obtain the unit number PHYSICS_ENTITY key pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.PhysicsEntity # Key value
function GameAPI.get_unit_key_physics_entity_kv(unit_key, key) end

--Obtain the item number PHYSICS_ENTITY key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.PhysicsEntity # Key value
function GameAPI.get_item_key_physics_entity_kv(item_key, key) end

--Obtain the skill number PHYSICS_ENTITY key and value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.PhysicsEntity # Key value
function GameAPI.get_ability_key_physics_entity_kv(ability_key, key) end

--Get the magic effect number PHYSICS_ENTITY key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.PhysicsEntity # Key value
function GameAPI.get_modifier_key_physics_entity_kv(modifier_key, key) end

--Obtain the PHYSICS_ENTITY key and value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.PhysicsEntity # Key value
function GameAPI.get_projectile_key_physics_entity_kv(projectile_key, key) end

--Get the destructible number PHYSICS_ENTITY key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.PhysicsEntity # Key value
function GameAPI.get_destructible_key_physics_entity_kv(destructible_key, key) end

--Obtain the technology number PHYSICS_ENTITY key pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.PhysicsEntity # Key value
function GameAPI.get_tech_key_physics_entity_kv(tech_key, key) end

--Obtain the image PHYSICS_ENTITY key pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.PhysicsEntity # Key value
function GameAPI.get_icon_id_physics_entity_kv(icon_id, key) end

--Obtain the PHYSICS_ENTITY key-value pair of the logical physical component
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.PhysicsEntity # Key value
function GameAPI.get_physics_entity_key_physics_entity_kv(physics_entity_key, key) end

--Obtain the unit number PHYSICS_OBJECT_KEY key pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.PhysicsObjectKey # Key value
function GameAPI.get_unit_key_physics_object_key_kv(unit_key, key) end

--Obtain the object number PHYSICS_OBJECT_KEY key pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.PhysicsObjectKey # Key value
function GameAPI.get_item_key_physics_object_key_kv(item_key, key) end

--Obtain the skill number PHYSICS_OBJECT_KEY
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.PhysicsObjectKey # Key value
function GameAPI.get_ability_key_physics_object_key_kv(ability_key, key) end

--Obtain the magic effect ID PHYSICS_OBJECT_KEY key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.PhysicsObjectKey # Key value
function GameAPI.get_modifier_key_physics_object_key_kv(modifier_key, key) end

--Obtain the key pair of PHYSICS_OBJECT_KEY
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.PhysicsObjectKey # Key value
function GameAPI.get_projectile_key_physics_object_key_kv(projectile_key, key) end

--Obtain the destructible ID PHYSICS_OBJECT_KEY key pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.PhysicsObjectKey # Key value
function GameAPI.get_destructible_key_physics_object_key_kv(destructible_key, key) end

--Obtain the key pair of PHYSICS_OBJECT_KEY with the technology number
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.PhysicsObjectKey # Key value
function GameAPI.get_tech_key_physics_object_key_kv(tech_key, key) end

--Obtain the PHYSICS_OBJECT_KEY key pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.PhysicsObjectKey # Key value
function GameAPI.get_icon_id_physics_object_key_kv(icon_id, key) end

--Obtain the physical component type PHYSICS_OBJECT_KEY key pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.PhysicsObjectKey # Key value
function GameAPI.get_physics_entity_key_physics_object_key_kv(physics_entity_key, key) end

--Obtain the key pair of PHYSICS_ENTITY_KEY. The unit number is physics_entity_key
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.PhysicsEntityKey # Key value
function GameAPI.get_unit_key_physics_entity_key_kv(unit_key, key) end

--Obtain the key pair of PHYSICS_ENTITY_KEY
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.PhysicsEntityKey # Key value
function GameAPI.get_item_key_physics_entity_key_kv(item_key, key) end

--Obtain the skill number PHYSICS_ENTITY_KEY
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.PhysicsEntityKey # Key value
function GameAPI.get_ability_key_physics_entity_key_kv(ability_key, key) end

--Get the magic effect number PHYSICS_ENTITY_KEY key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.PhysicsEntityKey # Key value
function GameAPI.get_modifier_key_physics_entity_key_kv(modifier_key, key) end

--Obtain the key pair of PHYSICS_ENTITY_KEY
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.PhysicsEntityKey # Key value
function GameAPI.get_projectile_key_physics_entity_key_kv(projectile_key, key) end

--Obtain the destructible number PHYSICS_ENTITY_KEY key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.PhysicsEntityKey # Key value
function GameAPI.get_destructible_key_physics_entity_key_kv(destructible_key, key) end

--Obtain the key pair of PHYSICS_ENTITY_KEY
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.PhysicsEntityKey # Key value
function GameAPI.get_tech_key_physics_entity_key_kv(tech_key, key) end

--Obtain the PHYSICS_ENTITY_KEY key pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.PhysicsEntityKey # Key value
function GameAPI.get_icon_id_physics_entity_key_kv(icon_id, key) end

--Obtain the key pair of PHYSICS_ENTITY_KEY of the logical physical component
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.PhysicsEntityKey # Key value
function GameAPI.get_physics_entity_key_physics_entity_key_kv(physics_entity_key, key) end

--Gets the RIGID_BODY key pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.RigidBody # Key value
function GameAPI.get_unit_key_rigid_body_kv(unit_key, key) end

--Gets the item number RIGID_BODY key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.RigidBody # Key value
function GameAPI.get_item_key_rigid_body_kv(item_key, key) end

--Gets the skill number RIGID_BODY key value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.RigidBody # Key value
function GameAPI.get_ability_key_rigid_body_kv(ability_key, key) end

--Gets the Magic effect number RIGID_BODY key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.RigidBody # Key value
function GameAPI.get_modifier_key_rigid_body_kv(modifier_key, key) end

--Gets the special effect number RIGID_BODY key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.RigidBody # Key value
function GameAPI.get_projectile_key_rigid_body_kv(projectile_key, key) end

--Gets the destructible number RIGID_BODY key value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.RigidBody # Key value
function GameAPI.get_destructible_key_rigid_body_kv(destructible_key, key) end

--Gets the technology number RIGID_BODY key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.RigidBody # Key value
function GameAPI.get_tech_key_rigid_body_kv(tech_key, key) end

--Gets the RIGID_BODY key-value pair for the picture
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.RigidBody # Key value
function GameAPI.get_icon_id_rigid_body_kv(icon_id, key) end

--Obtain the RIGID_BODY key pair of the logical physical component type
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.RigidBody # Key value
function GameAPI.get_physics_entity_key_rigid_body_kv(physics_entity_key, key) end

--Obtain the RIGID_BODY_GROUP key pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.RigidBodyGroup # Key value
function GameAPI.get_unit_key_rigid_body_group_kv(unit_key, key) end

--Gets the item number RIGID_BODY_GROUP key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.RigidBodyGroup # Key value
function GameAPI.get_item_key_rigid_body_group_kv(item_key, key) end

--Obtain the skill RIGID_BODY_GROUP key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.RigidBodyGroup # Key value
function GameAPI.get_ability_key_rigid_body_group_kv(ability_key, key) end

--Get the Magic effect number RIGID_BODY_GROUP key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.RigidBodyGroup # Key value
function GameAPI.get_modifier_key_rigid_body_group_kv(modifier_key, key) end

--Get the special effect number RIGID_BODY_GROUP key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.RigidBodyGroup # Key value
function GameAPI.get_projectile_key_rigid_body_group_kv(projectile_key, key) end

--Gets the destructible number RIGID_BODY_GROUP key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.RigidBodyGroup # Key value
function GameAPI.get_destructible_key_rigid_body_group_kv(destructible_key, key) end

--Get the technology number RIGID_BODY_GROUP key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.RigidBodyGroup # Key value
function GameAPI.get_tech_key_rigid_body_group_kv(tech_key, key) end

--Obtain the image RIGID_BODY_GROUP key pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.RigidBodyGroup # Key value
function GameAPI.get_icon_id_rigid_body_group_kv(icon_id, key) end

--Obtain the RIGID_BODY_GROUP key pair of the logical physical component type
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.RigidBodyGroup # Key value
function GameAPI.get_physics_entity_key_rigid_body_group_kv(physics_entity_key, key) end

--Gets the unit number COLLIDER key and value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.Collider # Key value
function GameAPI.get_unit_key_collider_kv(unit_key, key) end

--Gets the item number COLLIDER key and value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.Collider # Key value
function GameAPI.get_item_key_collider_kv(item_key, key) end

--Gets the skill number COLLIDER key and value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.Collider # Key value
function GameAPI.get_ability_key_collider_kv(ability_key, key) end

--Get the Magic Effects COLLIDER key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.Collider # Key value
function GameAPI.get_modifier_key_collider_kv(modifier_key, key) end

--Gets the effects number COLLIDER key and value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.Collider # Key value
function GameAPI.get_projectile_key_collider_kv(projectile_key, key) end

--Gets the destructible number COLLIDER key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.Collider # Key value
function GameAPI.get_destructible_key_collider_kv(destructible_key, key) end

--Gets the Technology number COLLIDER key and value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.Collider # Key value
function GameAPI.get_tech_key_collider_kv(tech_key, key) end

--Gets the image COLLIDER key and value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.Collider # Key value
function GameAPI.get_icon_id_collider_kv(icon_id, key) end

--Gets the logical physical component type COLLIDER key-value pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.Collider # Key value
function GameAPI.get_physics_entity_key_collider_kv(physics_entity_key, key) end

--Gets the unit number JOINT key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.Joint # Key value
function GameAPI.get_unit_key_joint_kv(unit_key, key) end

--Gets the item number JOINT key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.Joint # Key value
function GameAPI.get_item_key_joint_kv(item_key, key) end

--Gets the skill number JOINT key-value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.Joint # Key value
function GameAPI.get_ability_key_joint_kv(ability_key, key) end

--Gets the Magic Effect number JOINT Key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.Joint # Key value
function GameAPI.get_modifier_key_joint_kv(modifier_key, key) end

--Gets the special effect number JOINT key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.Joint # Key value
function GameAPI.get_projectile_key_joint_kv(projectile_key, key) end

--Gets the destructible number JOINT key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.Joint # Key value
function GameAPI.get_destructible_key_joint_kv(destructible_key, key) end

--Gets the technology number JOINT key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.Joint # Key value
function GameAPI.get_tech_key_joint_kv(tech_key, key) end

--Gets an image JOINT key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.Joint # Key value
function GameAPI.get_icon_id_joint_kv(icon_id, key) end

--Gets the logical physical component type JOINT key-value pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.Joint # Key value
function GameAPI.get_physics_entity_key_joint_kv(physics_entity_key, key) end

--Gets the unit number REACTION key pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.Reaction # Key value
function GameAPI.get_unit_key_reaction_kv(unit_key, key) end

--Gets the item number REACTION key pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.Reaction # Key value
function GameAPI.get_item_key_reaction_kv(item_key, key) end

--Gets the skill number REACTION key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.Reaction # Key value
function GameAPI.get_ability_key_reaction_kv(ability_key, key) end

--Get the Magic effect number REACTION key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.Reaction # Key value
function GameAPI.get_modifier_key_reaction_kv(modifier_key, key) end

--Get the special effect number REACTION key pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.Reaction # Key value
function GameAPI.get_projectile_key_reaction_kv(projectile_key, key) end

--Gets the destructible number REACTION key pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.Reaction # Key value
function GameAPI.get_destructible_key_reaction_kv(destructible_key, key) end

--Get the technology number REACTION key pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.Reaction # Key value
function GameAPI.get_tech_key_reaction_kv(tech_key, key) end

--Get the image REACTION key pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.Reaction # Key value
function GameAPI.get_icon_id_reaction_kv(icon_id, key) end

--Gets the REACTION key pair of the logical physical component type
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.Reaction # Key value
function GameAPI.get_physics_entity_key_reaction_kv(physics_entity_key, key) end

--Obtain the unit number, REACTION_GROUP key value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.ReactionGroup # Key value
function GameAPI.get_unit_key_reaction_group_kv(unit_key, key) end

--Obtain the item number, REACTION_GROUP key value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.ReactionGroup # Key value
function GameAPI.get_item_key_reaction_group_kv(item_key, key) end

--Obtain the skill number, or _group, key value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.ReactionGroup # Key value
function GameAPI.get_ability_key_reaction_group_kv(ability_key, key) end

--Get Magic effect effect number, REACTION_GROUP key value pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.ReactionGroup # Key value
function GameAPI.get_modifier_key_reaction_group_kv(modifier_key, key) end

--Obtain the special effect number, REACTION_GROUP key value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.ReactionGroup # Key value
function GameAPI.get_projectile_key_reaction_group_kv(projectile_key, key) end

--Obtain the destructible number, REACTION_GROUP key value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.ReactionGroup # Key value
function GameAPI.get_destructible_key_reaction_group_kv(destructible_key, key) end

--Obtain the technology number, REACTION_GROUP key value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.ReactionGroup # Key value
function GameAPI.get_tech_key_reaction_group_kv(tech_key, key) end

--Obtain the picture, or _group key value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.ReactionGroup # Key value
function GameAPI.get_icon_id_reaction_group_kv(icon_id, key) end

--Obtain the logical physical component type, REACTION_GROUP key value pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.ReactionGroup # Key value
function GameAPI.get_physics_entity_key_reaction_group_kv(physics_entity_key, key) end

--Gets the DYNAMIC_TRIGGER_INSTANCE key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.DynamicTriggerInstance # Key value
function GameAPI.get_unit_key_dynamic_trigger_instance_kv(unit_key, key) end

--Gets the item number DYNAMIC_TRIGGER_INSTANCE key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.DynamicTriggerInstance # Key value
function GameAPI.get_item_key_dynamic_trigger_instance_kv(item_key, key) end

--Obtain the skill number DYNAMIC_TRIGGER_INSTANCE key-value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.DynamicTriggerInstance # Key value
function GameAPI.get_ability_key_dynamic_trigger_instance_kv(ability_key, key) end

--Gets Magic effect number DYNAMIC_TRIGGER_INSTANCE key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.DynamicTriggerInstance # Key value
function GameAPI.get_modifier_key_dynamic_trigger_instance_kv(modifier_key, key) end

--Gets the special effect number DYNAMIC_TRIGGER_INSTANCE key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.DynamicTriggerInstance # Key value
function GameAPI.get_projectile_key_dynamic_trigger_instance_kv(projectile_key, key) end

--Gets the destructible number DYNAMIC_TRIGGER_INSTANCE key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.DynamicTriggerInstance # Key value
function GameAPI.get_destructible_key_dynamic_trigger_instance_kv(destructible_key, key) end

--Gets the technology number DYNAMIC_TRIGGER_INSTANCE key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.DynamicTriggerInstance # Key value
function GameAPI.get_tech_key_dynamic_trigger_instance_kv(tech_key, key) end

--Gets the image DYNAMIC_TRIGGER_INSTANCE key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.DynamicTriggerInstance # Key value
function GameAPI.get_icon_id_dynamic_trigger_instance_kv(icon_id, key) end

--Obtain the DYNAMIC_TRIGGER_INSTANCE key pair of the logical physical component type
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.DynamicTriggerInstance # Key value
function GameAPI.get_physics_entity_key_dynamic_trigger_instance_kv(physics_entity_key, key) end

--Gets the unit number TABLE key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.Table # Key value
function GameAPI.get_unit_key_table_kv(unit_key, key) end

--Gets the item number TABLE key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.Table # Key value
function GameAPI.get_item_key_table_kv(item_key, key) end

--Gets the skill number TABLE key-value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.Table # Key value
function GameAPI.get_ability_key_table_kv(ability_key, key) end

--Get the Magic effect number TABLE key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.Table # Key value
function GameAPI.get_modifier_key_table_kv(modifier_key, key) end

--Gets the special effect number TABLE key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.Table # Key value
function GameAPI.get_projectile_key_table_kv(projectile_key, key) end

--Gets the destructible number TABLE key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.Table # Key value
function GameAPI.get_destructible_key_table_kv(destructible_key, key) end

--Gets the technology number TABLE key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.Table # Key value
function GameAPI.get_tech_key_table_kv(tech_key, key) end

--Gets the image TABLE key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.Table # Key value
function GameAPI.get_icon_id_table_kv(icon_id, key) end

--Obtain the TABLE key-value pair of the logical physical component type
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.Table # Key value
function GameAPI.get_physics_entity_key_table_kv(physics_entity_key, key) end

--Gets the unit number RANDOM_POOL key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.RandomPool # Key value
function GameAPI.get_unit_key_random_pool_kv(unit_key, key) end

--Gets the item number RANDOM_POOL key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.RandomPool # Key value
function GameAPI.get_item_key_random_pool_kv(item_key, key) end

--Gets the skill number RANDOM_POOL key-value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.RandomPool # Key value
function GameAPI.get_ability_key_random_pool_kv(ability_key, key) end

--Gets the Magic effect number RANDOM_POOL key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.RandomPool # Key value
function GameAPI.get_modifier_key_random_pool_kv(modifier_key, key) end

--Get the effect number RANDOM_POOL key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.RandomPool # Key value
function GameAPI.get_projectile_key_random_pool_kv(projectile_key, key) end

--Gets the destructible number RANDOM_POOL key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.RandomPool # Key value
function GameAPI.get_destructible_key_random_pool_kv(destructible_key, key) end

--Get the technology number RANDOM_POOL key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.RandomPool # Key value
function GameAPI.get_tech_key_random_pool_kv(tech_key, key) end

--Get a picture RANDOM_POOL key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.RandomPool # Key value
function GameAPI.get_icon_id_random_pool_kv(icon_id, key) end

--Gets a logic-physical component type RANDOM_POOL key-value pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.RandomPool # Key value
function GameAPI.get_physics_entity_key_random_pool_kv(physics_entity_key, key) end

--Obtain the SCENE_UI key pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.SceneNode # Key value
function GameAPI.get_unit_key_scene_ui_kv(unit_key, key) end

--Gets the item number SCENE_UI key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.SceneNode # Key value
function GameAPI.get_item_key_scene_ui_kv(item_key, key) end

--Obtain the SCENE_UI key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.SceneNode # Key value
function GameAPI.get_ability_key_scene_ui_kv(ability_key, key) end

--Gets the Magic Effects number SCENE_UI key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.SceneNode # Key value
function GameAPI.get_modifier_key_scene_ui_kv(modifier_key, key) end

--Get the special effect number SCENE_UI key pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.SceneNode # Key value
function GameAPI.get_projectile_key_scene_ui_kv(projectile_key, key) end

--Gets the destructible number SCENE_UI key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.SceneNode # Key value
function GameAPI.get_destructible_key_scene_ui_kv(destructible_key, key) end

--Get the technology number SCENE_UI key pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.SceneNode # Key value
function GameAPI.get_tech_key_scene_ui_kv(tech_key, key) end

--Gets the image SCENE_UI key pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.SceneNode # Key value
function GameAPI.get_icon_id_scene_ui_kv(icon_id, key) end

--Obtain the key pair SCENE_UI of the logical physical component
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.SceneNode # Key value
function GameAPI.get_physics_entity_key_scene_ui_kv(physics_entity_key, key) end

--Gets the unit number DAMAGE_TYPE key and value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_unit_key_damage_type_kv(unit_key, key) end

--Gets the item number DAMAGE_TYPE key pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_item_key_damage_type_kv(item_key, key) end

--Gets the skill number DAMAGE_TYPE key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_ability_key_damage_type_kv(ability_key, key) end

--Get the Magic effect number DAMAGE_TYPE key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_modifier_key_damage_type_kv(modifier_key, key) end

--Gets the special effect number DAMAGE_TYPE key pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_projectile_key_damage_type_kv(projectile_key, key) end

--Gets the destructible number DAMAGE_TYPE key pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_destructible_key_damage_type_kv(destructible_key, key) end

--Gets the technology number DAMAGE_TYPE key pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_tech_key_damage_type_kv(tech_key, key) end

--Get the image DAMAGE_TYPE key pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_icon_id_damage_type_kv(icon_id, key) end

--Obtain the DAMAGE_TYPE key pair of the logical physical component type
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_physics_entity_key_damage_type_kv(physics_entity_key, key) end

--Gets the key pair with the unit number HARM_TEXT_TYPE_NEW
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_unit_key_harm_text_type_new_kv(unit_key, key) end

--Gets the item number HARM_TEXT_TYPE_NEW key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_item_key_harm_text_type_new_kv(item_key, key) end

--Gets the skill number HARM_TEXT_TYPE_NEW key-value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_ability_key_harm_text_type_new_kv(ability_key, key) end

--Gets the Magic Effects number HARM_TEXT_TYPE_NEW key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_modifier_key_harm_text_type_new_kv(modifier_key, key) end

--Gets the effect number HARM_TEXT_TYPE_NEW key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_projectile_key_harm_text_type_new_kv(projectile_key, key) end

--Gets the destructible number HARM_TEXT_TYPE_NEW key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_destructible_key_harm_text_type_new_kv(destructible_key, key) end

--Gets the technology number HARM_TEXT_TYPE_NEW key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_tech_key_harm_text_type_new_kv(tech_key, key) end

--Gets the image HARM_TEXT_TYPE_NEW key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return string # Key value
function GameAPI.get_icon_id_harm_text_type_new_kv(icon_id, key) end

--Gets the key pair of logical physical component type HARM_TEXT_TYPE_NEW
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return string # Key value
function GameAPI.get_physics_entity_key_harm_text_type_new_kv(physics_entity_key, key) end

--Gets the unit number FONT_TYPE key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_unit_key_font_type_kv(unit_key, key) end

--Gets the item number FONT_TYPE key pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_item_key_font_type_kv(item_key, key) end

--Gets the skill number FONT_TYPE key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_ability_key_font_type_kv(ability_key, key) end

--Gets the Magic effect number FONT_TYPE key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_modifier_key_font_type_kv(modifier_key, key) end

--Gets the special effect number FONT_TYPE key pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_projectile_key_font_type_kv(projectile_key, key) end

--Gets the destructible number FONT_TYPE key pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_destructible_key_font_type_kv(destructible_key, key) end

--Gets the technology number FONT_TYPE key pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return string # Key value
function GameAPI.get_tech_key_font_type_kv(tech_key, key) end

--Gets the image FONT_TYPE key pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return string # Key value
function GameAPI.get_icon_id_font_type_kv(icon_id, key) end

--Gets the logical physical component type FONT_TYPE key pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return string # Key value
function GameAPI.get_physics_entity_key_font_type_kv(physics_entity_key, key) end

--Gets the JUMP_WORD_TRACK key pair with the unit number
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_unit_key_jump_word_track_kv(unit_key, key) end

--Gets the item number JUMP_WORD_TRACK key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_item_key_jump_word_track_kv(item_key, key) end

--Obtain the skill number JUMP_WORD_TRACK key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_ability_key_jump_word_track_kv(ability_key, key) end

--Get the Magic effect number JUMP_WORD_TRACK key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_modifier_key_jump_word_track_kv(modifier_key, key) end

--Gets the special effect number JUMP_WORD_TRACK key pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_projectile_key_jump_word_track_kv(projectile_key, key) end

--Gets the destructible number JUMP_WORD_TRACK key pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_destructible_key_jump_word_track_kv(destructible_key, key) end

--Gets the technology number JUMP_WORD_TRACK key pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_tech_key_jump_word_track_kv(tech_key, key) end

--Gets the image JUMP_WORD_TRACK key pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_icon_id_jump_word_track_kv(icon_id, key) end

--Gets the logic-physical component type JUMP_WORD_TRACK key-value pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return integer # Key value
function GameAPI.get_physics_entity_key_jump_word_track_kv(physics_entity_key, key) end

--Get the NEW_TIMER key pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.Timer # Key value
function GameAPI.get_unit_key_new_timer_kv(unit_key, key) end

--Gets the item number NEW_TIMER key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.Timer # Key value
function GameAPI.get_item_key_new_timer_kv(item_key, key) end

--Get the skill number NEW_TIMER key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.Timer # Key value
function GameAPI.get_ability_key_new_timer_kv(ability_key, key) end

--Get Magic effect number NEW_TIMER key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.Timer # Key value
function GameAPI.get_modifier_key_new_timer_kv(modifier_key, key) end

--Gets the special effect number NEW_TIMER key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.Timer # Key value
function GameAPI.get_projectile_key_new_timer_kv(projectile_key, key) end

--Gets the destructible number NEW_TIMER key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.Timer # Key value
function GameAPI.get_destructible_key_new_timer_kv(destructible_key, key) end

--Get the technology number NEW_TIMER key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.Timer # Key value
function GameAPI.get_tech_key_new_timer_kv(tech_key, key) end

--Get the picture NEW_TIMER key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.Timer # Key value
function GameAPI.get_icon_id_new_timer_kv(icon_id, key) end

--Obtain the NEW_TIMER key pair of the logical physical component type
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.Timer # Key value
function GameAPI.get_physics_entity_key_new_timer_kv(physics_entity_key, key) end

--Get the unit number TECH_KEY key pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.TechKey # Key value
function GameAPI.get_unit_key_tech_key_kv(unit_key, key) end

--Get item number TECH_KEY key pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.TechKey # Key value
function GameAPI.get_item_key_tech_key_kv(item_key, key) end

--Obtain the skill number TECH_KEY key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.TechKey # Key value
function GameAPI.get_ability_key_tech_key_kv(ability_key, key) end

--Get the Magic effect number TECH_KEY key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.TechKey # Key value
function GameAPI.get_modifier_key_tech_key_kv(modifier_key, key) end

--Get the special effect number TECH_KEY key pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.TechKey # Key value
function GameAPI.get_projectile_key_tech_key_kv(projectile_key, key) end

--Gets the destructible number TECH_KEY key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.TechKey # Key value
function GameAPI.get_destructible_key_tech_key_kv(destructible_key, key) end

--Get the technology number TECH_KEY key pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.TechKey # Key value
function GameAPI.get_tech_key_tech_key_kv(tech_key, key) end

--Gets the image TECH_KEY key pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.TechKey # Key value
function GameAPI.get_icon_id_tech_key_kv(icon_id, key) end

--Obtain the logical physical component type TECH_KEY key pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.TechKey # Key value
function GameAPI.get_physics_entity_key_tech_key_kv(physics_entity_key, key) end

--Get the unit number STORE_KEY key pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.StoreKey # Key value
function GameAPI.get_unit_key_store_key_kv(unit_key, key) end

--Gets the item number STORE_KEY key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.StoreKey # Key value
function GameAPI.get_item_key_store_key_kv(item_key, key) end

--Obtain a skill number STORE_KEY key-value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.StoreKey # Key value
function GameAPI.get_ability_key_store_key_kv(ability_key, key) end

--Get the Magic effect number STORE_KEY key-value pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.StoreKey # Key value
function GameAPI.get_modifier_key_store_key_kv(modifier_key, key) end

--Get the special effect number STORE_KEY key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.StoreKey # Key value
function GameAPI.get_projectile_key_store_key_kv(projectile_key, key) end

--Gets the destructible number STORE_KEY key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.StoreKey # Key value
function GameAPI.get_destructible_key_store_key_kv(destructible_key, key) end

--Get the technology number STORE_KEY key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.StoreKey # Key value
function GameAPI.get_tech_key_store_key_kv(tech_key, key) end

--Get the image STORE_KEY key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.StoreKey # Key value
function GameAPI.get_icon_id_store_key_kv(icon_id, key) end

--Obtain the logical physical component type STORE_KEY key pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.StoreKey # Key value
function GameAPI.get_physics_entity_key_store_key_kv(physics_entity_key, key) end

--Obtain the unit number KEYBOARD_KEY key pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.KeyboardKey # Key value
function GameAPI.get_unit_key_keyboard_key_kv(unit_key, key) end

--Obtain item number KEYBOARD_KEY key pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.KeyboardKey # Key value
function GameAPI.get_item_key_keyboard_key_kv(item_key, key) end

--Obtain the skill number KEYBOARD_KEY key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.KeyboardKey # Key value
function GameAPI.get_ability_key_keyboard_key_kv(ability_key, key) end

--Gets Magic Effects special effect number KEYBOARD_KEY key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.KeyboardKey # Key value
function GameAPI.get_modifier_key_keyboard_key_kv(modifier_key, key) end

--Obtain the special effect ID KEYBOARD_KEY key pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.KeyboardKey # Key value
function GameAPI.get_projectile_key_keyboard_key_kv(projectile_key, key) end

--Gets the destructible number KEYBOARD_KEY key pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.KeyboardKey # Key value
function GameAPI.get_destructible_key_keyboard_key_kv(destructible_key, key) end

--Obtain the technology ID KEYBOARD_KEY key pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.KeyboardKey # Key value
function GameAPI.get_tech_key_keyboard_key_kv(tech_key, key) end

--Obtain the image KEYBOARD_KEY key pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.KeyboardKey # Key value
function GameAPI.get_icon_id_keyboard_key_kv(icon_id, key) end

--Obtain the logical physical component type KEYBOARD_KEY key pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.KeyboardKey # Key value
function GameAPI.get_physics_entity_key_keyboard_key_kv(physics_entity_key, key) end

--Get the unit number FUNC_KEYBOARD_KEY key pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.FuncKeyboardKey # Key value
function GameAPI.get_unit_key_func_keyboard_key_kv(unit_key, key) end

--Gets the item number FUNC_KEYBOARD_KEY key pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.FuncKeyboardKey # Key value
function GameAPI.get_item_key_func_keyboard_key_kv(item_key, key) end

--Obtain the skill number FUNC_KEYBOARD_KEY key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.FuncKeyboardKey # Key value
function GameAPI.get_ability_key_func_keyboard_key_kv(ability_key, key) end

--Gets the magic effect number FUNC_KEYBOARD_KEY key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.FuncKeyboardKey # Key value
function GameAPI.get_modifier_key_func_keyboard_key_kv(modifier_key, key) end

--Gets the special effect number FUNC_KEYBOARD_KEY key pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.FuncKeyboardKey # Key value
function GameAPI.get_projectile_key_func_keyboard_key_kv(projectile_key, key) end

--Gets the destructible number FUNC_KEYBOARD_KEY key pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.FuncKeyboardKey # Key value
function GameAPI.get_destructible_key_func_keyboard_key_kv(destructible_key, key) end

--Obtain the technology number FUNC_KEYBOARD_KEY key pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.FuncKeyboardKey # Key value
function GameAPI.get_tech_key_func_keyboard_key_kv(tech_key, key) end

--Get an image FUNC_KEYBOARD_KEY key pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.FuncKeyboardKey # Key value
function GameAPI.get_icon_id_func_keyboard_key_kv(icon_id, key) end

--Obtain a key pair of the logical physical component FUNC_KEYBOARD_KEY
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.FuncKeyboardKey # Key value
function GameAPI.get_physics_entity_key_func_keyboard_key_kv(physics_entity_key, key) end

--Gets the unit number MOUSE_KEY key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.MouseKey # Key value
function GameAPI.get_unit_key_mouse_key_kv(unit_key, key) end

--Gets the item number MOUSE_KEY key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.MouseKey # Key value
function GameAPI.get_item_key_mouse_key_kv(item_key, key) end

--Gets the skill number MOUSE_KEY key-value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.MouseKey # Key value
function GameAPI.get_ability_key_mouse_key_kv(ability_key, key) end

--Get Magic effect number MOUSE_KEY key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.MouseKey # Key value
function GameAPI.get_modifier_key_mouse_key_kv(modifier_key, key) end

--Gets the MOUSE_KEY key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.MouseKey # Key value
function GameAPI.get_projectile_key_mouse_key_kv(projectile_key, key) end

--Gets the destructible number MOUSE_KEY key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.MouseKey # Key value
function GameAPI.get_destructible_key_mouse_key_kv(destructible_key, key) end

--Gets the technology number MOUSE_KEY key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.MouseKey # Key value
function GameAPI.get_tech_key_mouse_key_kv(tech_key, key) end

--Gets the image MOUSE_KEY key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.MouseKey # Key value
function GameAPI.get_icon_id_mouse_key_kv(icon_id, key) end

--Gets the MOUSE_KEY key-value pair of the logical physical component type
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.MouseKey # Key value
function GameAPI.get_physics_entity_key_mouse_key_kv(physics_entity_key, key) end

--Gets the unit number MOUSE_WHEEL key value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.MouseWheel # Key value
function GameAPI.get_unit_key_mouse_wheel_kv(unit_key, key) end

--Gets the item number MOUSE_WHEEL key value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.MouseWheel # Key value
function GameAPI.get_item_key_mouse_wheel_kv(item_key, key) end

--Gets the skill number MOUSE_WHEEL key value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.MouseWheel # Key value
function GameAPI.get_ability_key_mouse_wheel_kv(ability_key, key) end

--Gets Magic effect number MOUSE_WHEEL key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.MouseWheel # Key value
function GameAPI.get_modifier_key_mouse_wheel_kv(modifier_key, key) end

--Gets the MOUSE_WHEEL key value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.MouseWheel # Key value
function GameAPI.get_projectile_key_mouse_wheel_kv(projectile_key, key) end

--Gets the destructible number MOUSE_WHEEL key value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.MouseWheel # Key value
function GameAPI.get_destructible_key_mouse_wheel_kv(destructible_key, key) end

--Gets the technology number MOUSE_WHEEL key value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.MouseWheel # Key value
function GameAPI.get_tech_key_mouse_wheel_kv(tech_key, key) end

--Gets an image MOUSE_WHEEL key pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.MouseWheel # Key value
function GameAPI.get_icon_id_mouse_wheel_kv(icon_id, key) end

--Gets a MOUSE_WHEEL key pair of the logical physical component type
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.MouseWheel # Key value
function GameAPI.get_physics_entity_key_mouse_wheel_kv(physics_entity_key, key) end

--Gets the unit number MAP key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.Map # Key value
function GameAPI.get_unit_key_map_kv(unit_key, key) end

--Gets item number MAP key-value pairs
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.Map # Key value
function GameAPI.get_item_key_map_kv(item_key, key) end

--Get skill number MAP key-value pairs
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.Map # Key value
function GameAPI.get_ability_key_map_kv(ability_key, key) end

--Get the Magic effect number MAP key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.Map # Key value
function GameAPI.get_modifier_key_map_kv(modifier_key, key) end

--Gets the special effect number MAP key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.Map # Key value
function GameAPI.get_projectile_key_map_kv(projectile_key, key) end

--Gets the destructible number MAP key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.Map # Key value
function GameAPI.get_destructible_key_map_kv(destructible_key, key) end

--Gets the technology number MAP key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.Map # Key value
function GameAPI.get_tech_key_map_kv(tech_key, key) end

--Gets the image MAP key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.Map # Key value
function GameAPI.get_icon_id_map_kv(icon_id, key) end

--Obtain the MAP key pair of the logical physical component type
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.Map # Key value
function GameAPI.get_physics_entity_key_map_kv(physics_entity_key, key) end

--Gets the unit number POST_EFFECT key pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.PostEffect # Key value
function GameAPI.get_unit_key_post_effect_kv(unit_key, key) end

--Gets the item number POST_EFFECT key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.PostEffect # Key value
function GameAPI.get_item_key_post_effect_kv(item_key, key) end

--Gets the skill number POST_EFFECT key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.PostEffect # Key value
function GameAPI.get_ability_key_post_effect_kv(ability_key, key) end

--Get Magic effect number POST_EFFECT key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.PostEffect # Key value
function GameAPI.get_modifier_key_post_effect_kv(modifier_key, key) end

--Gets the special effect number POST_EFFECT key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.PostEffect # Key value
function GameAPI.get_projectile_key_post_effect_kv(projectile_key, key) end

--Gets the destructible number POST_EFFECT key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.PostEffect # Key value
function GameAPI.get_destructible_key_post_effect_kv(destructible_key, key) end

--Gets the technology number POST_EFFECT key pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.PostEffect # Key value
function GameAPI.get_tech_key_post_effect_kv(tech_key, key) end

--Gets the image POST_EFFECT key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.PostEffect # Key value
function GameAPI.get_icon_id_post_effect_kv(icon_id, key) end

--Obtain the POST_EFFECT key pair of the logical physical component type
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.PostEffect # Key value
function GameAPI.get_physics_entity_key_post_effect_kv(physics_entity_key, key) end

--Gets the unit number UNIT_TYPE key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.UnitType # Key value
function GameAPI.get_unit_key_unit_type_kv(unit_key, key) end

--Gets item number UNIT_TYPE key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.UnitType # Key value
function GameAPI.get_item_key_unit_type_kv(item_key, key) end

--Gets the skill number UNIT_TYPE key-value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.UnitType # Key value
function GameAPI.get_ability_key_unit_type_kv(ability_key, key) end

--Gets Magic effect number UNIT_TYPE key-value pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.UnitType # Key value
function GameAPI.get_modifier_key_unit_type_kv(modifier_key, key) end

--Gets the special effect number UNIT_TYPE key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.UnitType # Key value
function GameAPI.get_projectile_key_unit_type_kv(projectile_key, key) end

--Gets the destructible number UNIT_TYPE key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.UnitType # Key value
function GameAPI.get_destructible_key_unit_type_kv(destructible_key, key) end

--Gets technology number UNIT_TYPE key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.UnitType # Key value
function GameAPI.get_tech_key_unit_type_kv(tech_key, key) end

--Gets image UNIT_TYPE key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.UnitType # Key value
function GameAPI.get_icon_id_unit_type_kv(icon_id, key) end

--Gets the logical physical component type UNIT_TYPE key-value pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.UnitType # Key value
function GameAPI.get_physics_entity_key_unit_type_kv(physics_entity_key, key) end

--Gets the unit number UNIT_COMMAND_TYPE key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.UnitCommandType # Key value
function GameAPI.get_unit_key_unit_command_type_kv(unit_key, key) end

--Gets the item number UNIT_COMMAND_TYPE key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.UnitCommandType # Key value
function GameAPI.get_item_key_unit_command_type_kv(item_key, key) end

--Gets the skill number UNIT_COMMAND_TYPE key-value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.UnitCommandType # Key value
function GameAPI.get_ability_key_unit_command_type_kv(ability_key, key) end

--Gets the Magic effect number UNIT_COMMAND_TYPE key-value pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.UnitCommandType # Key value
function GameAPI.get_modifier_key_unit_command_type_kv(modifier_key, key) end

--Gets the special effect number UNIT_COMMAND_TYPE key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.UnitCommandType # Key value
function GameAPI.get_projectile_key_unit_command_type_kv(projectile_key, key) end

--Gets the destructible number UNIT_COMMAND_TYPE key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.UnitCommandType # Key value
function GameAPI.get_destructible_key_unit_command_type_kv(destructible_key, key) end

--Gets the technology number UNIT_COMMAND_TYPE key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.UnitCommandType # Key value
function GameAPI.get_tech_key_unit_command_type_kv(tech_key, key) end

--Gets the image UNIT_COMMAND_TYPE key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.UnitCommandType # Key value
function GameAPI.get_icon_id_unit_command_type_kv(icon_id, key) end

--Gets the UNIT_COMMAND_TYPE key-value pair of the logical physical component type
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.UnitCommandType # Key value
function GameAPI.get_physics_entity_key_unit_command_type_kv(physics_entity_key, key) end

--Gets the UNIT_GROUP_COMMAND_TYPE key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.UnitGroupCommandType # Key value
function GameAPI.get_unit_key_unit_group_command_type_kv(unit_key, key) end

--Gets the item number UNIT_GROUP_COMMAND_TYPE key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.UnitGroupCommandType # Key value
function GameAPI.get_item_key_unit_group_command_type_kv(item_key, key) end

--Gets the skill number UNIT_GROUP_COMMAND_TYPE key value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.UnitGroupCommandType # Key value
function GameAPI.get_ability_key_unit_group_command_type_kv(ability_key, key) end

--Gets the Magic effect number UNIT_GROUP_COMMAND_TYPE key-value pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.UnitGroupCommandType # Key value
function GameAPI.get_modifier_key_unit_group_command_type_kv(modifier_key, key) end

--Gets the UNIT_GROUP_COMMAND_TYPE key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.UnitGroupCommandType # Key value
function GameAPI.get_projectile_key_unit_group_command_type_kv(projectile_key, key) end

--Gets the destructible number UNIT_GROUP_COMMAND_TYPE key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.UnitGroupCommandType # Key value
function GameAPI.get_destructible_key_unit_group_command_type_kv(destructible_key, key) end

--Gets the technology number UNIT_GROUP_COMMAND_TYPE key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.UnitGroupCommandType # Key value
function GameAPI.get_tech_key_unit_group_command_type_kv(tech_key, key) end

--Gets the image UNIT_GROUP_COMMAND_TYPE key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.UnitGroupCommandType # Key value
function GameAPI.get_icon_id_unit_group_command_type_kv(icon_id, key) end

--Gets the UNIT_GROUP_COMMAND_TYPE key pair of the logical physical component type
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.UnitGroupCommandType # Key value
function GameAPI.get_physics_entity_key_unit_group_command_type_kv(physics_entity_key, key) end

--Gets the unit number MINI_MAP_COLOR_TYPE key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.MiniMapColorType # Key value
function GameAPI.get_unit_key_mini_map_color_type_kv(unit_key, key) end

--Gets item number MINI_MAP_COLOR_TYPE key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.MiniMapColorType # Key value
function GameAPI.get_item_key_mini_map_color_type_kv(item_key, key) end

--Get the skill number MINI_MAP_COLOR_TYPE key-value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.MiniMapColorType # Key value
function GameAPI.get_ability_key_mini_map_color_type_kv(ability_key, key) end

--Gets the Magic effect number MINI_MAP_COLOR_TYPE key-value pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.MiniMapColorType # Key value
function GameAPI.get_modifier_key_mini_map_color_type_kv(modifier_key, key) end

--Gets the special effect number MINI_MAP_COLOR_TYPE key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.MiniMapColorType # Key value
function GameAPI.get_projectile_key_mini_map_color_type_kv(projectile_key, key) end

--Gets destructible number MINI_MAP_COLOR_TYPE key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.MiniMapColorType # Key value
function GameAPI.get_destructible_key_mini_map_color_type_kv(destructible_key, key) end

--Gets the technology number MINI_MAP_COLOR_TYPE key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.MiniMapColorType # Key value
function GameAPI.get_tech_key_mini_map_color_type_kv(tech_key, key) end

--Gets the picture MINI_MAP_COLOR_TYPE key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.MiniMapColorType # Key value
function GameAPI.get_icon_id_mini_map_color_type_kv(icon_id, key) end

--Gets the logical physical component type MINI_MAP_COLOR_TYPE key-value pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.MiniMapColorType # Key value
function GameAPI.get_physics_entity_key_mini_map_color_type_kv(physics_entity_key, key) end

--Get the UNIT_BEHAVIOR key pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.UnitBehavior # Key value
function GameAPI.get_unit_key_unit_behavior_kv(unit_key, key) end

--Gets the item number UNIT_BEHAVIOR key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.UnitBehavior # Key value
function GameAPI.get_item_key_unit_behavior_kv(item_key, key) end

--Get the skill number UNIT_BEHAVIOR key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.UnitBehavior # Key value
function GameAPI.get_ability_key_unit_behavior_kv(ability_key, key) end

--Get the Magic effect number UNIT_BEHAVIOR key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.UnitBehavior # Key value
function GameAPI.get_modifier_key_unit_behavior_kv(modifier_key, key) end

--Gets the special effect number UNIT_BEHAVIOR key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.UnitBehavior # Key value
function GameAPI.get_projectile_key_unit_behavior_kv(projectile_key, key) end

--Gets the destructible number UNIT_BEHAVIOR key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.UnitBehavior # Key value
function GameAPI.get_destructible_key_unit_behavior_kv(destructible_key, key) end

--Get the technology number UNIT_BEHAVIOR key pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.UnitBehavior # Key value
function GameAPI.get_tech_key_unit_behavior_kv(tech_key, key) end

--Gets the UNIT_BEHAVIOR key-value pair of the picture
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.UnitBehavior # Key value
function GameAPI.get_icon_id_unit_behavior_kv(icon_id, key) end

--Gets the UNIT_BEHAVIOR key pair of the logical physical component type
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.UnitBehavior # Key value
function GameAPI.get_physics_entity_key_unit_behavior_kv(physics_entity_key, key) end

--Get the key pair CURVED_PATH
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.CurvedPath # Key value
function GameAPI.get_unit_key_curved_path_kv(unit_key, key) end

--Gets the item number CURVED_PATH key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.CurvedPath # Key value
function GameAPI.get_item_key_curved_path_kv(item_key, key) end

--Obtain the skill number CURVED_PATH key pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.CurvedPath # Key value
function GameAPI.get_ability_key_curved_path_kv(ability_key, key) end

--Gets the Magic effect number CURVED_PATH key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.CurvedPath # Key value
function GameAPI.get_modifier_key_curved_path_kv(modifier_key, key) end

--Gets the special effect number CURVED_PATH key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.CurvedPath # Key value
function GameAPI.get_projectile_key_curved_path_kv(projectile_key, key) end

--Gets the destructible number CURVED_PATH key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.CurvedPath # Key value
function GameAPI.get_destructible_key_curved_path_kv(destructible_key, key) end

--Gets the technology number CURVED_PATH key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.CurvedPath # Key value
function GameAPI.get_tech_key_curved_path_kv(tech_key, key) end

--Gets the image CURVED_PATH key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.CurvedPath # Key value
function GameAPI.get_icon_id_curved_path_kv(icon_id, key) end

--Obtain a key pair of the logical physical component type CURVED_PATH
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.CurvedPath # Key value
function GameAPI.get_physics_entity_key_curved_path_kv(physics_entity_key, key) end

--Get the unit number CURVED_PATH_3D key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.CurvedPath3D # Key value
function GameAPI.get_unit_key_curved_path_3d_kv(unit_key, key) end

--Gets the item number CURVED_PATH_3D key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.CurvedPath3D # Key value
function GameAPI.get_item_key_curved_path_3d_kv(item_key, key) end

--Get the skill number CURVED_PATH_3D key value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.CurvedPath3D # Key value
function GameAPI.get_ability_key_curved_path_3d_kv(ability_key, key) end

--Get the Magic effect number CURVED_PATH_3D key pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.CurvedPath3D # Key value
function GameAPI.get_modifier_key_curved_path_3d_kv(modifier_key, key) end

--Gets the special effect number CURVED_PATH_3D key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.CurvedPath3D # Key value
function GameAPI.get_projectile_key_curved_path_3d_kv(projectile_key, key) end

--Gets the destructible number CURVED_PATH_3D key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.CurvedPath3D # Key value
function GameAPI.get_destructible_key_curved_path_3d_kv(destructible_key, key) end

--Gets the technology number CURVED_PATH_3D key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.CurvedPath3D # Key value
function GameAPI.get_tech_key_curved_path_3d_kv(tech_key, key) end

--Get the image CURVED_PATH_3D key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.CurvedPath3D # Key value
function GameAPI.get_icon_id_curved_path_3d_kv(icon_id, key) end

--Obtain a logical physical component type CURVED_PATH_3D key and value pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.CurvedPath3D # Key value
function GameAPI.get_physics_entity_key_curved_path_3d_kv(physics_entity_key, key) end

--Obtain the key pair with the unit number RESCUE_SEEKER_TYPE
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.ERescueSeekerType # Key value
function GameAPI.get_unit_key_rescue_seeker_type_kv(unit_key, key) end

--Get item number RESCUE_SEEKER_TYPE key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.ERescueSeekerType # Key value
function GameAPI.get_item_key_rescue_seeker_type_kv(item_key, key) end

--Obtain the skill number RESCUE_SEEKER_TYPE key and value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.ERescueSeekerType # Key value
function GameAPI.get_ability_key_rescue_seeker_type_kv(ability_key, key) end

--Get Magic effect number RESCUE_SEEKER_TYPE key-value pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.ERescueSeekerType # Key value
function GameAPI.get_modifier_key_rescue_seeker_type_kv(modifier_key, key) end

--Obtain the RESCUE_SEEKER_TYPE key and value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.ERescueSeekerType # Key value
function GameAPI.get_projectile_key_rescue_seeker_type_kv(projectile_key, key) end

--Obtain the destructible number RESCUE_SEEKER_TYPE key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.ERescueSeekerType # Key value
function GameAPI.get_destructible_key_rescue_seeker_type_kv(destructible_key, key) end

--Obtain the technology number RESCUE_SEEKER_TYPE key and value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.ERescueSeekerType # Key value
function GameAPI.get_tech_key_rescue_seeker_type_kv(tech_key, key) end

--Obtain the picture RESCUE_SEEKER_TYPE key and value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.ERescueSeekerType # Key value
function GameAPI.get_icon_id_rescue_seeker_type_kv(icon_id, key) end

--Obtain the key pair of the logical physical component type RESCUE_SEEKER_TYPE
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.ERescueSeekerType # Key value
function GameAPI.get_physics_entity_key_rescue_seeker_type_kv(physics_entity_key, key) end

--Obtain the unit number RESCUER_TYPE key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.ERescuerType # Key value
function GameAPI.get_unit_key_rescuer_type_kv(unit_key, key) end

--Get item number RESCUER_TYPE key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.ERescuerType # Key value
function GameAPI.get_item_key_rescuer_type_kv(item_key, key) end

--Obtain the skill number RESCUER_TYPE key-value pair
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.ERescuerType # Key value
function GameAPI.get_ability_key_rescuer_type_kv(ability_key, key) end

--Get magic effect number RESCUER_TYPE key-value pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.ERescuerType # Key value
function GameAPI.get_modifier_key_rescuer_type_kv(modifier_key, key) end

--Obtain the special effect number RESCUER_TYPE key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.ERescuerType # Key value
function GameAPI.get_projectile_key_rescuer_type_kv(projectile_key, key) end

--Obtain the destructible number RESCUER_TYPE key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.ERescuerType # Key value
function GameAPI.get_destructible_key_rescuer_type_kv(destructible_key, key) end

--Obtain technology number RESCUER_TYPE key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.ERescuerType # Key value
function GameAPI.get_tech_key_rescuer_type_kv(tech_key, key) end

--Obtain the picture RESCUER_TYPE key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.ERescuerType # Key value
function GameAPI.get_icon_id_rescuer_type_kv(icon_id, key) end

--Obtain the RESCUER_TYPE key pair of the logical physical component type
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.ERescuerType # Key value
function GameAPI.get_physics_entity_key_rescuer_type_kv(physics_entity_key, key) end

--Gets the unit number STORE_ITEM_TYPE key-value pair
---@param unit_key py.UnitKey # Unit number
---@param key string # Key name
---@return py.StoreItemType # Key value
function GameAPI.get_unit_key_store_item_type_kv(unit_key, key) end

--Gets the item number STORE_ITEM_TYPE key-value pair
---@param item_key py.ItemKey # Item number
---@param key string # Key name
---@return py.StoreItemType # Key value
function GameAPI.get_item_key_store_item_type_kv(item_key, key) end

--Gets skill number STORE_ITEM_TYPE key-value pairs
---@param ability_key py.AbilityKey # Skill number
---@param key string # Key name
---@return py.StoreItemType # Key value
function GameAPI.get_ability_key_store_item_type_kv(ability_key, key) end

--Gets the magic effect number STORE_ITEM_TYPE key-value pair
---@param modifier_key py.ModifierKey # Magic effect number
---@param key string # Key name
---@return py.StoreItemType # Key value
function GameAPI.get_modifier_key_store_item_type_kv(modifier_key, key) end

--Gets the special effect number STORE_ITEM_TYPE key-value pair
---@param projectile_key py.ProjectileKey # Special effect number
---@param key string # Key name
---@return py.StoreItemType # Key value
function GameAPI.get_projectile_key_store_item_type_kv(projectile_key, key) end

--Gets the destructible number STORE_ITEM_TYPE key-value pair
---@param destructible_key py.DestructibleKey # Destructible number
---@param key string # Key name
---@return py.StoreItemType # Key value
function GameAPI.get_destructible_key_store_item_type_kv(destructible_key, key) end

--Gets the technology number STORE_ITEM_TYPE key-value pair
---@param tech_key py.TechKey # Technology number
---@param key string # Key name
---@return py.StoreItemType # Key value
function GameAPI.get_tech_key_store_item_type_kv(tech_key, key) end

--Gets the image STORE_ITEM_TYPE key-value pair
---@param icon_id py.Texture # picture
---@param key string # Key name
---@return py.StoreItemType # Key value
function GameAPI.get_icon_id_store_item_type_kv(icon_id, key) end

--Gets the logical physical component type STORE_ITEM_TYPE key-value pair
---@param physics_entity_key py.PhysicsEntityKey # Logical physical component type
---@param key string # Key name
---@return py.StoreItemType # Key value
function GameAPI.get_physics_entity_key_store_item_type_kv(physics_entity_key, key) end

--Gets the global trigger DECO_NAME array variable
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_variable_all_deco_name(key) end

--Gets the trigger DECO_NAME group variable array
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_actor_variable_all_deco_name(actor, key) end

--Gets the global trigger UI_POINT non-array variable
---@param key string # Variable name
---@return py.FUIPoint # value
function GameAPI.get_trigger_variable_ui_point(key) end

--Gets trigger UI_POINT non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.FUIPoint # value
function GameAPI.get_trigger_actor_variable_ui_point(actor, key) end

--Gets the global trigger UI_POINT array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@return py.FUIPoint # value
function GameAPI.get_trigger_list_variable_ui_point(key, index) end

--Gets trigger UI_POINT array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@return py.FUIPoint # value
function GameAPI.get_trigger_list_actor_variable_ui_point(actor, key, index) end

--Gets the global trigger UI_POINT array variable
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_variable_all_ui_point(key) end

--Gets an array of trigger UI_POINT group variables
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_actor_variable_all_ui_point(actor, key) end

--Gets global trigger ATTACH_MODEL_ENTITY non-array variable
---@param key string # Variable name
---@return py.AttachModelEntity # value
function GameAPI.get_trigger_variable_attach_model_entity(key) end

--Gets trigger ATTACH_MODEL_ENTITY non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.AttachModelEntity # value
function GameAPI.get_trigger_actor_variable_attach_model_entity(actor, key) end

--Gets the global trigger ATTACH_MODEL_ENTITY array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@return py.AttachModelEntity # value
function GameAPI.get_trigger_list_variable_attach_model_entity(key, index) end

--Gets trigger ATTACH_MODEL_ENTITY array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@return py.AttachModelEntity # value
function GameAPI.get_trigger_list_actor_variable_attach_model_entity(actor, key, index) end

--Gets the global trigger ATTACH_MODEL_ENTITY array variable
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_variable_all_attach_model_entity(key) end

--Gets the trigger ATTACH_MODEL_ENTITY group variable array
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_actor_variable_all_attach_model_entity(actor, key) end

--Gets the global trigger DEBUG_SHAPE non-array variable
---@param key string # Variable name
---@return integer # value
function GameAPI.get_trigger_variable_debug_shape(key) end

--Gets the trigger DEBUG_SHAPE non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return integer # value
function GameAPI.get_trigger_actor_variable_debug_shape(actor, key) end

--Gets the global trigger DEBUG_SHAPE array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@return integer # value
function GameAPI.get_trigger_list_variable_debug_shape(key, index) end

--Gets the trigger DEBUG_SHAPE array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@return integer # value
function GameAPI.get_trigger_list_actor_variable_debug_shape(actor, key, index) end

--Gets the global trigger DEBUG_SHAPE array variable
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_variable_all_debug_shape(key) end

--Gets the trigger DEBUG_SHAPE group variable array
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_actor_variable_all_debug_shape(actor, key) end

--Gets the global trigger FORCE_ENTITY non-array variable
---@param key string # Variable name
---@return py.Force # value
function GameAPI.get_trigger_variable_force_entity(key) end

--Gets trigger FORCE_ENTITY non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.Force # value
function GameAPI.get_trigger_actor_variable_force_entity(actor, key) end

--Gets the global trigger FORCE_ENTITY array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@return py.Force # value
function GameAPI.get_trigger_list_variable_force_entity(key, index) end

--Gets the trigger FORCE_ENTITY array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@return py.Force # value
function GameAPI.get_trigger_list_actor_variable_force_entity(actor, key, index) end

--Gets the global trigger FORCE_ENTITY array variable
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_variable_all_force_entity(key) end

--Gets an array of trigger FORCE_ENTITY group variables
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_actor_variable_all_force_entity(actor, key) end

--Gets the global trigger GOODS_KEY non-array variable
---@param key string # Variable name
---@return py.GoodsKey # value
function GameAPI.get_trigger_variable_goods_key(key) end

--Gets the trigger GOODS_KEY non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.GoodsKey # value
function GameAPI.get_trigger_actor_variable_goods_key(actor, key) end

--Gets the global trigger GOODS_KEY array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@return py.GoodsKey # value
function GameAPI.get_trigger_list_variable_goods_key(key, index) end

--Gets the trigger GOODS_KEY array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@return py.GoodsKey # value
function GameAPI.get_trigger_list_actor_variable_goods_key(actor, key, index) end

--Gets the global trigger GOODS_KEY array variable
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_variable_all_goods_key(key) end

--Gets an array of trigger GOODS_KEY group variables
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_actor_variable_all_goods_key(actor, key) end

--Gets the global trigger SITE_STATE non-array variable
---@param key string # Variable name
---@return py.SITE_STATE # value
function GameAPI.get_trigger_variable_site_state(key) end

--Gets trigger SITE_STATE non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.SITE_STATE # value
function GameAPI.get_trigger_actor_variable_site_state(actor, key) end

--Gets the global trigger SITE_STATE array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@return py.SITE_STATE # value
function GameAPI.get_trigger_list_variable_site_state(key, index) end

--Gets the trigger SITE_STATE array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@return py.SITE_STATE # value
function GameAPI.get_trigger_list_actor_variable_site_state(actor, key, index) end

--Gets the global trigger SITE_STATE array variable
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_variable_all_site_state(key) end

--Gets an array of trigger SITE_STATE group variables
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_actor_variable_all_site_state(actor, key) end

--Gets the global trigger COIN_CURRENCY non-array variable
---@param key string # Variable name
---@return py.COIN_CURRENCY # value
function GameAPI.get_trigger_variable_coin_currency(key) end

--Gets the trigger COIN_CURRENCY non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.COIN_CURRENCY # value
function GameAPI.get_trigger_actor_variable_coin_currency(actor, key) end

--Gets the global trigger COIN_CURRENCY array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@return py.COIN_CURRENCY # value
function GameAPI.get_trigger_list_variable_coin_currency(key, index) end

--Gets the trigger COIN_CURRENCY array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@return py.COIN_CURRENCY # value
function GameAPI.get_trigger_list_actor_variable_coin_currency(actor, key, index) end

--Gets the global trigger COIN_CURRENCY array variable
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_variable_all_coin_currency(key) end

--Gets an array of trigger COIN_CURRENCY group variables
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@return py.List # Array type variable value
function GameAPI.get_trigger_list_actor_variable_all_coin_currency(actor, key) end

--Set the global trigger UI_EFFECT_CAMERA_MODE array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@param value? integer # value
function GameAPI.set_trigger_list_variable_ui_effect_camera_mode(key, index, value) end

--Set the global trigger UI_EFFECT_CAMERA_MODE array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@param value? integer # value
function GameAPI.set_trigger_list_actor_variable_ui_effect_camera_mode(actor, key, index, value) end

--Set the global trigger UI_EFFECT_CAMERA_MODE non-array variable
---@param key string # Variable name
---@param value? integer # value
function GameAPI.set_trigger_variable_ui_effect_camera_mode(key, value) end

--Set the global trigger UI_EFFECT_CAMERA_MODE non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param value? integer # value
function GameAPI.set_trigger_actor_variable_ui_effect_camera_mode(actor, key, value) end

--Sets the global trigger UI_POS_ADAPT_MODE array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@param value? integer # value
function GameAPI.set_trigger_list_variable_ui_pos_adapt_mode(key, index, value) end

--Sets the global trigger UI_POS_ADAPT_MODE array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@param value? integer # value
function GameAPI.set_trigger_list_actor_variable_ui_pos_adapt_mode(actor, key, index, value) end

--Sets the global trigger UI_POS_ADAPT_MODE non-array variable
---@param key string # Variable name
---@param value? integer # value
function GameAPI.set_trigger_variable_ui_pos_adapt_mode(key, value) end

--Sets the global trigger UI_POS_ADAPT_MODE non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param value? integer # value
function GameAPI.set_trigger_actor_variable_ui_pos_adapt_mode(actor, key, value) end

--Sets the global trigger UI_CHAT_SEND_CHANNEL array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@param value? integer # value
function GameAPI.set_trigger_list_variable_ui_chat_send_channel(key, index, value) end

--Sets the global trigger UI_CHAT_SEND_CHANNEL array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@param value? integer # value
function GameAPI.set_trigger_list_actor_variable_ui_chat_send_channel(actor, key, index, value) end

--Sets the global trigger UI_CHAT_SEND_CHANNEL non-array variable
---@param key string # Variable name
---@param value? integer # value
function GameAPI.set_trigger_variable_ui_chat_send_channel(key, value) end

--Sets the global trigger UI_CHAT_SEND_CHANNEL non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param value? integer # value
function GameAPI.set_trigger_actor_variable_ui_chat_send_channel(actor, key, value) end

--Sets the global trigger UI_CHAT_RECV_CHANNEL array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@param value? integer # value
function GameAPI.set_trigger_list_variable_ui_chat_recv_channel(key, index, value) end

--Sets the global trigger UI_CHAT_RECV_CHANNEL array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@param value? integer # value
function GameAPI.set_trigger_list_actor_variable_ui_chat_recv_channel(actor, key, index, value) end

--Sets the global trigger UI_CHAT_RECV_CHANNEL non-array variable
---@param key string # Variable name
---@param value? integer # value
function GameAPI.set_trigger_variable_ui_chat_recv_channel(key, value) end

--Sets the global trigger UI_CHAT_RECV_CHANNEL non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param value? integer # value
function GameAPI.set_trigger_actor_variable_ui_chat_recv_channel(actor, key, value) end

--Sets the global trigger UI_TEXT_FONT_NAME array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@param value? string # value
function GameAPI.set_trigger_list_variable_ui_text_font_name(key, index, value) end

--Sets the global trigger UI_TEXT_FONT_NAME array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@param value? string # value
function GameAPI.set_trigger_list_actor_variable_ui_text_font_name(actor, key, index, value) end

--Sets the global trigger UI_TEXT_FONT_NAME non-array variable
---@param key string # Variable name
---@param value? string # value
function GameAPI.set_trigger_variable_ui_text_font_name(key, value) end

--Sets the global trigger UI_TEXT_FONT_NAME non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param value? string # value
function GameAPI.set_trigger_actor_variable_ui_text_font_name(actor, key, value) end

--Sets the global trigger UI_ECA_ANIM_TYPE array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@param value? integer # value
function GameAPI.set_trigger_list_variable_ui_eca_anim_type(key, index, value) end

--Sets the global trigger UI_ECA_ANIM_TYPE array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@param value? integer # value
function GameAPI.set_trigger_list_actor_variable_ui_eca_anim_type(actor, key, index, value) end

--Sets the global trigger UI_ECA_ANIM_TYPE non-array variable
---@param key string # Variable name
---@param value? integer # value
function GameAPI.set_trigger_variable_ui_eca_anim_type(key, value) end

--Sets the global trigger UI_ECA_ANIM_TYPE non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param value? integer # value
function GameAPI.set_trigger_actor_variable_ui_eca_anim_type(actor, key, value) end

--Set the LOCAL_UNIT_ENTITY array variable subentry of the global trigger
---@param key string # Variable name
---@param index integer # subscript
---@param value? py.LocalUnit # value
function GameAPI.set_trigger_list_variable_local_unit_entity(key, index, value) end

--Set the LOCAL_UNIT_ENTITY array group variable subitem of the global trigger
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@param value? py.LocalUnit # value
function GameAPI.set_trigger_list_actor_variable_local_unit_entity(actor, key, index, value) end

--Set the global trigger LOCAL_UNIT_ENTITY non-array variable
---@param key string # Variable name
---@param value? py.LocalUnit # value
function GameAPI.set_trigger_variable_local_unit_entity(key, value) end

--Set the global trigger LOCAL_UNIT_ENTITY non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param value? py.LocalUnit # value
function GameAPI.set_trigger_actor_variable_local_unit_entity(actor, key, value) end

--Sets the global trigger LOCAL_UNIT_GROUP array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@param value? py.LocalUnitGroup # value
function GameAPI.set_trigger_list_variable_local_unit_group(key, index, value) end

--Sets the global trigger LOCAL_UNIT_GROUP array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@param value? py.LocalUnitGroup # value
function GameAPI.set_trigger_list_actor_variable_local_unit_group(actor, key, index, value) end

--Sets the global trigger LOCAL_UNIT_GROUP non-array variable
---@param key string # Variable name
---@param value? py.LocalUnitGroup # value
function GameAPI.set_trigger_variable_local_unit_group(key, value) end

--Sets the global trigger LOCAL_UNIT_GROUP non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param value? py.LocalUnitGroup # value
function GameAPI.set_trigger_actor_variable_local_unit_group(actor, key, value) end

--Sets the global trigger DECO_ENTITY array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@param value? py.DecoID # value
function GameAPI.set_trigger_list_variable_deco_entity(key, index, value) end

--Sets the global trigger DECO_ENTITY array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@param value? py.DecoID # value
function GameAPI.set_trigger_list_actor_variable_deco_entity(actor, key, index, value) end

--Set the global trigger DECO_ENTITY non-array variable
---@param key string # Variable name
---@param value? py.DecoID # value
function GameAPI.set_trigger_variable_deco_entity(key, value) end

--Sets the global trigger DECO_ENTITY non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param value? py.DecoID # value
function GameAPI.set_trigger_actor_variable_deco_entity(actor, key, value) end

--Sets the global trigger SCENE_PRESET array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@param value? py.ScenePreset # value
function GameAPI.set_trigger_list_variable_scene_preset(key, index, value) end

--Sets the global trigger SCENE_PRESET array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@param value? py.ScenePreset # value
function GameAPI.set_trigger_list_actor_variable_scene_preset(actor, key, index, value) end

--Sets the global trigger SCENE_PRESET non-array variable
---@param key string # Variable name
---@param value? py.ScenePreset # value
function GameAPI.set_trigger_variable_scene_preset(key, value) end

--Sets the global trigger SCENE_PRESET non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param value? py.ScenePreset # value
function GameAPI.set_trigger_actor_variable_scene_preset(actor, key, value) end

--Sets the global trigger ABILITY_RELEASE_ID array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@param value? py.AbilityReleaseId # value
function GameAPI.set_trigger_list_variable_ability_release_id(key, index, value) end

--Sets the global trigger ABILITY_RELEASE_ID array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@param value? py.AbilityReleaseId # value
function GameAPI.set_trigger_list_actor_variable_ability_release_id(actor, key, index, value) end

--Sets the global trigger ABILITY_RELEASE_ID non-array variable
---@param key string # Variable name
---@param value? py.AbilityReleaseId # value
function GameAPI.set_trigger_variable_ability_release_id(key, value) end

--Sets the global trigger ABILITY_RELEASE_ID non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param value? py.AbilityReleaseId # value
function GameAPI.set_trigger_actor_variable_ability_release_id(actor, key, value) end

--Sets the global trigger DECO_NAME array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@param value? py.DecoKey # value
function GameAPI.set_trigger_list_variable_deco_name(key, index, value) end

--Sets the global trigger DECO_NAME array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@param value? py.DecoKey # value
function GameAPI.set_trigger_list_actor_variable_deco_name(actor, key, index, value) end

--Set the global trigger DECO_NAME to be a non-array variable
---@param key string # Variable name
---@param value? py.DecoKey # value
function GameAPI.set_trigger_variable_deco_name(key, value) end

--Sets the global trigger DECO_NAME to be a non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param value? py.DecoKey # value
function GameAPI.set_trigger_actor_variable_deco_name(actor, key, value) end

--Sets the global trigger UI_POINT array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@param value? py.FUIPoint # value
function GameAPI.set_trigger_list_variable_ui_point(key, index, value) end

--Sets the global trigger UI_POINT array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@param value? py.FUIPoint # value
function GameAPI.set_trigger_list_actor_variable_ui_point(actor, key, index, value) end

--Sets the global trigger UI_POINT non-array variable
---@param key string # Variable name
---@param value? py.FUIPoint # value
function GameAPI.set_trigger_variable_ui_point(key, value) end

--Sets the global trigger UI_POINT non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param value? py.FUIPoint # value
function GameAPI.set_trigger_actor_variable_ui_point(actor, key, value) end

--Sets the global trigger ATTACH_MODEL_ENTITY array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@param value? py.AttachModelEntity # value
function GameAPI.set_trigger_list_variable_attach_model_entity(key, index, value) end

--Sets the global trigger ATTACH_MODEL_ENTITY Array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@param value? py.AttachModelEntity # value
function GameAPI.set_trigger_list_actor_variable_attach_model_entity(actor, key, index, value) end

--Sets global trigger ATTACH_MODEL_ENTITY non-array variable
---@param key string # Variable name
---@param value? py.AttachModelEntity # value
function GameAPI.set_trigger_variable_attach_model_entity(key, value) end

--Sets global trigger ATTACH_MODEL_ENTITY non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param value? py.AttachModelEntity # value
function GameAPI.set_trigger_actor_variable_attach_model_entity(actor, key, value) end

--Sets the global trigger DEBUG_SHAPE array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@param value? integer # value
function GameAPI.set_trigger_list_variable_debug_shape(key, index, value) end

--Sets the global trigger DEBUG_SHAPE array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@param value? integer # value
function GameAPI.set_trigger_list_actor_variable_debug_shape(actor, key, index, value) end

--Sets the global trigger DEBUG_SHAPE non-array variable
---@param key string # Variable name
---@param value? integer # value
function GameAPI.set_trigger_variable_debug_shape(key, value) end

--Sets the global trigger DEBUG_SHAPE non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param value? integer # value
function GameAPI.set_trigger_actor_variable_debug_shape(actor, key, value) end

--Set the global trigger FORCE_ENTITY array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@param value? py.Force # value
function GameAPI.set_trigger_list_variable_force_entity(key, index, value) end

--Set the global trigger FORCE_ENTITY Array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@param value? py.Force # value
function GameAPI.set_trigger_list_actor_variable_force_entity(actor, key, index, value) end

--Set the global trigger FORCE_ENTITY non-array variable
---@param key string # Variable name
---@param value? py.Force # value
function GameAPI.set_trigger_variable_force_entity(key, value) end

--Set the global trigger FORCE_ENTITY non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param value? py.Force # value
function GameAPI.set_trigger_actor_variable_force_entity(actor, key, value) end

--Sets the global trigger GOODS_KEY array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@param value? py.GoodsKey # value
function GameAPI.set_trigger_list_variable_goods_key(key, index, value) end

--Sets the global trigger GOODS_KEY array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@param value? py.GoodsKey # value
function GameAPI.set_trigger_list_actor_variable_goods_key(actor, key, index, value) end

--Sets the global trigger GOODS_KEY non-array variable
---@param key string # Variable name
---@param value? py.GoodsKey # value
function GameAPI.set_trigger_variable_goods_key(key, value) end

--Sets the global trigger GOODS_KEY non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param value? py.GoodsKey # value
function GameAPI.set_trigger_actor_variable_goods_key(actor, key, value) end

--Sets the global trigger SITE_STATE array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@param value? py.SITE_STATE # value
function GameAPI.set_trigger_list_variable_site_state(key, index, value) end

--Sets the global trigger SITE_STATE array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@param value? py.SITE_STATE # value
function GameAPI.set_trigger_list_actor_variable_site_state(actor, key, index, value) end

--Sets the global trigger SITE_STATE non-array variable
---@param key string # Variable name
---@param value? py.SITE_STATE # value
function GameAPI.set_trigger_variable_site_state(key, value) end

--Sets the global trigger SITE_STATE non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param value? py.SITE_STATE # value
function GameAPI.set_trigger_actor_variable_site_state(actor, key, value) end

--Sets the global trigger COIN_CURRENCY array variable subentry
---@param key string # Variable name
---@param index integer # subscript
---@param value? py.COIN_CURRENCY # value
function GameAPI.set_trigger_list_variable_coin_currency(key, index, value) end

--Sets the global trigger COIN_CURRENCY array group variable subentry
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param index integer # subscript
---@param value? py.COIN_CURRENCY # value
function GameAPI.set_trigger_list_actor_variable_coin_currency(actor, key, index, value) end

--Sets the global trigger COIN_CURRENCY non-array variable
---@param key string # Variable name
---@param value? py.COIN_CURRENCY # value
function GameAPI.set_trigger_variable_coin_currency(key, value) end

--Sets the global trigger COIN_CURRENCY non-array group variable
---@param actor py.Actor # Unit entity
---@param key string # Variable name
---@param value? py.COIN_CURRENCY # value
function GameAPI.set_trigger_actor_variable_coin_currency(actor, key, value) end

--Gets an item in the DECO_ENTITY array
---@param l py.List # list
---@param i integer # subscript
---@return py.DecoID # value
function GameAPI.get_deco_entity_list_value(l, i) end

--Sets an item in the DECO_ENTITY array
---@param l py.List # list
---@param i integer # subscript
---@param v py.DecoID # value
function GameAPI.set_deco_entity_list_value(l, i, v) end

--Generate n DECO_ENTITY arrays of values v
---@param n integer # Length
---@param v? py.DecoID # value
---@return py.List # list
function GameAPI.get_deco_entity_n_list(n, v) end

--Gets an item in the SCENE_PRESET array
---@param l py.List # list
---@param i integer # subscript
---@return py.ScenePreset # value
function GameAPI.get_scene_preset_list_value(l, i) end

--Sets an item in the SCENE_PRESET array
---@param l py.List # list
---@param i integer # subscript
---@param v py.ScenePreset # value
function GameAPI.set_scene_preset_list_value(l, i, v) end

--Generates n SCENE_PRESET arrays with values of v
---@param n integer # Length
---@param v? py.ScenePreset # value
---@return py.List # list
function GameAPI.get_scene_preset_n_list(n, v) end

--Gets an item in the DEBUG_SHAPE array
---@param l py.List # list
---@param i integer # subscript
---@return integer # value
function GameAPI.get_debug_shape_list_value(l, i) end

--Set an item in the DEBUG_SHAPE array
---@param l py.List # list
---@param i integer # subscript
---@param v integer # value
function GameAPI.set_debug_shape_list_value(l, i, v) end

--Generates n DEBUG_SHAPE arrays with value v
---@param n integer # Length
---@param v? integer # value
---@return py.List # list
function GameAPI.get_debug_shape_n_list(n, v) end

--Gets an item in the UI_TEXT_FONT_NAME array
---@param l py.List # list
---@param i integer # subscript
---@return string # value
function GameAPI.get_ui_text_font_name_list_value(l, i) end

--Sets an item in the UI_TEXT_FONT_NAME array
---@param l py.List # list
---@param i integer # subscript
---@param v string # value
function GameAPI.set_ui_text_font_name_list_value(l, i, v) end

--Generates a UI_TEXT_FONT_NAME array of n values v
---@param n integer # Length
---@param v? string # value
---@return py.List # list
function GameAPI.get_ui_text_font_name_n_list(n, v) end

--Gets an item in the UI_ECA_ANIM_TYPE array
---@param l py.List # list
---@param i integer # subscript
---@return integer # value
function GameAPI.get_ui_eca_anim_type_list_value(l, i) end

--Sets an item in the UI_ECA_ANIM_TYPE array
---@param l py.List # list
---@param i integer # subscript
---@param v integer # value
function GameAPI.set_ui_eca_anim_type_list_value(l, i, v) end

--Generates n UI_ECA_ANIM_TYPE arrays of value v
---@param n integer # Length
---@param v? integer # value
---@return py.List # list
function GameAPI.get_ui_eca_anim_type_n_list(n, v) end

--Gets an item in the LOCAL_UNIT_ENTITY array
---@param l py.List # list
---@param i integer # subscript
---@return py.LocalUnit # value
function GameAPI.get_local_unit_entity_list_value(l, i) end

--Set an item in the LOCAL_UNIT_ENTITY array
---@param l py.List # list
---@param i integer # subscript
---@param v py.LocalUnit # value
function GameAPI.set_local_unit_entity_list_value(l, i, v) end

--Generate n LOCAL_UNIT_ENTITY arrays with the value v
---@param n integer # Length
---@param v? py.LocalUnit # value
---@return py.List # list
function GameAPI.get_local_unit_entity_n_list(n, v) end

--Gets an item in the LOCAL_UNIT_GROUP array
---@param l py.List # list
---@param i integer # subscript
---@return py.LocalUnitGroup # value
function GameAPI.get_local_unit_group_list_value(l, i) end

--Sets an item in the LOCAL_UNIT_GROUP array
---@param l py.List # list
---@param i integer # subscript
---@param v py.LocalUnitGroup # value
function GameAPI.set_local_unit_group_list_value(l, i, v) end

--Generates n LOCAL_UNIT_GROUP arrays with the value v
---@param n integer # Length
---@param v? py.LocalUnitGroup # value
---@return py.List # list
function GameAPI.get_local_unit_group_n_list(n, v) end

--Gets an item in the DECO_NAME array
---@param l py.List # list
---@param i integer # subscript
---@return py.DecoKey # value
function GameAPI.get_deco_name_list_value(l, i) end

--Sets an item in the DECO_NAME array
---@param l py.List # list
---@param i integer # subscript
---@param v py.DecoKey # value
function GameAPI.set_deco_name_list_value(l, i, v) end

--Generate n DECO_NAME arrays of values v
---@param n integer # Length
---@param v? py.DecoKey # value
---@return py.List # list
function GameAPI.get_deco_name_n_list(n, v) end

--Gets an item in the ABILITY_RELEASE_ID array
---@param l py.List # list
---@param i integer # subscript
---@return py.AbilityReleaseId # value
function GameAPI.get_ability_release_id_list_value(l, i) end

--Set an item in the ABILITY_RELEASE_ID array
---@param l py.List # list
---@param i integer # subscript
---@param v py.AbilityReleaseId # value
function GameAPI.set_ability_release_id_list_value(l, i, v) end

--Generates an array of n ABILITY_RELEASE_ID values of v
---@param n integer # Length
---@param v? py.AbilityReleaseId # value
---@return py.List # list
function GameAPI.get_ability_release_id_n_list(n, v) end

--Gets an item in the UI_POINT array
---@param l py.List # list
---@param i integer # subscript
---@return py.FUIPoint # value
function GameAPI.get_ui_point_list_value(l, i) end

--Sets an item in the UI_POINT array
---@param l py.List # list
---@param i integer # subscript
---@param v py.FUIPoint # value
function GameAPI.set_ui_point_list_value(l, i, v) end

--Generates n UI_POINT arrays of value v
---@param n integer # Length
---@param v? py.FUIPoint # value
---@return py.List # list
function GameAPI.get_ui_point_n_list(n, v) end

--Gets an item in the FORCE_ENTITY array
---@param l py.List # list
---@param i integer # subscript
---@return py.Force # value
function GameAPI.get_force_entity_list_value(l, i) end

--Set an item in the FORCE_ENTITY array
---@param l py.List # list
---@param i integer # subscript
---@param v py.Force # value
function GameAPI.set_force_entity_list_value(l, i, v) end

--Generate n FORCE_ENTITY arrays with the value v
---@param n integer # Length
---@param v? py.Force # value
---@return py.List # list
function GameAPI.get_force_entity_n_list(n, v) end

--Gets an item in the SITE_STATE array
---@param l py.List # list
---@param i integer # subscript
---@return py.SITE_STATE # value
function GameAPI.get_site_state_list_value(l, i) end

--Sets an item in the SITE_STATE array
---@param l py.List # list
---@param i integer # subscript
---@param v py.SITE_STATE # value
function GameAPI.set_site_state_list_value(l, i, v) end

--Generates an array of n SITE_STATE values of v
---@param n integer # Length
---@param v? py.SITE_STATE # value
---@return py.List # list
function GameAPI.get_site_state_n_list(n, v) end

--Gets an item in the COIN_CURRENCY array
---@param l py.List # list
---@param i integer # subscript
---@return py.COIN_CURRENCY # value
function GameAPI.get_coin_currency_list_value(l, i) end

--Sets an item in the COIN_CURRENCY array
---@param l py.List # list
---@param i integer # subscript
---@param v py.COIN_CURRENCY # value
function GameAPI.set_coin_currency_list_value(l, i, v) end

--Generates an array of n COIN_CURRENCY values of v
---@param n integer # Length
---@param v? py.COIN_CURRENCY # value
---@return py.List # list
function GameAPI.get_coin_currency_n_list(n, v) end

--Gets an entry in the UI_EFFECT_CAMERA_MODE array
---@param l py.List # list
---@param i integer # subscript
---@return integer # value
function GameAPI.get_ui_effect_camera_mode_list_value(l, i) end

--Set an item in the UI_EFFECT_CAMERA_MODE array
---@param l py.List # list
---@param i integer # subscript
---@param v integer # value
function GameAPI.set_ui_effect_camera_mode_list_value(l, i, v) end

--Generates an array of n UI_EFFECT_CAMERA_MODE with the value v
---@param n integer # Length
---@param v? integer # value
---@return py.List # list
function GameAPI.get_ui_effect_camera_mode_n_list(n, v) end

--Gets an item in the UI_POS_ADAPT_MODE array
---@param l py.List # list
---@param i integer # subscript
---@return integer # value
function GameAPI.get_ui_pos_adapt_mode_list_value(l, i) end

--Sets an item in the UI_POS_ADAPT_MODE array
---@param l py.List # list
---@param i integer # subscript
---@param v integer # value
function GameAPI.set_ui_pos_adapt_mode_list_value(l, i, v) end

--Generates n UI_POS_ADAPT_MODE arrays with value v
---@param n integer # Length
---@param v? integer # value
---@return py.List # list
function GameAPI.get_ui_pos_adapt_mode_n_list(n, v) end

--Gets an item in the GOODS_KEY array
---@param l py.List # list
---@param i integer # subscript
---@return py.GoodsKey # value
function GameAPI.get_goods_key_list_value(l, i) end

--Sets an item in the GOODS_KEY array
---@param l py.List # list
---@param i integer # subscript
---@param v py.GoodsKey # value
function GameAPI.set_goods_key_list_value(l, i, v) end

--Generates n GOODS_KEY arrays of value v
---@param n integer # Length
---@param v? py.GoodsKey # value
---@return py.List # list
function GameAPI.get_goods_key_n_list(n, v) end

--Gets an item in the UI_CHAT_SEND_CHANNEL array
---@param l py.List # list
---@param i integer # subscript
---@return integer # value
function GameAPI.get_ui_chat_send_channel_list_value(l, i) end

--Sets an item in the UI_CHAT_SEND_CHANNEL array
---@param l py.List # list
---@param i integer # subscript
---@param v integer # value
function GameAPI.set_ui_chat_send_channel_list_value(l, i, v) end

--Generates n UI_CHAT_SEND_CHANNEL arrays with value v
---@param n integer # Length
---@param v? integer # value
---@return py.List # list
function GameAPI.get_ui_chat_send_channel_n_list(n, v) end

--Gets an item in the UI_CHAT_RECV_CHANNEL array
---@param l py.List # list
---@param i integer # subscript
---@return integer # value
function GameAPI.get_ui_chat_recv_channel_list_value(l, i) end

--Sets an item in the UI_CHAT_RECV_CHANNEL array
---@param l py.List # list
---@param i integer # subscript
---@param v integer # value
function GameAPI.set_ui_chat_recv_channel_list_value(l, i, v) end

--Generates n UI_CHAT_RECV_CHANNEL arrays of value v
---@param n integer # Length
---@param v? integer # value
---@return py.List # list
function GameAPI.get_ui_chat_recv_channel_n_list(n, v) end

--Gets an item in the ATTACH_MODEL_ENTITY array
---@param l py.List # list
---@param i integer # subscript
---@return py.AttachModelEntity # value
function GameAPI.get_attach_model_entity_list_value(l, i) end

--Sets an item in the ATTACH_MODEL_ENTITY array
---@param l py.List # list
---@param i integer # subscript
---@param v py.AttachModelEntity # value
function GameAPI.set_attach_model_entity_list_value(l, i, v) end

--Generate n ATTACH_MODEL_ENTITY arrays of value v
---@param n integer # Length
---@param v? py.AttachModelEntity # value
---@return py.List # list
function GameAPI.get_attach_model_entity_n_list(n, v) end

--The default library adds a UI_EFFECT_CAMERA_MODE key pair
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_unit_key_ui_effect_camera_mode_kv(item_key, key, value) end

--The default library adds UI_POS_ADAPT_MODE key-value pairs
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_unit_key_ui_pos_adapt_mode_kv(item_key, key, value) end

--The default library adds UI_CHAT_SEND_CHANNEL key-value pairs
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_unit_key_ui_chat_send_channel_kv(item_key, key, value) end

--The default library adds UI_CHAT_RECV_CHANNEL key-value pairs
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_unit_key_ui_chat_recv_channel_kv(item_key, key, value) end

--The default library adds a UI_TEXT_FONT_NAME key-value pair
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_unit_key_ui_text_font_name_kv(item_key, key, value) end

--The default library adds UI_ECA_ANIM_TYPE key-value pairs
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_unit_key_ui_eca_anim_type_kv(item_key, key, value) end

--Add LOCAL_UNIT_GROUP key-value pairs to the default library
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_unit_key_local_unit_group_kv(item_key, key, value) end

--Add DAMAGE_ARMOR_TYPE key-value pairs to the default library
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_unit_key_damage_armor_type_kv(item_key, key, value) end

--The default library adds the ABILITY_RELEASE_ID key-value pair
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_unit_key_ability_release_id_kv(item_key, key, value) end

--The SLOT_TYPE key pair is added to the default library
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_unit_key_slot_type_kv(item_key, key, value) end

--The default library adds UI_POINT key-value pairs
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_unit_key_ui_point_kv(item_key, key, value) end

--The default library adds ATTACH_MODEL_ENTITY key-value pairs
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_unit_key_attach_model_entity_kv(item_key, key, value) end

--The default library adds a FORCE_ENTITY key-value pair
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_unit_key_force_entity_kv(item_key, key, value) end

--The default library adds GOODS_KEY key-value pairs
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_unit_key_goods_key_kv(item_key, key, value) end

--The default library adds a MOUSE_KEY_WITHOUT_MIDDLE key-value pair
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_unit_key_mouse_key_without_middle_kv(item_key, key, value) end

--Default libraries add SITE_STATE key-value pairs
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_unit_key_site_state_kv(item_key, key, value) end

--The default library adds a COIN_CURRENCY key-value pair
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_unit_key_coin_currency_kv(item_key, key, value) end

--The default library adds a UI_EFFECT_CAMERA_MODE key pair
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_item_key_ui_effect_camera_mode_kv(item_key, key, value) end

--The default library adds UI_POS_ADAPT_MODE key-value pairs
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_item_key_ui_pos_adapt_mode_kv(item_key, key, value) end

--The default library adds UI_CHAT_SEND_CHANNEL key-value pairs
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_item_key_ui_chat_send_channel_kv(item_key, key, value) end

--The default library adds UI_CHAT_RECV_CHANNEL key-value pairs
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_item_key_ui_chat_recv_channel_kv(item_key, key, value) end

--The default library adds a UI_TEXT_FONT_NAME key-value pair
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_item_key_ui_text_font_name_kv(item_key, key, value) end

--The default library adds UI_ECA_ANIM_TYPE key-value pairs
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_item_key_ui_eca_anim_type_kv(item_key, key, value) end

--Add LOCAL_UNIT_GROUP key-value pairs to the default library
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_item_key_local_unit_group_kv(item_key, key, value) end

--Add DAMAGE_ARMOR_TYPE key-value pairs to the default library
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_item_key_damage_armor_type_kv(item_key, key, value) end

--The default library adds the ABILITY_RELEASE_ID key-value pair
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_item_key_ability_release_id_kv(item_key, key, value) end

--The SLOT_TYPE key pair is added to the default library
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_item_key_slot_type_kv(item_key, key, value) end

--The default library adds UI_POINT key-value pairs
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_item_key_ui_point_kv(item_key, key, value) end

--The default library adds ATTACH_MODEL_ENTITY key-value pairs
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_item_key_attach_model_entity_kv(item_key, key, value) end

--The default library adds a FORCE_ENTITY key-value pair
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_item_key_force_entity_kv(item_key, key, value) end

--The default library adds GOODS_KEY key-value pairs
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_item_key_goods_key_kv(item_key, key, value) end

--The default library adds a MOUSE_KEY_WITHOUT_MIDDLE key-value pair
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_item_key_mouse_key_without_middle_kv(item_key, key, value) end

--Default libraries add SITE_STATE key-value pairs
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_item_key_site_state_kv(item_key, key, value) end

--The default library adds a COIN_CURRENCY key-value pair
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_item_key_coin_currency_kv(item_key, key, value) end

--The default library adds a UI_EFFECT_CAMERA_MODE key pair
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_ability_key_ui_effect_camera_mode_kv(item_key, key, value) end

--The default library adds UI_POS_ADAPT_MODE key-value pairs
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_ability_key_ui_pos_adapt_mode_kv(item_key, key, value) end

--The default library adds UI_CHAT_SEND_CHANNEL key-value pairs
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_ability_key_ui_chat_send_channel_kv(item_key, key, value) end

--The default library adds UI_CHAT_RECV_CHANNEL key-value pairs
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_ability_key_ui_chat_recv_channel_kv(item_key, key, value) end

--The default library adds a UI_TEXT_FONT_NAME key-value pair
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_ability_key_ui_text_font_name_kv(item_key, key, value) end

--The default library adds UI_ECA_ANIM_TYPE key-value pairs
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_ability_key_ui_eca_anim_type_kv(item_key, key, value) end

--Add LOCAL_UNIT_GROUP key-value pairs to the default library
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_ability_key_local_unit_group_kv(item_key, key, value) end

--Add DAMAGE_ARMOR_TYPE key-value pairs to the default library
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_ability_key_damage_armor_type_kv(item_key, key, value) end

--The default library adds the ABILITY_RELEASE_ID key-value pair
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_ability_key_ability_release_id_kv(item_key, key, value) end

--The SLOT_TYPE key pair is added to the default library
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_ability_key_slot_type_kv(item_key, key, value) end

--The default library adds UI_POINT key-value pairs
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_ability_key_ui_point_kv(item_key, key, value) end

--The default library adds ATTACH_MODEL_ENTITY key-value pairs
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_ability_key_attach_model_entity_kv(item_key, key, value) end

--The default library adds a FORCE_ENTITY key-value pair
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_ability_key_force_entity_kv(item_key, key, value) end

--The default library adds GOODS_KEY key-value pairs
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_ability_key_goods_key_kv(item_key, key, value) end

--The default library adds a MOUSE_KEY_WITHOUT_MIDDLE key-value pair
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_ability_key_mouse_key_without_middle_kv(item_key, key, value) end

--Default libraries add SITE_STATE key-value pairs
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_ability_key_site_state_kv(item_key, key, value) end

--The default library adds a COIN_CURRENCY key-value pair
---@param item_key integer # prefab Library ID
---@param key integer # ID
---@param value string # Key-value name
function GameAPI.set_ability_key_coin_currency_kv(item_key, key, value) end

--A hook model for traversing magic effects
---@param modifier_entity py.ModifierEntity # Magic effect
---@param model_key py.ModelKey # Model type
---@param color string # colour
---@param exp number # exponent
---@param strength number # intensity
function GameAPI.set_attach_model_fresnel(modifier_entity, model_key, color, exp, strength) end

--Gets the number of item groups
---@param item_group py.ItemGroup # Item group
---@return integer # Item group quantity
function GameAPI.api_get_item_group_length(item_group) end

--Item groups intersect
---@param group1 py.ItemGroup # Item group 1
---@param group2 py.ItemGroup # Item Group 2
---@return py.ItemGroup # Item group
function GameAPI.api_get_item_group_intersection(group1, group2) end

--Item group takes difference set
---@param group1 py.ItemGroup # Item group 1
---@param group2 py.ItemGroup # Item Group 2
---@return py.ItemGroup # Item group
function GameAPI.api_get_item_group_diff(group1, group2) end

--Swap items according to slot
---@param unit py.Unit # unit
---@param slot_type_1 py.SlotType # Item slot type
---@param slot_id_1 integer # Slot ID
---@param slot_type_2 py.SlotType # Item slot type
---@param slot_id_2 integer # Slot ID
function GameAPI.api_switch_unit_item_slot_by_slot_id(unit, slot_type_1, slot_id_1, slot_type_2, slot_id_2) end

--barter
---@param item1 py.Item # item
---@param item2 py.Item # item
function GameAPI.api_switch_item_slot(item1, item2) end

--Sets whether in-game item names are displayed permanently
---@param permanent_show boolean # Display resident or not
function GameAPI.set_item_name_permanent_show_config(permanent_show) end

--Call the screenshot function in Lua
---@param path string # Relative path under LocalData
---@param file_name string # filename
---@param width? integer # Picture width
---@param height? integer # Picture height
function GameAPI.screenshot_func_for_lua(path, file_name, width, height) end

--Disable all ECA global triggers
function GameAPI.disable_all_eca_triggers() end

--The motor lost track of the target
---@param mover_id py.Mover # Kinetoscope
function GameAPI.mover_miss_target(mover_id) end

--Gets the motor associated projectile
---@param mover_id py.Mover # Kinetoscope
---@return py.ProjectileEntity # Associated projectile
function GameAPI.get_mover_relate_projectile(mover_id) end

--Custom move
---@param pos py.FVector3 # position
---@param take_static_collision boolean # Consider non-terrain static blocking
---@param take_dynamic_collision boolean # Considered dynamic blocking
---@return py.UnitCommand # Unit command
function GameAPI.create_unit_command_customized_move_to_pos(pos, take_static_collision, take_dynamic_collision) end

--Create effects to the point
---@param sfx_id py.SfxKey # Special effect number
---@param point py.Point # point
---@param face_angle number # Angle oriented
---@param speed number # Playback speed
---@param height number # Altitude
---@param duration number # duration
---@param immediately? boolean # Whether to delete now
---@param use_sys_d_destroy_way? boolean # Effects delete the way to read table or not
---@param show_in_fog? boolean # Show in the mist
---@param blend_with_fog? boolean # Fog mixing
---@param scale_x? number # X-axis scaling
---@param scale_y? number # Y-axis scaling
---@param scale_z? number # Z-axis scaling
---@return py.Sfx # VFX
function GameAPI.create_sfx_on_point_new(sfx_id, point, face_angle, speed, height, duration, immediately, use_sys_d_destroy_way, show_in_fog, blend_with_fog, scale_x, scale_y, scale_z) end

--Create effects to unit attachment points (follow rotation using enumerations)
---@param sfx_id py.SfxKey # Special effect number
---@param unit py.Unit # unit
---@param socket string # Unit mounting contact
---@param rotate_type integer # Follow rotation mode
---@param b_follow_scale boolean # Whether to scale with units
---@param speed? number # Playback speed
---@param duration? number # duration
---@param angle? number # Angle
---@param immediately? boolean # Whether to delete now
---@param use_sys_d_destroy_way? boolean # Effects delete the way to read table or not
---@param detach? boolean # Whether to leave the unit
---@param show_in_fog? boolean # Show in the mist
---@param blend_with_fog? boolean # Fog mixing
---@param scale_x? number # X-axis scaling
---@param scale_y? number # Y-axis scaling
---@param scale_z? number # Z-axis scaling
---@return py.Sfx # VFX
function GameAPI.create_sfx_on_unit_new_new(sfx_id, unit, socket, rotate_type, b_follow_scale, speed, duration, angle, immediately, use_sys_d_destroy_way, detach, show_in_fog, blend_with_fog, scale_x, scale_y, scale_z) end

--tag the points
---@param fixvec3 py.Point # point
---@param tag string # tag
function GameAPI.add_point_tag(fixvec3, tag) end

--Untag the point
---@param fixvec3 py.Point # point
---@param tag string # tag
function GameAPI.remove_point_tag(fixvec3, tag) end

--Obtains the corresponding point from the tag
---@param tag string # tag
---@return py.List # list
function GameAPI.get_points_by_tag(tag) end

--Whether a region owns a tag
---@param area py.Area # region
---@param tag string # tag
---@return boolean # Boolean value
function GameAPI.if_area_has_tag(area, tag) end

--Reset the center point and radius of the circle area
---@param area py.CirArea # Circular region
---@param center_point py.Point # Central point
---@param radius py.Fixed # radius
function GameAPI.api_reset_cir_area(area, center_point, radius) end

--Reset the start and end of the rectangular area
---@param area py.RecArea # Rectangular region
---@param point_begin py.Point # Initial point
---@param point_end py.Point # End point
function GameAPI.api_reset_rect_two_point(area, point_begin, point_end) end

--Gets the current map version id
---@return py.MapId # Map version id
function GameAPI.get_map_id() end

--Gets the current uppass env
---@return py.UppassEnv # uppass env
function GameAPI.get_uppass_env() end

--Create terrain presets
---@param point py.Point # point
---@param level_id_str py.Map # Level ID
---@param has_light? boolean # Carry lights or not
---@param has_decoration? boolean # Whether to carry decorations
---@param has_fog? boolean # Whether to carry fog effect
---@param has_projectile? boolean # Whether to carry projectiles
---@param has_item? boolean # Whether to bring goods
---@param has_destructible? boolean # Whether to carry destructible material
---@param has_collision? boolean # Carry or not collision
---@param rotate? integer # Rotation Angle
function GameAPI.load_sub_scene(point, level_id_str, has_light, has_decoration, has_fog, has_projectile, has_item, has_destructible, has_collision, rotate) end

--Gets the aid of the player who is ranked in the leaderboard
---@param archive_key integer # Integer archive
---@param num integer # Ranking
---@return string # Player aid
function GameAPI.get_aid_by_rank_info(archive_key, num) end

--Obtain the version of the local engine
---@return integer # Version of the local engine
function GameAPI.get_local_engine_version() end

--Obtain the latest engine version
---@param http_data string # http data
---@return integer # Latest engine version number
function GameAPI.get_latest_engine_version(http_data) end

--Get the local map version number
---@return string # Local map version number
function GameAPI.get_local_map_id() end

--Get the latest map version number
---@param http_data string # http data
---@return string # Latest map version number
function GameAPI.get_latest_map_id(http_data) end

--Gets the logical frame rate
---@return integer # Logical frame rate
function GameAPI.api_get_logic_fps() end

--Enable or disable UI unsynchronization detection logs. It is disabled by default. After this function is enabled, all UI creation statistics are collected. Inconsistencies in UI creation can lead to inconsistencies in UI sequence numbers, which can lead to inconsistencies in UI component/component to string results, and inconsistencies in UI-related events [controls that trigger events], which can lead to logic asynchronism if the game uses related values in gameplay logic. If you are sure that it will not cause unsynchronization, you can choose to turn off this switch
---@param enable? boolean # Enable or not
function GameAPI.api_set_enable_ui_snapshot(enable) end

--Bind rocker unit
---@param role py.Role # Player
---@param comp_name string # Joystick control ID
---@param unit py.Unit # Binding unit
function GameAPI.set_joystick_target(role, comp_name, unit) end

--Sets the blinking effect of an object
---@param log_obj py.Actor # object
---@param interval? number # interval
---@param time? number # time
---@param color_r? integer # R
---@param color_g? integer # G
---@param color_b? integer # B
---@param alpha? number # alpha
---@param exp? number # exp
---@param exp2? number # exp2
function GameAPI.api_set_obj_twinkle_parameters(log_obj, interval, time, color_r, color_g, color_b, alpha, exp, exp2) end

--Set the global visibility of blood bars
---@param enable boolean # Enable or not
function GameAPI.set_global_visibility_of_billboard(enable) end

--Set whether the mouse is visible
---@param visible boolean # Visible or not
function GameAPI.set_mouse_cursor_visible(visible) end

--Mini map mask transparency
---@param role py.Role # Player
---@param alpha number # transparency
---@param specify_mini_map? string # Specified mini-map
function GameAPI.set_mini_map_alpha(role, alpha, specify_mini_map) end

--Small map mask color
---@param role py.Role # Player
---@param colorR integer # R
---@param colorG integer # G
---@param colorB integer # B
---@param colorA integer # A
---@param specify_mini_map? string # Specified mini-map
function GameAPI.set_mini_map_color_int(role, colorR, colorG, colorB, colorA, specify_mini_map) end

--Small map mask color
---@param role py.Role # Player
---@param rgb_hex string # rgb
---@param alpha number # a
---@param specify_mini_map? string # Specified mini-map
function GameAPI.set_mini_map_color_str(role, rgb_hex, alpha, specify_mini_map) end

--Integer to unit type
---@param int_num integer # integer
---@return py.UnitType # Unit type
function GameAPI.int_transform_unit_type(int_num) end

--Integer transprojectile type
---@param int_num integer # integer
---@return py.ProjectileKey # Projectile type
function GameAPI.int_transform_projectile_type(int_num) end

--Integer transfer item type
---@param int_num integer # integer
---@return py.ItemKey # Item type
function GameAPI.int_transform_item_type(int_num) end

--Integer to magic effect type
---@param int_num integer # integer
---@return py.ModifierType # Magic effect type
function GameAPI.int_transform_modifier_type(int_num) end

--Integer to skill type
---@param int_num integer # integer
---@return py.AbilityKey # Skill type
function GameAPI.int_transform_ability_type(int_num) end

--Integer to technology type
---@param int_num integer # integer
---@return py.TechKey # Science and technology type
function GameAPI.int_transform_tech_type(int_num) end

--Integer to destructible type
---@param int_num integer # integer
---@return py.DestructibleKey # Destructible type
function GameAPI.int_transform_destruct_type(int_num) end

--Integer to sound type
---@param int_num integer # integer
---@return py.AudioKey # Sound type
function GameAPI.int_transform_sound_type(int_num) end

--Get team id
---@return integer # Team id
function GameAPI.steam_get_team_id() end

--Get a player id
---@return integer # Player id
function GameAPI.steam_get_player_id() end

--Get the local player avatar url
---@return string # Avatar url
function GameAPI.steam_get_player_head_icon_url() end

--Get team status
---@return integer # Team status
function GameAPI.steam_get_team_state() end

--Get whether hall level
---@return boolean # bool
function GameAPI.get_is_steam_lobby() end

--Get player status
---@return integer # Player status
function GameAPI.steam_get_player_state() end

--Get the name of the local player
---@return string # Player name
function GameAPI.steam_get_player_nickname() end

--Get items from local players' backpacks
---@param role py.Role # Player
---@return py.Table # Goods list
function GameAPI.steam_get_player_storm_items(role) end

--Set the ui component picture (picture type)
---@param role py.Role # Player
---@param comp_name string # Control name
---@param image_id py.Texture # picture
function GameAPI.set_ui_comp_image_with_icon_steam(role, comp_name, image_id) end

--Get the player is steam country
---@return py.COIN_CURRENCY # steam currency
function GameAPI.get_steam_player_currency() end

--Get the price of the player is goods in the corresponding country
---@param goods_id string # Product ID
---@return number # Price
function GameAPI.get_steam_goods_price(goods_id) end

--Sets the global save value for the specified key in the steam lobby
---@param key string # Global archive key value
---@param value py.Actor # Set value
function GameAPI.set_steam_global_archive_data(key, value) end
